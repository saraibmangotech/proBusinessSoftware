{
    "sourceFile": "src/components/Select/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744615995670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744618372268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,132 +1,114 @@\n import { Fragment } from \"react\";\r\n-import {\r\n-  Autocomplete,\r\n-  InputLabel,\r\n-  TextField,\r\n-  Typography,\r\n-  createFilterOptions,\r\n-} from \"@mui/material\";\r\n+import { Autocomplete, InputLabel, TextField, Typography, createFilterOptions } from \"@mui/material\";\r\n import { Debounce } from \"utils\";\r\n \r\n function SelectField(props) {\r\n-  const {\r\n-    label,\r\n-    size,\r\n-    disabled,\r\n-    onSearch,\r\n-    addNew,\r\n-    multiple,\r\n-    selected,\r\n-    onSelect,\r\n-    register,\r\n-    error,\r\n-    options,\r\n-  } = props;\r\n \r\n+  const { label, size, disabled, onSearch, addNew, multiple, selected, onSelect, register, error, options } = props\r\n+\r\n   const filter = createFilterOptions();\r\n \r\n+\r\n   // *For Handle Filter Option\r\n   const handleFilterOptions = (options, params) => {\r\n+\r\n     const filtered = filter(options, params);\r\n+   \r\n \r\n     const { inputValue } = params;\r\n+    // *Suggest the creation of a new value\r\n     const isExisting = options.some((option) => inputValue === option.name);\r\n-    if (inputValue !== \"\" && !isExisting && addNew) {\r\n+    if (inputValue !== '' && !isExisting && addNew) {\r\n       filtered.push({\r\n         inputValue,\r\n         name: `Add \"${inputValue}\"`,\r\n       });\r\n     }\r\n \r\n     return filtered;\r\n-  };\r\n+  }\r\n \r\n   // *For Handle Option Label\r\n   const handleOptionLabel = (option) => {\r\n-    if (typeof option === \"string\") {\r\n+\r\n+    // *Value selected with enter, right from the input\r\n+    if (typeof option === 'string') {\r\n       return option;\r\n     }\r\n+    // *Add new option created dynamically\r\n     if (option.inputValue && addNew) {\r\n       return option.inputValue;\r\n     }\r\n+    // *Regular option\r\n     return option.name;\r\n-  };\r\n \r\n+  }\r\n+\r\n   // *For Handle Change\r\n   const handleChange = (newValue) => {\r\n-    if (typeof newValue === \"string\") {\r\n-      onSelect(newValue);\r\n-      return;\r\n+    if (typeof newValue === 'string') {\r\n+      onSelect(newValue)\r\n+      return\r\n     }\r\n     if (newValue && newValue.inputValue && addNew) {\r\n-      addNew(newValue?.inputValue);\r\n-      return;\r\n+      addNew(newValue?.inputValue)\r\n+      return\r\n     }\r\n-    return onSelect(newValue);\r\n-  };\r\n+    return onSelect(newValue)\r\n+  }\r\n \r\n   // *For Handle Search\r\n   const handleSearch = (value) => {\r\n     if (onSearch) {\r\n       Debounce(() => onSearch(value));\r\n     }\r\n-  };\r\n+  }\r\n \r\n   return (\r\n     <Fragment>\r\n-      <InputLabel\r\n-        sx={{ fontWeight: \"bold\", color: \"#333\", fontSize: \"16px\", mb: \"10px\" }}\r\n-        error={error && selected === \"\"}\r\n-      >\r\n-        {label}\r\n-      </InputLabel>\r\n+      <InputLabel sx={{fontWeight:'bold',color:'#333',fontSize:'16px',mb:'10px'}} error={error && selected === '' && true}>{label}</InputLabel>\r\n       <Autocomplete\r\n         disabled={disabled}\r\n         size={size}\r\n         multiple={multiple}\r\n-        disablePortal={false}\r\n         isOptionEqualToValue={(option, value) => option?.name === value?.name}\r\n         value={selected}\r\n         options={options}\r\n         filterOptions={(options, params) => handleFilterOptions(options, params)}\r\n         getOptionLabel={(option) => handleOptionLabel(option)}\r\n         onChange={(event, newValue) => handleChange(newValue)}\r\n         onInputChange={(event, newInputValue) => handleSearch(newInputValue)}\r\n-        sx={{ mb: !error && 2 }}\r\n-        PopperProps={{\r\n-          sx: {\r\n-            zIndex: 1500, // ensure it stays above the modal (default modal zIndex is 1300)\r\n-          },\r\n-        }}\r\n+        sx={{  mb: !error && 2 }}\r\n         renderOption={(props, option) => <li {...props}>{option.name}</li>}\r\n         renderInput={(params) => (\r\n           <TextField\r\n             {...params}\r\n-            sx={{\r\n-              \"& .MuiOutlinedInput-root\": {\r\n-                \"& fieldset\": {\r\n-                  border: \"2px solid black !important\",\r\n-                  borderRadius: \"12px\",\r\n-                },\r\n-              },\r\n-            }}\r\n+            sx={{'& .MuiOutlinedInput-root': {\r\n+                  '& fieldset' : {\r\n+                    border:'2px solid black !important',\r\n+                    borderRadius:'12px',\r\n+                    \r\n+                  }\r\n+                }}}\r\n             placeholder={label}\r\n             error={error}\r\n             {...register}\r\n             InputProps={{\r\n               ...params.InputProps,\r\n-              endAdornment: <Fragment>{params.InputProps.endAdornment}</Fragment>,\r\n+              endAdornment: (\r\n+                <Fragment>\r\n+                  {params.InputProps.endAdornment}\r\n+                </Fragment>\r\n+              ),\r\n             }}\r\n           />\r\n         )}\r\n       />\r\n       {error && (\r\n-        <Typography variant=\"caption\" color=\"error\" sx={{ textAlign: \"left\" }}>\r\n-          {error}\r\n-        </Typography>\r\n+        <Typography variant=\"caption\" color=\"error\" sx={{ textAlign: 'left' }}>{error}</Typography>\r\n       )}\r\n     </Fragment>\r\n   );\r\n }\r\n \r\n-export default SelectField;\r\n+export default SelectField\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744618427781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,16 @@\n import { Autocomplete, InputLabel, TextField, Typography, createFilterOptions } from \"@mui/material\";\r\n import { Debounce } from \"utils\";\r\n \r\n function SelectField(props) {\r\n-\r\n   const { label, size, disabled, onSearch, addNew, multiple, selected, onSelect, register, error, options } = props\r\n \r\n   const filter = createFilterOptions();\r\n \r\n-\r\n   // *For Handle Filter Option\r\n   const handleFilterOptions = (options, params) => {\r\n-\r\n     const filtered = filter(options, params);\r\n    \r\n-\r\n     const { inputValue } = params;\r\n     // *Suggest the creation of a new value\r\n     const isExisting = options.some((option) => inputValue === option.name);\r\n     if (inputValue !== '' && !isExisting && addNew) {\r\n@@ -29,9 +25,8 @@\n   }\r\n \r\n   // *For Handle Option Label\r\n   const handleOptionLabel = (option) => {\r\n-\r\n     // *Value selected with enter, right from the input\r\n     if (typeof option === 'string') {\r\n       return option;\r\n     }\r\n@@ -40,9 +35,8 @@\n       return option.inputValue;\r\n     }\r\n     // *Regular option\r\n     return option.name;\r\n-\r\n   }\r\n \r\n   // *For Handle Change\r\n   const handleChange = (newValue) => {\r\n@@ -77,20 +71,26 @@\n         filterOptions={(options, params) => handleFilterOptions(options, params)}\r\n         getOptionLabel={(option) => handleOptionLabel(option)}\r\n         onChange={(event, newValue) => handleChange(newValue)}\r\n         onInputChange={(event, newInputValue) => handleSearch(newInputValue)}\r\n-        sx={{  mb: !error && 2 }}\r\n+        sx={{ mb: !error && 2 }}\r\n+        PopperProps={{\r\n+          style: { zIndex: 1400 }, // Higher z-index to appear above modal\r\n+        }}\r\n         renderOption={(props, option) => <li {...props}>{option.name}</li>}\r\n         renderInput={(params) => (\r\n           <TextField\r\n             {...params}\r\n-            sx={{'& .MuiOutlinedInput-root': {\r\n-                  '& fieldset' : {\r\n-                    border:'2px solid black !important',\r\n-                    borderRadius:'12px',\r\n-                    \r\n-                  }\r\n-                }}}\r\n+            sx={{\r\n+              '& .MuiOutlinedInput-root': {\r\n+                '& fieldset' : {\r\n+                  border:'2px solid black !important',\r\n+                  borderRadius:'12px',\r\n+                }\r\n+              },\r\n+              position: 'relative', // Ensure proper stacking context\r\n+              zIndex: 1 // Base z-index for the field itself\r\n+            }}\r\n             placeholder={label}\r\n             error={error}\r\n             {...register}\r\n             InputProps={{\r\n@@ -110,5 +110,5 @@\n     </Fragment>\r\n   );\r\n }\r\n \r\n-export default SelectField\n\\ No newline at end of file\n+export default SelectField;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744615995670,
            "name": "Commit-0",
            "content": "import { Fragment } from \"react\";\r\nimport {\r\n  Autocomplete,\r\n  InputLabel,\r\n  TextField,\r\n  Typography,\r\n  createFilterOptions,\r\n} from \"@mui/material\";\r\nimport { Debounce } from \"utils\";\r\n\r\nfunction SelectField(props) {\r\n  const {\r\n    label,\r\n    size,\r\n    disabled,\r\n    onSearch,\r\n    addNew,\r\n    multiple,\r\n    selected,\r\n    onSelect,\r\n    register,\r\n    error,\r\n    options,\r\n  } = props;\r\n\r\n  const filter = createFilterOptions();\r\n\r\n  // *For Handle Filter Option\r\n  const handleFilterOptions = (options, params) => {\r\n    const filtered = filter(options, params);\r\n\r\n    const { inputValue } = params;\r\n    const isExisting = options.some((option) => inputValue === option.name);\r\n    if (inputValue !== \"\" && !isExisting && addNew) {\r\n      filtered.push({\r\n        inputValue,\r\n        name: `Add \"${inputValue}\"`,\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  };\r\n\r\n  // *For Handle Option Label\r\n  const handleOptionLabel = (option) => {\r\n    if (typeof option === \"string\") {\r\n      return option;\r\n    }\r\n    if (option.inputValue && addNew) {\r\n      return option.inputValue;\r\n    }\r\n    return option.name;\r\n  };\r\n\r\n  // *For Handle Change\r\n  const handleChange = (newValue) => {\r\n    if (typeof newValue === \"string\") {\r\n      onSelect(newValue);\r\n      return;\r\n    }\r\n    if (newValue && newValue.inputValue && addNew) {\r\n      addNew(newValue?.inputValue);\r\n      return;\r\n    }\r\n    return onSelect(newValue);\r\n  };\r\n\r\n  // *For Handle Search\r\n  const handleSearch = (value) => {\r\n    if (onSearch) {\r\n      Debounce(() => onSearch(value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <InputLabel\r\n        sx={{ fontWeight: \"bold\", color: \"#333\", fontSize: \"16px\", mb: \"10px\" }}\r\n        error={error && selected === \"\"}\r\n      >\r\n        {label}\r\n      </InputLabel>\r\n      <Autocomplete\r\n        disabled={disabled}\r\n        size={size}\r\n        multiple={multiple}\r\n        disablePortal={false}\r\n        isOptionEqualToValue={(option, value) => option?.name === value?.name}\r\n        value={selected}\r\n        options={options}\r\n        filterOptions={(options, params) => handleFilterOptions(options, params)}\r\n        getOptionLabel={(option) => handleOptionLabel(option)}\r\n        onChange={(event, newValue) => handleChange(newValue)}\r\n        onInputChange={(event, newInputValue) => handleSearch(newInputValue)}\r\n        sx={{ mb: !error && 2 }}\r\n        PopperProps={{\r\n          sx: {\r\n            zIndex: 1500, // ensure it stays above the modal (default modal zIndex is 1300)\r\n          },\r\n        }}\r\n        renderOption={(props, option) => <li {...props}>{option.name}</li>}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            sx={{\r\n              \"& .MuiOutlinedInput-root\": {\r\n                \"& fieldset\": {\r\n                  border: \"2px solid black !important\",\r\n                  borderRadius: \"12px\",\r\n                },\r\n              },\r\n            }}\r\n            placeholder={label}\r\n            error={error}\r\n            {...register}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: <Fragment>{params.InputProps.endAdornment}</Fragment>,\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n      {error && (\r\n        <Typography variant=\"caption\" color=\"error\" sx={{ textAlign: \"left\" }}>\r\n          {error}\r\n        </Typography>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default SelectField;\r\n"
        }
    ]
}