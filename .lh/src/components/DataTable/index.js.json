{
    "sourceFile": "src/components/DataTable/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1744547212366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744959457896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,19 @@\n   CircularProgress,\r\n   ButtonGroup,\r\n   Button,\r\n } from \"@mui/material\"\r\n+import { FileDownload } from \"@mui/icons-material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabets}) => {\r\n+const DataTable = ({\r\n+  data,\r\n+  columns,\r\n+  enableCheckbox = false,\r\n+  onSelectionChange,\r\n+  loading,\r\n+  nameColumnId = \"name\",\r\n+  alphabets,\r\n+}) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [pagination, setPagination] = useState({\r\n@@ -144,8 +153,54 @@\n       setActiveAlphabet(letter)\r\n     }\r\n   }\r\n \r\n+  const exportToExcel = () => {\r\n+    // Create a CSV string from the filtered data\r\n+    const headers = columns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n+\r\n+    const rows = filteredData\r\n+      .map((row) => {\r\n+        return columns\r\n+          .map((col) => {\r\n+            let cellValue\r\n+            if (col.accessorFn) {\r\n+              cellValue = col.accessorFn(row)\r\n+            } else if (col.accessorKey) {\r\n+              cellValue = row[col.accessorKey]\r\n+            } else if (col.id) {\r\n+              cellValue = row[col.id]\r\n+            } else {\r\n+              cellValue = \"\"\r\n+            }\r\n+            // Handle commas and quotes in the data\r\n+            if (cellValue === null || cellValue === undefined) {\r\n+              return \"\"\r\n+            }\r\n+            cellValue = cellValue.toString()\r\n+            if (cellValue.includes(\",\") || cellValue.includes('\"') || cellValue.includes(\"\\n\")) {\r\n+              return `\"${cellValue.replace(/\"/g, '\"\"')}\"`\r\n+            }\r\n+            return cellValue\r\n+          })\r\n+          .join(\",\")\r\n+      })\r\n+      .join(\"\\n\")\r\n+\r\n+    const csvContent = `${headers}\\n${rows}`\r\n+\r\n+    // Create a blob and download\r\n+    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\r\n+    const url = URL.createObjectURL(blob)\r\n+    const link = document.createElement(\"a\")\r\n+    link.setAttribute(\"href\", url)\r\n+    link.setAttribute(\"download\", \"table_data.csv\")\r\n+    link.style.visibility = \"hidden\"\r\n+    document.body.appendChild(link)\r\n+    link.click()\r\n+    document.body.removeChild(link)\r\n+  }\r\n+\r\n   return (\r\n     <div>\r\n       <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n         <TextField\r\n@@ -170,39 +225,72 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n-        {alphabets && <Box\r\n-          sx={{\r\n-            mb: 2,\r\n-            display: \"flex\",\r\n-            flexDirection: { xs: \"column\", sm: \"row\" },\r\n-            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n-            gap: 1,\r\n-          }}\r\n-        >\r\n-          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n-            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n-              <Button\r\n-                key={letter}\r\n-                onClick={() => filterByAlphabet(letter)}\r\n-                sx={{\r\n-                  minWidth: \"30px\",\r\n-                  px: 1,\r\n-                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n-                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n-                  \"&:hover\": {\r\n-                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n-                  },\r\n-                }}\r\n-              >\r\n-                {letter}\r\n-              </Button>\r\n-            ))}\r\n-          </ButtonGroup>\r\n-         \r\n-        </Box>}\r\n+        {alphabets && (\r\n+          <Box\r\n+            sx={{\r\n+              mb: 2,\r\n+              display: \"flex\",\r\n+              flexDirection: { xs: \"column\", sm: \"row\" },\r\n+              alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n+              gap: 1,\r\n+              justifyContent: \"space-between\",\r\n+            }}\r\n+          >\r\n+            <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n+              {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+                <Button\r\n+                  key={letter}\r\n+                  onClick={() => filterByAlphabet(letter)}\r\n+                  sx={{\r\n+                    minWidth: \"30px\",\r\n+                    px: 1,\r\n+                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n+                    color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n+                    \"&:hover\": {\r\n+                      backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n+                    },\r\n+                  }}\r\n+                >\r\n+                  {letter}\r\n+                </Button>\r\n+              ))}\r\n+            </ButtonGroup>\r\n \r\n+            <Button\r\n+              variant=\"contained\"\r\n+              startIcon={<FileDownload />}\r\n+              onClick={exportToExcel}\r\n+              sx={{\r\n+                backgroundColor: \"#0076bf\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#005a8f\",\r\n+                },\r\n+              }}\r\n+            >\r\n+              Export to Excel\r\n+            </Button>\r\n+          </Box>\r\n+        )}\r\n+        {!alphabets && (\r\n+          <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n+            <Button\r\n+              variant=\"contained\"\r\n+              startIcon={<FileDownload />}\r\n+              onClick={exportToExcel}\r\n+              sx={{\r\n+                backgroundColor: \"#0076bf\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#005a8f\",\r\n+                },\r\n+              }}\r\n+            >\r\n+              Export to Excel\r\n+            </Button>\r\n+          </Box>\r\n+        )}\r\n+\r\n         <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n           <Table stickyHeader>\r\n             <TableHead>\r\n               {table.getHeaderGroups().map((headerGroup) => (\r\n@@ -214,10 +302,9 @@\n                       sortDirection={header.column.getIsSorted() || false}\r\n                       sx={{\r\n                         minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                         whiteSpace: \"nowrap\",\r\n-                        fontWeight:'bold'\r\n-                       \r\n+                        fontWeight: \"bold\",\r\n                       }}\r\n                     >\r\n                       {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n                         flexRender(header.column.columnDef.header, header.getContext())\r\n"
                },
                {
                    "date": 1744959669837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,30 +154,78 @@\n     }\r\n   }\r\n \r\n   const exportToExcel = () => {\r\n-    // Create a CSV string from the filtered data\r\n-    const headers = columns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n+    // Only use the columns that are explicitly provided\r\n+    const exportColumns = columns.filter((col) => !col.id || col.id !== \"select\") // Filter out checkbox column\r\n \r\n+    // Create headers from the provided columns\r\n+    const headers = exportColumns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n+\r\n     const rows = filteredData\r\n       .map((row) => {\r\n-        return columns\r\n+        return exportColumns\r\n           .map((col) => {\r\n             let cellValue\r\n+\r\n+            // Extract value using the column's accessor method\r\n             if (col.accessorFn) {\r\n               cellValue = col.accessorFn(row)\r\n             } else if (col.accessorKey) {\r\n               cellValue = row[col.accessorKey]\r\n-            } else if (col.id) {\r\n+            } else if (col.id && col.id !== \"select\") {\r\n               cellValue = row[col.id]\r\n             } else {\r\n               cellValue = \"\"\r\n             }\r\n-            // Handle commas and quotes in the data\r\n+\r\n+            // Handle null/undefined\r\n             if (cellValue === null || cellValue === undefined) {\r\n               return \"\"\r\n             }\r\n-            cellValue = cellValue.toString()\r\n+\r\n+            // Handle objects\r\n+            if (typeof cellValue === \"object\" && cellValue !== null) {\r\n+              // For Date objects\r\n+              if (cellValue instanceof Date) {\r\n+                cellValue = cellValue.toISOString()\r\n+              }\r\n+              // For arrays\r\n+              else if (Array.isArray(cellValue)) {\r\n+                cellValue = cellValue.join(\", \")\r\n+              }\r\n+              // For other objects\r\n+              else {\r\n+                // Try to find a displayable property\r\n+                const displayProps = [\"name\", \"title\", \"label\", \"value\", \"id\", \"key\", \"text\", \"description\"]\r\n+                const foundProp = displayProps.find((prop) => cellValue[prop] !== undefined)\r\n+\r\n+                if (foundProp) {\r\n+                  cellValue = cellValue[foundProp]\r\n+                } else {\r\n+                  // Use the cell renderer if available\r\n+                  if (col.cell) {\r\n+                    try {\r\n+                      const rendered = col.cell({ row: { original: row } })\r\n+                      if (rendered && typeof rendered !== \"object\") {\r\n+                        cellValue = rendered\r\n+                      } else {\r\n+                        cellValue = JSON.stringify(cellValue)\r\n+                      }\r\n+                    } catch (e) {\r\n+                      cellValue = JSON.stringify(cellValue)\r\n+                    }\r\n+                  } else {\r\n+                    cellValue = JSON.stringify(cellValue)\r\n+                  }\r\n+                }\r\n+              }\r\n+            }\r\n+\r\n+            // Convert to string\r\n+            cellValue = String(cellValue)\r\n+\r\n+            // Handle commas and quotes in the data\r\n             if (cellValue.includes(\",\") || cellValue.includes('\"') || cellValue.includes(\"\\n\")) {\r\n               return `\"${cellValue.replace(/\"/g, '\"\"')}\"`\r\n             }\r\n             return cellValue\r\n"
                },
                {
                    "date": 1744959760373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n \r\n   const exportToExcel = () => {\r\n     // Only use the columns that are explicitly provided\r\n     const exportColumns = columns.filter((col) => !col.id || col.id !== \"select\") // Filter out checkbox column\r\n+console.log(exportColumns);\r\n \r\n     // Create headers from the provided columns\r\n     const headers = exportColumns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n \r\n"
                },
                {
                    "date": 1744959791553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n console.log(exportColumns);\r\n \r\n     // Create headers from the provided columns\r\n     const headers = exportColumns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n-\r\n+    console.log(headers);\r\n     const rows = filteredData\r\n       .map((row) => {\r\n         return exportColumns\r\n           .map((col) => {\r\n"
                },
                {
                    "date": 1744961107830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n   enableCheckbox = false,\r\n   onSelectionChange,\r\n   loading,\r\n   nameColumnId = \"name\",\r\n+  csv,\r\n   alphabets,\r\n }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n"
                },
                {
                    "date": 1744961127643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,436 @@\n+\"use client\"\r\n+\r\n+import { useState, useEffect, useMemo } from \"react\"\r\n+import {\r\n+  useReactTable,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  flexRender,\r\n+} from \"@tanstack/react-table\"\r\n+\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  TextField,\r\n+  TablePagination,\r\n+  TableSortLabel,\r\n+  Checkbox,\r\n+  Box,\r\n+  CircularProgress,\r\n+  ButtonGroup,\r\n+  Button,\r\n+} from \"@mui/material\"\r\n+import { FileDownload } from \"@mui/icons-material\"\r\n+\r\n+const DataTable = ({\r\n+  data,\r\n+  columns,\r\n+  enableCheckbox = false,\r\n+  onSelectionChange,\r\n+  loading,\r\n+  nameColumnId = \"name\",\r\n+  csv,\r\n+  alphabets,\r\n+}) => {\r\n+  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n+  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n+  const [sorting, setSorting] = useState([])\r\n+  const [pagination, setPagination] = useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n+  })\r\n+  const [rowSelection, setRowSelection] = useState({})\r\n+  const [filteredData, setFilteredData] = useState(data)\r\n+\r\n+  // Apply alphabetical filter whenever activeAlphabet changes or data changes\r\n+  useEffect(() => {\r\n+    if (!activeAlphabet) {\r\n+      setFilteredData(data)\r\n+    } else {\r\n+      // Find the name column to filter on\r\n+      const nameColumn = columns.find((col) => col.id === nameColumnId || col.accessorKey === nameColumnId)\r\n+\r\n+      if (nameColumn) {\r\n+        const filtered = data.filter((row) => {\r\n+          let nameValue\r\n+\r\n+          // Handle different ways to access the name value\r\n+          if (nameColumn.accessorFn) {\r\n+            nameValue = nameColumn.accessorFn(row)\r\n+          } else if (nameColumn.accessorKey) {\r\n+            nameValue = row[nameColumn.accessorKey]\r\n+          } else {\r\n+            // Default to first_name + last_name if available\r\n+            nameValue = row.first_name && row.last_name ? `${row.first_name} ${row.last_name}` : row.name || \"\"\r\n+          }\r\n+\r\n+          return nameValue.toString().toUpperCase().startsWith(activeAlphabet)\r\n+        })\r\n+\r\n+        setFilteredData(filtered)\r\n+      } else {\r\n+        setFilteredData(data)\r\n+      }\r\n+    }\r\n+\r\n+    // Reset to first page when changing filters\r\n+    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n+  }, [activeAlphabet, data, columns, nameColumnId])\r\n+\r\n+  // Notify parent component when selection changes\r\n+  useEffect(() => {\r\n+    if (enableCheckbox && onSelectionChange) {\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number(index)])\r\n+      onSelectionChange(selectedRows)\r\n+    }\r\n+  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n+\r\n+  // Checkbox column\r\n+  const checkboxColumn = useMemo(\r\n+    () => ({\r\n+      id: \"select\",\r\n+      header: ({ table }) => (\r\n+        <Checkbox\r\n+          checked={table.getIsAllRowsSelected()}\r\n+          indeterminate={table.getIsSomeRowsSelected()}\r\n+          onChange={table.getToggleAllRowsSelectedHandler()}\r\n+        />\r\n+      ),\r\n+      cell: ({ row }) => (\r\n+        <Checkbox\r\n+          checked={row.getIsSelected()}\r\n+          onChange={row.getToggleSelectedHandler()}\r\n+          onClick={(e) => e.stopPropagation()}\r\n+        />\r\n+      ),\r\n+      size: 40,\r\n+    }),\r\n+    [],\r\n+  )\r\n+\r\n+  const tableColumns = useMemo(() => {\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n+  }, [columns, enableCheckbox, checkboxColumn])\r\n+\r\n+  // Global filter function for all visible columns\r\n+  const globalFilterFn = (row, columnId, filterValue) => {\r\n+    return row\r\n+      .getVisibleCells()\r\n+      .some((cell) => String(cell.getValue()).toLowerCase().includes(filterValue.toLowerCase()))\r\n+  }\r\n+\r\n+  const table = useReactTable({\r\n+    data: filteredData, // Use the filtered data instead of the original data\r\n+    columns: tableColumns,\r\n+    state: {\r\n+      globalFilter,\r\n+      sorting,\r\n+      pagination,\r\n+      rowSelection,\r\n+    },\r\n+    enableRowSelection: enableCheckbox,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onGlobalFilterChange: setGlobalFilter,\r\n+    onSortingChange: setSorting,\r\n+    onPaginationChange: setPagination,\r\n+    globalFilterFn,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+  })\r\n+\r\n+  const filterByAlphabet = (letter) => {\r\n+    if (letter === activeAlphabet) {\r\n+      setActiveAlphabet(\"\")\r\n+    } else {\r\n+      setActiveAlphabet(letter)\r\n+    }\r\n+  }\r\n+\r\n+  const exportToExcel = () => {\r\n+    // Only use the columns that are explicitly provided\r\n+    const exportColumns = columns.filter((col) => !col.id || col.id !== \"select\") // Filter out checkbox column\r\n+console.log(exportColumns);\r\n+\r\n+    // Create headers from the provided columns\r\n+    const headers = exportColumns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n+    console.log(headers);\r\n+    const rows = filteredData\r\n+      .map((row) => {\r\n+        return exportColumns\r\n+          .map((col) => {\r\n+            let cellValue\r\n+\r\n+            // Extract value using the column's accessor method\r\n+            if (col.accessorFn) {\r\n+              cellValue = col.accessorFn(row)\r\n+            } else if (col.accessorKey) {\r\n+              cellValue = row[col.accessorKey]\r\n+            } else if (col.id && col.id !== \"select\") {\r\n+              cellValue = row[col.id]\r\n+            } else {\r\n+              cellValue = \"\"\r\n+            }\r\n+\r\n+            // Handle null/undefined\r\n+            if (cellValue === null || cellValue === undefined) {\r\n+              return \"\"\r\n+            }\r\n+\r\n+            // Handle objects\r\n+            if (typeof cellValue === \"object\" && cellValue !== null) {\r\n+              // For Date objects\r\n+              if (cellValue instanceof Date) {\r\n+                cellValue = cellValue.toISOString()\r\n+              }\r\n+              // For arrays\r\n+              else if (Array.isArray(cellValue)) {\r\n+                cellValue = cellValue.join(\", \")\r\n+              }\r\n+              // For other objects\r\n+              else {\r\n+                // Try to find a displayable property\r\n+                const displayProps = [\"name\", \"title\", \"label\", \"value\", \"id\", \"key\", \"text\", \"description\"]\r\n+                const foundProp = displayProps.find((prop) => cellValue[prop] !== undefined)\r\n+\r\n+                if (foundProp) {\r\n+                  cellValue = cellValue[foundProp]\r\n+                } else {\r\n+                  // Use the cell renderer if available\r\n+                  if (col.cell) {\r\n+                    try {\r\n+                      const rendered = col.cell({ row: { original: row } })\r\n+                      if (rendered && typeof rendered !== \"object\") {\r\n+                        cellValue = rendered\r\n+                      } else {\r\n+                        cellValue = JSON.stringify(cellValue)\r\n+                      }\r\n+                    } catch (e) {\r\n+                      cellValue = JSON.stringify(cellValue)\r\n+                    }\r\n+                  } else {\r\n+                    cellValue = JSON.stringify(cellValue)\r\n+                  }\r\n+                }\r\n+              }\r\n+            }\r\n+\r\n+            // Convert to string\r\n+            cellValue = String(cellValue)\r\n+\r\n+            // Handle commas and quotes in the data\r\n+            if (cellValue.includes(\",\") || cellValue.includes('\"') || cellValue.includes(\"\\n\")) {\r\n+              return `\"${cellValue.replace(/\"/g, '\"\"')}\"`\r\n+            }\r\n+            return cellValue\r\n+          })\r\n+          .join(\",\")\r\n+      })\r\n+      .join(\"\\n\")\r\n+\r\n+    const csvContent = `${headers}\\n${rows}`\r\n+\r\n+    // Create a blob and download\r\n+    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\r\n+    const url = URL.createObjectURL(blob)\r\n+    const link = document.createElement(\"a\")\r\n+    link.setAttribute(\"href\", url)\r\n+    link.setAttribute(\"download\", \"table_data.csv\")\r\n+    link.style.visibility = \"hidden\"\r\n+    document.body.appendChild(link)\r\n+    link.click()\r\n+    document.body.removeChild(link)\r\n+  }\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n+        <TextField\r\n+          value={globalFilter ?? \"\"}\r\n+          size=\"small\"\r\n+          onChange={(e) => setGlobalFilter(e.target.value)}\r\n+          placeholder=\"Search all columns...\"\r\n+          variant=\"outlined\"\r\n+          sx={{\r\n+            borderRadius: \"12px\",\r\n+            mb: 4,\r\n+            \".MuiOutlinedInput-root\": {\r\n+              border: \"2px solid #e0e0e0\",\r\n+              borderRadius: \"12px\",\r\n+              \"& fieldset\": { border: \"none\" },\r\n+              \"&:hover\": {\r\n+                border: \"2px solid #0076bf\",\r\n+              },\r\n+              \"&.Mui-focused\": {\r\n+                border: \"2px solid #0076bf\",\r\n+                \"& fieldset\": { border: \"none\" },\r\n+              },\r\n+            },\r\n+          }}\r\n+        />\r\n+        {alphabets && (\r\n+          <Box\r\n+            sx={{\r\n+              mb: 2,\r\n+              display: \"flex\",\r\n+              flexDirection: { xs: \"column\", sm: \"row\" },\r\n+              alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n+              gap: 1,\r\n+              justifyContent: \"space-between\",\r\n+            }}\r\n+          >\r\n+            <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n+              {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+                <Button\r\n+                  key={letter}\r\n+                  onClick={() => filterByAlphabet(letter)}\r\n+                  sx={{\r\n+                    minWidth: \"30px\",\r\n+                    px: 1,\r\n+                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n+                    color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n+                    \"&:hover\": {\r\n+                      backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n+                    },\r\n+                  }}\r\n+                >\r\n+                  {letter}\r\n+                </Button>\r\n+              ))}\r\n+            </ButtonGroup>\r\n+\r\n+            {csv && <Button\r\n+              variant=\"contained\"\r\n+              startIcon={<FileDownload />}\r\n+              onClick={exportToExcel}\r\n+              sx={{\r\n+                backgroundColor: \"#0076bf\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#005a8f\",\r\n+                },\r\n+              }}\r\n+            >\r\n+              Export to Excel\r\n+            </Button>}\r\n+          </Box>\r\n+        )}\r\n+        {!alphabets && (\r\n+          <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n+            <Button\r\n+              variant=\"contained\"\r\n+              startIcon={<FileDownload />}\r\n+              onClick={exportToExcel}\r\n+              sx={{\r\n+                backgroundColor: \"#0076bf\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#005a8f\",\r\n+                },\r\n+              }}\r\n+            >\r\n+              Export to Excel\r\n+            </Button>\r\n+          </Box>\r\n+        )}\r\n+\r\n+        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n+          <Table stickyHeader>\r\n+            <TableHead>\r\n+              {table.getHeaderGroups().map((headerGroup) => (\r\n+                <TableRow key={headerGroup.id}>\r\n+                  {headerGroup.headers.map((header, index) => (\r\n+                    <TableCell\r\n+                      key={header.id}\r\n+                      align=\"left\"\r\n+                      sortDirection={header.column.getIsSorted() || false}\r\n+                      sx={{\r\n+                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                        whiteSpace: \"nowrap\",\r\n+                        fontWeight: \"bold\",\r\n+                      }}\r\n+                    >\r\n+                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+                        flexRender(header.column.columnDef.header, header.getContext())\r\n+                      ) : (\r\n+                        <TableSortLabel\r\n+                          active={!!header.column.getIsSorted()}\r\n+                          direction={header.column.getIsSorted() || \"asc\"}\r\n+                          onClick={header.column.getToggleSortingHandler()}\r\n+                        >\r\n+                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                        </TableSortLabel>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              ))}\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {table.getRowModel().rows.length > 0 ? (\r\n+                table.getRowModel().rows.map((row) => (\r\n+                  <TableRow\r\n+                    key={row.id}\r\n+                    hover={enableCheckbox}\r\n+                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                    selected={row.getIsSelected()}\r\n+                  >\r\n+                    {row.getVisibleCells().map((cell) => (\r\n+                      <TableCell\r\n+                        key={cell.id}\r\n+                        sx={{\r\n+                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          wordBreak: \"break-word\",\r\n+                        }}\r\n+                      >\r\n+                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                      </TableCell>\r\n+                    ))}\r\n+                  </TableRow>\r\n+                ))\r\n+              ) : (\r\n+                <TableRow>\r\n+                  <TableCell colSpan={table.getAllColumns().length}>\r\n+                    <Box py={3} textAlign=\"center\">\r\n+                      {!loading ? (\r\n+                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n+                      ) : (\r\n+                        <CircularProgress sx={{ color: \"#bd9b4a\" }} size={50} />\r\n+                      )}\r\n+                    </Box>\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+              )}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </TableContainer>\r\n+\r\n+        {table.getFilteredRowModel().rows.length > 0 && (\r\n+          <TablePagination\r\n+            rowsPerPageOptions={[10, 25, 50]}\r\n+            component=\"div\"\r\n+            count={table.getFilteredRowModel().rows.length}\r\n+            rowsPerPage={table.getState().pagination.pageSize}\r\n+            page={table.getState().pagination.pageIndex}\r\n+            onPageChange={(_, newPage) => {\r\n+              table.setPageIndex(newPage)\r\n+            }}\r\n+            onRowsPerPageChange={(e) => {\r\n+              const size = e.target.value ? Number(e.target.value) : 10\r\n+              table.setPageSize(size)\r\n+            }}\r\n+          />\r\n+        )}\r\n+      </Paper>\r\n+    </div>\r\n+  )\r\n+}\r\n+\r\n+export default DataTable\r\n"
                },
                {
                    "date": 1744961145525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,12 +311,9 @@\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n-                backgroundColor: \"#0076bf\",\r\n-                \"&:hover\": {\r\n-                  backgroundColor: \"#005a8f\",\r\n-                },\r\n+                textTransform:'capitalize'\r\n               }}\r\n             >\r\n               Export to Excel\r\n             </Button>}\r\n"
                },
                {
                    "date": 1744961161927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n   ButtonGroup,\r\n   Button,\r\n } from \"@mui/material\"\r\n import { FileDownload } from \"@mui/icons-material\"\r\n+import { PrimaryButton } from \"components/Buttons\"\r\n \r\n const DataTable = ({\r\n   data,\r\n   columns,\r\n@@ -306,18 +307,18 @@\n                 </Button>\r\n               ))}\r\n             </ButtonGroup>\r\n \r\n-            {csv && <Button\r\n+            {csv && <PrimaryButton\r\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n                 textTransform:'capitalize'\r\n               }}\r\n             >\r\n               Export to Excel\r\n-            </Button>}\r\n+            </PrimaryButton>}\r\n           </Box>\r\n         )}\r\n         {!alphabets && (\r\n           <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n@@ -430,440 +431,4 @@\n   )\r\n }\r\n \r\n export default DataTable\r\n-\"use client\"\r\n-\r\n-import { useState, useEffect, useMemo } from \"react\"\r\n-import {\r\n-  useReactTable,\r\n-  getCoreRowModel,\r\n-  getFilteredRowModel,\r\n-  getPaginationRowModel,\r\n-  getSortedRowModel,\r\n-  flexRender,\r\n-} from \"@tanstack/react-table\"\r\n-\r\n-import {\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableHead,\r\n-  TableRow,\r\n-  Paper,\r\n-  TextField,\r\n-  TablePagination,\r\n-  TableSortLabel,\r\n-  Checkbox,\r\n-  Box,\r\n-  CircularProgress,\r\n-  ButtonGroup,\r\n-  Button,\r\n-} from \"@mui/material\"\r\n-import { FileDownload } from \"@mui/icons-material\"\r\n-\r\n-const DataTable = ({\r\n-  data,\r\n-  columns,\r\n-  enableCheckbox = false,\r\n-  onSelectionChange,\r\n-  loading,\r\n-  nameColumnId = \"name\",\r\n-  csv,\r\n-  alphabets,\r\n-}) => {\r\n-  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n-  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n-  const [sorting, setSorting] = useState([])\r\n-  const [pagination, setPagination] = useState({\r\n-    pageIndex: 0,\r\n-    pageSize: 10,\r\n-  })\r\n-  const [rowSelection, setRowSelection] = useState({})\r\n-  const [filteredData, setFilteredData] = useState(data)\r\n-\r\n-  // Apply alphabetical filter whenever activeAlphabet changes or data changes\r\n-  useEffect(() => {\r\n-    if (!activeAlphabet) {\r\n-      setFilteredData(data)\r\n-    } else {\r\n-      // Find the name column to filter on\r\n-      const nameColumn = columns.find((col) => col.id === nameColumnId || col.accessorKey === nameColumnId)\r\n-\r\n-      if (nameColumn) {\r\n-        const filtered = data.filter((row) => {\r\n-          let nameValue\r\n-\r\n-          // Handle different ways to access the name value\r\n-          if (nameColumn.accessorFn) {\r\n-            nameValue = nameColumn.accessorFn(row)\r\n-          } else if (nameColumn.accessorKey) {\r\n-            nameValue = row[nameColumn.accessorKey]\r\n-          } else {\r\n-            // Default to first_name + last_name if available\r\n-            nameValue = row.first_name && row.last_name ? `${row.first_name} ${row.last_name}` : row.name || \"\"\r\n-          }\r\n-\r\n-          return nameValue.toString().toUpperCase().startsWith(activeAlphabet)\r\n-        })\r\n-\r\n-        setFilteredData(filtered)\r\n-      } else {\r\n-        setFilteredData(data)\r\n-      }\r\n-    }\r\n-\r\n-    // Reset to first page when changing filters\r\n-    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n-  }, [activeAlphabet, data, columns, nameColumnId])\r\n-\r\n-  // Notify parent component when selection changes\r\n-  useEffect(() => {\r\n-    if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number(index)])\r\n-      onSelectionChange(selectedRows)\r\n-    }\r\n-  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n-\r\n-  // Checkbox column\r\n-  const checkboxColumn = useMemo(\r\n-    () => ({\r\n-      id: \"select\",\r\n-      header: ({ table }) => (\r\n-        <Checkbox\r\n-          checked={table.getIsAllRowsSelected()}\r\n-          indeterminate={table.getIsSomeRowsSelected()}\r\n-          onChange={table.getToggleAllRowsSelectedHandler()}\r\n-        />\r\n-      ),\r\n-      cell: ({ row }) => (\r\n-        <Checkbox\r\n-          checked={row.getIsSelected()}\r\n-          onChange={row.getToggleSelectedHandler()}\r\n-          onClick={(e) => e.stopPropagation()}\r\n-        />\r\n-      ),\r\n-      size: 40,\r\n-    }),\r\n-    [],\r\n-  )\r\n-\r\n-  const tableColumns = useMemo(() => {\r\n-    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n-  }, [columns, enableCheckbox, checkboxColumn])\r\n-\r\n-  // Global filter function for all visible columns\r\n-  const globalFilterFn = (row, columnId, filterValue) => {\r\n-    return row\r\n-      .getVisibleCells()\r\n-      .some((cell) => String(cell.getValue()).toLowerCase().includes(filterValue.toLowerCase()))\r\n-  }\r\n-\r\n-  const table = useReactTable({\r\n-    data: filteredData, // Use the filtered data instead of the original data\r\n-    columns: tableColumns,\r\n-    state: {\r\n-      globalFilter,\r\n-      sorting,\r\n-      pagination,\r\n-      rowSelection,\r\n-    },\r\n-    enableRowSelection: enableCheckbox,\r\n-    onRowSelectionChange: setRowSelection,\r\n-    onGlobalFilterChange: setGlobalFilter,\r\n-    onSortingChange: setSorting,\r\n-    onPaginationChange: setPagination,\r\n-    globalFilterFn,\r\n-    getCoreRowModel: getCoreRowModel(),\r\n-    getFilteredRowModel: getFilteredRowModel(),\r\n-    getPaginationRowModel: getPaginationRowModel(),\r\n-    getSortedRowModel: getSortedRowModel(),\r\n-  })\r\n-\r\n-  const filterByAlphabet = (letter) => {\r\n-    if (letter === activeAlphabet) {\r\n-      setActiveAlphabet(\"\")\r\n-    } else {\r\n-      setActiveAlphabet(letter)\r\n-    }\r\n-  }\r\n-\r\n-  const exportToExcel = () => {\r\n-    // Only use the columns that are explicitly provided\r\n-    const exportColumns = columns.filter((col) => !col.id || col.id !== \"select\") // Filter out checkbox column\r\n-console.log(exportColumns);\r\n-\r\n-    // Create headers from the provided columns\r\n-    const headers = exportColumns.map((col) => col.header || (col.accessorKey ? col.accessorKey : col.id)).join(\",\")\r\n-    console.log(headers);\r\n-    const rows = filteredData\r\n-      .map((row) => {\r\n-        return exportColumns\r\n-          .map((col) => {\r\n-            let cellValue\r\n-\r\n-            // Extract value using the column's accessor method\r\n-            if (col.accessorFn) {\r\n-              cellValue = col.accessorFn(row)\r\n-            } else if (col.accessorKey) {\r\n-              cellValue = row[col.accessorKey]\r\n-            } else if (col.id && col.id !== \"select\") {\r\n-              cellValue = row[col.id]\r\n-            } else {\r\n-              cellValue = \"\"\r\n-            }\r\n-\r\n-            // Handle null/undefined\r\n-            if (cellValue === null || cellValue === undefined) {\r\n-              return \"\"\r\n-            }\r\n-\r\n-            // Handle objects\r\n-            if (typeof cellValue === \"object\" && cellValue !== null) {\r\n-              // For Date objects\r\n-              if (cellValue instanceof Date) {\r\n-                cellValue = cellValue.toISOString()\r\n-              }\r\n-              // For arrays\r\n-              else if (Array.isArray(cellValue)) {\r\n-                cellValue = cellValue.join(\", \")\r\n-              }\r\n-              // For other objects\r\n-              else {\r\n-                // Try to find a displayable property\r\n-                const displayProps = [\"name\", \"title\", \"label\", \"value\", \"id\", \"key\", \"text\", \"description\"]\r\n-                const foundProp = displayProps.find((prop) => cellValue[prop] !== undefined)\r\n-\r\n-                if (foundProp) {\r\n-                  cellValue = cellValue[foundProp]\r\n-                } else {\r\n-                  // Use the cell renderer if available\r\n-                  if (col.cell) {\r\n-                    try {\r\n-                      const rendered = col.cell({ row: { original: row } })\r\n-                      if (rendered && typeof rendered !== \"object\") {\r\n-                        cellValue = rendered\r\n-                      } else {\r\n-                        cellValue = JSON.stringify(cellValue)\r\n-                      }\r\n-                    } catch (e) {\r\n-                      cellValue = JSON.stringify(cellValue)\r\n-                    }\r\n-                  } else {\r\n-                    cellValue = JSON.stringify(cellValue)\r\n-                  }\r\n-                }\r\n-              }\r\n-            }\r\n-\r\n-            // Convert to string\r\n-            cellValue = String(cellValue)\r\n-\r\n-            // Handle commas and quotes in the data\r\n-            if (cellValue.includes(\",\") || cellValue.includes('\"') || cellValue.includes(\"\\n\")) {\r\n-              return `\"${cellValue.replace(/\"/g, '\"\"')}\"`\r\n-            }\r\n-            return cellValue\r\n-          })\r\n-          .join(\",\")\r\n-      })\r\n-      .join(\"\\n\")\r\n-\r\n-    const csvContent = `${headers}\\n${rows}`\r\n-\r\n-    // Create a blob and download\r\n-    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\r\n-    const url = URL.createObjectURL(blob)\r\n-    const link = document.createElement(\"a\")\r\n-    link.setAttribute(\"href\", url)\r\n-    link.setAttribute(\"download\", \"table_data.csv\")\r\n-    link.style.visibility = \"hidden\"\r\n-    document.body.appendChild(link)\r\n-    link.click()\r\n-    document.body.removeChild(link)\r\n-  }\r\n-\r\n-  return (\r\n-    <div>\r\n-      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n-        <TextField\r\n-          value={globalFilter ?? \"\"}\r\n-          size=\"small\"\r\n-          onChange={(e) => setGlobalFilter(e.target.value)}\r\n-          placeholder=\"Search all columns...\"\r\n-          variant=\"outlined\"\r\n-          sx={{\r\n-            borderRadius: \"12px\",\r\n-            mb: 4,\r\n-            \".MuiOutlinedInput-root\": {\r\n-              border: \"2px solid #e0e0e0\",\r\n-              borderRadius: \"12px\",\r\n-              \"& fieldset\": { border: \"none\" },\r\n-              \"&:hover\": {\r\n-                border: \"2px solid #0076bf\",\r\n-              },\r\n-              \"&.Mui-focused\": {\r\n-                border: \"2px solid #0076bf\",\r\n-                \"& fieldset\": { border: \"none\" },\r\n-              },\r\n-            },\r\n-          }}\r\n-        />\r\n-        {alphabets && (\r\n-          <Box\r\n-            sx={{\r\n-              mb: 2,\r\n-              display: \"flex\",\r\n-              flexDirection: { xs: \"column\", sm: \"row\" },\r\n-              alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n-              gap: 1,\r\n-              justifyContent: \"space-between\",\r\n-            }}\r\n-          >\r\n-            <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n-              {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n-                <Button\r\n-                  key={letter}\r\n-                  onClick={() => filterByAlphabet(letter)}\r\n-                  sx={{\r\n-                    minWidth: \"30px\",\r\n-                    px: 1,\r\n-                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n-                    color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n-                    \"&:hover\": {\r\n-                      backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n-                    },\r\n-                  }}\r\n-                >\r\n-                  {letter}\r\n-                </Button>\r\n-              ))}\r\n-            </ButtonGroup>\r\n-\r\n-            <Button\r\n-              variant=\"contained\"\r\n-              startIcon={<FileDownload />}\r\n-              onClick={exportToExcel}\r\n-              sx={{\r\n-                backgroundColor: \"#0076bf\",\r\n-                \"&:hover\": {\r\n-                  backgroundColor: \"#005a8f\",\r\n-                },\r\n-              }}\r\n-            >\r\n-              Export to Excel\r\n-            </Button>\r\n-          </Box>\r\n-        )}\r\n-        {!alphabets && (\r\n-          <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n-            <Button\r\n-              variant=\"contained\"\r\n-              startIcon={<FileDownload />}\r\n-              onClick={exportToExcel}\r\n-              sx={{\r\n-                backgroundColor: \"#0076bf\",\r\n-                \"&:hover\": {\r\n-                  backgroundColor: \"#005a8f\",\r\n-                },\r\n-              }}\r\n-            >\r\n-              Export to Excel\r\n-            </Button>\r\n-          </Box>\r\n-        )}\r\n-\r\n-        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n-          <Table stickyHeader>\r\n-            <TableHead>\r\n-              {table.getHeaderGroups().map((headerGroup) => (\r\n-                <TableRow key={headerGroup.id}>\r\n-                  {headerGroup.headers.map((header, index) => (\r\n-                    <TableCell\r\n-                      key={header.id}\r\n-                      align=\"left\"\r\n-                      sortDirection={header.column.getIsSorted() || false}\r\n-                      sx={{\r\n-                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                        whiteSpace: \"nowrap\",\r\n-                        fontWeight: \"bold\",\r\n-                      }}\r\n-                    >\r\n-                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n-                        flexRender(header.column.columnDef.header, header.getContext())\r\n-                      ) : (\r\n-                        <TableSortLabel\r\n-                          active={!!header.column.getIsSorted()}\r\n-                          direction={header.column.getIsSorted() || \"asc\"}\r\n-                          onClick={header.column.getToggleSortingHandler()}\r\n-                        >\r\n-                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n-                        </TableSortLabel>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  ))}\r\n-                </TableRow>\r\n-              ))}\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {table.getRowModel().rows.length > 0 ? (\r\n-                table.getRowModel().rows.map((row) => (\r\n-                  <TableRow\r\n-                    key={row.id}\r\n-                    hover={enableCheckbox}\r\n-                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                    selected={row.getIsSelected()}\r\n-                  >\r\n-                    {row.getVisibleCells().map((cell) => (\r\n-                      <TableCell\r\n-                        key={cell.id}\r\n-                        sx={{\r\n-                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          wordBreak: \"break-word\",\r\n-                        }}\r\n-                      >\r\n-                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                      </TableCell>\r\n-                    ))}\r\n-                  </TableRow>\r\n-                ))\r\n-              ) : (\r\n-                <TableRow>\r\n-                  <TableCell colSpan={table.getAllColumns().length}>\r\n-                    <Box py={3} textAlign=\"center\">\r\n-                      {!loading ? (\r\n-                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n-                      ) : (\r\n-                        <CircularProgress sx={{ color: \"#bd9b4a\" }} size={50} />\r\n-                      )}\r\n-                    </Box>\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-              )}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </TableContainer>\r\n-\r\n-        {table.getFilteredRowModel().rows.length > 0 && (\r\n-          <TablePagination\r\n-            rowsPerPageOptions={[10, 25, 50]}\r\n-            component=\"div\"\r\n-            count={table.getFilteredRowModel().rows.length}\r\n-            rowsPerPage={table.getState().pagination.pageSize}\r\n-            page={table.getState().pagination.pageIndex}\r\n-            onPageChange={(_, newPage) => {\r\n-              table.setPageIndex(newPage)\r\n-            }}\r\n-            onRowsPerPageChange={(e) => {\r\n-              const size = e.target.value ? Number(e.target.value) : 10\r\n-              table.setPageSize(size)\r\n-            }}\r\n-          />\r\n-        )}\r\n-      </Paper>\r\n-    </div>\r\n-  )\r\n-}\r\n-\r\n-export default DataTable\r\n"
                },
                {
                    "date": 1744961214294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n-                textTransform:'capitalize'\r\n+                textTransform:'capitalize !important'\r\n               }}\r\n             >\r\n               Export to Excel\r\n             </PrimaryButton>}\r\n"
                },
                {
                    "date": 1744961252272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n   ButtonGroup,\r\n   Button,\r\n } from \"@mui/material\"\r\n import { FileDownload } from \"@mui/icons-material\"\r\n-import { PrimaryButton } from \"components/Buttons\"\r\n \r\n const DataTable = ({\r\n   data,\r\n   columns,\r\n@@ -307,18 +306,21 @@\n                 </Button>\r\n               ))}\r\n             </ButtonGroup>\r\n \r\n-            {csv && <PrimaryButton\r\n+            {csv && <Button\r\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n-                textTransform:'capitalize !important'\r\n+                backgroundColor: \"#bd9b4a\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#005a8f\",\r\n+                },\r\n               }}\r\n             >\r\n               Export to Excel\r\n-            </PrimaryButton>}\r\n+            </Button>}\r\n           </Box>\r\n         )}\r\n         {!alphabets && (\r\n           <Box sx={{ mb: 2, display: \"flex\", justifyContent: \"flex-end\" }}>\r\n"
                },
                {
                    "date": 1744961290637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n-                backgroundColor: \"#bd9b4a\",\r\n+                backgroundColor: \"#bd9b4a !important\",\r\n                 \"&:hover\": {\r\n                   backgroundColor: \"#bd9b4a\",\r\n                 },\r\n               }}\r\n"
                },
                {
                    "date": 1744961646294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,8 +332,9 @@\n               variant=\"contained\"\r\n               startIcon={<FileDownload />}\r\n               onClick={exportToExcel}\r\n               sx={{\r\n+                textTransform:'capitalize',\r\n                 backgroundColor: \"#bd9b4a\",\r\n                 \"&:hover\": {\r\n                   backgroundColor: \"#bd9b4a\",\r\n                 },\r\n"
                }
            ],
            "date": 1744547212366,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport { useState, useEffect, useMemo } from \"react\"\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\"\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Checkbox,\r\n  Box,\r\n  CircularProgress,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@mui/material\"\r\n\r\nconst DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabets}) => {\r\n  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n  const [sorting, setSorting] = useState([])\r\n  const [pagination, setPagination] = useState({\r\n    pageIndex: 0,\r\n    pageSize: 10,\r\n  })\r\n  const [rowSelection, setRowSelection] = useState({})\r\n  const [filteredData, setFilteredData] = useState(data)\r\n\r\n  // Apply alphabetical filter whenever activeAlphabet changes or data changes\r\n  useEffect(() => {\r\n    if (!activeAlphabet) {\r\n      setFilteredData(data)\r\n    } else {\r\n      // Find the name column to filter on\r\n      const nameColumn = columns.find((col) => col.id === nameColumnId || col.accessorKey === nameColumnId)\r\n\r\n      if (nameColumn) {\r\n        const filtered = data.filter((row) => {\r\n          let nameValue\r\n\r\n          // Handle different ways to access the name value\r\n          if (nameColumn.accessorFn) {\r\n            nameValue = nameColumn.accessorFn(row)\r\n          } else if (nameColumn.accessorKey) {\r\n            nameValue = row[nameColumn.accessorKey]\r\n          } else {\r\n            // Default to first_name + last_name if available\r\n            nameValue = row.first_name && row.last_name ? `${row.first_name} ${row.last_name}` : row.name || \"\"\r\n          }\r\n\r\n          return nameValue.toString().toUpperCase().startsWith(activeAlphabet)\r\n        })\r\n\r\n        setFilteredData(filtered)\r\n      } else {\r\n        setFilteredData(data)\r\n      }\r\n    }\r\n\r\n    // Reset to first page when changing filters\r\n    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n  }, [activeAlphabet, data, columns, nameColumnId])\r\n\r\n  // Notify parent component when selection changes\r\n  useEffect(() => {\r\n    if (enableCheckbox && onSelectionChange) {\r\n      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number(index)])\r\n      onSelectionChange(selectedRows)\r\n    }\r\n  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n\r\n  // Checkbox column\r\n  const checkboxColumn = useMemo(\r\n    () => ({\r\n      id: \"select\",\r\n      header: ({ table }) => (\r\n        <Checkbox\r\n          checked={table.getIsAllRowsSelected()}\r\n          indeterminate={table.getIsSomeRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <Checkbox\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n          onClick={(e) => e.stopPropagation()}\r\n        />\r\n      ),\r\n      size: 40,\r\n    }),\r\n    [],\r\n  )\r\n\r\n  const tableColumns = useMemo(() => {\r\n    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n  }, [columns, enableCheckbox, checkboxColumn])\r\n\r\n  // Global filter function for all visible columns\r\n  const globalFilterFn = (row, columnId, filterValue) => {\r\n    return row\r\n      .getVisibleCells()\r\n      .some((cell) => String(cell.getValue()).toLowerCase().includes(filterValue.toLowerCase()))\r\n  }\r\n\r\n  const table = useReactTable({\r\n    data: filteredData, // Use the filtered data instead of the original data\r\n    columns: tableColumns,\r\n    state: {\r\n      globalFilter,\r\n      sorting,\r\n      pagination,\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: enableCheckbox,\r\n    onRowSelectionChange: setRowSelection,\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    onSortingChange: setSorting,\r\n    onPaginationChange: setPagination,\r\n    globalFilterFn,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n  })\r\n\r\n  const filterByAlphabet = (letter) => {\r\n    if (letter === activeAlphabet) {\r\n      setActiveAlphabet(\"\")\r\n    } else {\r\n      setActiveAlphabet(letter)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n        <TextField\r\n          value={globalFilter ?? \"\"}\r\n          size=\"small\"\r\n          onChange={(e) => setGlobalFilter(e.target.value)}\r\n          placeholder=\"Search all columns...\"\r\n          variant=\"outlined\"\r\n          sx={{\r\n            borderRadius: \"12px\",\r\n            mb: 4,\r\n            \".MuiOutlinedInput-root\": {\r\n              border: \"2px solid #e0e0e0\",\r\n              borderRadius: \"12px\",\r\n              \"& fieldset\": { border: \"none\" },\r\n              \"&:hover\": {\r\n                border: \"2px solid #0076bf\",\r\n              },\r\n              \"&.Mui-focused\": {\r\n                border: \"2px solid #0076bf\",\r\n                \"& fieldset\": { border: \"none\" },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n        {alphabets && <Box\r\n          sx={{\r\n            mb: 2,\r\n            display: \"flex\",\r\n            flexDirection: { xs: \"column\", sm: \"row\" },\r\n            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n            gap: 1,\r\n          }}\r\n        >\r\n          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n              <Button\r\n                key={letter}\r\n                onClick={() => filterByAlphabet(letter)}\r\n                sx={{\r\n                  minWidth: \"30px\",\r\n                  px: 1,\r\n                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n                  \"&:hover\": {\r\n                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n                  },\r\n                }}\r\n              >\r\n                {letter}\r\n              </Button>\r\n            ))}\r\n          </ButtonGroup>\r\n         \r\n        </Box>}\r\n\r\n        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n          <Table stickyHeader>\r\n            <TableHead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <TableRow key={headerGroup.id}>\r\n                  {headerGroup.headers.map((header, index) => (\r\n                    <TableCell\r\n                      key={header.id}\r\n                      align=\"left\"\r\n                      sortDirection={header.column.getIsSorted() || false}\r\n                      sx={{\r\n                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                        whiteSpace: \"nowrap\",\r\n                        fontWeight:'bold'\r\n                       \r\n                      }}\r\n                    >\r\n                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n                        flexRender(header.column.columnDef.header, header.getContext())\r\n                      ) : (\r\n                        <TableSortLabel\r\n                          active={!!header.column.getIsSorted()}\r\n                          direction={header.column.getIsSorted() || \"asc\"}\r\n                          onClick={header.column.getToggleSortingHandler()}\r\n                        >\r\n                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n                        </TableSortLabel>\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    hover={enableCheckbox}\r\n                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n                    selected={row.getIsSelected()}\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                      <TableCell\r\n                        key={cell.id}\r\n                        sx={{\r\n                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                          wordBreak: \"break-word\",\r\n                        }}\r\n                      >\r\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan={table.getAllColumns().length}>\r\n                    <Box py={3} textAlign=\"center\">\r\n                      {!loading ? (\r\n                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n                      ) : (\r\n                        <CircularProgress sx={{ color: \"#bd9b4a\" }} size={50} />\r\n                      )}\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {table.getFilteredRowModel().rows.length > 0 && (\r\n          <TablePagination\r\n            rowsPerPageOptions={[10, 25, 50]}\r\n            component=\"div\"\r\n            count={table.getFilteredRowModel().rows.length}\r\n            rowsPerPage={table.getState().pagination.pageSize}\r\n            page={table.getState().pagination.pageIndex}\r\n            onPageChange={(_, newPage) => {\r\n              table.setPageIndex(newPage)\r\n            }}\r\n            onRowsPerPageChange={(e) => {\r\n              const size = e.target.value ? Number(e.target.value) : 10\r\n              table.setPageSize(size)\r\n            }}\r\n          />\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTable\r\n"
        }
    ]
}