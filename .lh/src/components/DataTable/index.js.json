{
    "sourceFile": "src/components/DataTable/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744547212366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744547212366,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport { useState, useEffect, useMemo } from \"react\"\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\"\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Checkbox,\r\n  Box,\r\n  CircularProgress,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@mui/material\"\r\n\r\nconst DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabets}) => {\r\n  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n  const [sorting, setSorting] = useState([])\r\n  const [pagination, setPagination] = useState({\r\n    pageIndex: 0,\r\n    pageSize: 10,\r\n  })\r\n  const [rowSelection, setRowSelection] = useState({})\r\n  const [filteredData, setFilteredData] = useState(data)\r\n\r\n  // Apply alphabetical filter whenever activeAlphabet changes or data changes\r\n  useEffect(() => {\r\n    if (!activeAlphabet) {\r\n      setFilteredData(data)\r\n    } else {\r\n      // Find the name column to filter on\r\n      const nameColumn = columns.find((col) => col.id === nameColumnId || col.accessorKey === nameColumnId)\r\n\r\n      if (nameColumn) {\r\n        const filtered = data.filter((row) => {\r\n          let nameValue\r\n\r\n          // Handle different ways to access the name value\r\n          if (nameColumn.accessorFn) {\r\n            nameValue = nameColumn.accessorFn(row)\r\n          } else if (nameColumn.accessorKey) {\r\n            nameValue = row[nameColumn.accessorKey]\r\n          } else {\r\n            // Default to first_name + last_name if available\r\n            nameValue = row.first_name && row.last_name ? `${row.first_name} ${row.last_name}` : row.name || \"\"\r\n          }\r\n\r\n          return nameValue.toString().toUpperCase().startsWith(activeAlphabet)\r\n        })\r\n\r\n        setFilteredData(filtered)\r\n      } else {\r\n        setFilteredData(data)\r\n      }\r\n    }\r\n\r\n    // Reset to first page when changing filters\r\n    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n  }, [activeAlphabet, data, columns, nameColumnId])\r\n\r\n  // Notify parent component when selection changes\r\n  useEffect(() => {\r\n    if (enableCheckbox && onSelectionChange) {\r\n      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number(index)])\r\n      onSelectionChange(selectedRows)\r\n    }\r\n  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n\r\n  // Checkbox column\r\n  const checkboxColumn = useMemo(\r\n    () => ({\r\n      id: \"select\",\r\n      header: ({ table }) => (\r\n        <Checkbox\r\n          checked={table.getIsAllRowsSelected()}\r\n          indeterminate={table.getIsSomeRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <Checkbox\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n          onClick={(e) => e.stopPropagation()}\r\n        />\r\n      ),\r\n      size: 40,\r\n    }),\r\n    [],\r\n  )\r\n\r\n  const tableColumns = useMemo(() => {\r\n    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n  }, [columns, enableCheckbox, checkboxColumn])\r\n\r\n  // Global filter function for all visible columns\r\n  const globalFilterFn = (row, columnId, filterValue) => {\r\n    return row\r\n      .getVisibleCells()\r\n      .some((cell) => String(cell.getValue()).toLowerCase().includes(filterValue.toLowerCase()))\r\n  }\r\n\r\n  const table = useReactTable({\r\n    data: filteredData, // Use the filtered data instead of the original data\r\n    columns: tableColumns,\r\n    state: {\r\n      globalFilter,\r\n      sorting,\r\n      pagination,\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: enableCheckbox,\r\n    onRowSelectionChange: setRowSelection,\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    onSortingChange: setSorting,\r\n    onPaginationChange: setPagination,\r\n    globalFilterFn,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n  })\r\n\r\n  const filterByAlphabet = (letter) => {\r\n    if (letter === activeAlphabet) {\r\n      setActiveAlphabet(\"\")\r\n    } else {\r\n      setActiveAlphabet(letter)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n        <TextField\r\n          value={globalFilter ?? \"\"}\r\n          size=\"small\"\r\n          onChange={(e) => setGlobalFilter(e.target.value)}\r\n          placeholder=\"Search all columns...\"\r\n          variant=\"outlined\"\r\n          sx={{\r\n            borderRadius: \"12px\",\r\n            mb: 4,\r\n            \".MuiOutlinedInput-root\": {\r\n              border: \"2px solid #e0e0e0\",\r\n              borderRadius: \"12px\",\r\n              \"& fieldset\": { border: \"none\" },\r\n              \"&:hover\": {\r\n                border: \"2px solid #0076bf\",\r\n              },\r\n              \"&.Mui-focused\": {\r\n                border: \"2px solid #0076bf\",\r\n                \"& fieldset\": { border: \"none\" },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n        {alphabets && <Box\r\n          sx={{\r\n            mb: 2,\r\n            display: \"flex\",\r\n            flexDirection: { xs: \"column\", sm: \"row\" },\r\n            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n            gap: 1,\r\n          }}\r\n        >\r\n          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n              <Button\r\n                key={letter}\r\n                onClick={() => filterByAlphabet(letter)}\r\n                sx={{\r\n                  minWidth: \"30px\",\r\n                  px: 1,\r\n                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n                  \"&:hover\": {\r\n                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n                  },\r\n                }}\r\n              >\r\n                {letter}\r\n              </Button>\r\n            ))}\r\n          </ButtonGroup>\r\n         \r\n        </Box>}\r\n\r\n        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n          <Table stickyHeader>\r\n            <TableHead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <TableRow key={headerGroup.id}>\r\n                  {headerGroup.headers.map((header, index) => (\r\n                    <TableCell\r\n                      key={header.id}\r\n                      align=\"left\"\r\n                      sortDirection={header.column.getIsSorted() || false}\r\n                      sx={{\r\n                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                        whiteSpace: \"nowrap\",\r\n                        fontWeight:'bold'\r\n                       \r\n                      }}\r\n                    >\r\n                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n                        flexRender(header.column.columnDef.header, header.getContext())\r\n                      ) : (\r\n                        <TableSortLabel\r\n                          active={!!header.column.getIsSorted()}\r\n                          direction={header.column.getIsSorted() || \"asc\"}\r\n                          onClick={header.column.getToggleSortingHandler()}\r\n                        >\r\n                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n                        </TableSortLabel>\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    hover={enableCheckbox}\r\n                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n                    selected={row.getIsSelected()}\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                      <TableCell\r\n                        key={cell.id}\r\n                        sx={{\r\n                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                          wordBreak: \"break-word\",\r\n                        }}\r\n                      >\r\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan={table.getAllColumns().length}>\r\n                    <Box py={3} textAlign=\"center\">\r\n                      {!loading ? (\r\n                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n                      ) : (\r\n                        <CircularProgress sx={{ color: \"#bd9b4a\" }} size={50} />\r\n                      )}\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {table.getFilteredRowModel().rows.length > 0 && (\r\n          <TablePagination\r\n            rowsPerPageOptions={[10, 25, 50]}\r\n            component=\"div\"\r\n            count={table.getFilteredRowModel().rows.length}\r\n            rowsPerPage={table.getState().pagination.pageSize}\r\n            page={table.getState().pagination.pageIndex}\r\n            onPageChange={(_, newPage) => {\r\n              table.setPageIndex(newPage)\r\n            }}\r\n            onRowsPerPageChange={(e) => {\r\n              const size = e.target.value ? Number(e.target.value) : 10\r\n              table.setPageSize(size)\r\n            }}\r\n          />\r\n        )}\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTable\r\n"
        }
    ]
}