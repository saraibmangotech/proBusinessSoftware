{
    "sourceFile": "src/pages/Dashboard/Certificate/Certificate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821634,
            "name": "Commit-0",
            "content": "import { Box, Divider, Grid, Typography } from '@mui/material'\r\nimport { drawDOM, exportPDF } from '@progress/kendo-drawing'\r\nimport { PDFExport } from '@progress/kendo-react-pdf'\r\nimport Colors from 'assets/Style/Colors'\r\nimport axios from 'axios'\r\nimport { PrimaryButton } from 'components/Buttons'\r\nimport { showPromiseToast } from 'components/NewToaster'\r\nimport { ErrorToaster } from 'components/Toaster'\r\nimport instance from 'config/axios'\r\nimport moment from 'moment'\r\nimport React, { useRef } from 'react'\r\nimport { useState } from 'react'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport CustomerServices from 'services/Customer'\r\nimport routes from 'services/System/routes'\r\nimport { CleanTypes, getFileSize } from 'utils'\r\n\r\n\r\nconst Certificate = () => {\r\n    const contentRef = useRef(null);\r\n    const { state } = useLocation()\r\n    const navigate = useNavigate()\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    console.log(state);\r\n    const [loading, setLoading] = useState(false)\r\n    const allowFilesType = [\r\n        \r\n        'application/pdf', \r\n       \r\n      ];\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n\r\n                handleUpload(file, arr);\r\n                const path = await handleUpload(file, arr);\r\n                console.log('Uploaded file path:', path);\r\n                console.log(path, 'pathpathpath');\r\n                return path\r\n            } else {\r\n                ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(formData);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\nconsole.log(state);\r\n\r\n    const createCertificate = async (path) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            let obj = {\r\n\r\n                candidate_id: state?.id,\r\n                candidate_name: state?.name,\r\n                certificate: path\r\n            }\r\n            console.log(obj);\r\n            const promise = CustomerServices.CreateCertificate(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving ...',\r\n                'Success',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate('/salary-certificate')\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const handleExportWithComponent = (pdfExportComponent) => {\r\n        pdfExportComponent.current.save();\r\n    };\r\n\r\n    const sendBlobPreview = async (base64, name) => {\r\n        let obj = {\r\n            document: base64,\r\n            filename: name\r\n\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(process.env.REACT_APP_BASE_URL + '/system/uploadDocumentsBase64', obj);\r\n\r\n            console.log('Upload successful:', response.data.data.path);\r\n            createCertificate(response?.data?.data?.path)\r\n\r\n        } catch (error) {\r\n            console.error('Error uploading the file:', error);\r\n        }\r\n    };\r\n    const exportPDFWithMethod = () => {\r\n        let gridElement = document.getElementById(\"pdf\");\r\n        drawDOM(gridElement, {\r\n            paperSize: \"A4\",\r\n        })\r\n            .then((group) => {\r\n                return exportPDF(group);\r\n            })\r\n            .then((dataUri) => {\r\n                console.log(dataUri.split(\";base64,\")[1]);\r\n                console.log(state?.selectedItem);\r\n                \r\n                sendBlobPreview(dataUri.split(\";base64,\")[1], moment().unix() + `_${state?.name}-SalaryCertificate.pdf`);\r\n            });\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2, p: 3 }}>\r\n\r\n                <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                    <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Save\"\r\n                        onClick={() => {\r\n                            handleExportWithComponent(contentRef);\r\n                            exportPDFWithMethod()\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n            </Box>\r\n            <PDFExport paperSize={'A4'} ref={contentRef}\r\n                fileName=\"Salary Certificate\"\r\n            >\r\n                <Box component={'div'} id='pdf'\r\n                    sx={{\r\n                        backgroundColor: 'white',\r\n                        color: 'black',\r\n                        padding: 3,\r\n                        border: '1px solid white',\r\n                        borderRadius: 2,\r\n                        maxWidth: 800,\r\n                        margin: '0 auto',\r\n                        marginTop: 5,\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n                        Salary Certificate\r\n                    </Typography>\r\n                    <Divider sx={{ backgroundColor: 'white', marginY: 2 }} />\r\n                    <Typography paragraph>\r\n                        This is to certify that Mr. / Miss/ Mrs. <span style={{ textDecoration: 'underline' }}>{state?.name}</span>    is working with our esteemed organization / company    since <span style={{ textDecoration: 'underline' }}>________________</span>. We found this gentleman fully committed to his/her job and totally sincere towards this organization/company.\r\n                    </Typography>\r\n                    <Typography paragraph>\r\n                        We are issuing this letter on the specific request of our employee without accepting any liability on behalf of this letter or part of this letter on our organization / company.\r\n                    </Typography>\r\n                    <Divider sx={{ backgroundColor: 'white', marginY: 2 }} />\r\n                    <Typography paragraph>Regards,</Typography>\r\n                    <Box>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} mt={5}>\r\n                                <Typography>\r\n                                    ___________________\r\n                                    <br />\r\n                                    Signature\r\n                                    <br />\r\n                                    Date\r\n                                    <br />\r\n                                    {moment().format('MM-DD-YYYY')}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n            </PDFExport>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Certificate\r\n"
        }
    ]
}