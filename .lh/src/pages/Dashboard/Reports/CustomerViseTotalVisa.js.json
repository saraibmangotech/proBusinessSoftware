{
    "sourceFile": "src/pages/Dashboard/Reports/CustomerViseTotalVisa.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821351,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  tableCellClasses,\r\n  IconButton,\r\n  CircularProgress,\r\n  Chip,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport {\r\n  AllocateIcon,\r\n  CheckIcon,\r\n  EyeIcon,\r\n  FontFamily,\r\n  Images,\r\n  MessageIcon,\r\n  PendingIcon,\r\n  RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n  CleanTypes,\r\n  Debounce,\r\n  encryptData,\r\n  formatPermissionData,\r\n  getFileSize,\r\n  handleDownload,\r\n  handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport VisaServices from \"services/Visa\";\r\nimport { CloudUpload } from \"@mui/icons-material\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport { BoxTypes } from \"devextreme-react/cjs/box\";\r\nimport { mt } from \"date-fns/locale\";\r\nimport InvoiceServices from \"services/Invoicing\";\r\nimport SystemServices from \"services/System\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n    border: \"1px solid #EEEEEE\",\r\n    padding: \"15px\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n    color: \"#434343\",\r\n    paddingRight: \"50px\",\r\n    background: \"transparent\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n\r\n    textWrap: \"nowrap\",\r\n    padding: \"5px \",\r\n    paddingLeft: \"15px \",\r\n    \".MuiBox-root\": {\r\n      display: \"flex\",\r\n      gap: \"6px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      \".MuiBox-root\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    svg: {\r\n      width: \"auto\",\r\n      height: \"24px\",\r\n    },\r\n    \".MuiTypography-root\": {\r\n      textTransform: \"capitalize\",\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: \"nowrap\",\r\n    },\r\n    \".MuiButtonBase-root\": {\r\n      padding: \"8px\",\r\n      width: \"28px\",\r\n      height: \"28px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: \"flex\",\r\n    height: 100,\r\n    \"& svg\": {\r\n      width: \"40px !important\",\r\n      height: \"40px !important\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction CustomerViseTotalVisa() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    getValues: getValues2,\r\n    formState: { errors: errors2 },\r\n  } = useForm();\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n  const [slipLink, setSlipLink] = useState(\"\");\r\n  const [csvLoading, setCsvLoading] = useState(false);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [comparisonCsvData, setComparisonCsvData] = useState([]);\r\n  const csvLink = useRef();\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [statusDialog, setStatusDialog] = useState(false);\r\n  const [paymentDialog, setPaymentDialog] = useState(false);\r\n  const [status, setStatus] = useState(null);\r\n  const [payment, setPayment] = useState(null);\r\n  const [selectedVisa, setSelectedVisa] = useState();\r\n  const [charges, setCharges] = useState();\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const tableHead = [\r\n    { name: \"Client\", key: \"created_at\" },\r\n    { name: \"Request ID\", key: \"name\" },\r\n    { name: \"Request Date\", key: \"commission_visa\" },\r\n    { name: \"Employee ID\", key: \"commission_monthly\" },\r\n    { name: \"Name\", key: \"commission_monthly\" },\r\n    { name: \"Designation\", key: \"commission_monthly\" },\r\n    { name: \"Nationality\", key: \"commission_monthly\" },\r\n    { name: \"Passport No.\", key: \"commission_monthly\" },\r\n    { name: \"Passport Expiry Date\", key: \"commission_monthly\" },\r\n    { name: \"Basic Salary (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Allowance (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Total Salary (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Apply Visa \", key: \"commission_monthly\" },\r\n    { name: \"Status Date\", key: \"commission_monthly\" },\r\n    { name: \"Status\", key: \"commission_monthly\" },\r\n  ];\r\n\r\n  const allowFilesType = [\"application/pdf\"];\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [sort, setSort] = useState(\"asc\");\r\n\r\n  // *For Customer Queue\r\n  const [visas, setVisas] = useState([]);\r\n\r\n  // *For setPermissions\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [itemAmount, setItemAmount] = useState();\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [selectedVisaType, setSelectedVisaType] = useState(null);\r\n\r\n  // *For Get Customer Queue\r\n\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage;\r\n      const Limit = limit ? limit : pageLimit;\r\n      const Filter = { ...filters, ...filter };\r\n      setCurrentPage(Page);\r\n      setPageLimit(Limit);\r\n      setFilters(Filter);\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n      };\r\n      params = { ...params, ...Filter };\r\n      const { data } = await CustomerServices.getCustomerQueue(params);\r\n\r\n      setCustomerQueue(data?.rows);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  // *For Upload Document\r\n  const handleUploadDocument = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const file = e.target.files[0];\r\n      let arr = [\r\n        {\r\n          name: file?.name,\r\n          file: \"\",\r\n          type: file?.type.split(\"/\")[1],\r\n          size: getFileSize(file.size),\r\n          isUpload: false,\r\n        },\r\n      ];\r\n      if (allowFilesType.includes(file.type)) {\r\n        handleUpload(file, arr);\r\n        const path = await handleUpload(file, arr);\r\n        console.log(\"Uploaded file path:\", path);\r\n        setSlipLink(path);\r\n        console.log(path, \"pathpathpath\");\r\n        return path;\r\n      } else {\r\n        ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const handleRadioChange = (item) => {\r\n    setSelectedItem(item);\r\n  };\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n      console.log(file);\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n          console.log(getFileSize(uploadedBytes));\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n        setSlipDetail(docs);\r\n        console.log(data, \"asddasasd\");\r\n        return data?.data?.path;\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const getVisaSales = async (page, limit, filter, id, visaId) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage;\r\n      const Limit = limit ? limit : pageLimit;\r\n      const Filter = { ...filters, ...filter };\r\n      setCurrentPage(Page);\r\n      setPageLimit(Limit);\r\n      setFilters(Filter);\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n        customer_id: id ? id : selectedCustomer?.id,\r\n        status: visaId ? visaId : selectedVisaType?.id,\r\n      };\r\n      params = { ...params, ...Filter };\r\n\r\n      const { data } = await InvoiceServices.getVisaSales(params);\r\n      setVisas(data?.rows);\r\n      if (data?.rows?.length == 0) {\r\n        showErrorToast(\"No Data Found\");\r\n      }\r\n      setTotalCount(data?.count);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const downloadExcel = async () => {\r\n    console.log(\"Downloading Excel...\");\r\n    setCsvLoading(true);\r\n\r\n    try {\r\n      const allDataLimit = 9999;\r\n      const allDataPage = 1;\r\n    \r\n  \r\n      const params = {\r\n        page: allDataPage,\r\n        limit: allDataLimit,\r\n        customer_id:  selectedCustomer?.id,\r\n        status: selectedVisaType?.id,\r\n        ...filters\r\n      };\r\n\r\n      const { data } = await InvoiceServices.getVisaSales(params);\r\n\r\n      const csvHeaders = [\r\n        { label: \"Sr No\", key: \"sr_no\" },\r\n        { label: \"Client\", key: \"created_at\" },\r\n        { label: \"Request ID\", key: \"name\" },\r\n        { label: \"Request Date\", key: \"commission_visa\" },\r\n        { label: \"Employee ID\", key: \"commission_monthly\" },\r\n        { label: \"Name\", key: \"commission_monthly\" },\r\n        { label: \"Designation\", key: \"commission_monthly\" },\r\n        { label: \"Nationality\", key: \"commission_monthly\" },\r\n        { label: \"Passport No.\", key: \"commission_monthly\" },\r\n        { label: \"Passport Expiry Date\", key: \"commission_monthly\" },\r\n        { label: \"Basic Salary (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Allowance (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Total Salary (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Apply Visa \", key: \"commission_monthly\" },\r\n        { label: \"Status Date\", key: \"commission_monthly\" },\r\n        { label: \"Status\", key: \"commission_monthly\" },\r\n      ];\r\n\r\n      const csvData = data?.rows?.map((item, index) => {\r\n        let foundStatus = null;\r\n        let statusDate = null;\r\n        console.log(selectedVisaType, \"selectedVisaType\");\r\n\r\n        if (selectedVisaType?.name == \"Active\") {\r\n          foundStatus = item?.statuses.find(\r\n            (item, index) => item?.status == \"Stamping\"\r\n          );\r\n          statusDate = foundStatus?.date;\r\n          console.log(statusDate, \"statusDatestatusDate\");\r\n        } else {\r\n          statusDate = item?.updated_at;\r\n        }\r\n\r\n        let VisaCost = 0;\r\n        if (\r\n          item?.visa_tenure.includes(\"1\") &&\r\n          item?.visa_type === \"In\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.one_year_inside) +\r\n            parseFloat(charges?.one_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure.includes(\"1\") &&\r\n          item?.visa_type === \"Out\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.one_year_outside) +\r\n            parseFloat(charges?.one_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure.includes(\"2\") &&\r\n          item?.visa_type === \"In\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.two_year_inside) +\r\n            parseFloat(charges?.two_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure.includes(\"2\") &&\r\n          item?.visa_type === \"Out\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.two_year_outside) +\r\n            parseFloat(charges?.two_year_renewal);\r\n        } else {\r\n          // Handle other cases or set a default value if needed\r\n          VisaCost = 0;\r\n        }\r\n      \r\n        return {\r\n          sr_no: index + 1,\r\n          client: item?.customer?.name || \"-\",\r\n          request_id: `${item?.visa_id || \"\"}_${item?.serial_id || \"\"}`,\r\n          request_date: item?.visa_request?.request_date\r\n            ? moment(item?.visa_request?.request_date).format(\"MM-DD-YYYY\")\r\n            : \"-\",\r\n          employee_id: item?.employee_id || \"-\",\r\n          name: item?.name || \"-\",\r\n          designation: item?.visa_designation || \"-\",\r\n          nationality: item?.nationality?.name || \"-\",\r\n          passport_no: item?.passport_number || \"-\",\r\n          passport_expiry_date:item?.passport_expiry ?moment(item?.passport_expiry).format(\r\n            \"MM-DD-YYYY\"\r\n          ):\"-\",\r\n          basic_salary: item?.salary_basic || \"-\",\r\n          allowance: item?.salary_allowance || \"-\",\r\n          total_salary: item?.salary_total,\r\n          apply_visa: item?.visa_type || \"-\",\r\n          status_date: statusDate\r\n          ? moment(statusDate).format(\"MM-DD-YYYY\")\r\n          : \"-\",\r\n         status:item?.visa_status,\r\n        };\r\n      });\r\n      \r\n\r\n      setCsvData([\r\n        csvHeaders.map((header) => header.label),\r\n        ...csvData.map((row) => Object.values(row)),\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error generating CSV data: \", error);\r\n      ErrorToaster(\"Failed to generate CSV data: \" + error.message);\r\n    } finally {\r\n      setCsvLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (csvData.length > 0) {\r\n      csvLink?.current.link.click();\r\n    }\r\n  }, [csvData, comparisonCsvData]);\r\n\r\n  const getData = async (formData) => {\r\n    setLoading(true);\r\n    console.log(formData);\r\n    try {\r\n      let params = {\r\n        charges_type: \"cost\",\r\n      };\r\n\r\n      const { data } = await SystemServices.getRates(params);\r\n\r\n      let details = data?.charges;\r\n      setCharges(details);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues(\"search\"),\r\n    };\r\n    Debounce(() => getVisaSales(1, \"\", data));\r\n  };\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort,\r\n    };\r\n    Debounce(() => getVisaSales(1, \"\", data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    getCustomerQueue();\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n        <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Customer Vise Total Visas\r\n        </Typography>\r\n\r\n        <Box sx={{ display: \"flex\", gap: \"10px\" }}>\r\n          {visas.length > 0 && (\r\n            <>\r\n              <PrimaryButton\r\n                title=\"Download PDF\"\r\n                type=\"button\"\r\n                style={{ backgroundColor: Colors.bluishCyan }}\r\n                onClick={() => handleExportWithComponent(contentRef)}\r\n              />\r\n              <CSVLink\r\n                ref={csvLink}\r\n                data={csvData}\r\n                filename={`Customer_Vise-Total_Visas${moment().format(\r\n                  \"DD-MMM-YYYY_HHmmss\"\r\n                )}.csv`}\r\n                target=\"_blank\"\r\n              ></CSVLink>\r\n              <PrimaryButton\r\n                title=\"Download Excel\"\r\n                type=\"button\"\r\n                style={{ backgroundColor: Colors.bluishCyan }}\r\n                onClick={() => {\r\n                  downloadExcel();\r\n                }}\r\n                loading={csvLoading}\r\n              />\r\n            </>\r\n          )}\r\n          {/* <PrimaryButton\r\n                        title={\"Download Excel\"}\r\n                        onClick={() => downloadExcel()}\r\n                    /> */}\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box>\r\n        <Grid container spacing={2}>\r\n          {/* <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'} register={register(\"search\")} />\r\n                    </Grid> */}\r\n          <Grid item xs={3}>\r\n            <SelectField\r\n              size={\"small\"}\r\n              label={\"Select Customer :\"}\r\n              options={customerQueue}\r\n              selected={selectedCustomer}\r\n              onSelect={(value) => {\r\n                setSelectedCustomer(value);\r\n                if (value && selectedVisaType) {\r\n                  getVisaSales(null, null, null, value?.id);\r\n                }\r\n              }}\r\n              error={errors?.customer?.message}\r\n              register={register(\"customer\", {\r\n                required: \"Please select customer account.\",\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <SelectField\r\n              size={\"small\"}\r\n              label={\"Select Visa Type :\"}\r\n              options={[\r\n                { id: \"Active\", name: \"Active\" },\r\n                { id: \"Cancel\", name: \"Cancelled\" },\r\n                { id: \"Absconder\", name: \"Absconder\" },\r\n              ]}\r\n              selected={selectedVisaType}\r\n              onSelect={(value) => {\r\n                setSelectedVisaType(value);\r\n                if (value && selectedCustomer) {\r\n                  getVisaSales(\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    selectedCustomer?.id,\r\n                    value?.id\r\n                  );\r\n                }\r\n              }}\r\n              error={errors?.visatype?.message}\r\n              register={register(\"visatype\", {\r\n                required: \"Please select visatype .\",\r\n              })}\r\n            />\r\n          </Grid>\r\n          {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n          {/* <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                        <PrimaryButton\r\n                            bgcolor={Colors.white}\r\n                            textcolor={Colors.primary}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => { getVisaSales(); setValue('search', '') }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid> */}\r\n        </Grid>\r\n\r\n        <Grid item md={11}>\r\n          {visas.length > 0 && (\r\n            <Box>\r\n              <Grid container mb={2}></Grid>\r\n\r\n              {visas && (\r\n                <Fragment>\r\n                  <PDFExport\r\n                    ref={contentRef}\r\n                    landscape={true}\r\n                    paperSize=\"A4\"\r\n                    margin={5}\r\n                    fileName=\"Data\"\r\n                    pageTemplate={({ pageNumber, totalPages }) => (\r\n                      <>\r\n                        {/* Header */}\r\n                        <Box\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"20px\",\r\n                            left: \"0\",\r\n                            right: \"0\",\r\n                            textAlign: \"center\",\r\n\r\n                            paddingLeft: \"10px\",\r\n                          }}\r\n                        >\r\n                          <Box\r\n                            style={{\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <Box>\r\n                              <img\r\n                                style={{ width: \"300px\", height: \"20px\" }}\r\n                                src={Images.pdfLogo}\r\n                              />\r\n                              <Box\r\n                                style={{\r\n                                  color: \"#155368\",\r\n                                  flexDirection: \"column\",\r\n                                }}\r\n                              >\r\n                                <Typography\r\n                                  style={{\r\n                                    textAlign: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    MABDE TRADING L.L.C\r\n                                  </span>\r\n                                </Typography>\r\n                                <Typography\r\n                                  style={{\r\n                                    color: \"#155368\",\r\n                                    fontWeight: \"bold\",\r\n                                    textAlign: \"center\",\r\n                                    marginLeft: \"30px\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    TEL: 04-3400000, FAX: 04-3488448\r\n                                  </span>\r\n                                </Typography>\r\n                                <Typography\r\n                                  style={{\r\n                                    color: \"#155368\",\r\n                                    fontWeight: \"bold\",\r\n\r\n                                    textAlign: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    P.O.BOX 81, DUBAI, UAE\r\n                                  </span>\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n                          </Box>\r\n\r\n                          <Typography\r\n                            className=\"pdf-myfont\"\r\n                            sx={{\r\n                              fontSize: \"24px\",\r\n                              fontWeight: \"bold\",\r\n                              textAlign: \"left\",\r\n                              fontFamily: \"Arial, Helvetica, sans-serif\",\r\n                            }}\r\n                          >\r\n                            Customer Vise Total Visa\r\n                          </Typography>\r\n\r\n                          {/* <Box\r\n            className=\"pdf-center\"\r\n            style={{ textAlign: \"center\", margin: \"0 auto !important\" }}\r\n            mb={4}\r\n          >\r\n            <center>\r\n              <Typography\r\n                className=\"pdf-center\"\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  fontWeight: \"bold\",\r\n                  letterSpacing: \"11px\",\r\n                  textAlign: \"center\",\r\n                  textDecoration: \"underline\",\r\n                  marginLeft: \"10px !important\",\r\n                }}\r\n              >\r\n                TAX INVOICE\r\n              </Typography>\r\n            </center>\r\n          </Box> */}\r\n                        </Box>\r\n\r\n                        {/* Footer */}\r\n                        {/* <Box style={{\r\n                                                    position: 'absolute',\r\n                                                    bottom: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    height: '50px',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center'\r\n                                                }}>\r\n                                                    <img src={Images.invoiceHeader} style={{ width: '100%' }} alt=\"Footer\" />\r\n                                                </Box> */}\r\n                      </>\r\n                    )}\r\n                  >\r\n                    {/* Main content */}\r\n                    <TableContainer\r\n                      component={Paper}\r\n                      className=\"main-table\"\r\n                      sx={{\r\n                        maxHeight: \"100%\",\r\n                        mt: 5,\r\n                        backgroundColor: \"transparent\",\r\n                        boxShadow: \"none !important\",\r\n                        borderRadius: \"0px !important\",\r\n                        paddingTop: \"60px\", // Adjust for header height\r\n                        paddingBottom: \"60px\", // Adjust for footer height\r\n                      }}\r\n                    >\r\n                      <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                        <TableHead>\r\n                          <Row>\r\n                            {tableHead.map((cell, index) => (\r\n                              <Cell\r\n                                style={{\r\n                                  textAlign:\r\n                                    cell?.name === \"Select\" ? \"center\" : \"left\",\r\n                                  paddingRight:\r\n                                    cell?.name === \"Select\" ? \"15px\" : \"20px\",\r\n                                }}\r\n                                className=\"pdf-table pdf-table-head2\"\r\n                                key={index}\r\n                              >\r\n                                <Box\r\n                                  sx={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"flex-end\",\r\n                                  }}\r\n                                >\r\n                                  {cell?.name}\r\n                                  {cell?.name === \"Date\" && (\r\n                                    <>\r\n                                      &nbsp;\r\n                                      <span\r\n                                        style={{\r\n                                          height: \"20px\",\r\n                                          cursor: \"pointer\",\r\n                                        }}\r\n                                      >\r\n                                        <Box\r\n                                          component={\"img\"}\r\n                                          onClick={() => {\r\n                                            setSort(\r\n                                              sort === \"asc\" ? \"desc\" : \"asc\"\r\n                                            );\r\n                                            handleSort(cell?.key);\r\n                                          }}\r\n                                          src={Images.sortIcon}\r\n                                          width={\"18px\"}\r\n                                        ></Box>\r\n                                      </span>\r\n                                    </>\r\n                                  )}\r\n                                </Box>\r\n                              </Cell>\r\n                            ))}\r\n                          </Row>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {visas.map((item, index) => {\r\n                            let foundStatus = null;\r\n                            let statusDate = null;\r\n                            console.log(selectedVisaType, \"selectedVisaType\");\r\n\r\n                            if (selectedVisaType?.name == \"Active\") {\r\n                              foundStatus = item?.statuses.find(\r\n                                (item, index) => item?.status == \"Stamping\"\r\n                              );\r\n                              statusDate = foundStatus?.date;\r\n                              console.log(statusDate, \"statusDatestatusDate\");\r\n                            } else {\r\n                              statusDate = item?.updated_at;\r\n                            }\r\n\r\n                            let VisaCost = 0;\r\n                            if (\r\n                              item?.visa_tenure.includes(\"1\") &&\r\n                              item?.visa_type === \"In\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.one_year_inside) +\r\n                                parseFloat(charges?.one_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure.includes(\"1\") &&\r\n                              item?.visa_type === \"Out\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.one_year_outside) +\r\n                                parseFloat(charges?.one_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure.includes(\"2\") &&\r\n                              item?.visa_type === \"In\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.two_year_inside) +\r\n                                parseFloat(charges?.two_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure.includes(\"2\") &&\r\n                              item?.visa_type === \"Out\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.two_year_outside) +\r\n                                parseFloat(charges?.two_year_renewal);\r\n                            } else {\r\n                              // Handle other cases or set a default value if needed\r\n                              VisaCost = 0;\r\n                            }\r\n                            return (\r\n                              <Row\r\n                                key={index}\r\n                                sx={{ border: \"1px solid #EEEEEE !important\" }}\r\n                              >\r\n                                <Cell\r\n                                  style={{\r\n                                    textAlign: \"left\",\r\n                                    paddingLeft: \"0px !important\",\r\n                                  }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.customer?.name}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.visa_id + \"_\" + item?.serial_id}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {moment(\r\n                                    item?.visa_request?.request_date\r\n                                  ).format(\"MM-DD-YYYY\")}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.employee_id}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.name}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.visa_designation}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.nationality?.name\r\n                                    ? item?.nationality?.name\r\n                                    : \"-\"}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.passport_number\r\n                                    ? item?.passport_number\r\n                                    : \"-\"}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {moment(item?.passport_expiry).format(\r\n                                    \"MM-DD-YYYY\"\r\n                                  )}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.salary_basic}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.salary_allowance}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.salary_total}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.visa_type}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {statusDate\r\n                                    ? moment(statusDate).format(\"MM-DD-YYYY\")\r\n                                    : \"-\"}\r\n                                </Cell>\r\n\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table2\"\r\n                                >\r\n                                  {item?.visa_status}\r\n                                </Cell>\r\n                              </Row>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </PDFExport>\r\n\r\n                  {/* ========== Pagination ========== */}\r\n                  <Pagination\r\n                    currentPage={currentPage}\r\n                    pageSize={pageLimit}\r\n                    onPageSizeChange={(size) =>\r\n                      getVisaSales(1, size.target.value)\r\n                    }\r\n                    tableCount={visas?.length}\r\n                    totalCount={totalCount}\r\n                    onPageChange={(page) => getVisaSales(page, \"\")}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n\r\n              {loader && <CircleLoading />}\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CustomerViseTotalVisa;\r\n"
        }
    ]
}