{
    "sourceFile": "src/pages/Dashboard/Reports/MasterReport.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821398,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n    Button,\r\n    DialogContent,\r\n    DialogTitle,\r\n    DialogContentText,\r\n    Dialog,\r\n    DialogActions,\r\n    FormControlLabel,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { CleanTypes, Debounce, encryptData, formatPermissionData, getFileSize, handleDownload, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\nimport DatePicker from 'components/DatePicker';\r\nimport VisaServices from 'services/Visa';\r\nimport { CloudUpload } from '@mui/icons-material';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport { BoxTypes } from 'devextreme-react/cjs/box';\r\nimport { mt } from 'date-fns/locale';\r\nimport InvoiceServices from 'services/Invoicing';\r\nimport SystemServices from 'services/System';\r\nimport { CSVLink } from \"react-csv\";\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px ',\r\n        paddingLeft: '15px ',\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction MasterReport() {\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n    const [slipLink, setSlipLink] = useState(\"\");\r\n    const [csvLoading, setCsvLoading] = useState(false);\r\n    const [csvData, setCsvData] = useState([]);\r\n    const [comparisonCsvData, setComparisonCsvData] = useState([]);\r\n    const csvLink = useRef();\r\n\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [paymentDialog, setPaymentDialog] = useState(false)\r\n    const [status, setStatus] = useState(null)\r\n    const [payment, setPayment] = useState(null)\r\n    const [selectedVisa, setSelectedVisa] = useState()\r\n    const [charges, setCharges] = useState()\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [pdfDialog, setPdfDialog] = useState(false)\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const tableHead = [{ name: 'Client', key: 'created_at' }, { name: 'Request ID', key: 'name' }, { name: 'Request Date', key: 'commission_visa' }, { name: 'Employee ID', key: 'commission_monthly' }, { name: 'Name', key: 'commission_monthly' }, { name: 'Designation', key: 'commission_monthly' }, { name: 'Nationality', key: 'commission_monthly' }, { name: 'Passport No.', key: 'commission_monthly' }, { name: 'Basic Salary (AED)', key: 'commission_monthly' }, { name: 'Allowance (AED)', key: 'commission_monthly' }, { name: 'Total Salary (AED)', key: 'commission_monthly' }, { name: 'Apply Visa ', key: 'commission_monthly' }, { name: 'Status Date', key: 'commission_monthly' }, { name: 'Contact No', key: 'commission_monthly' }, { name: 'Visa Payment', key: 'commission_monthly' }, { name: 'Security Cheque', key: 'commission_monthly' }, { name: 'Documents', key: 'created_at' }, { name: 'Camp Location', key: 'commission_monthly' }, { name: 'Visa Fee As per Agreement', key: 'commission_monthly' }, { name: 'Visa Cost ', key: 'commission_monthly' }, { name: 'PRO Typing Fee', key: 'commission_monthly' }, { name: 'Mabde  ', key: 'commission_monthly' }, { name: 'Agent Fee ', key: 'commission_monthly' }, { name: 'Net Profit MABDE', key: 'commission_monthly' }, { name: 'Monthly Charges', key: 'commission_monthly' }, { name: 'Agent', key: 'commission_monthly' }, { name: 'Fahad', key: 'commission_monthly' }, { name: 'Sultan', key: 'commission_monthly' }]\r\n\r\n    const [visibleColumns, setVisibleColumns] = useState({\r\n        'Client': true,\r\n        'Request ID': true,\r\n        'Request Date': true,\r\n        'Employee ID': true,\r\n        'Name': true,\r\n        'Designation': true,\r\n        'Nationality': true,\r\n        'Passport No.': true,\r\n        'Basic Salary (AED)': true,\r\n        'Allowance (AED)': true,\r\n        'Total Salary (AED)': true,\r\n        'Apply Visa': true,\r\n        'Status Date': true,\r\n        'Contact No': true,\r\n        'Visa Payment': true,\r\n        'Security Cheque': true,\r\n        'Documents': true,\r\n        'Camp Location': true,\r\n        'Visa Fee As per Agreement': true,\r\n        'Visa Cost': true,\r\n        'PRO Typing Fee': true,\r\n        'Mabde': true,\r\n        'Agent Fee': true,\r\n        'Net Profit MABDE': true,\r\n        'Monthly Charges': true,\r\n        'Agent': true,\r\n        'Fahad': true,\r\n        'Sultan': true\r\n    });\r\n\r\n    // Function to toggle column visibility\r\n    const toggleColumn = (columnKey) => {\r\n        setVisibleColumns(prevState => ({\r\n            ...prevState,\r\n            [columnKey]: !prevState[columnKey]\r\n        }));\r\n    };\r\n\r\n\r\n    const allowFilesType = [\r\n\r\n        'application/pdf',\r\n\r\n    ];\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n\r\n\r\n    // *For Customer Queue\r\n    const [visas, setVisas] = useState([]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [selectedVisaType, setSelectedVisaType] = useState(null)\r\n    const [documents, setDocuments] = useState([])\r\n    const [docs, setDocs] = useState([])\r\n\r\n    // *For Get Customer Queue\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n\r\n                handleUpload(file, arr);\r\n                const path = await handleUpload(file, arr);\r\n                console.log('Uploaded file path:', path);\r\n                setSlipLink(path)\r\n                console.log(path, 'pathpathpath');\r\n                return path\r\n            } else {\r\n                ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const handleRadioChange = (item) => {\r\n        setSelectedItem(item);\r\n    };\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                setSlipDetail(docs);\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getVisaSales = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: id ? id : selectedCustomer?.id,\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await InvoiceServices.getVisaSales(params)\r\n            setVisas(data?.rows)\r\n            setTotalCount(data?.count)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const downloadExcel = async () => {\r\n        console.log(\"Downloading Excel...\");\r\n        setCsvLoading(true);\r\n    \r\n        try {\r\n          const allDataLimit = 9999;\r\n          const allDataPage = 1;\r\n    \r\n          const params = {\r\n            page: allDataPage,\r\n            limit: allDataLimit,\r\n            customer_id: selectedCustomer?.id,\r\n            ...filters,\r\n          };\r\n    \r\n          const { data } = await InvoiceServices.getVisaSales(params);\r\n    \r\n          const csvHeaders = [\r\n            { label: \"Sr No\", key: \"sr_no\" },\r\n            { label: \"Client\", key: \"client\" },\r\n            { label: \"Request ID\", key: \"request_id\" },\r\n            { label: \"Request Date\", key: \"request_date\" },\r\n            { label: \"Employee ID\", key: \"employee_id\" },\r\n            { label: \"Name\", key: \"name\" },\r\n            { label: \"Designation\", key: \"designation\" },\r\n            { label: \"Nationality\", key: \"nationality\" },\r\n            { label: \"Passport No.\", key: \"passport_no\" },\r\n            { label: \"Basic Salary (AED)\", key: \"basic_salary\" },\r\n            { label: \"Allowance (AED)\", key: \"allowance\" },\r\n            { label: \"Total Salary (AED)\", key: \"total_salary\" },\r\n            { label: \"Apply Visa\", key: \"apply_visa\" },\r\n            { label: \"Status Date\", key: \"status_date\" },\r\n\r\n            { label: \"Contact No\", key: \"phone\" },\r\n            { label: \"Visa Payment\", key: \"visa_payment\" },\r\n            { label: \"Security Cheques\", key: \"security_cheque\" },\r\n            { label: \"Camp Location\", key: \"camp_location\" },\r\n            { label: \"Visa Fee As per Agreement\", key: \"visa_fee\" },\r\n            { label: \"Visa Cost\", key: \"visa_cost\" },\r\n\r\n            { label: \"PRO Typing Fees\", key: \"typing_fees\" },\r\n            { label: \"Mabdee\", key: \"mabdee\" },\r\n\r\n            { label: \"Agent fee\", key: \"agent_fee\" },\r\n            { label: \"Net Profit MABDE\", key: \"net_profit\" },\r\n            { label: \"Monthly Charges\t\", key: \"monthly_charges\" },\r\n            { label: \"Agent\t\", key: \"agent\" },\r\n            { label: \"Fahad\t\", key: \"fahad\" },\r\n            { label: \"Sultan\t\", key: \"sultan\" },\r\n          ];\r\n          \r\n    \r\n          const csvData = data?.rows?.map((item, index) => {\r\n            let profitCalc = parseFloat(parseFloat(item?.salary_total) > 2000 ? item?.customer?.monthly_visa_service_above : item?.customer?.monthly_visa_service_below || 0) - parseFloat(parseFloat(item?.salary_total) > 2000 ? charges?.monthly_visa_service_above : charges?.monthly_visa_service_below || 0)\r\n            console.log(profitCalc, 'profit');\r\n\r\n            let multiplier = parseFloat(item?.customer?.agent_commission_monthly) / 100\r\n            console.log(multiplier);\r\n\r\n            let agentCalc = profitCalc * multiplier\r\n            let mabdeProfit = profitCalc - agentCalc\r\n            let foundStatus = item?.statuses.find((item, index) => item?.status == 'Entry permit' || item?.status == 'Change Status')\r\n            let statusDate = foundStatus?.date ? foundStatus?.date : foundStatus?.created_at\r\n            let VisaCost = 0\r\n            if (item?.visa_tenure === '1 year' && item?.visa_type === 'In') {\r\n                VisaCost = parseFloat(charges?.one_year_inside) + parseFloat(charges?.one_year_renewal);\r\n            } else if (charges?.visa_tenure === '1 year' && charges?.visa_type === 'Out') {\r\n                VisaCost = parseFloat(charges?.one_year_outside) + parseFloat(charges?.one_year_renewal);\r\n            } else if (charges?.visa_tenure === '2 year' && charges?.visa_type === 'In') {\r\n                VisaCost = parseFloat(charges?.two_year_inside) + parseFloat(charges?.two_year_renewal);\r\n            } else if (charges?.visa_tenure === '2 year' && charges?.visa_type === 'Out') {\r\n                VisaCost = parseFloat(charges?.two_year_outside) + parseFloat(charges?.two_year_renewal);\r\n            } else {\r\n                // Handle other cases or set a default value if needed\r\n                VisaCost = 0;\r\n            }\r\n            let cost = parseFloat(item?.visa_cost) + parseFloat(charges.typing_fee)\r\n            let profit = parseFloat(item?.visa_charges) - parseFloat(cost)\r\n            let agentFee = parseFloat(profit) * parseFloat(item?.customer?.agent_commission_visa) / 100\r\n            let netMabde = parseFloat(profit) - parseFloat(agentFee)\r\n            return {\r\n                \r\n                    \"Sr No\": index + 1,\r\n                    \"Client\": item?.customer?.name || \"-\",\r\n                    \"Request ID\": item?.visa_id + \"_\" + item?.serial_id || \"-\",\r\n                    \"Request Date\": item?.visa_request?.request_date\r\n                      ? moment(item?.visa_request?.request_date).format(\"MM-DD-YYYY\")\r\n                      : \"-\",\r\n                    \"Employee ID\": item?.employee_id || \"-\",\r\n                    \"Name\": item?.name || \"-\",\r\n                    \"Designation\": item?.visa_designation || \"-\",\r\n                    \"Nationality\": item?.nationality?.name || \"-\",\r\n                    \"Passport No.\": item?.passport_number || \"-\",\r\n                    \"Basic Salary (AED)\": item?.salary_basic || \"-\",\r\n                    \"Allowance (AED)\": item?.salary_allowance || \"-\",\r\n                    \"Total Salary (AED)\": item?.salary_total || \"-\",\r\n                    \"Apply Visa\": item?.visa_type || \"-\",\r\n                    \"Status Date\": item?.change_status_date ? moment(item?.change_status_date).format('MM-DD-YYYY') : '-',\r\n                    \"Phone\": item?.phone,\r\n                    \"Visa Charges\": item?.visa_charges,\r\n    \r\n                    \"Security Cheque\": \"-\",\r\n                    \"camp location\":item?.camp_location,\r\n                    \"Visa\":item?.visa_charges,\r\n                    \"Visa Cost\":item?.visa_cost,\r\n                    \"Typing Fee\":charges?.typing_fee,\r\n                    \"mabdee\":isNaN(profit.toFixed(2)) ? '-' : profit.toFixed(2),\r\n                    \"Agent Fee\":isNaN(agentFee.toFixed(2)) ? '-' : agentFee.toFixed(2),\r\n                    \"Net Profit\":isNaN(netMabde.toFixed(2)) ? '-' : netMabde.toFixed(2),\r\n                     \"Monthly Charges\":parseFloat(item?.salary_total) > 2000 ? parseFloat(item?.customer?.monthly_visa_service_above).toFixed(2) : parseFloat(item?.customer?.monthly_visa_service_below).toFixed(2),\r\n                     \"agent\":isNaN(agentFee.toFixed(2)) ? '-' : agentFee.toFixed(2),\r\n\r\n                    \"Fahad\": isNaN((netMabde * 0.25).toFixed(2)) ? '-' : (netMabde * 0.25).toFixed(2),\r\n                    \"Sultan\": isNaN((netMabde * 0.25).toFixed(2)) ? '-' : (netMabde * 0.25).toFixed(2),\r\n                  \r\n                  \r\n                \r\n                    \r\n              };\r\n          });\r\n          \r\n    \r\n          setCsvData([\r\n            csvHeaders.map((header) => header.label),\r\n            ...csvData.map((row) => Object.values(row)),\r\n          ]);\r\n        } catch (error) {\r\n          console.error(\"Error generating CSV data: \", error);\r\n          ErrorToaster(\"Failed to generate CSV data: \" + error.message);\r\n        } finally {\r\n          setCsvLoading(false);\r\n        }\r\n      };\r\n      useEffect(() => {\r\n        if (csvData.length > 0) {\r\n          csvLink?.current.link.click();\r\n        }\r\n      }, [csvData, comparisonCsvData]);\r\n\r\n\r\n    const getData = async (formData) => {\r\n        setLoading(true)\r\n        console.log(formData);\r\n        try {\r\n            let params = {\r\n                charges_type: 'cost'\r\n\r\n            }\r\n\r\n            const { data } = await SystemServices.getRates(params);\r\n\r\n            let details = data?.charges\r\n            setCharges(details)\r\n\r\n\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getVisaSales(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getVisaSales(1, '', data));\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getData()\r\n        getVisaSales()\r\n        getCustomerQueue()\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n\r\n\r\n            <SimpleDialog\r\n                open={pdfDialog}\r\n                onClose={() => { setPdfDialog(false) }}\r\n                title={'Download Pdf'}\r\n            >\r\n                <Box component=\"form\" >\r\n                    <p style={{ fontWeight: 'bold' }}>Select Columns For PDF</p>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n\r\n                            <div>\r\n                                {Object.keys(visibleColumns).map(column => (\r\n                                    <FormControlLabel\r\n                                        key={column}\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={visibleColumns[column]}\r\n                                                onChange={() => toggleColumn(column)}\r\n                                                name={column}\r\n                                            />\r\n                                        }\r\n                                        label={column}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                            {console.log(visibleColumns)}\r\n                            <p>Selected Coloumns : {Object.values(visibleColumns).filter(Boolean).length}</p>\r\n                            {Object.values(visibleColumns).filter(Boolean).length > 13 && <p style={{ color: 'blue' }}>Select 13 columns to get best result</p>}\r\n\r\n\r\n\r\n                        </Grid>\r\n\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    disabled={visibleColumns.length < 14 ? true : false}\r\n                                    onClick={() => handleExportWithComponent(contentRef)}\r\n                                    title=\"Yes,Confirm\"\r\n\r\n\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => { setPdfDialog(false) }}\r\n                                    bgcolor={\"#FF1F25\"}\r\n\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Dialog\r\n\r\n                open={open}\r\n                onClose={handleClose}\r\n                maxWidth={'md'}\r\n                fullWidth={true}\r\n\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n\r\n                <DialogContent >\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n\r\n                        tabIndex={-1}\r\n                    >\r\n\r\n\r\n                    </DialogContentText>\r\n                    <Grid container  >\r\n\r\n\r\n                        {docs?.length > 0 && <Typography mb={2} mt={2} sx={{ color: '#03091A', fontWeight: 'bold' }} variant=\"h6\">Documents :</Typography>}\r\n                        <Grid container spacing={2} mt={2}>\r\n                            {docs\r\n                                ?.sort((a, b) => (a.path ? 0 : 1) - (b.path ? 0 : 1)) // Sort documents with empty path last\r\n                                .map((doc, index) => (\r\n                                    <>\r\n\r\n                                        <Grid\r\n                                            item\r\n                                            md={6}\r\n                                            lg={6}\r\n                                            sx={{ cursor: 'pointer' }}\r\n                                            component={'div'}\r\n\r\n                                        // Use index2 instead of index to avoid duplicate keys\r\n                                        >\r\n                                            {/* Conditionally render name only for the first doc */}\r\n                                            {(\r\n                                                <Box sx={{ fontSize: '15px', fontWeight: 'bold' }}>{doc?.name}</Box>\r\n                                            )}\r\n                                            <Box sx={{ display: 'flex', gap: '10px', mt: '15px', flexWrap: 'wrap' }} >\r\n                                                {doc?.paths.length > 0 ? doc?.paths.map((item, index2) => {\r\n                                                    return (\r\n                                                        <>\r\n                                                            <Box component={'div'} sx={{ width: '30%' }}\r\n                                                                onClick={() => {\r\n                                                                    if (item?.split('_').pop().includes('doc') || item?.split('_').pop().includes('xls')) {\r\n\r\n                                                                        handleDownload(item, item?.split('_').pop());\r\n                                                                    }\r\n                                                                    else {\r\n\r\n                                                                        window.open(process.env.REACT_APP_IMAGE_BASE_URL + item, '_blank');\r\n                                                                    }\r\n                                                                }}\r\n                                                            // onClick={() => {\r\n                                                            //     if (item) {\r\n                                                            //         handleDownload(item, item.split('_').pop());\r\n                                                            //     }\r\n                                                            // }}\r\n                                                            >\r\n                                                                <Box key={index2}>\r\n                                                                    {item ? (\r\n                                                                        <Box component={'img'} src={Images.docIcon} width={'35px'} />\r\n                                                                    ) : (\r\n                                                                        <DoDisturbIcon sx={{ fontSize: '35px', color: 'gray' }} />\r\n                                                                    )}\r\n                                                                </Box>\r\n                                                                <Link rel=\"noopener noreferrer\">\r\n                                                                    {item.split('_').pop()}\r\n                                                                </Link>\r\n                                                            </Box>\r\n                                                        </>\r\n                                                    );\r\n                                                }) :\r\n                                                    <DoDisturbIcon sx={{ fontSize: '35px', color: 'gray' }} />}\r\n\r\n                                            </Box>\r\n\r\n                                        </Grid>\r\n                                    </>\r\n                                ))}\r\n\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} onClick={handleClose}>Cancel</Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Master Report</Typography>\r\n\r\n                <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                    {visas.length > 0 &&\r\n                    <>\r\n                    <PrimaryButton\r\n                        title=\"Download PDF\"\r\n                        type=\"button\"\r\n                        style={{ backgroundColor: Colors.bluishCyan }}\r\n                        onClick={() => setPdfDialog(true)}\r\n                    />\r\n                     <CSVLink\r\n                ref={csvLink}\r\n                data={csvData}\r\n                filename={`master_report${moment().format(\r\n                  \"DD-MMM-YYYY_HHmmss\"\r\n                )}.csv`}\r\n                target=\"_blank\"\r\n              ></CSVLink>\r\n              <PrimaryButton\r\n                title=\"Download Excel\"\r\n                type=\"button\"\r\n                style={{ backgroundColor: Colors.bluishCyan }}\r\n                onClick={() => {\r\n                  downloadExcel();\r\n                }}\r\n                loading={csvLoading}\r\n              />\r\n                    </>\r\n                    }\r\n                    {/* <PrimaryButton\r\n                        title={\"Download Excel\"}\r\n                        onClick={() => downloadExcel()}\r\n                    /> */}\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n                <Grid container spacing={2}>\r\n                    {/* <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'} register={register(\"search\")} />\r\n                    </Grid> */}\r\n                    <Grid item xs={3} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Customer :'}\r\n\r\n                            options={customerQueue}\r\n                            selected={selectedCustomer}\r\n                            onSelect={(value) => {\r\n                                setSelectedCustomer(value)\r\n\r\n\r\n\r\n                                getVisaSales(null, null, null, value?.id)\r\n\r\n                            }}\r\n                            error={errors?.customer?.message}\r\n                            register={register(\"customer\", {\r\n                                required: 'Please select customer account.',\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n\r\n                    {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n                    {/* <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                        <PrimaryButton\r\n                            bgcolor={Colors.white}\r\n                            textcolor={Colors.primary}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => { getVisaSales(); setValue('search', '') }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid> */}\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {visas.length > 0 && <Box>\r\n\r\n                        <Grid container mb={2} >\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                        {(\r\n                            visas && (\r\n                                <Fragment>\r\n                                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5} fileName='Data'\r\n                                        pageTemplate={({ pageNumber, totalPages }) => (\r\n                                            <>\r\n                                                {/* Header */}\r\n                                                <Box\r\n                                                    style={{\r\n                                                        position: \"absolute\",\r\n                                                        top: \"20px\",\r\n                                                        left: \"0\",\r\n                                                        right: \"0\",\r\n                                                        textAlign: \"center\",\r\n\r\n                                                        paddingLeft: \"10px\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Box\r\n                                                        style={{\r\n                                                            alignItems: \"center\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <Box>\r\n                                                            <img\r\n                                                                style={{ width: \"300px\", height: \"20px\" }}\r\n                                                                src={Images.pdfLogo}\r\n                                                            />\r\n                                                            <Box\r\n                                                                style={{\r\n                                                                    color: \"#155368\",\r\n                                                                    flexDirection: \"column\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <Typography\r\n                                                                    style={{\r\n                                                                        textAlign: \"center\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <span style={{ display: \"block\" }}>MABDE TRADING L.L.C</span>\r\n                                                                </Typography>\r\n                                                                <Typography\r\n                                                                    style={{\r\n                                                                        color: \"#155368\",\r\n                                                                        fontWeight: \"bold\",\r\n                                                                        textAlign: \"center\",\r\n                                                                        marginLeft: \"30px\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <span style={{ display: \"block\" }}>\r\n                                                                        TEL: 04-3400000, FAX: 04-3488448\r\n                                                                    </span>\r\n                                                                </Typography>\r\n                                                                <Typography\r\n                                                                    style={{\r\n                                                                        color: \"#155368\",\r\n                                                                        fontWeight: \"bold\",\r\n\r\n                                                                        textAlign: \"center\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <span style={{ display: \"block\" }}>\r\n                                                                        P.O.BOX 81, DUBAI, UAE\r\n                                                                    </span>\r\n                                                                </Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n\r\n                                                    </Box>\r\n\r\n                                                    <Typography className='pdf-myfont' sx={{ fontSize: '24px', fontWeight: 'bold', textAlign: 'left', fontFamily: 'Arial, Helvetica, sans-serif' }}>Master Report</Typography>\r\n\r\n                                                    {/* <Box\r\n            className=\"pdf-center\"\r\n            style={{ textAlign: \"center\", margin: \"0 auto !important\" }}\r\n            mb={4}\r\n          >\r\n            <center>\r\n              <Typography\r\n                className=\"pdf-center\"\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  fontWeight: \"bold\",\r\n                  letterSpacing: \"11px\",\r\n                  textAlign: \"center\",\r\n                  textDecoration: \"underline\",\r\n                  marginLeft: \"10px !important\",\r\n                }}\r\n              >\r\n                TAX INVOICE\r\n              </Typography>\r\n            </center>\r\n          </Box> */}\r\n                                                </Box>\r\n\r\n                                                {/* Footer */}\r\n                                                {/* <Box style={{\r\n                                                    position: 'absolute',\r\n                                                    bottom: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    height: '50px',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center'\r\n                                                }}>\r\n                                                    <img src={Images.invoiceHeader} style={{ width: '100%' }} alt=\"Footer\" />\r\n                                                </Box> */}\r\n                                            </>\r\n                                        )}>\r\n                                        {/* Main content */}\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            className='main-table'\r\n                                            sx={{\r\n                                                maxHeight: '100%',\r\n                                                mt: 5,\r\n                                                backgroundColor: 'transparent',\r\n                                                boxShadow: 'none !important',\r\n                                                borderRadius: '0px !important',\r\n                                                paddingTop: '60px',  // Adjust for header height\r\n                                                paddingBottom: '60px' // Adjust for footer height\r\n                                            }}\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n                                                    <Row>\r\n                                                        {visibleColumns['Client'] && <Cell className=\"pdf-table pdf-table-head2\">Client</Cell>}\r\n                                                        {visibleColumns['Request ID'] && <Cell className=\"pdf-table pdf-table-head2\">Request ID</Cell>}\r\n                                                        {visibleColumns['Request Date'] && (\r\n                                                            <Cell className=\"pdf-table pdf-table-head2\">\r\n                                                                Request Date\r\n                                                                <>\r\n                                                                    &nbsp;\r\n                                                                    <span className='pdf-hide' style={{ height: '20px', cursor: 'pointer' }}>\r\n                                                                        <Box component={'img'}\r\n                                                                            onClick={() => { setSort(sort === 'asc' ? 'desc' : 'asc'); handleSort('created_at') }}\r\n                                                                            src={Images.sortIcon}\r\n                                                                            width={'18px'} />\r\n                                                                    </span>\r\n                                                                </>\r\n                                                            </Cell>\r\n                                                        )}\r\n                                                        {visibleColumns['Employee ID'] && <Cell className=\"pdf-table pdf-table-head2\">Employee ID</Cell>}\r\n                                                        {visibleColumns['Name'] && <Cell className=\"pdf-table pdf-table-head2\">Name</Cell>}\r\n                                                        {visibleColumns['Designation'] && <Cell className=\"pdf-table pdf-table-head2\">Designation</Cell>}\r\n                                                        {visibleColumns['Nationality'] && <Cell className=\"pdf-table pdf-table-head2\">Nationality</Cell>}\r\n                                                        {visibleColumns['Passport No.'] && <Cell className=\"pdf-table pdf-table-head2\">Passport No.</Cell>}\r\n                                                        {visibleColumns['Basic Salary (AED)'] && <Cell className=\"pdf-table pdf-table-head2\">Basic Salary (AED)</Cell>}\r\n                                                        {visibleColumns['Allowance (AED)'] && <Cell className=\"pdf-table pdf-table-head2\">Allowance (AED)</Cell>}\r\n                                                        {visibleColumns['Total Salary (AED)'] && <Cell className=\"pdf-table pdf-table-head2\">Total Salary (AED)</Cell>}\r\n                                                        {visibleColumns['Apply Visa'] && <Cell className=\"pdf-table pdf-table-head2\">Apply Visa</Cell>}\r\n                                                        {visibleColumns['Status Date'] && <Cell className=\"pdf-table pdf-table-head2\">Status Date</Cell>}\r\n                                                        {visibleColumns['Contact No'] && <Cell className=\"pdf-table pdf-table-head2\">Contact No</Cell>}\r\n                                                        {visibleColumns['Visa Payment'] && <Cell className=\"pdf-table pdf-table-head2\">Visa Payment</Cell>}\r\n                                                        {visibleColumns['Security Cheque'] && <Cell className=\"pdf-table pdf-table-head2\">Security Cheque</Cell>}\r\n                                                        {visibleColumns['Documents'] && <Cell className=\"pdf-table pdf-table-head2\">Documents</Cell>}\r\n                                                        {visibleColumns['Camp Location'] && <Cell className=\"pdf-table pdf-table-head2\">Camp Location</Cell>}\r\n                                                        {visibleColumns['Visa Fee As per Agreement'] && <Cell className=\"pdf-table pdf-table-head2\">Visa Fee As per Agreement</Cell>}\r\n                                                        {visibleColumns['Visa Cost'] && <Cell className=\"pdf-table pdf-table-head2\">Visa Cost</Cell>}\r\n                                                        {visibleColumns['PRO Typing Fee'] && <Cell className=\"pdf-table pdf-table-head2\">PRO Typing Fee</Cell>}\r\n                                                        {visibleColumns['Mabde'] && <Cell className=\"pdf-table pdf-table-head2\">Mabde</Cell>}\r\n                                                        {visibleColumns['Agent Fee'] && <Cell className=\"pdf-table pdf-table-head2\">Agent Fee</Cell>}\r\n                                                        {visibleColumns['Net Profit MABDE'] && <Cell className=\"pdf-table pdf-table-head2\">Net Profit MABDE</Cell>}\r\n                                                        {visibleColumns['Monthly Charges'] && <Cell className=\"pdf-table pdf-table-head2\">Monthly Charges</Cell>}\r\n                                                        {visibleColumns['Agent'] && <Cell className=\"pdf-table pdf-table-head2\">Agent</Cell>}\r\n                                                        {visibleColumns['Fahad'] && <Cell className=\"pdf-table pdf-table-head2\">Fahad</Cell>}\r\n                                                        {visibleColumns['Sultan'] && <Cell className=\"pdf-table pdf-table-head2\">Sultan</Cell>}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n\r\n                                                <TableBody>\r\n                                                    {visas.map((item, index) => {\r\n                                                        let profitCalc = parseFloat(parseFloat(item?.salary_total) > 2000 ? item?.customer?.monthly_visa_service_above : item?.customer?.monthly_visa_service_below || 0) - parseFloat(parseFloat(item?.salary_total) > 2000 ? charges?.monthly_visa_service_above : charges?.monthly_visa_service_below || 0)\r\n                                                        console.log(profitCalc, 'profit');\r\n\r\n                                                        let multiplier = parseFloat(item?.customer?.agent_commission_monthly) / 100\r\n                                                        console.log(multiplier);\r\n\r\n                                                        let agentCalc = profitCalc * multiplier\r\n                                                        let mabdeProfit = profitCalc - agentCalc\r\n                                                        let foundStatus = item?.statuses.find((item, index) => item?.status == 'Entry permit' || item?.status == 'Change Status')\r\n                                                        let statusDate = foundStatus?.date ? foundStatus?.date : foundStatus?.created_at\r\n                                                        let VisaCost = 0\r\n                                                        if (item?.visa_tenure === '1 year' && item?.visa_type === 'In') {\r\n                                                            VisaCost = parseFloat(charges?.one_year_inside) + parseFloat(charges?.one_year_renewal);\r\n                                                        } else if (charges?.visa_tenure === '1 year' && charges?.visa_type === 'Out') {\r\n                                                            VisaCost = parseFloat(charges?.one_year_outside) + parseFloat(charges?.one_year_renewal);\r\n                                                        } else if (charges?.visa_tenure === '2 year' && charges?.visa_type === 'In') {\r\n                                                            VisaCost = parseFloat(charges?.two_year_inside) + parseFloat(charges?.two_year_renewal);\r\n                                                        } else if (charges?.visa_tenure === '2 year' && charges?.visa_type === 'Out') {\r\n                                                            VisaCost = parseFloat(charges?.two_year_outside) + parseFloat(charges?.two_year_renewal);\r\n                                                        } else {\r\n                                                            // Handle other cases or set a default value if needed\r\n                                                            VisaCost = 0;\r\n                                                        }\r\n                                                        let cost = parseFloat(item?.visa_cost) + parseFloat(charges.typing_fee)\r\n                                                        let profit = parseFloat(item?.visa_charges) - parseFloat(cost)\r\n                                                        let agentFee = parseFloat(profit) * parseFloat(item?.customer?.agent_commission_visa) / 100\r\n                                                        let netMabde = parseFloat(profit) - parseFloat(agentFee)\r\n                                                        return (\r\n                                                            <Row key={index} sx={{ border: '1px solid #EEEEEE !important' }}>\r\n                                                                {Object.keys(visibleColumns).map((column) => {\r\n                                                                    switch (column) {\r\n                                                                        case 'Client':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left', paddingLeft: '0px !important' }} className=\"pdf-table2\">\r\n                                                                                    {item?.customer?.name}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Request ID':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_id + \"_\" + item?.serial_id}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Request Date':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {moment(item?.visa_request?.request_date).format('MM-DD-YYYY')}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Employee ID':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.employee_id}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Name':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.name}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Designation':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_designation}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Nationality':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.nationality?.name}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Passport No.':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.passport_number}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Basic Salary (AED)':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.salary_basic}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Allowance (AED)':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.salary_allowance}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Total Salary (AED)':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.salary_total}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Apply Visa':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_type}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Status Date':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.change_status_date ? moment(item?.change_status_date).format('MM-DD-YYYY') : '-'}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Contact No':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.phone}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Visa Payment':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_charges}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n                                                                        case 'Security Cheque':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    -\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n                                                                        case 'Documents':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-hide pdf-table2\">\r\n                                                                                    <Box component={'img'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                                        const processedDocuments = item?.documents?.map((doc) => ({\r\n                                                                                            ...doc,\r\n                                                                                            paths: doc.path ? doc.path.split(\",\") : [],\r\n                                                                                        })) || [];\r\n                                                                                        console.log(processedDocuments);\r\n                                                                                        setDocs(processedDocuments);\r\n                                                                                        setOpen(true);\r\n                                                                                    }} src={Images.docIcon} width={'35px'} />\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Camp Location':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.camp_location}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n                                                                        case 'Visa Fee As per Agreement':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_charges}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Visa Cost':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {item?.visa_cost}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'PRO Typing Fee':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {charges?.typing_fee}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n                                                                        case 'Mabde':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {isNaN(profit.toFixed(2)) ? '-' : profit.toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Agent Fee':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {isNaN(agentFee.toFixed(2)) ? '-' : agentFee.toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Net Profit MABDE':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {isNaN(netMabde.toFixed(2)) ? '-' : netMabde.toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n\r\n\r\n                                                                        case 'Monthly Charges':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {parseFloat(item?.salary_total) > 2000 ? parseFloat(item?.customer?.monthly_visa_service_above).toFixed(2) : parseFloat(item?.customer?.monthly_visa_service_below).toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Agent':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {agentCalc}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Fahad':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {isNaN((netMabde * 0.25).toFixed(2)) ? '-' : (netMabde * 0.25).toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n\r\n                                                                        case 'Sultan':\r\n                                                                            return visibleColumns[column] ? (\r\n                                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table2\">\r\n                                                                                    {isNaN((netMabde * 0.25).toFixed(2)) ? '-' : (netMabde * 0.25).toFixed(2)}\r\n                                                                                </Cell>\r\n                                                                            ) : null;\r\n                                                                            \r\n\r\n                                                                        default:\r\n                                                                            return null;\r\n                                                                    }\r\n                                                                })}\r\n                                                            </Row>\r\n                                                        )\r\n                                                    })}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getVisaSales(1, size.target.value)}\r\n                                        tableCount={visas?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getVisaSales(page, \"\")}\r\n                                    />\r\n\r\n                                </Fragment>\r\n                            )\r\n                        )}\r\n\r\n\r\n                        {loader && <CircleLoading />}\r\n\r\n\r\n                    </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default MasterReport;"
        }
    ]
}