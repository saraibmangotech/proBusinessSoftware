{
    "sourceFile": "src/pages/Dashboard/Reports/MonthlyBillingRevenue.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821401,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  tableCellClasses,\r\n  IconButton,\r\n  CircularProgress,\r\n  Chip,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n  Button,\r\n  FormControlLabel,\r\n} from \"@mui/material\";\r\nimport {\r\n  AllocateIcon,\r\n  CheckIcon,\r\n  EyeIcon,\r\n  FontFamily,\r\n  Images,\r\n  MessageIcon,\r\n  PendingIcon,\r\n  RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n  CleanTypes,\r\n  Debounce,\r\n  encryptData,\r\n  formatPermissionData,\r\n  getFileSize,\r\n  handleDownload,\r\n  handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport billingservices from \"services/Visa\";\r\nimport { CloudUpload } from \"@mui/icons-material\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport { BoxTypes } from \"devextreme-react/cjs/box\";\r\nimport { mt } from \"date-fns/locale\";\r\nimport InvoiceServices from \"services/Invoicing\";\r\nimport SystemServices from \"services/System\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n    border: \"1px solid #EEEEEE\",\r\n    padding: \"15px\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n    color: \"#434343\",\r\n    paddingRight: \"50px\",\r\n    background: \"transparent\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n\r\n    textWrap: \"nowrap\",\r\n    padding: \"5px \",\r\n    paddingLeft: \"15px \",\r\n    \".MuiBox-root\": {\r\n      display: \"flex\",\r\n      gap: \"6px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      \".MuiBox-root\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    svg: {\r\n      width: \"auto\",\r\n      height: \"24px\",\r\n    },\r\n    \".MuiTypography-root\": {\r\n      textTransform: \"capitalize\",\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: \"nowrap\",\r\n    },\r\n    \".MuiButtonBase-root\": {\r\n      padding: \"8px\",\r\n      width: \"28px\",\r\n      height: \"28px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: \"flex\",\r\n    height: 100,\r\n    \"& svg\": {\r\n      width: \"40px !important\",\r\n      height: \"40px !important\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction MonthlyBillingRevenue() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    getValues: getValues2,\r\n    formState: { errors: errors2 },\r\n  } = useForm();\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n  const [slipLink, setSlipLink] = useState(\"\");\r\n  const [csvLoading, setCsvLoading] = useState(false);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [comparisonCsvData, setComparisonCsvData] = useState([]);\r\n  const csvLink = useRef();\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [statusDialog, setStatusDialog] = useState(false);\r\n  const [paymentDialog, setPaymentDialog] = useState(false);\r\n  const [status, setStatus] = useState(null);\r\n  const [payment, setPayment] = useState(null);\r\n  const [selectedVisa, setSelectedVisa] = useState();\r\n  const [charges, setCharges] = useState();\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const [pdfDialog, setPdfDialog] = useState(false);\r\n\r\n  const tableHead = [\r\n    { name: \"Client\", key: \"created_at\" },\r\n    { name: \"Request ID\", key: \"name\" },\r\n    { name: \"Request Date\", key: \"commission_visa\" },\r\n    { name: \"Employee ID\", key: \"commission_monthly\" },\r\n    { name: \"Name\", key: \"commission_monthly\" },\r\n    { name: \"Designation\", key: \"commission_monthly\" },\r\n    { name: \"Nationality\", key: \"commission_monthly\" },\r\n    { name: \"Passport No.\", key: \"commission_monthly\" },\r\n    { name: \"Basic Salary (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Allowance (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Total Salary (AED)\", key: \"commission_monthly\" },\r\n    { name: \"Apply Visa \", key: \"commission_monthly\" },\r\n    { name: \"Status Date\", key: \"commission_monthly\" },\r\n    { name: \"Charges Starting Date\", key: \"commission_monthly\" },\r\n    { name: \"Monthly Charges\", key: \"commission_monthly\" },\r\n    { name: \"Agent\", key: \"commission_monthly\" },\r\n    { name: \"Net Profit\", key: \"commission_monthly\" },\r\n    { name: \"Fahad\", key: \"commission_monthly\" },\r\n    { name: \"Sultan\", key: \"commission_monthly\" },\r\n  ];\r\n  const [visibleColumns, setVisibleColumns] = useState({\r\n    Client: true,\r\n    \"Request ID\": true,\r\n    \"Request Date\": true,\r\n    \"Employee ID\": true,\r\n    Name: true,\r\n    Designation: true,\r\n    Nationality: true,\r\n    \"Passport No.\": true,\r\n    \"Basic Salary (AED)\": true,\r\n    \"Allowance (AED)\": true,\r\n    \"Total Salary (AED)\": true,\r\n    \"Apply Visa\": true,\r\n    \"Status Date\": true,\r\n    \"Charges Starting Date\": true,\r\n    \"Monthly Charges\": true,\r\n    Agent: true,\r\n    \"Net Profit\": true,\r\n    Fahad: true,\r\n    Sultan: true,\r\n  });\r\n\r\n  // Function to toggle column visibility\r\n  const toggleColumn = (columnKey) => {\r\n    setVisibleColumns((prevState) => ({\r\n      ...prevState,\r\n      [columnKey]: !prevState[columnKey],\r\n    }));\r\n  };\r\n\r\n  const allowFilesType = [\"application/pdf\"];\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [sort, setSort] = useState(\"asc\");\r\n\r\n  // *For Customer Queue\r\n  const [billings, setBillings] = useState([]);\r\n\r\n  // *For setPermissions\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [itemAmount, setItemAmount] = useState();\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Upload Document\r\n  const handleUploadDocument = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const file = e.target.files[0];\r\n      let arr = [\r\n        {\r\n          name: file?.name,\r\n          file: \"\",\r\n          type: file?.type.split(\"/\")[1],\r\n          size: getFileSize(file.size),\r\n          isUpload: false,\r\n        },\r\n      ];\r\n      if (allowFilesType.includes(file.type)) {\r\n        handleUpload(file, arr);\r\n        const path = await handleUpload(file, arr);\r\n        console.log(\"Uploaded file path:\", path);\r\n        setSlipLink(path);\r\n        console.log(path, \"pathpathpath\");\r\n        return path;\r\n      } else {\r\n        ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const handleRadioChange = (item) => {\r\n    setSelectedItem(item);\r\n  };\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n      console.log(file);\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n          console.log(getFileSize(uploadedBytes));\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n        setSlipDetail(docs);\r\n        console.log(data, \"asddasasd\");\r\n        return data?.data?.path;\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  // *For Get Customer Queue\r\n  const getMonthlyBillings = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage;\r\n      const Limit = limit ? limit : pageLimit;\r\n      const Filter = filter ? { ...filters, ...filter } : null;\r\n      setCurrentPage(Page);\r\n      setPageLimit(Limit);\r\n      setFilters(Filter);\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n      };\r\n      params = { ...params, ...Filter };\r\n\r\n      const { data } = await InvoiceServices.getMonthlyBillings(params);\r\n      setBillings(data?.rows);\r\n      setTotalCount(data?.count);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const downloadExcel = async () => {\r\n    console.log(\"Downloading Excel...\");\r\n    setCsvLoading(true);\r\n\r\n    try {\r\n      const allDataLimit = 9999;\r\n      const allDataPage = 1;\r\n\r\n      const params = {\r\n        page: allDataPage,\r\n        limit: allDataLimit,\r\n        ...filters,\r\n      };\r\n\r\n      const { data } = await InvoiceServices.getMonthlyBillings(params);\r\n\r\n      const csvHeaders = [\r\n        { label: \"Sr No\", key: \"sr_no\" },\r\n        { label: \"Client\", key: \"created_at\" },\r\n        { label: \"Request ID\", key: \"name\" },\r\n        { label: \"Request Date\", key: \"commission_visa\" },\r\n        { label: \"Employee ID\", key: \"commission_monthly\" },\r\n        { label: \"Name\", key: \"commission_monthly\" },\r\n        { label: \"Designation\", key: \"commission_monthly\" },\r\n        { label: \"Nationality\", key: \"commission_monthly\" },\r\n        { label: \"Passport No.\", key: \"commission_monthly\" },\r\n        { label: \"Basic Salary (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Allowance (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Total Salary (AED)\", key: \"commission_monthly\" },\r\n        { label: \"Apply Visa \", key: \"commission_monthly\" },\r\n        { label: \"Status Date\", key: \"commission_monthly\" },\r\n        { label: \"Charges Starting Date\", key: \"commission_monthly\" },\r\n        { label: \"Monthly Charges\", key: \"commission_monthly\" },\r\n        { label: \"Agent\", key: \"commission_monthly\" },\r\n        { label: \"Net Profit\", key: \"commission_monthly\" },\r\n        { label: \"Fahad\", key: \"commission_monthly\" },\r\n        { label: \"Sultan\", key: \"commission_monthly\" },\r\n      ];\r\n\r\n      const csvData = data?.rows?.map((item, index) => {\r\n        let profitCalc =\r\n          parseFloat(\r\n            parseFloat(item?.salary_total) > 2000\r\n              ? item?.customer?.monthly_visa_service_above\r\n              : item?.customer?.monthly_visa_service_below || 0\r\n          ) -\r\n          parseFloat(\r\n            parseFloat(item?.salary_total) > 2000\r\n              ? charges?.monthly_visa_service_above\r\n              : charges?.monthly_visa_service_below || 0\r\n          );\r\n        console.log(profitCalc, \"profit\");\r\n        let multiplier =\r\n          parseFloat(item?.customer?.agent_commission_monthly || 0) / 100;\r\n        let agentCalc = profitCalc * multiplier;\r\n        let mabdeProfit = profitCalc - agentCalc;\r\n\r\n        let foundStatus = item?.statuses.find(\r\n          (item, index) =>\r\n            item?.status == \"Entry permit\" || item?.status == \"Change Status\"\r\n        );\r\n        let statusDate = foundStatus?.date\r\n          ? foundStatus?.date\r\n          : foundStatus?.created_at;\r\n        let VisaCost = 0;\r\n        if (item?.visa_tenure?.includes(\"1\") && item?.visa_type === \"In\") {\r\n          VisaCost =\r\n            parseFloat(charges?.one_year_inside) +\r\n            parseFloat(charges?.one_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure?.includes(\"1\") &&\r\n          item?.visa_type === \"Out\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.one_year_outside) +\r\n            parseFloat(charges?.one_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure?.includes(\"2\") &&\r\n          item?.visa_type === \"In\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.two_year_inside) +\r\n            parseFloat(charges?.two_year_renewal);\r\n        } else if (\r\n          item?.visa_tenure?.includes(\"2\") &&\r\n          item?.visa_type === \"Out\"\r\n        ) {\r\n          VisaCost =\r\n            parseFloat(charges?.two_year_outside) +\r\n            parseFloat(charges?.two_year_renewal);\r\n        } else {\r\n          // Handle other cases or set a default value if needed\r\n          VisaCost = 0;\r\n        }\r\n\r\n        let additionalDays = 0;\r\n        const customer = item?.customer;\r\n\r\n        // Determine additional days based on due_date_policy\r\n        if (customer.due_date_policy?.includes(\"7\")) {\r\n          additionalDays = 7;\r\n        } else if (customer.due_date_policy?.includes(\"15\")) {\r\n          additionalDays = 15;\r\n        } else if (customer.due_date_policy?.includes(\"20\")) {\r\n          additionalDays = 20;\r\n        } else if (customer.due_date_policy?.includes(\"25\")) {\r\n          additionalDays = 25;\r\n        } else if (customer.due_date_policy?.includes(\"30\")) {\r\n          additionalDays = 30;\r\n        } else if (customer.due_date_policy?.includes(\"60\")) {\r\n          additionalDays = 60;\r\n        } else if (customer.due_date_policy?.includes(\"90\")) {\r\n          additionalDays = 90;\r\n        }\r\n\r\n        return {\r\n          sr_no: index + 1,\r\n          client: item?.customer?.name || \"-\",\r\n          request_id: `${item?.visa_id || \"\"}_${item?.serial_id || \"\"}`,\r\n          request_date: item?.visa_request?.request_date\r\n            ? moment(item?.visa_request?.request_date).format(\"MM-DD-YYYY\")\r\n            : \"-\",\r\n          employee_id: item?.employee_id || \"-\",\r\n          name: item?.name || \"-\",\r\n          designation: item?.visa_designation || \"-\",\r\n          nationality: item?.nationality?.name || \"-\",\r\n          passport_no: item?.passport_number || \"-\",\r\n          basic_salary: item?.salary_basic || \"-\",\r\n          allowance: item?.salary_allowance || \"-\",\r\n          total_salary: item?.salary_total || \"-\",\r\n          apply_visa: item?.visa_type || \"-\",\r\n          status_date: item?.change_status_date\r\n            ? moment(item?.change_status_date).format(\"MM-DD-YYYY\")\r\n            : \"-\",\r\n          charges_starting_date: item?.change_status_date\r\n            ? moment(item?.change_status_date)\r\n                .add(additionalDays, \"days\")\r\n                .format(\"MM-DD-YYYY\")\r\n            : \"-\",\r\n          monthly_charges:\r\n            parseFloat(item?.salary_total) > 2000\r\n              ? parseFloat(item?.customer?.monthly_visa_service_above).toFixed(\r\n                  2\r\n                )\r\n              : parseFloat(item?.customer?.monthly_visa_service_below).toFixed(\r\n                  2\r\n                ),\r\n          agent: parseFloat(agentCalc).toFixed(2),\r\n          net_profit: parseFloat(mabdeProfit).toFixed(2),\r\n          fahad: parseFloat(mabdeProfit * 0.25).toFixed(2),\r\n          sultan: parseFloat(mabdeProfit * 0.25).toFixed(2),\r\n        };\r\n      });\r\n\r\n      setCsvData([\r\n        csvHeaders.map((header) => header.label),\r\n        ...csvData.map((row) => Object.values(row)),\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error generating CSV data: \", error);\r\n      ErrorToaster(\"Failed to generate CSV data: \" + error.message);\r\n    } finally {\r\n      setCsvLoading(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (csvData.length > 0) {\r\n      csvLink?.current.link.click();\r\n    }\r\n  }, [csvData, comparisonCsvData]);\r\n\r\n  // const downloadExcel = () => {\r\n  //     // Define headers and data separately\r\n  //     const headers = tableHead.filter((item) => item !== \"Status\" && item !== \"Actions\");\r\n  //     const data = [];\r\n  //     // Extract values from objects and create an array for each row\r\n  //     const rows = data.map((item, index) => [\r\n  //         item?.account_code ?? '-',\r\n  //         item?.name ?? '-',\r\n  //         item?.unit ?? '-',\r\n  //         item?.primary_account_id ? 'Sub Account' : 'Primary',\r\n  //         item?.cat?.name ?? '-',\r\n  //         item?.sub_cat?.name ?? '-'\r\n  //     ]);\r\n\r\n  //     // Create a workbook with a worksheet\r\n  //     const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);\r\n  //     const wb = XLSX.utils.book_new();\r\n  //     XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n  //     // Convert the workbook to an array buffer\r\n  //     const buf = XLSX.write(wb, {\r\n  //         bookType: \"xlsx\",\r\n  //         type: \"array\",\r\n  //         mimeType:\r\n  //             \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  //     });\r\n\r\n  //     // Save the file using FileSaver.js\r\n  //     saveAs(new Blob([buf]), \"data.xlsx\");\r\n  // };\r\n\r\n  const getData = async (formData) => {\r\n    setLoading(true);\r\n    console.log(formData);\r\n    try {\r\n      let params = {\r\n        charges_type: \"rate\",\r\n      };\r\n\r\n      const { data } = await SystemServices.getRates(params);\r\n\r\n      let details = data?.charges;\r\n      setCharges(details);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues(\"search\"),\r\n    };\r\n    Debounce(() => getMonthlyBillings(1, \"\", data));\r\n  };\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort,\r\n    };\r\n    Debounce(() => getMonthlyBillings(1, \"\", data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMonthlyBillings();\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <SimpleDialog\r\n        open={pdfDialog}\r\n        onClose={() => {\r\n          setPdfDialog(false);\r\n        }}\r\n        title={\"Download Pdf\"}\r\n      >\r\n        <Box component=\"form\">\r\n          <p style={{ fontWeight: \"bold\" }}>Select Columns For PDF</p>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <div>\r\n                {Object.keys(visibleColumns).map((column) => (\r\n                  <FormControlLabel\r\n                    key={column}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={visibleColumns[column]}\r\n                        onChange={() => toggleColumn(column)}\r\n                        name={column}\r\n                      />\r\n                    }\r\n                    label={column}\r\n                  />\r\n                ))}\r\n              </div>\r\n              {console.log(visibleColumns)}\r\n              <p>\r\n                Selected Coloumns :{\" \"}\r\n                {Object.values(visibleColumns).filter(Boolean).length}\r\n              </p>\r\n              {Object.values(visibleColumns).filter(Boolean).length > 13 && (\r\n                <p style={{ color: \"blue\" }}>\r\n                  Select 13 columns to get best result\r\n                </p>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  disabled={visibleColumns.length < 14 ? true : false}\r\n                  onClick={() => handleExportWithComponent(contentRef)}\r\n                  title=\"Yes,Confirm\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => {\r\n                    setPdfDialog(false);\r\n                  }}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n        <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Monthly Billing Revenue\r\n        </Typography>\r\n\r\n        <Box sx={{ display: \"flex\", gap: \"10px\" }}>\r\n          {billings.length > 0 && (\r\n            <>\r\n              <PrimaryButton\r\n                title=\"Download PDF\"\r\n                type=\"button\"\r\n                style={{ backgroundColor: Colors.bluishCyan }}\r\n                onClick={() => setPdfDialog(true)}\r\n              />\r\n              <CSVLink\r\n                ref={csvLink}\r\n                data={csvData}\r\n                filename={`Monthly_Billing_Revenue${moment().format(\r\n                  \"DD-MMM-YYYY_HHmmss\"\r\n                )}.csv`}\r\n                target=\"_blank\"\r\n              ></CSVLink>\r\n              <PrimaryButton\r\n                title=\"Download Excel\"\r\n                type=\"button\"\r\n                style={{ backgroundColor: Colors.bluishCyan }}\r\n                onClick={() => {\r\n                  downloadExcel();\r\n                }}\r\n                loading={csvLoading}\r\n              />\r\n            </>\r\n          )}\r\n          {/* <PrimaryButton\r\n                        title={\"Download Excel\"}\r\n                        onClick={() => downloadExcel()}\r\n                    /> */}\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <LabelCustomInput\r\n              type={\"text\"}\r\n              bgcolor={\"#FAFAFA\"}\r\n              color={Colors.primary}\r\n              border={\"3px solid #FAFAFA\"}\r\n              StartLabel={\"Search\"}\r\n              placeholder={\"Search\"}\r\n              register={register(\"search\")}\r\n            />\r\n          </Grid>\r\n          {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n          <Grid\r\n            item\r\n            xs={6}\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            gap={2}\r\n          >\r\n            <PrimaryButton\r\n              bgcolor={\"#0076bf\"}\r\n              textcolor={Colors.white}\r\n              // border={`1px solid ${Colors.primary}`}\r\n              title=\"Reset\"\r\n              onClick={() => {\r\n                getMonthlyBillings(1, \"\", null);\r\n                setValue(\"search\", \"\");\r\n              }}\r\n              loading={loading}\r\n            />\r\n            <PrimaryButton\r\n             bgcolor={'#bd9b4a'}\r\n              title=\"Search\"\r\n              onClick={() => handleFilter()}\r\n              loading={loading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item md={11}>\r\n          {billings && (\r\n            <Box>\r\n              <Grid container mb={2}></Grid>\r\n\r\n              {billings && (\r\n                <Fragment>\r\n                  <PDFExport\r\n                    ref={contentRef}\r\n                    landscape={true}\r\n                    paperSize=\"A4\"\r\n                    margin={5}\r\n                    fileName=\"Data\"\r\n                    pageTemplate={({ pageNumber, totalPages }) => (\r\n                      <>\r\n                        {/* Header */}\r\n                        <Box\r\n                          style={{\r\n                            position: \"absolute\",\r\n                            top: \"20px\",\r\n                            left: \"0\",\r\n                            right: \"0\",\r\n                            textAlign: \"center\",\r\n\r\n                            paddingLeft: \"10px\",\r\n                          }}\r\n                        >\r\n                          <Box\r\n                            style={{\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <Box>\r\n                              <img\r\n                                style={{ width: \"300px\", height: \"20px\" }}\r\n                                src={Images.pdfLogo}\r\n                              />\r\n                              <Box\r\n                                style={{\r\n                                  color: \"#155368\",\r\n                                  flexDirection: \"column\",\r\n                                }}\r\n                              >\r\n                                <Typography\r\n                                  style={{\r\n                                    textAlign: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    MABDE TRADING L.L.C\r\n                                  </span>\r\n                                </Typography>\r\n                                <Typography\r\n                                  style={{\r\n                                    color: \"#155368\",\r\n                                    fontWeight: \"bold\",\r\n                                    textAlign: \"center\",\r\n                                    marginLeft: \"30px\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    TEL: 04-3400000, FAX: 04-3488448\r\n                                  </span>\r\n                                </Typography>\r\n                                <Typography\r\n                                  style={{\r\n                                    color: \"#155368\",\r\n                                    fontWeight: \"bold\",\r\n\r\n                                    textAlign: \"center\",\r\n                                  }}\r\n                                >\r\n                                  <span style={{ display: \"block\" }}>\r\n                                    P.O.BOX 81, DUBAI, UAE\r\n                                  </span>\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n                          </Box>\r\n\r\n                          <Typography\r\n                            className=\"pdf-myfont\"\r\n                            sx={{\r\n                              fontSize: \"24px\",\r\n                              fontWeight: \"bold\",\r\n                              textAlign: \"left\",\r\n                              fontFamily: \"Arial, Helvetica, sans-serif\",\r\n                            }}\r\n                          >\r\n                            Monthly Billing Revenue\r\n                          </Typography>\r\n\r\n                          {/* <Box\r\n            className=\"pdf-center\"\r\n            style={{ textAlign: \"center\", margin: \"0 auto !important\" }}\r\n            mb={4}\r\n          >\r\n            <center>\r\n              <Typography\r\n                className=\"pdf-center\"\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  fontWeight: \"bold\",\r\n                  letterSpacing: \"11px\",\r\n                  textAlign: \"center\",\r\n                  textDecoration: \"underline\",\r\n                  marginLeft: \"10px !important\",\r\n                }}\r\n              >\r\n                TAX INVOICE\r\n              </Typography>\r\n            </center>\r\n          </Box> */}\r\n                        </Box>\r\n\r\n                        {/* Footer */}\r\n                        {/* <Box style={{\r\n                                                    position: 'absolute',\r\n                                                    bottom: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    height: '50px',\r\n                                                    display: 'flex',\r\n                                                    justifyContent: 'center',\r\n                                                    alignItems: 'center'\r\n                                                }}>\r\n                                                    <img src={Images.invoiceHeader} style={{ width: '100%' }} alt=\"Footer\" />\r\n                                                </Box> */}\r\n                      </>\r\n                    )}\r\n                  >\r\n                    {/* Main content */}\r\n                    <TableContainer\r\n                      component={Paper}\r\n                      className=\"main-table\"\r\n                      sx={{\r\n                        maxHeight: \"100%\",\r\n                        mt: 5,\r\n                        backgroundColor: \"transparent\",\r\n                        boxShadow: \"none !important\",\r\n                        borderRadius: \"0px !important\",\r\n                        paddingTop: \"60px\", // Adjust for header height\r\n                        paddingBottom: \"60px\", // Adjust for footer height\r\n                      }}\r\n                    >\r\n                      <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                        <TableHead>\r\n                          <Row>\r\n                            {visibleColumns[\"Client\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Client\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Request ID\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Request ID\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Request Date\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Request Date\r\n                                <>\r\n                                  &nbsp;\r\n                                  <span\r\n                                    style={{\r\n                                      height: \"20px\",\r\n                                      cursor: \"pointer\",\r\n                                    }}\r\n                                  >\r\n                                    <Box\r\n                                      component={\"img\"}\r\n                                      onClick={() => {\r\n                                        setSort(\r\n                                          sort === \"asc\" ? \"desc\" : \"asc\"\r\n                                        );\r\n                                        handleSort(\"created_at\");\r\n                                      }}\r\n                                      src={Images.sortIcon}\r\n                                      width={\"18px\"}\r\n                                    />\r\n                                  </span>\r\n                                </>\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Employee ID\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Employee ID\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Name\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Name\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Designation\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Designation\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Nationality\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Nationality\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Passport No.\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Passport No.\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Basic Salary (AED)\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Basic Salary (AED)\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Allowance (AED)\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Allowance (AED)\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Total Salary (AED)\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Total Salary (AED)\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Apply Visa\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Apply Visa\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Status Date\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Status Date\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Charges Starting Date\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Charges Starting Date\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Monthly Charges\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Monthly Charges\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Agent\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Agent\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Net Profit\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Net Profit\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Fahad\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Fahad\r\n                              </Cell>\r\n                            )}\r\n                            {visibleColumns[\"Sultan\"] && (\r\n                              <Cell className=\"pdf-table pdf-table-head2\">\r\n                                Sultan\r\n                              </Cell>\r\n                            )}\r\n                          </Row>\r\n                        </TableHead>\r\n                        {console.log(visibleColumns[\"Client\"], \"test\")}\r\n                        <TableBody>\r\n                          {billings.map((item, index) => {\r\n                            let profitCalc =\r\n                              parseFloat(\r\n                                parseFloat(item?.salary_total) > 2000\r\n                                  ? item?.customer?.monthly_visa_service_above\r\n                                  : item?.customer\r\n                                      ?.monthly_visa_service_below || 0\r\n                              ) -\r\n                              parseFloat(\r\n                                parseFloat(item?.salary_total) > 2000\r\n                                  ? charges?.monthly_visa_service_above\r\n                                  : charges?.monthly_visa_service_below || 0\r\n                              );\r\n                            console.log(profitCalc, \"profit\");\r\n                            let multiplier =\r\n                              parseFloat(\r\n                                item?.customer?.agent_commission_monthly || 0\r\n                              ) / 100;\r\n                            let agentCalc = profitCalc * multiplier;\r\n                            let mabdeProfit = profitCalc - agentCalc;\r\n\r\n                            let foundStatus = item?.statuses.find(\r\n                              (item, index) =>\r\n                                item?.status == \"Entry permit\" ||\r\n                                item?.status == \"Change Status\"\r\n                            );\r\n                            let statusDate = foundStatus?.date\r\n                              ? foundStatus?.date\r\n                              : foundStatus?.created_at;\r\n                            let VisaCost = 0;\r\n                            if (\r\n                              item?.visa_tenure?.includes(\"1\") &&\r\n                              item?.visa_type === \"In\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.one_year_inside) +\r\n                                parseFloat(charges?.one_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure?.includes(\"1\") &&\r\n                              item?.visa_type === \"Out\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.one_year_outside) +\r\n                                parseFloat(charges?.one_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure?.includes(\"2\") &&\r\n                              item?.visa_type === \"In\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.two_year_inside) +\r\n                                parseFloat(charges?.two_year_renewal);\r\n                            } else if (\r\n                              item?.visa_tenure?.includes(\"2\") &&\r\n                              item?.visa_type === \"Out\"\r\n                            ) {\r\n                              VisaCost =\r\n                                parseFloat(charges?.two_year_outside) +\r\n                                parseFloat(charges?.two_year_renewal);\r\n                            } else {\r\n                              // Handle other cases or set a default value if needed\r\n                              VisaCost = 0;\r\n                            }\r\n\r\n                            let additionalDays = 0;\r\n                            const customer = item?.customer;\r\n\r\n                            // Determine additional days based on due_date_policy\r\n                            if (customer.due_date_policy?.includes(\"7\")) {\r\n                              additionalDays = 7;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"15\")\r\n                            ) {\r\n                              additionalDays = 15;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"20\")\r\n                            ) {\r\n                              additionalDays = 20;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"25\")\r\n                            ) {\r\n                              additionalDays = 25;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"30\")\r\n                            ) {\r\n                              additionalDays = 30;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"60\")\r\n                            ) {\r\n                              additionalDays = 60;\r\n                            } else if (\r\n                              customer.due_date_policy?.includes(\"90\")\r\n                            ) {\r\n                              additionalDays = 90;\r\n                            }\r\n\r\n                            return (\r\n                              <Row\r\n                                key={index}\r\n                                sx={{ border: \"1px solid #EEEEEE !important\" }}\r\n                              >\r\n                                {Object.keys(visibleColumns).map((column) => {\r\n                                  switch (column) {\r\n                                    case \"Client\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.customer?.name}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Request ID\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.visa_id +\r\n                                            \"_\" +\r\n                                            item?.serial_id}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Request Date\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {moment(\r\n                                            item?.visa_request?.request_date\r\n                                          ).format(\"MM-DD-YYYY\")}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Employee ID\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.employee_id}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Name\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.name}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Designation\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.visa_designation}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Nationality\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.nationality?.name}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Passport No.\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.passport_number}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Basic Salary (AED)\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.salary_basic}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Allowance (AED)\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.salary_allowance}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Total Salary (AED)\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.salary_total}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Apply Visa\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.visa_type}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Status Date\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.change_status_date\r\n                                            ? moment(\r\n                                                item?.change_status_date\r\n                                              ).format(\"MM-DD-YYYY\")\r\n                                            : \"-\"}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Charges Starting Date\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {item?.change_status_date\r\n                                            ? moment(item?.change_status_date)\r\n                                                .add(additionalDays, \"days\")\r\n                                                .format(\"MM-DD-YYYY\")\r\n                                            : \"-\"}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Monthly Charges\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {parseFloat(item?.salary_total) > 2000\r\n                                            ? parseFloat(\r\n                                                item?.customer\r\n                                                  ?.monthly_visa_service_above\r\n                                              ).toFixed(2)\r\n                                            : parseFloat(\r\n                                                item?.customer\r\n                                                  ?.monthly_visa_service_below\r\n                                              ).toFixed(2)}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Agent\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {parseFloat(agentCalc).toFixed(2)}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Net Profit\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {parseFloat(mabdeProfit).toFixed(2)}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Fahad\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {parseFloat(\r\n                                            mabdeProfit * 0.25\r\n                                          ).toFixed(2)}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    case \"Sultan\":\r\n                                      return visibleColumns[column] ? (\r\n                                        <Cell className=\"pdf-table2\">\r\n                                          {parseFloat(\r\n                                            mabdeProfit * 0.25\r\n                                          ).toFixed(2)}\r\n                                        </Cell>\r\n                                      ) : null;\r\n\r\n                                    default:\r\n                                      return null;\r\n                                  }\r\n                                })}\r\n                              </Row>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </PDFExport>\r\n\r\n                  {/* ========== Pagination ========== */}\r\n                  <Pagination\r\n                    currentPage={currentPage}\r\n                    pageSize={pageLimit}\r\n                    onPageSizeChange={(size) =>\r\n                      getMonthlyBillings(1, size.target.value)\r\n                    }\r\n                    tableCount={billings?.length}\r\n                    totalCount={totalCount}\r\n                    onPageChange={(page) => getMonthlyBillings(page, \"\")}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n\r\n              {loader && <CircleLoading />}\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MonthlyBillingRevenue;\r\n"
        }
    ]
}