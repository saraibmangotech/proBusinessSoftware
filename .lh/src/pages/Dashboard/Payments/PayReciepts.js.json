{
    "sourceFile": "src/pages/Dashboard/Payments/PayReciepts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1744671359469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744671371409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n         }\r\n     }\r\n })\r\n \r\n-function AldeedList() {\r\n+function PayReceipts() {\r\n \r\n     const navigate = useNavigate();\r\n     const classes = useStyles();\r\n     const dispatch = useDispatch();\r\n@@ -417,5 +417,5 @@\n         </Box>\r\n     );\r\n }\r\n \r\n-export default AldeedList;\n\\ No newline at end of file\n+export default PayReceipts;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744736745621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n         try {\r\n \r\n             let params = {\r\n \r\n-                is_presale: true\r\n+                is_paid: true\r\n \r\n \r\n             }\r\n \r\n@@ -395,9 +395,9 @@\n             </SimpleDialog>\r\n \r\n \r\n             <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Al-Ded List</Typography>\r\n+                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Al-ADHEED List</Typography>\r\n                 {true && <PrimaryButton\r\n                     bgcolor={'#bd9b4a'}\r\n                     title=\"Create\"\r\n                     onClick={() => { navigate('/create-aldeed'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n"
                },
                {
                    "date": 1744736795420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,9 +395,9 @@\n             </SimpleDialog>\r\n \r\n \r\n             <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Al-ADHEED List</Typography>\r\n+                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Paid List</Typography>\r\n                 {true && <PrimaryButton\r\n                     bgcolor={'#bd9b4a'}\r\n                     title=\"Create\"\r\n                     onClick={() => { navigate('/create-aldeed'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n"
                },
                {
                    "date": 1744736802058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,9 +395,9 @@\n             </SimpleDialog>\r\n \r\n \r\n             <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Paid List</Typography>\r\n+                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Paid Receipt List</Typography>\r\n                 {true && <PrimaryButton\r\n                     bgcolor={'#bd9b4a'}\r\n                     title=\"Create\"\r\n                     onClick={() => { navigate('/create-aldeed'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n"
                },
                {
                    "date": 1744736873637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n                 <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Paid Receipt List</Typography>\r\n                 {true && <PrimaryButton\r\n                     bgcolor={'#bd9b4a'}\r\n                     title=\"Create\"\r\n-                    onClick={() => { navigate('/create-aldeed'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n+                    onClick={() => { navigate('/create-paid-receipt'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n                     loading={loading}\r\n                 />}\r\n \r\n \r\n"
                },
                {
                    "date": 1744736983788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n             cell: ({ row }) => (\r\n \r\n                 <Box sx={{ display: 'flex', gap: 1 }}>\r\n          \r\n-                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-alded/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+              \r\n                     <Box>\r\n                         {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n \r\n"
                },
                {
                    "date": 1744737318624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n             cell: ({ row }) => (\r\n \r\n                 <Box sx={{ display: 'flex', gap: 1 }}>\r\n          \r\n-              \r\n+                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-paid-receipt/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n                     <Box>\r\n                         {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n \r\n"
                }
            ],
            "date": 1744671359469,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport DataTable from 'components/DataTable';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction AldeedList() {\r\n\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [status, setStatus] = useState(null)\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [selectedData, setSelectedData] = useState(null)\r\n    const [tableLoader, setTableLoader] = useState(false)\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n    } = useForm();\r\n\r\n    const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n    const [data, setData] = useState([])\r\n\r\n\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [sort, setSort] = useState('desc')\r\n\r\n    // *For Get Customer Queue\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        setLoader(true)\r\n\r\n        try {\r\n\r\n            let params = {\r\n\r\n                is_presale: true\r\n\r\n\r\n            }\r\n\r\n            const { data } = await CustomerServices.getPreSales(params)\r\n            setData(data?.rows);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            setLoader(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getCustomerQueue(1, '', data));\r\n    }\r\n\r\n\r\n\r\n    // *For Handle Filter\r\n\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getCustomerQueue(1, '', data));\r\n    }\r\n    const handleDelete = async (item) => {\r\n\r\n\r\n        try {\r\n            let params = {\r\n                id: selectedData?.id,\r\n                \r\n\r\n            }\r\n\r\n\r\n            const { message } = await CustomerServices.DeletePreSale(params)\r\n\r\n            SuccessToaster(message);\r\n            getCustomerQueue()\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                customer_id: selectedData?.id,\r\n                is_active: status?.id,\r\n            };\r\n\r\n            const promise = CustomerServices.CustomerStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                setStatus(null)\r\n                getCustomerQueue();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const columns = [\r\n        {\r\n            header: \"SR No.\",\r\n            accessorKey: \"id\",\r\n\r\n\r\n        },\r\n        {\r\n            header: \"Customer\",\r\n            accessorKey: \"customer_name\",\r\n\r\n\r\n        },\r\n        {\r\n            header: \"Token Number\",\r\n            accessorKey: \"token_number\",\r\n\r\n\r\n        },\r\n        {\r\n            header: \"Total Amount\",\r\n            accessorKey: \"total_amount\",\r\n\r\n\r\n        },\r\n\r\n        {\r\n            header: \"Created By\",\r\n            accessorKey: \"creator\",\r\n            accessorFn: (row) => row?.creator,\r\n            cell: ({ row }) => (\r\n                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n                    {row?.original?.creator?.name}\r\n                </Box>\r\n            ),\r\n\r\n        },\r\n        {\r\n            id: \"created_at\",\r\n            header: \"Created At\",\r\n            // Remove accessorKey and fix accessorFn to use row directly\r\n            accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n            cell: ({ row }) => (\r\n                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n                    {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n                </Box>\r\n            ),\r\n        },\r\n\r\n\r\n        {\r\n            header: \"Actions\",\r\n            cell: ({ row }) => (\r\n\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n         \r\n                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-alded/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n                    <Box>\r\n                        {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n\r\n\r\n                    </Box>\r\n\r\n                </Box>\r\n            ),\r\n        },\r\n\r\n    ]\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getCustomerQueue()\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n\r\n            <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"Are You Sure?\"}\r\n                action={() => {\r\n                    setConfirmationDialog(false);\r\n                    handleDelete()\r\n\r\n                }}\r\n            />\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={\"Change Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Select Status :\"}\r\n                                options={\r\n\r\n                                    [\r\n                                        { id: false, name: \"Disabled\" },\r\n                                        { id: true, name: \"Enabled\" },\r\n\r\n                                    ]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value);\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setStatusDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Al-Ded List</Typography>\r\n                {true && <PrimaryButton\r\n                    bgcolor={'#bd9b4a'}\r\n                    title=\"Create\"\r\n                    onClick={() => { navigate('/create-aldeed'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n                    loading={loading}\r\n                />}\r\n\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n\r\n\r\n                {<DataTable loading={loader} data={data} columns={columns} />}\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AldeedList;"
        }
    ]
}