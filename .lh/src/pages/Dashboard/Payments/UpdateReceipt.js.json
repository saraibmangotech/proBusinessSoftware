{
    "sourceFile": "src/pages/Dashboard/Payments/UpdateReceipt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1744737250301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744737394634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -437,8 +437,32 @@\n       // setLoader(false)\r\n     }\r\n   };\r\n \r\n+     const getData = async () => {\r\n+          try {\r\n+              let params = {\r\n+                  id: id\r\n+              };\r\n+  \r\n+              const { data } = await CustomerServices.getPreSaleDetail(params);\r\n+              console.log(data?.receipt?.sale_receipt_items);\r\n+              setValue1('token', data?.receipt?.token_number)\r\n+              setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n+              setRows(data?.receipt?.sale_receipt_items)\r\n+              setSubTotal(data?.receipt?.total_amount)\r\n+              setDate(new Date(data?.receipt?.invoice_date))\r\n+              setValue1('display_customer', data?.receipt?.customer_name)\r\n+              setValue1('mobile', data?.receipt?.customer_mobile)\r\n+              setValue1('email', data?.receipt?.customer_email)\r\n+              setValue1('ref', data?.receipt?.ref)\r\n+              setValue1('address', data?.receipt?.address)\r\n+          \r\n+          } catch (error) {\r\n+              console.error(\"Error fetching location:\", error);\r\n+          }\r\n+      };\r\n+\r\n   useEffect(() => {\r\n     getBanks();\r\n     getAccounts();\r\n     getTax();\r\n"
                },
                {
                    "date": 1744737414702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n import CustomerServices from \"services/Customer\";\r\n import CustomerService from \"../DashboardPages/CustomerService\";\r\n import { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\n import moment from \"moment\";\r\n-import { Link, useNavigate } from \"react-router-dom\";\r\n+import { Link, useNavigate, useParams } from \"react-router-dom\";\r\n import SystemServices from \"services/System\";\r\n import UploadFileSingle from \"components/UploadFileSingle\";\r\n import { Images } from \"assets\";\r\n import { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n@@ -223,8 +223,9 @@\n   const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n   const [detail, setDetail] = useState(null);\r\n   const [banks, setBanks] = useState([]);\r\n   const [selectedMode, setSelectedMode] = useState(null);\r\n+  const {id}=useParams()\r\n   //documents array\r\n \r\n   const handleNext = () => {\r\n     setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n"
                },
                {
                    "date": 1744737481931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,8 +463,9 @@\n           }\r\n       };\r\n \r\n   useEffect(() => {\r\n+    getData()\r\n     getBanks();\r\n     getAccounts();\r\n     getTax();\r\n     getCategories();\r\n"
                },
                {
                    "date": 1744737586078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,9 +490,9 @@\n                   alignItems: \"flex-end\",\r\n                 }}\r\n               >\r\n                 <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n-                  Pay Receipt\r\n+                 Update Pay Receipt\r\n                 </Typography>\r\n               </Box>\r\n \r\n               <Box sx={{ p: 3 }}>\r\n"
                },
                {
                    "date": 1744737752954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -451,8 +451,9 @@\n               setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n               setRows(data?.receipt?.sale_receipt_items)\r\n               setSubTotal(data?.receipt?.total_amount)\r\n               setDate(new Date(data?.receipt?.invoice_date))\r\n+              setValue1('invoicenumber',data?.receipt?.id)\r\n               setValue1('display_customer', data?.receipt?.customer_name)\r\n               setValue1('mobile', data?.receipt?.customer_mobile)\r\n               setValue1('email', data?.receipt?.customer_email)\r\n               setValue1('ref', data?.receipt?.ref)\r\n"
                },
                {
                    "date": 1744737762726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,8 +452,9 @@\n               setRows(data?.receipt?.sale_receipt_items)\r\n               setSubTotal(data?.receipt?.total_amount)\r\n               setDate(new Date(data?.receipt?.invoice_date))\r\n               setValue1('invoicenumber',data?.receipt?.id)\r\n+              getReceptionDetail(true)\r\n               setValue1('display_customer', data?.receipt?.customer_name)\r\n               setValue1('mobile', data?.receipt?.customer_mobile)\r\n               setValue1('email', data?.receipt?.customer_email)\r\n               setValue1('ref', data?.receipt?.ref)\r\n"
                },
                {
                    "date": 1744739100221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -848,9 +848,9 @@\n                     </TableRow>\r\n                   </TableBody>\r\n                 </Table>\r\n               </TableContainer>\r\n-              {payButton && (\r\n+              {/* {payButton && (\r\n                 <Grid container mt={2} spacing={2}>\r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n@@ -956,9 +956,9 @@\n                       Submit\r\n                     </Button>\r\n                   </Grid>\r\n                 </Grid>\r\n-              )}\r\n+              )} */}\r\n             </Box>\r\n           </>\r\n         }\r\n       </Box>\r\n"
                },
                {
                    "date": 1744739116952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,26 @@\n import React, { useEffect, useRef, useState } from \"react\";\r\n import {\r\n-  Avatar,\r\n-  Box,\r\n-  Checkbox,\r\n-  Container,\r\n-  FormControlLabel,\r\n-  FormLabel,\r\n-  Grid,\r\n-  IconButton,\r\n-  InputLabel,\r\n-  Radio,\r\n-  RadioGroup,\r\n-  Table,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableRow,\r\n-  Typography,\r\n-  TableBody,\r\n-  TableHead,\r\n-  TextField,\r\n-  Paper,\r\n+    Avatar,\r\n+    Box,\r\n+    Checkbox,\r\n+    Container,\r\n+    FormControlLabel,\r\n+    FormLabel,\r\n+    Grid,\r\n+    IconButton,\r\n+    InputLabel,\r\n+    Radio,\r\n+    RadioGroup,\r\n+    Table,\r\n+    TableCell,\r\n+    TableContainer,\r\n+    TableRow,\r\n+    Typography,\r\n+    TableBody,\r\n+    TableHead,\r\n+    TextField,\r\n+    Paper,\r\n } from \"@mui/material\";\r\n import RegisterContainer from \"container/Register\";\r\n import { useTheme } from \"@mui/material/styles\";\r\n import MobileStepper from \"@mui/material/MobileStepper\";\r\n@@ -38,13 +38,13 @@\n import { FormControl } from \"@mui/base\";\r\n import LabelCustomInput from \"components/Input/LabelCustomInput\";\r\n import SelectField from \"components/Select\";\r\n import {\r\n-  CleanTypes,\r\n-  Debounce,\r\n-  Debounce2,\r\n-  getFileSize,\r\n-  handleDownload,\r\n+    CleanTypes,\r\n+    Debounce,\r\n+    Debounce2,\r\n+    getFileSize,\r\n+    handleDownload,\r\n } from \"utils\";\r\n import instance from \"config/axios\";\r\n import routes from \"services/System/routes\";\r\n import CustomerServices from \"services/Customer\";\r\n@@ -65,501 +65,501 @@\n import SearchIcon from \"@mui/icons-material/Search\";\r\n // import { TableBody, TableHead } from \"mui-datatables\";\r\n \r\n function UpdatePaidReceipt() {\r\n-  const theme = useTheme();\r\n-  const { user } = useAuth();\r\n-  const navigate = useNavigate();\r\n-  const [formChange, setFormChange] = useState(false);\r\n-  const [submit, setSubmit] = useState(false);\r\n-  const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n-  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n-  const [total, setTotal] = useState(0);\r\n-  const [subTotal, setSubTotal] = useState(0);\r\n-  const [payButton, setPayButton] = useState(false);\r\n-  const [rows, setRows] = useState([]);\r\n+    const theme = useTheme();\r\n+    const { user } = useAuth();\r\n+    const navigate = useNavigate();\r\n+    const [formChange, setFormChange] = useState(false);\r\n+    const [submit, setSubmit] = useState(false);\r\n+    const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n+    const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n+    const [total, setTotal] = useState(0);\r\n+    const [subTotal, setSubTotal] = useState(0);\r\n+    const [payButton, setPayButton] = useState(false);\r\n+    const [rows, setRows] = useState([]);\r\n \r\n-  console.log(rows, \"data\");\r\n-  const [items, setItems] = useState([\r\n-    {\r\n-      itemCode: \"\",\r\n-      itemDescription: \"TASHEEL AUTO 19\",\r\n-      totalCharge: 17.1,\r\n-      mbNo: \"\",\r\n-      applicationId: \"\",\r\n-      total: 17.1,\r\n-    },\r\n-  ]);\r\n+    console.log(rows, \"data\");\r\n+    const [items, setItems] = useState([\r\n+        {\r\n+            itemCode: \"\",\r\n+            itemDescription: \"TASHEEL AUTO 19\",\r\n+            totalCharge: 17.1,\r\n+            mbNo: \"\",\r\n+            applicationId: \"\",\r\n+            total: 17.1,\r\n+        },\r\n+    ]);\r\n \r\n-  // const addItem = () => {\r\n-  //   const newItem = {\r\n-  //     itemCode: \"\",\r\n-  //     itemDescription: \"\",\r\n-  //     totalCharge: 0,\r\n-  //     mbNo: \"\",\r\n-  //     applicationId: \"\",\r\n-  //     total: 0,\r\n-  //   };\r\n-  //   setItems([...items, newItem]);\r\n-  // };\r\n+    // const addItem = () => {\r\n+    //   const newItem = {\r\n+    //     itemCode: \"\",\r\n+    //     itemDescription: \"\",\r\n+    //     totalCharge: 0,\r\n+    //     mbNo: \"\",\r\n+    //     applicationId: \"\",\r\n+    //     total: 0,\r\n+    //   };\r\n+    //   setItems([...items, newItem]);\r\n+    // };\r\n \r\n-  const {\r\n-    register,\r\n-    handleSubmit,\r\n-    getValues,\r\n-    setValue,\r\n-    watch,\r\n-    reset,\r\n-    formState: { errors },\r\n-  } = useForm();\r\n-  const {\r\n-    register: register1,\r\n-    handleSubmit: handleSubmit1,\r\n-    setValue: setValue1,\r\n-    getValues: getValues1,\r\n-    control,\r\n-    watch: watch1,\r\n-    formState: { errors: errors1 },\r\n-  } = useForm();\r\n+    const {\r\n+        register,\r\n+        handleSubmit,\r\n+        getValues,\r\n+        setValue,\r\n+        watch,\r\n+        reset,\r\n+        formState: { errors },\r\n+    } = useForm();\r\n+    const {\r\n+        register: register1,\r\n+        handleSubmit: handleSubmit1,\r\n+        setValue: setValue1,\r\n+        getValues: getValues1,\r\n+        control,\r\n+        watch: watch1,\r\n+        formState: { errors: errors1 },\r\n+    } = useForm();\r\n \r\n-  // Watch all form data\r\n+    // Watch all form data\r\n \r\n-  // Watch for changes in the fee-related fields\r\n-  const govtFee = watch(\"govt_fee\", 0);\r\n-  const centerFee = watch(\"center_fee\", 0);\r\n-  const bankCharges = watch(\"bank_charges\", 0);\r\n-  const qty = watch(\"qty\", 1);\r\n-  useEffect(() => {\r\n-    const feesTotal =\r\n-      (parseFloat(govtFee) || 0) +\r\n-      (parseFloat(centerFee) || 0) +\r\n-      (parseFloat(bankCharges) || 0);\r\n-    const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n-    setValue(\"total\", finalTotal);\r\n-  }, [govtFee, centerFee, bankCharges, qty]);\r\n+    // Watch for changes in the fee-related fields\r\n+    const govtFee = watch(\"govt_fee\", 0);\r\n+    const centerFee = watch(\"center_fee\", 0);\r\n+    const bankCharges = watch(\"bank_charges\", 0);\r\n+    const qty = watch(\"qty\", 1);\r\n+    useEffect(() => {\r\n+        const feesTotal =\r\n+            (parseFloat(govtFee) || 0) +\r\n+            (parseFloat(centerFee) || 0) +\r\n+            (parseFloat(bankCharges) || 0);\r\n+        const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n+        setValue(\"total\", finalTotal);\r\n+    }, [govtFee, centerFee, bankCharges, qty]);\r\n \r\n-  const addItem = (data) => {\r\n-    const total = data.total;\r\n-    setRows((prevRows) => {\r\n-      const updatedRows = [...prevRows, data];\r\n-      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n-      setSubTotal(newSubTotal);\r\n-      return updatedRows;\r\n-    });\r\n-    reset();\r\n-    setServiceItem(\"\");\r\n-  };\r\n-  const isFormDataEmpty = (data) => {\r\n-    // Check if all form fields are empty\r\n-    return Object.values(data).every((value) => {\r\n-      // If the value is an object (like companyLogo), check if it's empty\r\n-      if (typeof value === \"object\" && value !== null) {\r\n-        return Object.keys(value).length === 0;\r\n-      }\r\n-      // Otherwise, check if the value is an empty string\r\n-      return value === \"\";\r\n-    });\r\n-  };\r\n+    const addItem = (data) => {\r\n+        const total = data.total;\r\n+        setRows((prevRows) => {\r\n+            const updatedRows = [...prevRows, data];\r\n+            const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n+            setSubTotal(newSubTotal);\r\n+            return updatedRows;\r\n+        });\r\n+        reset();\r\n+        setServiceItem(\"\");\r\n+    };\r\n+    const isFormDataEmpty = (data) => {\r\n+        // Check if all form fields are empty\r\n+        return Object.values(data).every((value) => {\r\n+            // If the value is an object (like companyLogo), check if it's empty\r\n+            if (typeof value === \"object\" && value !== null) {\r\n+                return Object.keys(value).length === 0;\r\n+            }\r\n+            // Otherwise, check if the value is an empty string\r\n+            return value === \"\";\r\n+        });\r\n+    };\r\n \r\n-  const allowFilesType = [\r\n-    \"image/png\",\r\n-    \"image/jpg\",\r\n-    \"image/jpeg\",\r\n-    \"application/pdf\",\r\n-    \"application/vnd.ms-excel\",\r\n-    \"application/msword\",\r\n-    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n-  ];\r\n-  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n-  const [guarantors, setGuarantors] = useState([]);\r\n-  const [activeStep, setActiveStep] = React.useState(1);\r\n+    const allowFilesType = [\r\n+        \"image/png\",\r\n+        \"image/jpg\",\r\n+        \"image/jpeg\",\r\n+        \"application/pdf\",\r\n+        \"application/vnd.ms-excel\",\r\n+        \"application/msword\",\r\n+        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n+    ];\r\n+    const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n+    const [guarantors, setGuarantors] = useState([]);\r\n+    const [activeStep, setActiveStep] = React.useState(1);\r\n \r\n-  // *For Deposit Slip\r\n-  const [progress, setProgress] = useState(0);\r\n-  const [uploadedSize, setUploadedSize] = useState(0);\r\n-  const [slipDetail, setSlipDetail] = useState([]);\r\n+    // *For Deposit Slip\r\n+    const [progress, setProgress] = useState(0);\r\n+    const [uploadedSize, setUploadedSize] = useState(0);\r\n+    const [slipDetail, setSlipDetail] = useState([]);\r\n \r\n-  const [selectedDue, setSelectedDue] = useState({\r\n-    id: \"Instant\",\r\n-    name: \"Instant\",\r\n-  });\r\n-  const [passport, setPassport] = useState();\r\n-  const [allocation, setAllocation] = useState(false);\r\n-  const [depositError, setDepositError] = useState(false);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [emailVerify, setEmailVerify] = useState(false);\r\n-  const [isUploading, setIsUploading] = useState(false);\r\n-  const [loader, setLoader] = useState(false);\r\n+    const [selectedDue, setSelectedDue] = useState({\r\n+        id: \"Instant\",\r\n+        name: \"Instant\",\r\n+    });\r\n+    const [passport, setPassport] = useState();\r\n+    const [allocation, setAllocation] = useState(false);\r\n+    const [depositError, setDepositError] = useState(false);\r\n+    const [loading, setLoading] = useState(false);\r\n+    const [emailVerify, setEmailVerify] = useState(false);\r\n+    const [isUploading, setIsUploading] = useState(false);\r\n+    const [loader, setLoader] = useState(false);\r\n \r\n-  const [center, setCenter] = useState(null);\r\n-  const [status, setStatus] = useState(null);\r\n-  const [fieldsDisabled, setFieldsDisabled] = useState(false);\r\n+    const [center, setCenter] = useState(null);\r\n+    const [status, setStatus] = useState(null);\r\n+    const [fieldsDisabled, setFieldsDisabled] = useState(false);\r\n \r\n-  // *For Stepper Forms Data\r\n-  const [stepFormData, setStepFormData] = useState();\r\n-  const [step1FormData, setStep1FormData] = useState();\r\n-  const [selectedType, setSelectedType] = useState(null);\r\n-  const [date, setDate] = useState(null);\r\n-  const [balanceType, setBalanceType] = useState(null);\r\n-  const [imageURL, setImageURL] = useState(null);\r\n-  const fileInputRef = useRef(null);\r\n-  const [hovered, setHovered] = useState(false);\r\n-  const [accounts, setAccounts] = useState([]);\r\n-  const [salesAccount, setSalesAccount] = useState(null);\r\n-  const [inventoryAccount, setInventoryAccount] = useState(null);\r\n-  const [cogsAccount, setCogsAccount] = useState(null);\r\n-  const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n-  const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n-  const [itemType, setItemType] = useState(null);\r\n-  const [unit, setUnit] = useState(null);\r\n-  const [taxes, setTaxes] = useState([]);\r\n-  const [tax, setTax] = useState(null);\r\n-  const [category, setCategory] = useState(null);\r\n-  const [categories, setCategories] = useState(null);\r\n-  const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n-  const [description, setDescription] = useState(null);\r\n-  const [ownGovBank, setOwnGovBank] = useState(null);\r\n-  const [services, setServices] = useState(null);\r\n-  const [serviceItem, setServiceItem] = useState(null);\r\n-  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n-  const [detail, setDetail] = useState(null);\r\n-  const [banks, setBanks] = useState([]);\r\n-  const [selectedMode, setSelectedMode] = useState(null);\r\n-  const {id}=useParams()\r\n-  //documents array\r\n+    // *For Stepper Forms Data\r\n+    const [stepFormData, setStepFormData] = useState();\r\n+    const [step1FormData, setStep1FormData] = useState();\r\n+    const [selectedType, setSelectedType] = useState(null);\r\n+    const [date, setDate] = useState(null);\r\n+    const [balanceType, setBalanceType] = useState(null);\r\n+    const [imageURL, setImageURL] = useState(null);\r\n+    const fileInputRef = useRef(null);\r\n+    const [hovered, setHovered] = useState(false);\r\n+    const [accounts, setAccounts] = useState([]);\r\n+    const [salesAccount, setSalesAccount] = useState(null);\r\n+    const [inventoryAccount, setInventoryAccount] = useState(null);\r\n+    const [cogsAccount, setCogsAccount] = useState(null);\r\n+    const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n+    const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n+    const [itemType, setItemType] = useState(null);\r\n+    const [unit, setUnit] = useState(null);\r\n+    const [taxes, setTaxes] = useState([]);\r\n+    const [tax, setTax] = useState(null);\r\n+    const [category, setCategory] = useState(null);\r\n+    const [categories, setCategories] = useState(null);\r\n+    const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n+    const [description, setDescription] = useState(null);\r\n+    const [ownGovBank, setOwnGovBank] = useState(null);\r\n+    const [services, setServices] = useState(null);\r\n+    const [serviceItem, setServiceItem] = useState(null);\r\n+    const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n+    const [detail, setDetail] = useState(null);\r\n+    const [banks, setBanks] = useState([]);\r\n+    const [selectedMode, setSelectedMode] = useState(null);\r\n+    const { id } = useParams()\r\n+    //documents array\r\n \r\n-  const handleNext = () => {\r\n-    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n-  };\r\n-  console.log(\"object\", getValues1(\"bank\")?.id);\r\n+    const handleNext = () => {\r\n+        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n+    };\r\n+    console.log(\"object\", getValues1(\"bank\")?.id);\r\n \r\n-  const submitForm1 = async (formData) => {\r\n-    try {\r\n-      let obj = {\r\n-        id: getValues1(\"invoicenumber\"),\r\n-        total_amount: formData?.total,\r\n-        // paid_amount: formData?.paid,\r\n-        paid_amount: formData?.total,\r\n-        payment_status: \"Paid\",\r\n-        payment_mode: selectedMode?.id, // Cash, Bank, Card\r\n-        account_id:\r\n-          selectedMode?.id == \"Cash\"\r\n-            ? 700117\r\n-            : selectedMode?.id == \"Bank\"\r\n-              ? getValues1(\"bank\")?.id\r\n-              : null, // By default 700117 for Cash\r\n-        ref_id:\r\n-          selectedMode?.id == \"Bank\" || selectedMode?.id == \"Bank\" ? \"2\" : null, //bank or card id null for cash\r\n-        remarks: formData?.remarks,\r\n-        narration: formData?.narration,\r\n-      };\r\n+    const submitForm1 = async (formData) => {\r\n+        try {\r\n+            let obj = {\r\n+                id: getValues1(\"invoicenumber\"),\r\n+                total_amount: formData?.total,\r\n+                // paid_amount: formData?.paid,\r\n+                paid_amount: formData?.total,\r\n+                payment_status: \"Paid\",\r\n+                payment_mode: selectedMode?.id, // Cash, Bank, Card\r\n+                account_id:\r\n+                    selectedMode?.id == \"Cash\"\r\n+                        ? 700117\r\n+                        : selectedMode?.id == \"Bank\"\r\n+                            ? getValues1(\"bank\")?.id\r\n+                            : null, // By default 700117 for Cash\r\n+                ref_id:\r\n+                    selectedMode?.id == \"Bank\" || selectedMode?.id == \"Bank\" ? \"2\" : null, //bank or card id null for cash\r\n+                remarks: formData?.remarks,\r\n+                narration: formData?.narration,\r\n+            };\r\n \r\n \r\n-      if (detail?.is_paid == true) {\r\n-        ErrorToaster(\"Already paid\");\r\n-      } else {\r\n-        showPromiseToast(\r\n-          promise,\r\n-          \"Saving...\",\r\n-          \"Added Successfully\",\r\n-          \"Something Went Wrong\"\r\n-        );\r\n-        const promise = CustomerServices.PayReceipt(obj);\r\n-        const response = await promise;\r\n-        if (response?.responseCode === 200) {\r\n-          window.location.reload();\r\n+            if (detail?.is_paid == true) {\r\n+                ErrorToaster(\"Already paid\");\r\n+            } else {\r\n+                showPromiseToast(\r\n+                    promise,\r\n+                    \"Saving...\",\r\n+                    \"Added Successfully\",\r\n+                    \"Something Went Wrong\"\r\n+                );\r\n+                const promise = CustomerServices.PayReceipt(obj);\r\n+                const response = await promise;\r\n+                if (response?.responseCode === 200) {\r\n+                    window.location.reload();\r\n+                }\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n         }\r\n-      }\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    }\r\n-  };\r\n-  // *For Get Customer Queue\r\n-  const getBanks = async (page, limit, filter) => {\r\n-    setLoader(true);\r\n+    };\r\n+    // *For Get Customer Queue\r\n+    const getBanks = async (page, limit, filter) => {\r\n+        setLoader(true);\r\n \r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.getBanks(params);\r\n-      setBanks(data?.banks);\r\n-    } catch (error) {\r\n-      showErrorToast(error);\r\n-    } finally {\r\n-      setLoader(false);\r\n-    }\r\n-  };\r\n+            const { data } = await CustomerServices.getBanks(params);\r\n+            setBanks(data?.banks);\r\n+        } catch (error) {\r\n+            showErrorToast(error);\r\n+        } finally {\r\n+            setLoader(false);\r\n+        }\r\n+    };\r\n \r\n-  // *For Get Account\r\n-  const getReceptionDetail = async (state) => {\r\n-    setFieldsDisabled(true);\r\n-    try {\r\n-      let params = {\r\n-        token_number: getValues1(\"token\"),\r\n-      };\r\n-      if (state) {\r\n-        params = {\r\n-          invoice_number: getValues1(\"invoicenumber\"),\r\n-        };\r\n-      }\r\n-      const { data } = await CustomerServices.getReceiptDetail(params);\r\n-      console.log(data?.receipt, \"dataaa\");\r\n-      if (data?.receipt) {\r\n-        setRows(data?.receipt?.sale_receipt_items);\r\n-        setDetail(data?.receipt);\r\n+    // *For Get Account\r\n+    const getReceptionDetail = async (state) => {\r\n+        setFieldsDisabled(true);\r\n+        try {\r\n+            let params = {\r\n+                token_number: getValues1(\"token\"),\r\n+            };\r\n+            if (state) {\r\n+                params = {\r\n+                    invoice_number: getValues1(\"invoicenumber\"),\r\n+                };\r\n+            }\r\n+            const { data } = await CustomerServices.getReceiptDetail(params);\r\n+            console.log(data?.receipt, \"dataaa\");\r\n+            if (data?.receipt) {\r\n+                setRows(data?.receipt?.sale_receipt_items);\r\n+                setDetail(data?.receipt);\r\n \r\n-        setValue1(\"paid\", 0);\r\n-        setValue1(\"customer\", data?.receipt?.customer_name);\r\n-        setValue1(\"invoice_date\", moment().toDate());\r\n-        setDate(new Date(data?.receipt?.invoice_date));\r\n-        setValue1(\"mobile\", data?.receipt?.customer_mobile);\r\n-        setValue1(\"ref\", data?.receipt?.ref);\r\n-        setValue1(\"display_customer\", data?.receipt?.customer_name);\r\n-        setValue1(\"email\", data?.receipt?.customer_email);\r\n-        setValue1(\"address\", data?.receipt?.address);\r\n-        setValue1(\"trn\", data?.receipt?.trn);\r\n-        setValue1(\"cost_center\", data?.receipt?.cost_center);\r\n-        setValue1(\"caseno\", data?.receipt?.case_no);\r\n-        setSubTotal(data?.receipt?.total_amount);\r\n-        setValue1(\"total\", data?.receipt?.total_amount);\r\n-        setValue1(\"balance\", data?.receipt?.total_amount);\r\n-        setAccounts(data?.accounts?.rows);\r\n-      }\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+                setValue1(\"paid\", 0);\r\n+                setValue1(\"customer\", data?.receipt?.customer_name);\r\n+                setValue1(\"invoice_date\", moment().toDate());\r\n+                setDate(new Date(data?.receipt?.invoice_date));\r\n+                setValue1(\"mobile\", data?.receipt?.customer_mobile);\r\n+                setValue1(\"ref\", data?.receipt?.ref);\r\n+                setValue1(\"display_customer\", data?.receipt?.customer_name);\r\n+                setValue1(\"email\", data?.receipt?.customer_email);\r\n+                setValue1(\"address\", data?.receipt?.address);\r\n+                setValue1(\"trn\", data?.receipt?.trn);\r\n+                setValue1(\"cost_center\", data?.receipt?.cost_center);\r\n+                setValue1(\"caseno\", data?.receipt?.case_no);\r\n+                setSubTotal(data?.receipt?.total_amount);\r\n+                setValue1(\"total\", data?.receipt?.total_amount);\r\n+                setValue1(\"balance\", data?.receipt?.total_amount);\r\n+                setAccounts(data?.accounts?.rows);\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  const getServiceItem = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+    const getServiceItem = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.getServiceItem(params);\r\n+            const { data } = await CustomerServices.getServiceItem(params);\r\n \r\n-      setServices(data?.rows);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n-  const handleServiceSelect = async (value) => {\r\n-    console.log(value, \"idididid\");\r\n-    setServiceItem(value);\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        service_id: value?.id,\r\n-      };\r\n+            setServices(data?.rows);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n+    const handleServiceSelect = async (value) => {\r\n+        console.log(value, \"idididid\");\r\n+        setServiceItem(value);\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                service_id: value?.id,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.DetailServiceItem(params);\r\n-      setValue(\"item_code\", data?.service?.id);\r\n-      setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n-      setValue(\"center_fee\", data?.service?.center_fee);\r\n-      setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n+            const { data } = await CustomerServices.DetailServiceItem(params);\r\n+            setValue(\"item_code\", data?.service?.id);\r\n+            setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n+            setValue(\"center_fee\", data?.service?.center_fee);\r\n+            setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n \r\n-      setValue(\"qty\", 1);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            setValue(\"qty\", 1);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  const getAccounts = async (page, limit, filter) => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+    const getAccounts = async (page, limit, filter) => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await FinanceServices.getAccounts(params);\r\n-      console.log(data?.accounts?.rows);\r\n+            const { data } = await FinanceServices.getAccounts(params);\r\n+            console.log(data?.accounts?.rows);\r\n \r\n-      setAccounts(data?.accounts?.rows);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            setAccounts(data?.accounts?.rows);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  const handleInputChange = (index, field, value) => {\r\n-    const updatedRows = [...rows];\r\n-    updatedRows[index] = {\r\n-      ...updatedRows[index],\r\n-      [field]: value,\r\n+    const handleInputChange = (index, field, value) => {\r\n+        const updatedRows = [...rows];\r\n+        updatedRows[index] = {\r\n+            ...updatedRows[index],\r\n+            [field]: value,\r\n+        };\r\n+        setRows(updatedRows);\r\n     };\r\n-    setRows(updatedRows);\r\n-  };\r\n-  console.log(rows);\r\n-  \r\n-  const getTax = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+    console.log(rows);\r\n \r\n-      const { data } = await FinanceServices.getTax(params);\r\n-      console.log(data?.accounts?.rows);\r\n+    const getTax = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      setTaxes(data?.tax);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n-  const getCategories = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+            const { data } = await FinanceServices.getTax(params);\r\n+            console.log(data?.accounts?.rows);\r\n \r\n-      const { data } = await CustomerServices.getCategoryList(params);\r\n+            setTaxes(data?.tax);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n+    const getCategories = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      setCategories(data?.categories);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            const { data } = await CustomerServices.getCategoryList(params);\r\n \r\n-     const getData = async () => {\r\n-          try {\r\n-              let params = {\r\n-                  id: id\r\n-              };\r\n-  \r\n-              const { data } = await CustomerServices.getPreSaleDetail(params);\r\n-              console.log(data?.receipt?.sale_receipt_items);\r\n-              setValue1('token', data?.receipt?.token_number)\r\n-              setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n-              setRows(data?.receipt?.sale_receipt_items)\r\n-              setSubTotal(data?.receipt?.total_amount)\r\n-              setDate(new Date(data?.receipt?.invoice_date))\r\n-              setValue1('invoicenumber',data?.receipt?.id)\r\n-              getReceptionDetail(true)\r\n-              setValue1('display_customer', data?.receipt?.customer_name)\r\n-              setValue1('mobile', data?.receipt?.customer_mobile)\r\n-              setValue1('email', data?.receipt?.customer_email)\r\n-              setValue1('ref', data?.receipt?.ref)\r\n-              setValue1('address', data?.receipt?.address)\r\n-          \r\n-          } catch (error) {\r\n-              console.error(\"Error fetching location:\", error);\r\n-          }\r\n-      };\r\n+            setCategories(data?.categories);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  useEffect(() => {\r\n-    getData()\r\n-    getBanks();\r\n-    getAccounts();\r\n-    getTax();\r\n-    getCategories();\r\n-    getServiceItem();\r\n-    setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" });\r\n-    setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" });\r\n-  }, []);\r\n+    const getData = async () => {\r\n+        try {\r\n+            let params = {\r\n+                id: id\r\n+            };\r\n \r\n-  return (\r\n-    <>\r\n-      <Box sx={{ width: \"100%\" }}></Box>\r\n-      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n-        {\r\n-          <>\r\n-            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n-              <Box\r\n-                sx={{\r\n-                  display: \"flex\",\r\n-                  justifyContent: \"space-between\",\r\n-                  gap: \"10px\",\r\n-                  p: 3,\r\n-                  alignItems: \"flex-end\",\r\n-                }}\r\n-              >\r\n-                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n-                 Update Pay Receipt\r\n-                </Typography>\r\n-              </Box>\r\n+            const { data } = await CustomerServices.getPreSaleDetail(params);\r\n+            console.log(data?.receipt?.sale_receipt_items);\r\n+            setValue1('token', data?.receipt?.token_number)\r\n+            setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n+            setRows(data?.receipt?.sale_receipt_items)\r\n+            setSubTotal(data?.receipt?.total_amount)\r\n+            setDate(new Date(data?.receipt?.invoice_date))\r\n+            setValue1('invoicenumber', data?.receipt?.id)\r\n+            getReceptionDetail(true)\r\n+            setValue1('display_customer', data?.receipt?.customer_name)\r\n+            setValue1('mobile', data?.receipt?.customer_mobile)\r\n+            setValue1('email', data?.receipt?.customer_email)\r\n+            setValue1('ref', data?.receipt?.ref)\r\n+            setValue1('address', data?.receipt?.address)\r\n \r\n-              <Box sx={{ p: 3 }}>\r\n-                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                  <Grid item xs={12}>\r\n-                    <Grid container gap={2} alignItems={\"center\"}>\r\n-                      <Grid item xs={3}>\r\n-                        <DatePicker\r\n-                          label={\"Invoice Date :*\"}\r\n-                          value={date}\r\n-                          size={\"small\"}\r\n-                          disabled={true}\r\n-                          error={errors1?.date?.message}\r\n-                          register={register1(\"date\")}\r\n-                          onChange={(date) => {\r\n-                            setValue1(\"date\", date);\r\n-                            setDate(new Date(date));\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3} sm={12} xs={12} mt={1}>\r\n-                        <InputField\r\n-                          label=\"Invoice Number\"\r\n-                          size=\"small\"\r\n-                          disabled={fieldsDisabled}\r\n-                          placeholder=\"Invoice Number\"\r\n-                          register={register1(\"invoicenumber\")}\r\n-                          InputProps={{\r\n-                            endAdornment: (\r\n-                              <IconButton\r\n-                                onClick={() => getReceptionDetail(true)}\r\n-                              >\r\n-                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n-                              </IconButton>\r\n-                            ),\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n \r\n-                      <Grid item md={3} sm={12} xs={12} mt={2.5}>\r\n-                        <PrimaryButton\r\n-                          bgcolor={\"#bd9b4a\"}\r\n-                          title=\"Clear\"\r\n-                          onClick={() => {\r\n-                            setFieldsDisabled(false);\r\n-                            setValue1(\"token\", \"\");\r\n-                            setValue1(\"invoicenumber\", \"\");\r\n-                            setValue1(\"customer\", \"\");\r\n-                            setValue1(\"invoice_date\", \"\");\r\n-                            setValue1(\"mobile\", \"\");\r\n-                            setValue1(\"ref\", \"\");\r\n-                            setValue1(\"display_customer\", \"\");\r\n-                            setValue1(\"email\", \"\");\r\n-                            setValue1(\"address\", \"\");\r\n-                            setValue1(\"trn\", \"\");\r\n-                            setValue1(\"cost_center\", \"\");\r\n-                          }}\r\n-                          loading={loading}\r\n-                        />\r\n-                      </Grid>\r\n-                    </Grid>\r\n-                  </Grid>\r\n+    useEffect(() => {\r\n+        getData()\r\n+        getBanks();\r\n+        getAccounts();\r\n+        getTax();\r\n+        getCategories();\r\n+        getServiceItem();\r\n+        setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" });\r\n+        setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" });\r\n+    }, []);\r\n \r\n-                  {/* <Grid\r\n+    return (\r\n+        <>\r\n+            <Box sx={{ width: \"100%\" }}></Box>\r\n+            <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n+                {\r\n+                    <>\r\n+                        <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n+                            <Box\r\n+                                sx={{\r\n+                                    display: \"flex\",\r\n+                                    justifyContent: \"space-between\",\r\n+                                    gap: \"10px\",\r\n+                                    p: 3,\r\n+                                    alignItems: \"flex-end\",\r\n+                                }}\r\n+                            >\r\n+                                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n+                                    Update Pay Receipt\r\n+                                </Typography>\r\n+                            </Box>\r\n+\r\n+                            <Box sx={{ p: 3 }}>\r\n+                                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                    <Grid item xs={12}>\r\n+                                        <Grid container gap={2} alignItems={\"center\"}>\r\n+                                            <Grid item xs={3}>\r\n+                                                <DatePicker\r\n+                                                    label={\"Invoice Date :*\"}\r\n+                                                    value={date}\r\n+                                                    size={\"small\"}\r\n+                                                    disabled={true}\r\n+                                                    error={errors1?.date?.message}\r\n+                                                    register={register1(\"date\")}\r\n+                                                    onChange={(date) => {\r\n+                                                        setValue1(\"date\", date);\r\n+                                                        setDate(new Date(date));\r\n+                                                    }}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3} sm={12} xs={12} mt={1}>\r\n+                                                <InputField\r\n+                                                    label=\"Invoice Number\"\r\n+                                                    size=\"small\"\r\n+                                                    disabled={fieldsDisabled}\r\n+                                                    placeholder=\"Invoice Number\"\r\n+                                                    register={register1(\"invoicenumber\")}\r\n+                                                    InputProps={{\r\n+                                                        endAdornment: (\r\n+                                                            <IconButton\r\n+                                                                onClick={() => getReceptionDetail(true)}\r\n+                                                            >\r\n+                                                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n+                                                            </IconButton>\r\n+                                                        ),\r\n+                                                    }}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            <Grid item md={3} sm={12} xs={12} mt={2.5}>\r\n+                                                <PrimaryButton\r\n+                                                    bgcolor={\"#bd9b4a\"}\r\n+                                                    title=\"Clear\"\r\n+                                                    onClick={() => {\r\n+                                                        setFieldsDisabled(false);\r\n+                                                        setValue1(\"token\", \"\");\r\n+                                                        setValue1(\"invoicenumber\", \"\");\r\n+                                                        setValue1(\"customer\", \"\");\r\n+                                                        setValue1(\"invoice_date\", \"\");\r\n+                                                        setValue1(\"mobile\", \"\");\r\n+                                                        setValue1(\"ref\", \"\");\r\n+                                                        setValue1(\"display_customer\", \"\");\r\n+                                                        setValue1(\"email\", \"\");\r\n+                                                        setValue1(\"address\", \"\");\r\n+                                                        setValue1(\"trn\", \"\");\r\n+                                                        setValue1(\"cost_center\", \"\");\r\n+                                                    }}\r\n+                                                    loading={loading}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n+\r\n+                                    {/* <Grid\r\n                                         item\r\n                                         md={5.5}\r\n                                         sm={12}\r\n                                         xs={12}\r\n@@ -593,264 +593,264 @@\n \r\n \r\n                                         </Grid>\r\n                                     </Grid> */}\r\n-                  <Grid\r\n-                    item\r\n-                    md={12}\r\n-                    sm={12}\r\n-                    xs={12}\r\n-                    sx={{\r\n-                      border: \"2px solid black\",\r\n-                      p: 2,\r\n-                      borderRadius: \"15px\",\r\n-                      mt: { md: 0, sm: 2, xs: 2 },\r\n-                    }}\r\n-                  >\r\n-                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <SelectField\r\n-                          size={\"small\"}\r\n-                          label={\"Customer *:\"}\r\n-                          disabled={true}\r\n-                          options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n-                          selected={selectedCustomer}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCustomer(value);\r\n-                          }}\r\n-                          error={errors1?.customer?.message}\r\n-                          register={register1(\"customer\")}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Display Customer\"\r\n-                          size=\"small\"\r\n-                          disabled={true}\r\n-                          placeholder=\"Walk-in Customer\"\r\n-                          register={register1(\"display_customer\")}\r\n-                          error={errors1?.display_customer?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                                    <Grid\r\n+                                        item\r\n+                                        md={12}\r\n+                                        sm={12}\r\n+                                        xs={12}\r\n+                                        sx={{\r\n+                                            border: \"2px solid black\",\r\n+                                            p: 2,\r\n+                                            borderRadius: \"15px\",\r\n+                                            mt: { md: 0, sm: 2, xs: 2 },\r\n+                                        }}\r\n+                                    >\r\n+                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <SelectField\r\n+                                                    size={\"small\"}\r\n+                                                    label={\"Customer *:\"}\r\n+                                                    disabled={true}\r\n+                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n+                                                    selected={selectedCustomer}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setSelectedCustomer(value);\r\n+                                                    }}\r\n+                                                    error={errors1?.customer?.message}\r\n+                                                    register={register1(\"customer\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Display Customer\"\r\n+                                                    size=\"small\"\r\n+                                                    disabled={true}\r\n+                                                    placeholder=\"Walk-in Customer\"\r\n+                                                    register={register1(\"display_customer\")}\r\n+                                                    error={errors1?.display_customer?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Mobile\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Mobile No\"\r\n-                          disabled={true}\r\n-                          register={register1(\"mobile\")}\r\n-                          error={errors1?.display_customer?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Mobile\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Mobile No\"\r\n+                                                    disabled={true}\r\n+                                                    register={register1(\"mobile\")}\r\n+                                                    error={errors1?.display_customer?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Email\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Email\"\r\n-                          disabled={true}\r\n-                          register={register1(\"email\")}\r\n-                          error={errors1?.email?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Email\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Email\"\r\n+                                                    disabled={true}\r\n+                                                    register={register1(\"email\")}\r\n+                                                    error={errors1?.email?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"TRN\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"TRN\"\r\n-                          disabled={true}\r\n-                          register={register1(\"trn\")}\r\n-                          error={errors1?.trn?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Case No\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Case No\"\r\n-                          disabled={true}\r\n-                          register={register1(\"caseno\")}\r\n-                          error={errors1?.caseno?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Ref\"\r\n-                          disabled={true}\r\n-                          size=\"small\"\r\n-                          placeholder=\"Reference\"\r\n-                          register={register1(\"ref\")}\r\n-                        />\r\n-                      </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"TRN\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"TRN\"\r\n+                                                    disabled={true}\r\n+                                                    register={register1(\"trn\")}\r\n+                                                    error={errors1?.trn?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Case No\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Case No\"\r\n+                                                    disabled={true}\r\n+                                                    register={register1(\"caseno\")}\r\n+                                                    error={errors1?.caseno?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Ref\"\r\n+                                                    disabled={true}\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Reference\"\r\n+                                                    register={register1(\"ref\")}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Cost Center\"\r\n-                          size=\"small\"\r\n-                          disabled={true}\r\n-                          options={[{ id: \"Al-ADHEED\", name: \"Al-ADHEED\" }]}\r\n-                          selected={watch1(\"cost_center\")}\r\n-                          onSelect={(value) => setValue1(\"cost_center\", value)}\r\n-                          register={register1(\"cost_center\")}\r\n-                          error={errors1?.cost_center?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Address\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Address\"\r\n-                          multiline\r\n-                          disabled={true}\r\n-                          rows={2}\r\n-                          register={register1(\"address\")}\r\n-                          error={errors1?.address?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    </Grid>\r\n-                  </Grid>\r\n-                </Grid>\r\n-              </Box>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <SelectField\r\n+                                                    label=\"Cost Center\"\r\n+                                                    size=\"small\"\r\n+                                                    disabled={true}\r\n+                                                    options={[{ id: \"Al-ADHEED\", name: \"Al-ADHEED\" }]}\r\n+                                                    selected={watch1(\"cost_center\")}\r\n+                                                    onSelect={(value) => setValue1(\"cost_center\", value)}\r\n+                                                    register={register1(\"cost_center\")}\r\n+                                                    error={errors1?.cost_center?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Address\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Address\"\r\n+                                                    multiline\r\n+                                                    disabled={true}\r\n+                                                    rows={2}\r\n+                                                    register={register1(\"address\")}\r\n+                                                    error={errors1?.address?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            </Box>\r\n \r\n-              <TableContainer component={Paper}>\r\n-                <Table>\r\n-                  <TableHead>\r\n-                    <TableRow>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n-                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n+                            <TableContainer component={Paper}>\r\n+                                <Table>\r\n+                                    <TableHead>\r\n+                                        <TableRow>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n+                                            <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n \r\n-                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n-                    </TableRow>\r\n-                  </TableHead>\r\n-                  <TableBody>\r\n-                    {rows?.map((item, index) => (\r\n-                      <TableRow key={index}>\r\n-                        <TableCell>{item?.id}</TableCell>\r\n-                        <TableCell>{item?.service?.name}</TableCell>\r\n-                        <TableCell>{item?.quantity}</TableCell>\r\n-                        <TableCell>{item?.govt_fee}</TableCell>\r\n-                        <TableCell>{item?.center_fee}</TableCell>\r\n-                        <TableCell>{item?.bank_charge}</TableCell>\r\n-                        <TableCell>{item?.total}</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n+                                        </TableRow>\r\n+                                    </TableHead>\r\n+                                    <TableBody>\r\n+                                        {rows?.map((item, index) => (\r\n+                                            <TableRow key={index}>\r\n+                                                <TableCell>{item?.id}</TableCell>\r\n+                                                <TableCell>{item?.service?.name}</TableCell>\r\n+                                                <TableCell>{item?.quantity}</TableCell>\r\n+                                                <TableCell>{item?.govt_fee}</TableCell>\r\n+                                                <TableCell>{item?.center_fee}</TableCell>\r\n+                                                <TableCell>{item?.bank_charge}</TableCell>\r\n+                                                <TableCell>{item?.total}</TableCell>\r\n \r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Transaction Id\"\r\n-                            type=\"number\"\r\n-                            value={item.transaction_id || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n+                                                <TableCell>\r\n+                                                    <TextField\r\n+                                                        size=\"small\"\r\n+                                                        placeholder=\"Transaction Id\"\r\n+                                                        type=\"number\"\r\n+                                                        value={item.transaction_id || \"\"}\r\n+                                                        onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n+                                                    />\r\n+                                                </TableCell>\r\n \r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Application Id\"\r\n-                            type=\"number\"\r\n-                            value={item.application_id || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n+                                                <TableCell>\r\n+                                                    <TextField\r\n+                                                        size=\"small\"\r\n+                                                        placeholder=\"Application Id\"\r\n+                                                        type=\"number\"\r\n+                                                        value={item.application_id || \"\"}\r\n+                                                        onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n+                                                    />\r\n+                                                </TableCell>\r\n \r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Ref No\"\r\n-                            type=\"number\"\r\n-                            value={item.ref_no || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n-                      </TableRow>\r\n-                    ))}\r\n+                                                <TableCell>\r\n+                                                    <TextField\r\n+                                                        size=\"small\"\r\n+                                                        placeholder=\"Ref No\"\r\n+                                                        type=\"number\"\r\n+                                                        value={item.ref_no || \"\"}\r\n+                                                        onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n+                                                    />\r\n+                                                </TableCell>\r\n+                                            </TableRow>\r\n+                                        ))}\r\n \r\n \r\n-                    <TableRow>\r\n-                      <TableCell colSpan={10} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Sub-total:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {subTotal}\r\n-                        </Typography>{\" \"}\r\n-                        {/* Display the Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={10} align=\"right\">\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n+                                                    Sub-total:\r\n+                                                </Typography>\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n+                                                    {subTotal}\r\n+                                                </Typography>{\" \"}\r\n+                                                {/* Display the Sub-total */}\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n \r\n-                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={10} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Amount Total:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {subTotal}\r\n-                        </Typography>{\" \"}\r\n-                        {/* This can be the same as Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                    {/* </Grid> */}\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={10} align=\"center\">\r\n-                        {\" \"}\r\n-                        {/* adjust colSpan to match total columns */}\r\n-                        <Box\r\n-                          sx={{\r\n-                            display: \"flex\",\r\n-                            gap: 2,\r\n-                            justifyContent: \"center\",\r\n-                          }}\r\n-                        >\r\n-                          <Button\r\n-                            onClick={() => setPayButton(true)}\r\n-                            variant=\"contained\"\r\n-                            sx={{\r\n-                              width: \"350px\",\r\n-                              textTransform: \"capitalize\",\r\n-                              backgroundColor: \"#bd9b4a\",\r\n-                              \":hover\": {\r\n-                                backgroundColor: \"rgb(189 155 74)\",\r\n-                              },\r\n-                            }}\r\n-                          >\r\n-                            Pay\r\n-                          </Button>\r\n-                          <Button\r\n-                            onClick={() => setPayButton(false)}\r\n-                            variant=\"contained\"\r\n-                            sx={{\r\n-                              width: \"350px\",\r\n-                              textTransform: \"capitalize\",\r\n-                              backgroundColor: \"#bd9b4a\",\r\n-                              \":hover\": {\r\n-                                backgroundColor: \"rgb(189 155 74)\",\r\n-                              },\r\n-                            }}\r\n-                          >\r\n-                            Cancel\r\n-                          </Button>\r\n-                        </Box>\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                  </TableBody>\r\n-                </Table>\r\n-              </TableContainer>\r\n-              {/* {payButton && (\r\n+                                        {/* Amount Total Row (optional, if needed for the final sum) */}\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={10} align=\"right\">\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n+                                                    Amount Total:\r\n+                                                </Typography>\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n+                                                    {subTotal}\r\n+                                                </Typography>{\" \"}\r\n+                                                {/* This can be the same as Sub-total */}\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n+                                        {/* </Grid> */}\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={10} align=\"center\">\r\n+                                                {\" \"}\r\n+                                                {/* adjust colSpan to match total columns */}\r\n+                                                <Box\r\n+                                                    sx={{\r\n+                                                        display: \"flex\",\r\n+                                                        gap: 2,\r\n+                                                        justifyContent: \"center\",\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <Button\r\n+                                                        type=\"submit\"\r\n+                                                        variant=\"contained\"\r\n+                                                        sx={{\r\n+                                                            width: \"350px\",\r\n+                                                            textTransform: \"capitalize\",\r\n+                                                            backgroundColor: \"#bd9b4a\",\r\n+                                                            \":hover\": {\r\n+                                                                backgroundColor: \"rgb(189 155 74)\",\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    >\r\n+                                                        Pay\r\n+                                                    </Button>\r\n+                                                    <Button\r\n+                                                        onClick={() => setPayButton(false)}\r\n+                                                        variant=\"contained\"\r\n+                                                        sx={{\r\n+                                                            width: \"350px\",\r\n+                                                            textTransform: \"capitalize\",\r\n+                                                            backgroundColor: \"#bd9b4a\",\r\n+                                                            \":hover\": {\r\n+                                                                backgroundColor: \"rgb(189 155 74)\",\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    >\r\n+                                                        Cancel\r\n+                                                    </Button>\r\n+                                                </Box>\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n+                                    </TableBody>\r\n+                                </Table>\r\n+                            </TableContainer>\r\n+                            {/* {payButton && (\r\n                 <Grid container mt={2} spacing={2}>\r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n@@ -957,13 +957,13 @@\n                     </Button>\r\n                   </Grid>\r\n                 </Grid>\r\n               )} */}\r\n+                        </Box>\r\n+                    </>\r\n+                }\r\n             </Box>\r\n-          </>\r\n-        }\r\n-      </Box>\r\n-    </>\r\n-  );\r\n+        </>\r\n+    );\r\n }\r\n \r\n export default UpdatePaidReceipt;\r\n"
                },
                {
                    "date": 1744739196159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n                     \"Saving...\",\r\n                     \"Added Successfully\",\r\n                     \"Something Went Wrong\"\r\n                 );\r\n-                const promise = CustomerServices.PayReceipt(obj);\r\n+                const promise = CustomerServices.UpdateReceipt(obj);\r\n                 const response = await promise;\r\n                 if (response?.responseCode === 200) {\r\n                     window.location.reload();\r\n                 }\r\n@@ -826,9 +826,9 @@\n                                                                 backgroundColor: \"rgb(189 155 74)\",\r\n                                                             },\r\n                                                         }}\r\n                                                     >\r\n-                                                        Pay\r\n+                                                        Update\r\n                                                     </Button>\r\n                                                     <Button\r\n                                                         onClick={() => setPayButton(false)}\r\n                                                         variant=\"contained\"\r\n"
                },
                {
                    "date": 1744739787959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,16 +256,17 @@\n \r\n             if (detail?.is_paid == true) {\r\n                 ErrorToaster(\"Already paid\");\r\n             } else {\r\n+              \r\n+                const promise = CustomerServices.UpdateReceipt(obj);\r\n+                const response = await promise;\r\n                 showPromiseToast(\r\n                     promise,\r\n                     \"Saving...\",\r\n                     \"Added Successfully\",\r\n                     \"Something Went Wrong\"\r\n                 );\r\n-                const promise = CustomerServices.UpdateReceipt(obj);\r\n-                const response = await promise;\r\n                 if (response?.responseCode === 200) {\r\n                     window.location.reload();\r\n                 }\r\n             }\r\n"
                },
                {
                    "date": 1744739793101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,15 +258,16 @@\n                 ErrorToaster(\"Already paid\");\r\n             } else {\r\n               \r\n                 const promise = CustomerServices.UpdateReceipt(obj);\r\n-                const response = await promise;\r\n                 showPromiseToast(\r\n                     promise,\r\n                     \"Saving...\",\r\n                     \"Added Successfully\",\r\n                     \"Something Went Wrong\"\r\n                 );\r\n+                const response = await promise;\r\n+                \r\n                 if (response?.responseCode === 200) {\r\n                     window.location.reload();\r\n                 }\r\n             }\r\n"
                }
            ],
            "date": 1744737250301,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Checkbox,\r\n  Container,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Typography,\r\n  TableBody,\r\n  TableHead,\r\n  TextField,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport RegisterContainer from \"container/Register\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport MobileStepper from \"@mui/material/MobileStepper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport InputField from \"components/Input\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport { ErrorToaster } from \"components/Toaster\";\r\nimport { FormControl } from \"@mui/base\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport SelectField from \"components/Select\";\r\nimport {\r\n  CleanTypes,\r\n  Debounce,\r\n  Debounce2,\r\n  getFileSize,\r\n  handleDownload,\r\n} from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport CustomerService from \"../DashboardPages/CustomerService\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport moment from \"moment\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { Images } from \"assets\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\nimport { addMonths } from \"date-fns\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport DoDisturbIcon from \"@mui/icons-material/DoDisturb\";\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n// import { TableBody, TableHead } from \"mui-datatables\";\r\n\r\nfunction UpdatePaidReceipt() {\r\n  const theme = useTheme();\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [formChange, setFormChange] = useState(false);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n  const [total, setTotal] = useState(0);\r\n  const [subTotal, setSubTotal] = useState(0);\r\n  const [payButton, setPayButton] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n\r\n  console.log(rows, \"data\");\r\n  const [items, setItems] = useState([\r\n    {\r\n      itemCode: \"\",\r\n      itemDescription: \"TASHEEL AUTO 19\",\r\n      totalCharge: 17.1,\r\n      mbNo: \"\",\r\n      applicationId: \"\",\r\n      total: 17.1,\r\n    },\r\n  ]);\r\n\r\n  // const addItem = () => {\r\n  //   const newItem = {\r\n  //     itemCode: \"\",\r\n  //     itemDescription: \"\",\r\n  //     totalCharge: 0,\r\n  //     mbNo: \"\",\r\n  //     applicationId: \"\",\r\n  //     total: 0,\r\n  //   };\r\n  //   setItems([...items, newItem]);\r\n  // };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    watch,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    control,\r\n    watch: watch1,\r\n    formState: { errors: errors1 },\r\n  } = useForm();\r\n\r\n  // Watch all form data\r\n\r\n  // Watch for changes in the fee-related fields\r\n  const govtFee = watch(\"govt_fee\", 0);\r\n  const centerFee = watch(\"center_fee\", 0);\r\n  const bankCharges = watch(\"bank_charges\", 0);\r\n  const qty = watch(\"qty\", 1);\r\n  useEffect(() => {\r\n    const feesTotal =\r\n      (parseFloat(govtFee) || 0) +\r\n      (parseFloat(centerFee) || 0) +\r\n      (parseFloat(bankCharges) || 0);\r\n    const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n    setValue(\"total\", finalTotal);\r\n  }, [govtFee, centerFee, bankCharges, qty]);\r\n\r\n  const addItem = (data) => {\r\n    const total = data.total;\r\n    setRows((prevRows) => {\r\n      const updatedRows = [...prevRows, data];\r\n      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n      setSubTotal(newSubTotal);\r\n      return updatedRows;\r\n    });\r\n    reset();\r\n    setServiceItem(\"\");\r\n  };\r\n  const isFormDataEmpty = (data) => {\r\n    // Check if all form fields are empty\r\n    return Object.values(data).every((value) => {\r\n      // If the value is an object (like companyLogo), check if it's empty\r\n      if (typeof value === \"object\" && value !== null) {\r\n        return Object.keys(value).length === 0;\r\n      }\r\n      // Otherwise, check if the value is an empty string\r\n      return value === \"\";\r\n    });\r\n  };\r\n\r\n  const allowFilesType = [\r\n    \"image/png\",\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"application/pdf\",\r\n    \"application/vnd.ms-excel\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ];\r\n  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n  const [guarantors, setGuarantors] = useState([]);\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n  const [selectedDue, setSelectedDue] = useState({\r\n    id: \"Instant\",\r\n    name: \"Instant\",\r\n  });\r\n  const [passport, setPassport] = useState();\r\n  const [allocation, setAllocation] = useState(false);\r\n  const [depositError, setDepositError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [emailVerify, setEmailVerify] = useState(false);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [center, setCenter] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [fieldsDisabled, setFieldsDisabled] = useState(false);\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState();\r\n  const [step1FormData, setStep1FormData] = useState();\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [date, setDate] = useState(null);\r\n  const [balanceType, setBalanceType] = useState(null);\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n  const [hovered, setHovered] = useState(false);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [salesAccount, setSalesAccount] = useState(null);\r\n  const [inventoryAccount, setInventoryAccount] = useState(null);\r\n  const [cogsAccount, setCogsAccount] = useState(null);\r\n  const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n  const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n  const [itemType, setItemType] = useState(null);\r\n  const [unit, setUnit] = useState(null);\r\n  const [taxes, setTaxes] = useState([]);\r\n  const [tax, setTax] = useState(null);\r\n  const [category, setCategory] = useState(null);\r\n  const [categories, setCategories] = useState(null);\r\n  const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n  const [description, setDescription] = useState(null);\r\n  const [ownGovBank, setOwnGovBank] = useState(null);\r\n  const [services, setServices] = useState(null);\r\n  const [serviceItem, setServiceItem] = useState(null);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [detail, setDetail] = useState(null);\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n  //documents array\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n  console.log(\"object\", getValues1(\"bank\")?.id);\r\n\r\n  const submitForm1 = async (formData) => {\r\n    try {\r\n      let obj = {\r\n        id: getValues1(\"invoicenumber\"),\r\n        total_amount: formData?.total,\r\n        // paid_amount: formData?.paid,\r\n        paid_amount: formData?.total,\r\n        payment_status: \"Paid\",\r\n        payment_mode: selectedMode?.id, // Cash, Bank, Card\r\n        account_id:\r\n          selectedMode?.id == \"Cash\"\r\n            ? 700117\r\n            : selectedMode?.id == \"Bank\"\r\n              ? getValues1(\"bank\")?.id\r\n              : null, // By default 700117 for Cash\r\n        ref_id:\r\n          selectedMode?.id == \"Bank\" || selectedMode?.id == \"Bank\" ? \"2\" : null, //bank or card id null for cash\r\n        remarks: formData?.remarks,\r\n        narration: formData?.narration,\r\n      };\r\n\r\n\r\n      if (detail?.is_paid == true) {\r\n        ErrorToaster(\"Already paid\");\r\n      } else {\r\n        showPromiseToast(\r\n          promise,\r\n          \"Saving...\",\r\n          \"Added Successfully\",\r\n          \"Something Went Wrong\"\r\n        );\r\n        const promise = CustomerServices.PayReceipt(obj);\r\n        const response = await promise;\r\n        if (response?.responseCode === 200) {\r\n          window.location.reload();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  // *For Get Customer Queue\r\n  const getBanks = async (page, limit, filter) => {\r\n    setLoader(true);\r\n\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getBanks(params);\r\n      setBanks(data?.banks);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  // *For Get Account\r\n  const getReceptionDetail = async (state) => {\r\n    setFieldsDisabled(true);\r\n    try {\r\n      let params = {\r\n        token_number: getValues1(\"token\"),\r\n      };\r\n      if (state) {\r\n        params = {\r\n          invoice_number: getValues1(\"invoicenumber\"),\r\n        };\r\n      }\r\n      const { data } = await CustomerServices.getReceiptDetail(params);\r\n      console.log(data?.receipt, \"dataaa\");\r\n      if (data?.receipt) {\r\n        setRows(data?.receipt?.sale_receipt_items);\r\n        setDetail(data?.receipt);\r\n\r\n        setValue1(\"paid\", 0);\r\n        setValue1(\"customer\", data?.receipt?.customer_name);\r\n        setValue1(\"invoice_date\", moment().toDate());\r\n        setDate(new Date(data?.receipt?.invoice_date));\r\n        setValue1(\"mobile\", data?.receipt?.customer_mobile);\r\n        setValue1(\"ref\", data?.receipt?.ref);\r\n        setValue1(\"display_customer\", data?.receipt?.customer_name);\r\n        setValue1(\"email\", data?.receipt?.customer_email);\r\n        setValue1(\"address\", data?.receipt?.address);\r\n        setValue1(\"trn\", data?.receipt?.trn);\r\n        setValue1(\"cost_center\", data?.receipt?.cost_center);\r\n        setValue1(\"caseno\", data?.receipt?.case_no);\r\n        setSubTotal(data?.receipt?.total_amount);\r\n        setValue1(\"total\", data?.receipt?.total_amount);\r\n        setValue1(\"balance\", data?.receipt?.total_amount);\r\n        setAccounts(data?.accounts?.rows);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const getServiceItem = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getServiceItem(params);\r\n\r\n      setServices(data?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  const handleServiceSelect = async (value) => {\r\n    console.log(value, \"idididid\");\r\n    setServiceItem(value);\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        service_id: value?.id,\r\n      };\r\n\r\n      const { data } = await CustomerServices.DetailServiceItem(params);\r\n      setValue(\"item_code\", data?.service?.id);\r\n      setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n      setValue(\"center_fee\", data?.service?.center_fee);\r\n      setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n\r\n      setValue(\"qty\", 1);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const getAccounts = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await FinanceServices.getAccounts(params);\r\n      console.log(data?.accounts?.rows);\r\n\r\n      setAccounts(data?.accounts?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (index, field, value) => {\r\n    const updatedRows = [...rows];\r\n    updatedRows[index] = {\r\n      ...updatedRows[index],\r\n      [field]: value,\r\n    };\r\n    setRows(updatedRows);\r\n  };\r\n  console.log(rows);\r\n  \r\n  const getTax = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await FinanceServices.getTax(params);\r\n      console.log(data?.accounts?.rows);\r\n\r\n      setTaxes(data?.tax);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  const getCategories = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getCategoryList(params);\r\n\r\n      setCategories(data?.categories);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBanks();\r\n    getAccounts();\r\n    getTax();\r\n    getCategories();\r\n    getServiceItem();\r\n    setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" });\r\n    setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}></Box>\r\n      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n        {\r\n          <>\r\n            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"10px\",\r\n                  p: 3,\r\n                  alignItems: \"flex-end\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n                  Pay Receipt\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box sx={{ p: 3 }}>\r\n                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                  <Grid item xs={12}>\r\n                    <Grid container gap={2} alignItems={\"center\"}>\r\n                      <Grid item xs={3}>\r\n                        <DatePicker\r\n                          label={\"Invoice Date :*\"}\r\n                          value={date}\r\n                          size={\"small\"}\r\n                          disabled={true}\r\n                          error={errors1?.date?.message}\r\n                          register={register1(\"date\")}\r\n                          onChange={(date) => {\r\n                            setValue1(\"date\", date);\r\n                            setDate(new Date(date));\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3} sm={12} xs={12} mt={1}>\r\n                        <InputField\r\n                          label=\"Invoice Number\"\r\n                          size=\"small\"\r\n                          disabled={fieldsDisabled}\r\n                          placeholder=\"Invoice Number\"\r\n                          register={register1(\"invoicenumber\")}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <IconButton\r\n                                onClick={() => getReceptionDetail(true)}\r\n                              >\r\n                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n                              </IconButton>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3} sm={12} xs={12} mt={2.5}>\r\n                        <PrimaryButton\r\n                          bgcolor={\"#bd9b4a\"}\r\n                          title=\"Clear\"\r\n                          onClick={() => {\r\n                            setFieldsDisabled(false);\r\n                            setValue1(\"token\", \"\");\r\n                            setValue1(\"invoicenumber\", \"\");\r\n                            setValue1(\"customer\", \"\");\r\n                            setValue1(\"invoice_date\", \"\");\r\n                            setValue1(\"mobile\", \"\");\r\n                            setValue1(\"ref\", \"\");\r\n                            setValue1(\"display_customer\", \"\");\r\n                            setValue1(\"email\", \"\");\r\n                            setValue1(\"address\", \"\");\r\n                            setValue1(\"trn\", \"\");\r\n                            setValue1(\"cost_center\", \"\");\r\n                          }}\r\n                          loading={loading}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* <Grid\r\n                                        item\r\n                                        md={5.5}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n\r\n\r\n\r\n                                            <Grid item xs={5.7} >\r\n                                                <SelectField\r\n                                                    size={'small'}\r\n                                                    label={'Customer *:'}\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                                                    selected={selectedCustomer}\r\n                                                    onSelect={(value) => {\r\n                                                        setSelectedCustomer(value)\r\n\r\n\r\n                                                    }}\r\n                                                    error={errors1?.customer?.message}\r\n                                                    register={register1(\"customer\")}\r\n                                                />\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                        </Grid>\r\n                                    </Grid> */}\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{\r\n                      border: \"2px solid black\",\r\n                      p: 2,\r\n                      borderRadius: \"15px\",\r\n                      mt: { md: 0, sm: 2, xs: 2 },\r\n                    }}\r\n                  >\r\n                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <SelectField\r\n                          size={\"small\"}\r\n                          label={\"Customer *:\"}\r\n                          disabled={true}\r\n                          options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                          selected={selectedCustomer}\r\n                          onSelect={(value) => {\r\n                            setSelectedCustomer(value);\r\n                          }}\r\n                          error={errors1?.customer?.message}\r\n                          register={register1(\"customer\")}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Display Customer\"\r\n                          size=\"small\"\r\n                          disabled={true}\r\n                          placeholder=\"Walk-in Customer\"\r\n                          register={register1(\"display_customer\")}\r\n                          error={errors1?.display_customer?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Mobile\"\r\n                          size=\"small\"\r\n                          placeholder=\"Mobile No\"\r\n                          disabled={true}\r\n                          register={register1(\"mobile\")}\r\n                          error={errors1?.display_customer?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Email\"\r\n                          size=\"small\"\r\n                          placeholder=\"Email\"\r\n                          disabled={true}\r\n                          register={register1(\"email\")}\r\n                          error={errors1?.email?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"TRN\"\r\n                          size=\"small\"\r\n                          placeholder=\"TRN\"\r\n                          disabled={true}\r\n                          register={register1(\"trn\")}\r\n                          error={errors1?.trn?.message}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Case No\"\r\n                          size=\"small\"\r\n                          placeholder=\"Case No\"\r\n                          disabled={true}\r\n                          register={register1(\"caseno\")}\r\n                          error={errors1?.caseno?.message}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Ref\"\r\n                          disabled={true}\r\n                          size=\"small\"\r\n                          placeholder=\"Reference\"\r\n                          register={register1(\"ref\")}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <SelectField\r\n                          label=\"Cost Center\"\r\n                          size=\"small\"\r\n                          disabled={true}\r\n                          options={[{ id: \"Al-ADHEED\", name: \"Al-ADHEED\" }]}\r\n                          selected={watch1(\"cost_center\")}\r\n                          onSelect={(value) => setValue1(\"cost_center\", value)}\r\n                          register={register1(\"cost_center\")}\r\n                          error={errors1?.cost_center?.message}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Address\"\r\n                          size=\"small\"\r\n                          placeholder=\"Address\"\r\n                          multiline\r\n                          disabled={true}\r\n                          rows={2}\r\n                          register={register1(\"address\")}\r\n                          error={errors1?.address?.message}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n\r\n                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows?.map((item, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell>{item?.id}</TableCell>\r\n                        <TableCell>{item?.service?.name}</TableCell>\r\n                        <TableCell>{item?.quantity}</TableCell>\r\n                        <TableCell>{item?.govt_fee}</TableCell>\r\n                        <TableCell>{item?.center_fee}</TableCell>\r\n                        <TableCell>{item?.bank_charge}</TableCell>\r\n                        <TableCell>{item?.total}</TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Transaction Id\"\r\n                            type=\"number\"\r\n                            value={item.transaction_id || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Application Id\"\r\n                            type=\"number\"\r\n                            value={item.application_id || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Ref No\"\r\n                            type=\"number\"\r\n                            value={item.ref_no || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n\r\n\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Sub-total:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {subTotal}\r\n                        </Typography>{\" \"}\r\n                        {/* Display the Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Amount Total:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {subTotal}\r\n                        </Typography>{\" \"}\r\n                        {/* This can be the same as Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    {/* </Grid> */}\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} align=\"center\">\r\n                        {\" \"}\r\n                        {/* adjust colSpan to match total columns */}\r\n                        <Box\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            gap: 2,\r\n                            justifyContent: \"center\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            onClick={() => setPayButton(true)}\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                              width: \"350px\",\r\n                              textTransform: \"capitalize\",\r\n                              backgroundColor: \"#bd9b4a\",\r\n                              \":hover\": {\r\n                                backgroundColor: \"rgb(189 155 74)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            Pay\r\n                          </Button>\r\n                          <Button\r\n                            onClick={() => setPayButton(false)}\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                              width: \"350px\",\r\n                              textTransform: \"capitalize\",\r\n                              backgroundColor: \"#bd9b4a\",\r\n                              \":hover\": {\r\n                                backgroundColor: \"rgb(189 155 74)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              {payButton && (\r\n                <Grid container mt={2} spacing={2}>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Total Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Total Amount\"\r\n                      register={register1(\"total\", {\r\n                        required: \"please enter total .\",\r\n                      })}\r\n                      error={errors1?.total?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Paid Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Paid Amount\"\r\n                      register={register1(\"paid\", {\r\n                        required: \"please enter paid .\",\r\n                      })}\r\n                      error={errors1?.paid?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Balance Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Balance Amount\"\r\n                      register={register1(\"balance\", {\r\n                        required: \"please enter balance .\",\r\n                      })}\r\n                      error={errors1?.balance?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <SelectField\r\n                      label=\"Payment Mode\"\r\n                      size=\"small\"\r\n                      options={[\r\n                        { id: \"Cash\", name: \"Cash\" },\r\n                        { id: \"Bank\", name: \"Bank\" },\r\n                        { id: \"Card\", name: \"Card\" },\r\n                      ]}\r\n                      selected={watch1(\"payment\")}\r\n                      onSelect={(value) => {\r\n                        setValue1(\"payment\", value);\r\n                        setSelectedMode(value);\r\n                      }}\r\n                      register={register1(\"payment\", {\r\n                        required: \"please enter payment .\",\r\n                      })}\r\n                      error={errors1?.payment?.message}\r\n                    />\r\n                  </Grid>\r\n                  {selectedMode?.id == \"Bank\" && (\r\n                    <Grid item md={3} sm={12} xs={12}>\r\n                      <SelectField\r\n                        label=\"Banks\"\r\n                        size=\"small\"\r\n                        options={banks}\r\n                        selected={watch1(\"bank\")}\r\n                        onSelect={(value) => setValue1(\"bank\", value)}\r\n                        register={register1(\"bank\", {\r\n                          required: \"please enter bank .\",\r\n                        })}\r\n                        error={errors1?.bank?.message}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Remarks\"\r\n                      size=\"small\"\r\n                      placeholder=\"Remarks\"\r\n                      register={register1(\"remarks\")}\r\n                      error={errors1?.remarks?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Narration\"\r\n                      size=\"small\"\r\n                      placeholder=\"Narration\"\r\n                      register={register1(\"narration\")}\r\n                      error={errors1?.narration?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid container justifyContent={\"flex-end\"}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={rows?.length == 0}\r\n                      variant=\"contained\"\r\n                      sx={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: \"#bd9b4a\",\r\n                        \":hover\": {\r\n                          backgroundColor: \"rgb(189 155 74)\",\r\n                        },\r\n                      }}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n            </Box>\r\n          </>\r\n        }\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdatePaidReceipt;\r\n"
        }
    ]
}