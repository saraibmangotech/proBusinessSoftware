{
    "sourceFile": "src/pages/Dashboard/Customers/UpdateCustomer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821264,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { Box, Checkbox, Container, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n\r\nfunction CreateCustomer() {\r\nconst theme = useTheme();\r\nconst { user } = useAuth()\r\nconst navigate = useNavigate()\r\nconst { id } = useParams()\r\nconst [formChange, setFormChange] = useState(false)\r\nconst [submit, setSubmit] = useState(false)\r\n\r\nconst { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\nconst {\r\n  register: register1,\r\n  handleSubmit: handleSubmit1,\r\n  setValue: setValue1,\r\n  getValues: getValues1,\r\n  watch,\r\n  formState: { errors: errors1 },\r\n\r\n} = useForm();\r\n\r\n// Watch all form data\r\nconsole.log(watch());\r\n\r\n\r\nconst isFormDataEmpty = (data) => {\r\n  // Check if all form fields are empty\r\n  return Object.values(data).every((value) => {\r\n    // If the value is an object (like companyLogo), check if it's empty\r\n    if (typeof value === 'object' && value !== null) {\r\n      return Object.keys(value).length === 0;\r\n    }\r\n    // Otherwise, check if the value is an empty string\r\n    return value === \"\";\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst allowFilesType = [\r\n  'image/png',\r\n  'image/jpg',\r\n  'image/jpeg',\r\n  'application/pdf',\r\n  'application/vnd.ms-excel',\r\n  'application/msword',\r\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n];\r\nconst allowFilesType2 = [\r\n  'image/png',\r\n  'image/jpg',\r\n  'image/jpeg',\r\n\r\n];\r\nconst [guarantors, setGuarantors] = useState([])\r\nconst [activeStep, setActiveStep] = React.useState(1);\r\n\r\n// *For Deposit Slip\r\nconst [progress, setProgress] = useState(0);\r\nconst [uploadedSize, setUploadedSize] = useState(0);\r\nconst [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\nconst [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\nconst [passport, setPassport] = useState()\r\nconst [allocation, setAllocation] = useState(false)\r\nconst [depositError, setDepositError] = useState(false)\r\nconst [loading, setLoading] = useState(false)\r\nconst [emailVerify, setEmailVerify] = useState(false)\r\nconst [isUploading, setIsUploading] = useState(false);\r\nconst [loader, setLoader] = useState(false)\r\nconst [fieldsDisabled, setFieldsDisabled] = useState({\r\n  monthlyVisaServiceCharges: false,\r\n  vipMedical: false,\r\n  extraTyping: true,\r\n});\r\n\r\nconst [center, setCenter] = useState(null)\r\nconst [status, setStatus] = useState(null)\r\n\r\n// *For Stepper Forms Data\r\nconst [stepFormData, setStepFormData] = useState()\r\nconst [step1FormData, setStep1FormData] = useState();\r\nconst [selectedType, setSelectedType] = useState(null)\r\nconst [date, setDate] = useState(null)\r\nconst [balanceType, setBalanceType] = useState(null)\r\n\r\n//documents array\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleNext = () => {\r\n  setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n};\r\n\r\n\r\n\r\n\r\nconst handleUpload = async (file, docs) => {\r\n  setProgress(0);\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"document\", file);\r\n    console.log(file.size);\r\n    console.log(getFileSize(file.size))\r\n    const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n      onUploadProgress: (progressEvent) => {\r\n        const uploadedBytes = progressEvent.loaded;\r\n        const percentCompleted = Math.round(\r\n          (uploadedBytes * 100) / progressEvent.total\r\n        );\r\n\r\n        setProgress(percentCompleted);\r\n        console.log(getFileSize(uploadedBytes));\r\n        setUploadedSize(getFileSize(uploadedBytes));\r\n      },\r\n    });\r\n    if (data) {\r\n      docs[0].isUpload = true;\r\n      docs[0].file = data?.data?.nations;\r\n      setSlipDetail(docs);\r\n      console.log(data, 'asddasasd');\r\n      return data?.data?.path\r\n\r\n    }\r\n  } catch (error) {\r\n    ErrorToaster(error);\r\n  }\r\n};\r\nconst submitForm = async (formData) => {\r\n  console.log(formData);\r\n  try {\r\n    let obj = {\r\n      name: formData?.companyName,\r\n\r\n      phone: formData?.mobile,\r\n      email: formData?.email,\r\n      address: formData?.businessAddress,\r\n      website: formData?.businessWebsite,\r\n      cp_name: formData?.personName,\r\n      cp_mobile: formData?.phone,\r\n\r\n    };\r\n\r\n    setStepFormData(obj);\r\n    handleNext()\r\n  } catch (error) {\r\n    ErrorToaster(error);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst submitForm1 = async (formData) => {\r\n  console.log(formData);\r\n  try {\r\n    let obj = {\r\n      id:id,\r\n      name: formData?.name,\r\n      type: selectedType?.id,\r\n      mobile: formData?.mobile,\r\n      trn: formData?.trn,\r\n      eid: formData?.eid,\r\n      trade_license_no: formData?.trade,\r\n      opening_balance: formData?.balance,\r\n      opening_balance_type: balanceType?.id,\r\n      opening_balance_date: date,\r\n      credit_limit: formData?.credit,\r\n      credit_status: status?.id,\r\n      cost_center: center?.id,\r\n      general_notes: formData?.notes,\r\n      email: formData?.email,\r\n      address: formData?.address,\r\n\r\n\r\n    };\r\n    const promise = CustomerServices.UpdateCustomer(obj);\r\n\r\n    showPromiseToast(\r\n      promise,\r\n      'Saving...',\r\n      'Added Successfully',\r\n      'Something Went Wrong'\r\n    );\r\n    const response = await promise;\r\n    if (response?.responseCode === 200) {\r\n      navigate(\"/customer-list\");\r\n    }\r\n\r\n\r\n  } catch (error) {\r\n    ErrorToaster(error);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst verifyEmail = async (value) => {\r\n  let Myemail = getValues1('email')\r\n  if (Myemail) {\r\n\r\n    try {\r\n      let obj = {\r\n        email: Myemail.toLowerCase(),\r\n        validate: true\r\n\r\n\r\n      };\r\n\r\n      console.log(obj);\r\n\r\n      const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n      console.log(status);\r\n      if (status) {\r\n        setEmailVerify(true)\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      setEmailVerify(false)\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n};\r\n\r\nconst getData = async () => {\r\n  try {\r\n    let params = {\r\n      customer_id: id\r\n    };\r\n\r\n    const { data } = await CustomerServices.getCustomerDetail(params);\r\n    let detail = data?.customer\r\n    console.log(detail);\r\n\r\n    setValue1('name', detail?.name)\r\n    setValue1('email', detail?.email)\r\n    setValue1('mobile', detail?.mobile)\r\n    setValue1('address', detail?.address)\r\n    setValue1('trn', detail?.trn)\r\n    setValue1('eid', detail?.eid)\r\n    setValue1('trade', detail?.trade_license_no)\r\n    setValue1('paymentType',{ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n    setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n    setValue1('status',{ id: detail?.credit_status, name: detail?.credit_status })\r\n    setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n    setValue1('center',{ id: detail?.cost_center, name: detail?.cost_center })\r\n    setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n    setValue1('type',{ id: detail?.type, name: detail?.type })\r\n    setBalanceType({ id: detail?.type, name: detail?.type })\r\n    setDate(new Date(detail?.opening_balance_date))\r\n    setValue1('balance', detail?.opening_balance)\r\n    setValue1('credit', detail?.credit_limit)\r\n    setValue1('notes', detail?.general_notes)\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching location:\", error);\r\n  }\r\n};\r\nuseEffect(() => {\r\n  getData()\r\n}, [])\r\n\r\n\r\n\r\n\r\nreturn (\r\n  <>\r\n    <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n    </Box>\r\n    <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n      {<>\r\n\r\n        <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Update Customer</Typography>\r\n\r\n          </Box>\r\n\r\n          <Box sx={{ p: 3 }}>\r\n\r\n\r\n            <Grid container sx={{ gap: '5px 25px' }}>\r\n              <Grid item xs={2.8}>\r\n                <InputField\r\n                  label={\" Name :*\"}\r\n                  size={'small'}\r\n                  placeholder={\" Name\"}\r\n                  error={errors1?.name?.message}\r\n                  register={register1(\"name\", {\r\n                    required:\r\n                      \"Please enter your name.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"Mobile :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"Mobile\"}\r\n                error={errors1?.mobile?.message}\r\n                register={register1(\"mobile\", {\r\n                  required:\r\n                    \"Please enter your mobile.\",\r\n                  pattern: {\r\n                    value: /^05[0-9]{8}$/,\r\n                    message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                  }\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid item xs={2.8}>\r\n                <InputField\r\n                  label={\"Email :*\"}\r\n                  size={\"small\"}\r\n                  placeholder={\"Email\"}\r\n                  error={errors1?.email?.message}\r\n                  register={register1(\"email\", {\r\n                    required: \"Please enter your email.\",\r\n                    onChange: (e) => {\r\n                      console.log('asdas');\r\n\r\n\r\n\r\n                    },\r\n                    pattern: {\r\n                      value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                      message: \"Please enter a valid email address.\"\r\n                    },\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\" Address :*\"}\r\n                size={'small'}\r\n                placeholder={\" Address\"}\r\n                error={errors1?.address?.message}\r\n                register={register1(\"address\", {\r\n                  required:\r\n                    \"Please enter your  address.\"\r\n\r\n                })}\r\n              /></Grid>\r\n\r\n\r\n\r\n\r\n\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"TRN Number :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"TRN Number\"}\r\n                error={errors1?.trn?.message}\r\n                register={register1(\"trn\", {\r\n                  required:\r\n                    \"Please enter your trn.\"\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"EID Number :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"EID Number\"}\r\n                error={errors1?.eid?.message}\r\n                register={register1(\"eid\", {\r\n                  required:\r\n                    \"Please enter your eid.\"\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"Trade License Number :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"Trade License Number\"}\r\n                error={errors1?.trade?.message}\r\n                register={register1(\"trade\", {\r\n                  required:\r\n                    \"Please enter your trade.\"\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid item xs={2.8} >\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Payment Type *:'}\r\n\r\n                  options={[{ id: 'Credit', name: 'Credit' }, { id: 'Cash', name: 'Cash' }]}\r\n                  selected={selectedType}\r\n                  onSelect={(value) => {\r\n                    setSelectedType(value)\r\n\r\n\r\n                  }}\r\n                  error={errors?.paymentType?.message}\r\n                  register={register(\"paymentType\", {\r\n                    required: 'Please select type .',\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2.8} >\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Credit Status *:'}\r\n\r\n                  options={[{ id: 'Good History', name: 'Good History' }, { id: 'In Liquidation', name: 'In Liquidation' }, { id: 'No More Work until Payment Received', name: 'No More Work until Payment Received' }]}\r\n                  selected={status}\r\n                  onSelect={(value) => {\r\n                    setStatus(value)\r\n\r\n\r\n                  }}\r\n                  error={errors?.status?.message}\r\n                  register={register(\"status\", {\r\n                    required: 'Please select status .',\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2.8} >\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Cost Center *:'}\r\n\r\n                  options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n                  selected={center}\r\n                  onSelect={(value) => {\r\n                    setCenter(value)\r\n\r\n\r\n                  }}\r\n                  error={errors?.center?.message}\r\n                  register={register(\"center\", {\r\n                    required: 'Please select center .',\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2.8} >\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Balance Type *:'}\r\n\r\n                  options={[{ id: 'Credit', name: 'Credit' }, { id: 'Debit', name: 'Debit' }]}\r\n                  selected={balanceType}\r\n                  onSelect={(value) => {\r\n                    setBalanceType(value)\r\n\r\n\r\n                  }}\r\n                  error={errors?.type?.message}\r\n                  register={register(\"type\", {\r\n                    required: 'Please select type account.',\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={2.8}>\r\n                <DatePicker\r\n                  label={\"Opening Balance Date :*\"}\r\n                  value={date}\r\n                  size={'small'}\r\n\r\n                  error={errors1?.date?.message}\r\n                  register={register1(\"date\", {\r\n                    required:\r\n                      date ? false :\r\n                        \"please enter  date.\"\r\n\r\n                  })}\r\n                  onChange={(date) => {\r\n\r\n                    setValue1('date', date)\r\n                    setDate(new Date(date));\r\n\r\n                  }\r\n\r\n                  }\r\n                /></Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"Opening Balance :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"Opening Balance \"}\r\n                error={errors1?.balance?.message}\r\n                register={register1(\"balance\", {\r\n                  required:\r\n                    \"Please enter your balance.\"\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid item xs={2.8}><InputField\r\n                label={\"Credit Limit :*\"}\r\n                size={'small'}\r\n                type={'number'}\r\n                placeholder={\"Credit Limit\"}\r\n                error={errors1?.credit?.message}\r\n                register={register1(\"credit\", {\r\n                  required:\r\n                    \"Please enter your credit.\"\r\n\r\n                })}\r\n              /></Grid>\r\n\r\n              <Grid item xs={5.5}><InputField\r\n                label={\"Notes :\"}\r\n                multiline\r\n                rows={4}\r\n                size={'small'}\r\n                placeholder={\"Notes\"}\r\n                error={errors1?.notes?.message}\r\n                register={register1(\"notes\", {\r\n                  required:\r\n                    false\r\n\r\n                })}\r\n              /></Grid>\r\n              <Grid container justifyContent={'flex-end'}>\r\n                <PrimaryButton\r\n                 bgcolor={'#bd9b4a'}\r\n                  title=\"Update\"\r\n                  type={'submit'}\r\n\r\n\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box></>}\r\n\r\n    </Box>\r\n  </>\r\n);\r\n}\r\n\r\nexport default CreateCustomer;"
        }
    ]
}