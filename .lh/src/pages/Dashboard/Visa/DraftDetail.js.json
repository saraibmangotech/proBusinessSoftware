{
    "sourceFile": "src/pages/Dashboard/Visa/DraftDetail.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821329,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Avatar, Box, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { FontFamily, Images } from \"assets\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport InputField from \"components/Input\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport SelectField from \"components/Select\";\r\nimport SystemServices from \"services/System\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport InputPhone from \"components/InputPhone\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport UploadedFile from \"components/UploadedFile\";\r\nimport ConfirmationDialog from \"components/Dialog/ConfirmationDialog\";\r\nimport AuthServices from \"services/Auth\";\r\nimport UserServices from \"services/User\";\r\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport VisaServices from \"services/Visa\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport { Button } from \"@mui/material\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport { CleanTypes, formatPermissionData, getFileSize } from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\n\r\nimport moment from \"moment\";\r\nimport styled from \"@emotion/styled\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\nfunction DraftDetail() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const tableHead1 = [{ name: 'SR No.', key: '' }, { name: 'Date ', key: 'name' }, { name: 'Customer Name', key: 'visa_eligibility' }, { name: 'Candidate Name', key: 'deposit_total' }, { name: 'Visa Rates', key: '' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n    const { register, setValue, getValues, control, handleSubmit, formState: { errors } } = useForm();\r\n    let buttonEnabled = true\r\n    // *For Dialog Box\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false);\r\n    const [confirmationDialog2, setConfirmationDialog2] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [scroll, setScroll] = React.useState('paper');\r\n    const [selectedId, setSelectedId] = useState()\r\n    // *For Customer Detail\r\n    const [visaDetail, setVisaDetail] = useState();\r\n\r\n    // *For International Country Code\r\n    const [intCode, setIntCode] = useState();\r\n    // *For Countries\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n\r\n    // *For Expiration Date\r\n    const [passportExp, setPassportExp] = useState();\r\n    const [editUser, setEditUser] = useState(false);\r\n    const [buttonDisabled, setButtonDisabled] = useState(true)\r\n    const [permissions, setPermissions] = useState([])\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n\r\n    //documents array\r\n    const [documents, setDocuments] = useState(\r\n        [\r\n            {\r\n                name: \"Employee Undertaking\",\r\n                key: \"undertaking\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n\r\n\r\n            },\r\n            {\r\n                name: \"Company Undertaking\",\r\n                key: \"cundertaking\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n\r\n            {\r\n                name: \"Passport Copy\",\r\n                key: \"passportcopy\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Digital Photo\",\r\n                key: \"digitalphoto\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Employment Contract\",\r\n                key: \"contract\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Offer Letter\",\r\n                key: \"offerletter\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Previous Emirates Ids\",\r\n                key: \"emiratesids\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Previous UAE Visa Copy\",\r\n                key: \"uaevisa\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Cancellation\",\r\n                key: \"cancellation\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"UAE Driving License\",\r\n                key: \"drivinglicense\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Work Permit\",\r\n                key: \"workpermit\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Other Documents\",\r\n                key: \"otherdoc\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n\r\n        ]\r\n    )\r\n\r\n    const checkRequiredDocuments = (docs) => {\r\n        if (docs.length < 1) {\r\n            return false\r\n        }\r\n        else {\r\n\r\n            return docs\r\n                .filter(doc => doc.is_required)\r\n                .every(doc => doc.path);\r\n        }\r\n    };\r\n    const UploadCandidateDocs = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                id: selectedId,\r\n                documents: documents\r\n            };\r\n\r\n\r\n            const promise = VisaServices.UploadCandidateDocs(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setOpen(false)\r\n                getVisaDetail()\r\n                setDocuments([\r\n                    {\r\n                        name: \"Employee Undertaking\",\r\n                        key: \"undertaking\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n\r\n\r\n                    },\r\n                    {\r\n                        name: \"Company Undertaking\",\r\n                        key: \"cundertaking\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n\r\n                    {\r\n                        name: \"Passport Copy\",\r\n                        key: \"passportcopy\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Digital Photo\",\r\n                        key: \"digitalphoto\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Employment Contract\",\r\n                        key: \"contract\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Offer Letter\",\r\n                        key: \"offerletter\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Previous Emirates Ids\",\r\n                        key: \"emiratesids\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Previous UAE Visa Copy\",\r\n                        key: \"uaevisa\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Cancellation\",\r\n                        key: \"cancellation\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"UAE Driving License\",\r\n                        key: \"drivinglicense\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Work Permit\",\r\n                        key: \"workpermit\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Other Documents\",\r\n                        key: \"otherdoc\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n\r\n                ])\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            // Any cleanup code goes here\r\n        }\r\n    };\r\n    const PublishDraft = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                id: id,\r\n\r\n            };\r\n\r\n\r\n            const promise = VisaServices.PublishDraft(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate('/visa-list')\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            // Any cleanup code goes here\r\n        }\r\n    };\r\n\r\n    // *For Handle Date\r\n    const handlePassportDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setPassportExp(\"invalid\");\r\n                return;\r\n            }\r\n            setPassportExp(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    // *For Get Countries\r\n    const getCountries = async (id) => {\r\n        try {\r\n            const { data } = await SystemServices.getCountries();\r\n            setCountries(data?.nations.rows);\r\n            setSelectedCountry(data?.nations.rows.find((e) => e?.id === id));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleDocArrayUpdate = async (e,field, value, key) => {\r\n        console.log(documents);\r\n        console.log(e,value,field,key,'valuevalue');\r\n        if (field === 'path') {\r\n            console.log(value,'valuevalue');\r\n            \r\n            if(!value){\r\n                console.log(e.target);\r\n                \r\n                e.target.value = ''\r\n            }\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, path: value }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            // Assuming you want to update the documents array\r\n            // You can replace the following line with your state updating logic\r\n            setDocuments(updatedDocuments)\r\n        } else {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, expiry_date: moment(value).format('MM-DD-YYYY') }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            setDocuments(updatedDocuments)\r\n            // Handle other fields if needed\r\n        }\r\n    }\r\n\r\n    const updateResult = (key, newResult) => {\r\n        \r\n        console.log(newResult)\r\n        const updatedDocuments = documents.map(doc => {\r\n            if (doc.key === key) {\r\n                return { ...doc, path: newResult }; // Update the path\r\n            }\r\n            return doc; // Return the document as is if the key doesn't match\r\n        });\r\n        console.log(updatedDocuments, 'updatedDocuments');\r\n        setDocuments(updatedDocuments)\r\n    };\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e, key) => {\r\n        setLoader(key)\r\n\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files.length, \"length\");\r\n\r\n            const inputElement = e.target; // Store a reference to the file input element\r\n\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n\r\n                let maxSize = 10 * 1024 * 1024;\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB');\r\n                } else {\r\n                    // Add the current date before the file name to ensure uniqueness\r\n                    const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n                    const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n                    // Create a new file with the date-prefixed name\r\n                    const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n                    // Upload the file with the new name\r\n                    const uploadedPath = await handleUpload(newFile, arr);\r\n\r\n                    if (path) {\r\n                        path += \",\" + uploadedPath;\r\n                    } else {\r\n                        path = uploadedPath;\r\n                    }\r\n                    setLoader(false)\r\n\r\n                }\r\n            }\r\n\r\n            console.log(path, \"path\");\r\n\r\n            // Clear the file input after processing\r\n            inputElement.value = \"\";\r\n\r\n            return path;\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const descriptionElementRef = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n\r\n    // *For Get Customer Detail\r\n    const getVisaDetail = async () => {\r\n        try {\r\n            let params = { visa_id: id };\r\n            const { data } = await VisaServices.getVisaDetail(params);\r\n            console.log(data);\r\n            setVisaDetail(data?.details);\r\n            let docs = data?.details?.documents\r\n            console.log(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleDownload = async (path, name) => {\r\n        try {\r\n            const url = `${process.env.REACT_APP_IMAGE_BASE_URL}${path}`;\r\n            window.open(url, '_blank');\r\n            // let params = { path: path, name: `${name}.png` };\r\n            // const response = await SystemServices.downloadDocuments(params, { responseType: 'blob' });\r\n\r\n            // // Create a Blob from the response data\r\n            // const blob = new Blob([response], { type: 'image/png' });\r\n            // const url = URL.createObjectURL(blob);\r\n\r\n            // // Create a link element, set its href to the blob URL, and trigger a click to download\r\n            // const link = document.createElement('a');\r\n            // link.href = url;\r\n\r\n            // link.download = name || 'download.png'; // Set the desired filename here\r\n            // document.body.appendChild(link);\r\n            // // Set the href attribute to the URL you want to open\r\n            // link.href = link;\r\n\r\n            // // Set the target attribute to '_blank' to open the link in a new tab\r\n            // link.target = '_blank';\r\n\r\n            // // Append the link to the body (not necessary for the link to work, but needed for click simulation)\r\n            // document.body.appendChild(link);\r\n\r\n            // // Simulate a click on the link\r\n            // // link.click();\r\n            // window.location.href = link\r\n\r\n            // // Clean up by removing the link element and revoking the object URL\r\n            // document.body.removeChild(link);\r\n            // URL.revokeObjectURL(url);\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    }\r\n\r\n\r\n    // *For Reset User Password\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            getVisaDetail();\r\n        }\r\n    }, [id]);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <Dialog\r\n                component={'form'} onSubmit={handleSubmit(UploadCandidateDocs)}\r\n                open={open}\r\n                onClose={handleClose}\r\n                maxWidth={'md'}\r\n                fullWidth={true}\r\n                scroll={scroll}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">Update Documents</DialogTitle>\r\n                <DialogContent dividers={scroll === 'paper'}>\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            {documents?.length > 0 && documents?.map((item, index) => (\r\n\r\n\r\n                                <Grid item xs={5} >\r\n                                    {console.log(documents, 'documents')}\r\n                                    {console.log(documents.find((item2 => item2?.key == item?.key)), item?.key)}\r\n\r\n\r\n                                    <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>{item?.is_required ? item?.name : item?.name + \" \" + '(If Any)'} : {item?.is_required ? '*' : ''} </Typography>\r\n                                    <UploadFile\r\n                                        Memo={true}\r\n                                        accept={allowFilesType}\r\n                                        file={documents}\r\n                                        multiple={true}\r\n                                        updateResult={updateResult}\r\n                                        fileId={item?.key}\r\n                                        error={errors[item?.key]?.message}\r\n                                        register={register(`${item?.key}`, {\r\n                                            required: item?.is_required ? documents.find((item2 => item2?.key == item?.key))?.path != '' ? false :\r\n                                            \"Please upload document.\" : false,\r\n                                            onChange: async (e) => {\r\n                                                const path = await handleUploadDocument(e);\r\n                                                if (path) {\r\n                                                    handleDocArrayUpdate(e,'path', path, item?.key)\r\n                                                    console.log(path)\r\n                                                }\r\n                                            }\r\n                                        })}\r\n                                    />\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            ))}\r\n\r\n\r\n                        </Grid>\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} onClick={handleClose}>Cancel</Button>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} type='submit'>Update</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >DRAFT DETAIL</Typography>\r\n                <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                    {permissions?.publish && <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Publish\"\r\n\r\n                        onClick={() => {\r\n                            if (!buttonEnabled) {\r\n                                showErrorToast('Please Upload All Candidate Documents')\r\n                            }\r\n                            else {\r\n                                PublishDraft()\r\n                            }\r\n                        }}\r\n\r\n\r\n                    />}\r\n\r\n                </Box>\r\n            </Box>\r\n            <Grid container sx={{ mt: 5, border: '1px solid #B6B6B6', borderRadius: \"8px\", p: '15px', justifyContent: 'space-between' }} >\r\n                <Grid item xs={4}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Company Name:</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{visaDetail?.customer?.name}</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Business Address:</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{visaDetail?.customer?.address}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Phone Number:</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{visaDetail?.customer?.userDetail?.phone}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Email :</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{visaDetail?.customer?.userDetail?.email}</Typography>\r\n                        </Grid>\r\n\r\n                        {/* <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Website:</Typography>\r\n                        </Grid> */}\r\n                        {/* <Grid item xs={7}>\r\n                            <Link sx={{ fontSize: '14px', color: '#0F2772 !important' }} href={visaDetail?.customer?.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {visaDetail?.customer?.website}\r\n                            </Link>\r\n                        </Grid> */}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={4} display={'flex'} justifyContent={\"center\"}>\r\n                    <Box>\r\n                        <Avatar\r\n                            alt=\"Remy Sharp\"\r\n                            src={visaDetail?.logo ? process.env.REACT_APP_IMAGE_BASE_URL + visaDetail?.logo : Images.logoDarkCircle}\r\n                            sx={{ width: 100, height: 100 }}\r\n                        />\r\n\r\n                    </Box>\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <Box p={2}>\r\n\r\n\r\n            </Box>\r\n            <Box p={2}>\r\n                <Typography\r\n                    mb={2}\r\n                    mt={2}\r\n                    sx={{ color: \"#03091A\", fontWeight: \"bold\" }}\r\n                    variant=\"h6\"\r\n                >\r\n                    Security Deposit:\r\n                </Typography>\r\n                <Grid container spacing={4}>\r\n                    {/* Security Deposit Section */}\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Security Deposit Scenario:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.customer?.security_deposit_scenario.toLowerCase() == \"visa\"\r\n                                    ? \"VISA\"\r\n                                    : \"PAYROLL\"}\r\n                            </strong>\r\n                        </Typography>\r\n\r\n                        {visaDetail?.customer?.security_deposit_scenario.toLowerCase() != \"visa\" && <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Payroll Percentage:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.customer?.payroll_percentage} %\r\n                            </strong>\r\n                        </Typography>}\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Security Deposit:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.customer?.deposit_total} AED\r\n                            </strong>\r\n                        </Typography>\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Previously Consumed:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {parseFloat(visaDetail?.customer?.deposit_total) - parseFloat(visaDetail?.customer?.deposit_balance || 0)} AED\r\n                            </strong>\r\n                        </Typography>\r\n\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Deposit Available:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.customer?.deposit_balance || 0} AED\r\n\r\n                            </strong>\r\n                        </Typography>\r\n\r\n                        {/* <Typography mb={2} mt={2} variant=\"body1\">\r\n                            {visaDetail?.customer?.security_deposit_scenario == \"payroll\"\r\n                                ? \"Payroll Eligibility:\"\r\n                                : \"Total Visa Quantity:\"}{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.customer?.security_deposit_scenario == \"payroll\"\r\n                                    ? visaDetail?.customer?.payroll_eligibility + \" \" + \"AED\"\r\n                                    : visaDetail?.customer?.visa_eligibility}\r\n                            </strong>\r\n                        </Typography> */}\r\n                           {visaDetail?.customer?.security_deposit_scenario == 'visa' && <Typography mb={2} mt={2} variant=\"body1\">{ 'Visa Eligibility Remaining : '} <strong style={{ color: \"#0F2772\" }}> { visaDetail?.customer?.visa_eligibility } </strong></Typography>}\r\n\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            This VR Consumption:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {visaDetail?.total_deposit_charges} AED\r\n                            </strong>\r\n                        </Typography>\r\n                        <Typography mb={2} mt={2} variant=\"body1\">\r\n                            Final Balance:{\" \"}\r\n                            <strong style={{ color: \"#0F2772\" }}>\r\n                                {parseFloat(visaDetail?.customer?.deposit_balance || 0) - parseFloat(visaDetail?.total_deposit_charges || 0)} AED\r\n                            </strong>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography\r\n                    mb={2}\r\n                    mt={2}\r\n                    sx={{ color: \"#03091A\", fontWeight: \"bold\" }}\r\n                    variant=\"h6\"\r\n                >\r\n                    Total Visa Charges: <strong style={{ color: \"#0F2772\" }}>\r\n                        {visaDetail?.total_visa_charges || 0} AED\r\n                    </strong>\r\n                </Typography>\r\n                <Grid container>\r\n                    <Box >\r\n                        <Typography sx={{ color: '#03091A', fontWeight: 'bold' }} variant=\"h6\">Candidates :</Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n\r\n                    <Grid item md={11}>\r\n                        {<Box>\r\n\r\n\r\n                            {(\r\n                                visaDetail?.candidates.length > 0 && (\r\n                                    <Fragment>\r\n                                        <PDFExport landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                            <TableContainer\r\n                                                component={Paper}\r\n                                                sx={{\r\n                                                    maxHeight: 'calc(100vh - 200px)', mt: 1, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                                }}\r\n\r\n                                            >\r\n                                                <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                    <TableHead>\r\n\r\n                                                        <Row>\r\n                                                            {tableHead1.map((cell, index) => (\r\n                                                                <Cell style={{ textAlign: cell?.name == 'SR No.' ? 'center' : 'left', paddingRight: cell?.name == 'SR No.' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                                                    key={index}\r\n\r\n                                                                >\r\n                                                                    <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                                                                        {cell?.name}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                            ))}\r\n                                                        </Row>\r\n                                                    </TableHead>\r\n                                                    <TableBody>\r\n                                                        {visaDetail?.candidates?.map((item, index) => {\r\n                                                            let result = checkRequiredDocuments(item?.documents)\r\n                                                            console.log(result);\r\n                                                            if (!result) {\r\n                                                                buttonEnabled = false\r\n                                                            }\r\n\r\n                                                            return (\r\n                                                                <Row\r\n                                                                    key={index}\r\n                                                                    sx={{\r\n                                                                        border: '1px solid #EEEEEE !important',\r\n                                                                    }}\r\n                                                                >\r\n\r\n                                                                    <Cell style={{ textAlign: 'center' }} className=\"pdf-table\">\r\n                                                                        {item?.visa_id + \"_\" + item?.id}\r\n                                                                    </Cell>\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                        {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                    </Cell>\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                        {visaDetail?.customer?.name}\r\n                                                                    </Cell>\r\n\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                        {item?.name}\r\n                                                                    </Cell>\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                        {parseFloat(item?.visa_charges)}\r\n\r\n\r\n                                                                    </Cell>\r\n\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n\r\n                                                                        {result ? <Box sx={{ cursor: 'pointer', textAlign: 'left' }}>Uploaded</Box> :\r\n\r\n                                                                            <Box component={'div'} sx={{ cursor: 'pointer', textAlign: 'left' }} onClick={() => {\r\n                                                                                if (permissions?.status_update) {\r\n\r\n                                                                                    setOpen(true);\r\n                                                                                }\r\n                                                                                setSelectedId(item?.id)\r\n                                                                                if (item?.documents?.length > 0) {\r\n                                                                                    setDocuments(item?.documents)\r\n                                                                                }\r\n                                                                            }}>\r\n                                                                                Upload\r\n                                                                            </Box>}\r\n\r\n                                                                    </Cell>\r\n                                                                    <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                        <Box>\r\n                                                                            {permissions?.candidate_details && <Box component={'img'} src={Images.detailIcon} onClick={() => navigate(`/view-candidate-detail/${item?.id}`)} width={'35px'}></Box>}\r\n\r\n                                                                        </Box>\r\n                                                                    </Cell>\r\n\r\n\r\n\r\n                                                                </Row>\r\n\r\n                                                            );\r\n                                                        })}\r\n\r\n                                                    </TableBody>\r\n                                                </Table>\r\n                                            </TableContainer>\r\n                                        </PDFExport>\r\n\r\n\r\n                                    </Fragment>\r\n                                )\r\n                            )}\r\n\r\n\r\n                            {loader && <CircleLoading />}\r\n\r\n\r\n                        </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default DraftDetail;"
        }
    ]
}