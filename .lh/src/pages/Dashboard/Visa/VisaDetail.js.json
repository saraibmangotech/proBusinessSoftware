{
    "sourceFile": "src/pages/Dashboard/Visa/VisaDetail.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821324,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  Pagination,\r\n  Paper,\r\n  Radio,\r\n  RadioGroup,\r\n  Step,\r\n  StepLabel,\r\n  Stepper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  tableCellClasses,\r\n} from \"@mui/material\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { FontFamily, Images } from \"assets\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport InputField from \"components/Input\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport SelectField from \"components/Select\";\r\nimport SystemServices from \"services/System\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport InputPhone from \"components/InputPhone\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport UploadedFile from \"components/UploadedFile\";\r\nimport ConfirmationDialog from \"components/Dialog/ConfirmationDialog\";\r\nimport AuthServices from \"services/Auth\";\r\nimport UserServices from \"services/User\";\r\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport VisaServices from \"services/Visa\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\n\r\nimport moment from \"moment\";\r\nimport styled from \"@emotion/styled\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { CleanTypes, formatPermissionData, getFileSize } from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { FormControl } from \"@mui/base\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport CandidateDetail from \"./CandidateDetail\";\r\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\r\nimport { addDays, addMonths } from \"date-fns\";\r\nimport { red } from \"@mui/material/colors\";\r\nimport Circle from '@mui/icons-material/Circle';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n    border: \"1px solid #EEEEEE\",\r\n    padding: \"15px\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n    color: \"#434343\",\r\n    paddingRight: \"50px\",\r\n    background: \"transparent\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n\r\n    textWrap: \"nowrap\",\r\n    padding: \"5px !important\",\r\n\r\n    \".MuiBox-root\": {\r\n      display: \"flex\",\r\n      gap: \"6px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      \".MuiBox-root\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    svg: {\r\n      width: \"auto\",\r\n      height: \"24px\",\r\n    },\r\n    \".MuiTypography-root\": {\r\n      textTransform: \"capitalize\",\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: \"nowrap\",\r\n    },\r\n    \".MuiButtonBase-root\": {\r\n      padding: \"8px\",\r\n      width: \"28px\",\r\n      height: \"28px\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction VisaDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { user, userLogout } = useAuth();\r\n  const tableHead1 = [\r\n    { name: \"SR No.\", key: \"\" },\r\n    { name: \"Date \", key: \"name\" },\r\n    { name: \"Customer Name\", key: \"visa_eligibility\" },\r\n    { name: \"Candidate Name\", key: \"deposit_total\" },\r\n    { name: \"Visa Rates\", key: \"\" },\r\n    { name: \"Approval Status\", key: \"\" },\r\n    { name: \"Processing Status\", key: \"\" },\r\n    { name: \"Actions\", key: \"\" },\r\n  ];\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    control,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    getValues: getValues2,\r\n    formState: { errors: errors2 },\r\n\r\n  } = useForm();\r\n  const {\r\n    register: register3,\r\n    handleSubmit: handleSubmit3,\r\n    setValue: setValue3,\r\n    getValues: getValues3,\r\n    watch,\r\n    formState: { errors: errors3 },\r\n\r\n  } = useForm();\r\n  const allowFilesType = [\r\n    \"image/png\",\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"application/pdf\",\r\n    \"application/vnd.ms-excel\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ];\r\n  // *For Dialog Box\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false);\r\n  const [confirmationDialog2, setConfirmationDialog2] = useState(false);\r\n  const [loader, setLoader] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [scroll, setScroll] = React.useState(\"paper\");\r\n  const [statusDialog, setStatusDialog] = useState(false);\r\n  const [selectedVisa, setSelectedVisa] = useState();\r\n  const [status, setStatus] = useState(null);\r\n  const [document, setDocument] = useState();\r\n  const [date, setDate] = useState(null);\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [permissions, setPermissions] = useState();\r\n  const [candidateIndex, setCandidateIndex] = useState()\r\n  const [updateCandidate, setUpdateCandidate] = useState()\r\n\r\n  const [open1, setOpen1] = useState()\r\n  const [visaType, setVisaType] = useState('In')\r\n  const [visaTenture, setVisaTenture] = useState('1 year')\r\n  const [originalCandidates, setOriginalCandidates] = useState([])\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [rejections, setRejections] = useState([])\r\n  // *For Customer Detail\r\n  const [visaDetail, setVisaDetail] = useState();\r\n\r\n  // *For International Country Code\r\n  const [intCode, setIntCode] = useState();\r\n  // *For Countries\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [customerPaymentType, setCustomerPaymentType] = useState(null)\r\n  const [candidateSalary, setCandidateSalary] = useState()\r\n  const [payrollPercent, setPayrollPercent] = useState()\r\n  const [eligibility, setEligibility] = useState()\r\n  const [salaryError, setSalaryError] = useState(false)\r\n  const [totalVisaCharges, setTotalVisaCharges] = useState()\r\n  const [candidates, setCandidates] = useState([])\r\n  const [vipMedicalCheck, setVipMedicalCheck] = useState(false)\r\n  const [buttonDisabled, setButtonDisabled] = useState(false)\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [paginatedCandidates, setPaginatedCandidates] = useState([]);\r\n  const [rejectionDialog, setRejectionDialog] = useState(false)\r\n  const [depositScenario, setDepositScenario] = useState()\r\n  const [customerDetail, setCustomerDetail] = useState(null)\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n  const [updateDialog2, setUpdateDialog2] = useState(false)\r\n  const [charges, setCharges] = useState(null)\r\n  const [consumed, setConsumed] = useState(0)\r\n\r\n\r\n  const [customerDeposit, setCustomerDeposit] = useState()\r\n\r\n  const [totalDepositCharges, setTotalDepositCharges] = useState()\r\n\r\n  const [customerBalance, setCustomerBalance] = useState()\r\n  console.log(consumed, 'consumedconsumedconsumed');\r\n\r\n\r\n  const candidatesPerPage = 3; // Adjust this value based on how many candidates you want per page\r\n\r\n  // useEffect(() => {\r\n  //   // Calculate total pages\r\n  //   console.log(candidates, 'console.log(candidates);');\r\n  //   setTotalPages(Math.ceil(candidates.length / candidatesPerPage));\r\n\r\n  //   console.log(Math.ceil(candidates.length / candidatesPerPage));\r\n\r\n  //   // Calculate the indexes for slicing\r\n  //   const indexOfLastCandidate = (currentPage + 1) * candidatesPerPage;\r\n  //   const indexOfFirstCandidate = Math.max(0, indexOfLastCandidate - candidatesPerPage);\r\n\r\n  //   // Slice the candidates array to get the candidates for the current page\r\n  //   const currentCandidates = originalCandidates.slice(\r\n  //     indexOfFirstCandidate,\r\n  //     indexOfLastCandidate\r\n  //   );\r\n\r\n  //   setCandidates([...currentCandidates]);\r\n\r\n  // }, [candidates, currentPage]);\r\n  let itemsPerPage = 20\r\n\r\n  const handlePageChange = (event, value) => {\r\n    setCurrentPage(value);\r\n\r\n    const startIndex = (value - 1) * itemsPerPage;\r\n    const endIndex = startIndex + itemsPerPage;\r\n\r\n    // // Slice the candidates based on the current page and search term\r\n    // const filteredCandidates = origianlCandidates.filter((candidate) =>\r\n    //     candidate.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    //     candidate.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    //     candidate.phone.toLowerCase().includes(searchTerm.toLowerCase())\r\n    // );\r\n\r\n    const paginatedCandidates = originalCandidates.slice(startIndex, endIndex);\r\n    setCandidates(paginatedCandidates);\r\n  };\r\n\r\n  const [fieldsDisabled, setFieldsDisabled] = useState({\r\n    monthlyVisaServiceCharges: true,\r\n    vipMedical: false,\r\n    extraTyping: true,\r\n  });\r\n\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n\r\n  //documents array\r\n  const [documents, setDocuments] = useState([\r\n    {\r\n      name: \"Employee Undertaking\",\r\n      key: \"undertaking\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n\r\n\r\n    },\r\n    {\r\n      name: \"Company Undertaking\",\r\n      key: \"cundertaking\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n    },\r\n\r\n    {\r\n      name: \"Passport Copy\",\r\n      key: \"passportcopy\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n    },\r\n    {\r\n      name: \"Digital Photo\",\r\n      key: \"digitalphoto\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n    },\r\n    {\r\n      name: \"Employment Contract\",\r\n      key: \"contract\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n    },\r\n    {\r\n      name: \"Offer Letter\",\r\n      key: \"offerletter\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true\r\n    },\r\n    {\r\n      name: \"Previous Emirates Ids\",\r\n      key: \"emiratesids\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n    {\r\n      name: \"Previous UAE Visa Copy\",\r\n      key: \"uaevisa\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n    {\r\n      name: \"Cancellation\",\r\n      key: \"cancellation\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n    {\r\n      name: \"UAE Driving License\",\r\n      key: \"drivinglicense\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n    {\r\n      name: \"Work Permit\",\r\n      key: \"workpermit\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n    {\r\n      name: \"Other Documents\",\r\n      key: \"otherdoc\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false\r\n    },\r\n\r\n  ]\r\n  )\r\n\r\n  // *For Expiration Date\r\n  const [passportExp, setPassportExp] = useState();\r\n  const [editUser, setEditUser] = useState(false);\r\n\r\n  // *For Handle Date\r\n  const handlePassportDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setPassportExp(\"invalid\");\r\n        return;\r\n      }\r\n      setPassportExp(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const getData = async (formData) => {\r\n\r\n    console.log(formData);\r\n    try {\r\n      let params = {\r\n        charges_type: \"cost\",\r\n      };\r\n\r\n      const { data } = await SystemServices.getRates(params);\r\n\r\n      let details = data?.charges;\r\n      setCharges(details);\r\n    } catch (error) {\r\n    } finally {\r\n\r\n    }\r\n  };\r\n\r\n  const updateResult = (key, newResult) => {\r\n\r\n    console.log(newResult)\r\n    const updatedDocuments = documents.map(doc => {\r\n      if (doc.key === key) {\r\n        return { ...doc, path: newResult }; // Update the path\r\n      }\r\n      return doc; // Return the document as is if the key doesn't match\r\n    });\r\n    console.log(updatedDocuments, 'updatedDocuments');\r\n    setDocuments(updatedDocuments)\r\n  };\r\n  const DepositReversal = async (status) => {\r\n    console.log(selectedVisa,'status');\r\n    \r\n  \r\n    try {\r\n      let obj = {\r\n       candidate_id:selectedVisa?.id\r\n      };\r\n\r\n      const promise = VisaServices.DepositReversal(obj);\r\n      console.log(promise);\r\n\r\n     \r\n\r\n     \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const UpdateStatus = async () => {\r\n    console.log(selectedVisa);\r\n    setButtonDisabled(true)\r\n    try {\r\n      let obj = {\r\n        id: selectedVisa?.id,\r\n        customer_id: selectedVisa?.customer_id,\r\n        approval_status: status?.id,\r\n        visa_id: selectedVisa?.visa_id,\r\n        passport_number:selectedVisa?.passport_number,\r\n        reason: status?.id == 'Rejected' ? getValues('reason') : null,\r\n        candidate_name: selectedVisa?.name\r\n\r\n      };\r\n\r\n      const promise = VisaServices.CustomerCandidateUpdate(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setStatusDialog(false);\r\n        setButtonDisabled(false)\r\n        setStatus(null)\r\n        getVisaDetail();\r\n        if(status?.id == 'Rejected'){\r\n          DepositReversal(status?.id)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleTotalVisaCharges = () => {\r\n    let fields = [];\r\n\r\n    // Determine which fields to use based on visaTenture and visaType\r\n    if (visaTenture.includes('1') && visaType.toLowerCase() == 'in') {\r\n      fields = [\r\n        '1yearInsideRate',\r\n        '1yearRenewalRates',\r\n        'monthlyVisaServiceCharges',\r\n        'vipMedical',\r\n        'extraTyping'\r\n      ];\r\n    } else if (visaTenture.includes('1') && visaType.toLowerCase() == 'out') {\r\n      fields = [\r\n        '1yearOutsideRate',\r\n        '1yearRenewalRates',\r\n        'monthlyVisaServiceCharges',\r\n        'vipMedical',\r\n        'extraTyping'\r\n      ];\r\n    } else if (visaTenture.includes('2') && visaType.toLowerCase() == 'in') {\r\n      fields = [\r\n        '2yearInsideRate',\r\n        '2yearRenewalRates',\r\n        'monthlyVisaServiceCharges',\r\n        'vipMedical',\r\n        'extraTyping'\r\n      ];\r\n    } else if (visaTenture.includes('2') && visaType.toLowerCase() === 'out') {\r\n      fields = [\r\n        '2yearOutsideRate',\r\n        '2yearRenewalRates',\r\n        'monthlyVisaServiceCharges',\r\n        'vipMedical',\r\n        'extraTyping'\r\n      ];\r\n    }\r\n\r\n    // Retrieve the current values of the specified fields\r\n    const values = getValues(fields);\r\n\r\n    // Convert non-numeric values to 0 and calculate the sum\r\n    const total = values.reduce((acc, value) => {\r\n      const numericValue = parseFloat(value) || 0;\r\n      return acc + numericValue;\r\n    }, 0);\r\n    setTotalVisaCharges(total)\r\n    console.log('Total Visa Charges:', total);\r\n  };\r\n\r\n  // *For Get Countries\r\n\r\n  const getCountries = async (id) => {\r\n    try {\r\n      const { data } = await SystemServices.getCountries();\r\n      setCountries(data?.countries?.rows);\r\n\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  // *For Get Customer Detail\r\n  const getVisaDetail = async () => {\r\n    try {\r\n      let params = { visa_id: id };\r\n      const { data } = await VisaServices.getVisaDetail(params);\r\n      console.log(data);\r\n      setVisaDetail(data?.details);\r\n      setCandidates(data?.details?.candidates.slice(0, 20));\r\n      setTotalPages(Math.ceil(data?.details?.candidates.length / itemsPerPage));\r\n      setCustomerPaymentType(data?.details?.customer?.security_deposit_scenario)\r\n      setOriginalCandidates(data?.details?.candidates)\r\n      setCustomerBalance(data?.details?.customer?.deposit_balance)\r\n      setPayrollPercent(data?.details?.customer?.payroll_percentage)\r\n      setPermissions(formatPermissionData(data?.permissions));\r\n      console.log(formatPermissionData(data?.permissions));\r\n      console.log();\r\n\r\n      if (data?.details?.customer?.security_deposit_scenario == 'payroll') {\r\n        setEligibility(data?.details?.customer?.payroll_eligibility)\r\n      }\r\n      else {\r\n        setEligibility(data?.details?.customer?.visa_eligibility)\r\n      }\r\n\r\n      setPermissions(formatPermissionData(data?.permissions));\r\n      data?.permissions.forEach((e) => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n  const UpdateCandidate = async (formData) => {\r\n    setButtonDisabled(true)\r\n    handleClose()\r\n    console.log(formData);\r\n\r\n    console.log(candidateIndex);\r\n    // let sum = 0\r\n    // if (visaTenture === '1 year') {\r\n    //   if (visaType === 'In') {\r\n    //     sum += parseFloat(Number(formData[\"1yearInsideRate\"]));\r\n    //   } else if (visaType === 'out') {\r\n    //     sum += parseFloat(Number(formData[\"1yearOutsideRate\"]));\r\n    //   }\r\n\r\n\r\n    //   sum += parseFloat(Number(formData[\"vipMedical\"])) || 0;\r\n\r\n    // } else if (visaTenture === '2 year') {\r\n    //   if (visaType === 'In') {\r\n    //     sum += parseFloat(Number(formData[\"2yearInsideRate\"]));\r\n    //   } else if (visaType === 'out') {\r\n    //     sum += parseFloat(Number(formData[\"2yearOutsideRate\"]));\r\n    //   }\r\n\r\n    // }\r\n\r\n    try {\r\n      let obj = {\r\n\r\n        phone: getValues2('Phone'),\r\n        email: getValues2('email'),\r\n        camp_location: getValues2('campLocation'),\r\n        passport_number: getValues2('passportNumber'),\r\n        camp_location: getValues2('campLocation'),\r\n        passport_expiry: date,\r\n        id: updateCandidate?.id,\r\n        documents: documents\r\n      }\r\n      console.log(obj);\r\n      const promise = VisaServices.CustomerCandidateUpdate(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n      setOpen1(false)\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        getVisaDetail()\r\n      }\r\n      setButtonDisabled(false)\r\n\r\n      // // setCandidates((prevCandidates) => [...prevCandidates, obj]);\r\n      // const updatedCandidates = candidates.map(candidate =>\r\n      //   candidate.serial_id === candidateIndex ? obj : candidate\r\n      // );\r\n      // console.log(updatedCandidates);\r\n      // setOpen1(false)\r\n      // // Update the state with the updated candidates array\r\n      // setCandidates(updatedCandidates);\r\n      reset()\r\n      setDocuments([\r\n        {\r\n          name: \"Employee Undertaking\",\r\n          key: \"undertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n\r\n\r\n        },\r\n        {\r\n          name: \"Company Undertaking\",\r\n          key: \"cundertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n\r\n        {\r\n          name: \"Passport Copy\",\r\n          key: \"passportcopy\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Digital Photo\",\r\n          key: \"digitalphoto\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Employment Contract\",\r\n          key: \"contract\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Offer Letter\",\r\n          key: \"offerletter\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Previous Emirates Ids\",\r\n          key: \"emiratesids\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Previous UAE Visa Copy\",\r\n          key: \"uaevisa\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Cancellation\",\r\n          key: \"cancellation\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"UAE Driving License\",\r\n          key: \"drivinglicense\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Work Permit\",\r\n          key: \"workpermit\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Other Documents\",\r\n          key: \"otherdoc\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n\r\n      ])\r\n      console.log(candidates);\r\n      // Add your logic to handle the form data here, e.g., sending it to an API.\r\n    } catch (error) {\r\n      console.error('Error adding candidate:', error);\r\n      // Handle the error appropriately, e.g., displaying an error message to the user.\r\n    }\r\n  }\r\n  console.log(watch(), 'watch');\r\n\r\n  const UpdateCandidate3 = async (formData) => {\r\n    console.log(formData, 'watch');\r\n\r\n    if (!salaryError) {\r\n\r\n      setUpdateDialog2(false)\r\n      console.log(candidateIndex);\r\n      let sum = 0\r\n      let sum2 = 0\r\n      if (visaTenture.includes('1')) {\r\n        if (visaType.toLowerCase() === 'in') {\r\n          sum += parseFloat(Number(formData[\"1yearInsideRate\"]));\r\n        } else if (visaType.toLowerCase() === 'out') {\r\n          sum += parseFloat(Number(formData[\"1yearOutsideRate\"]));\r\n        }\r\n\r\n\r\n        sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n      } else if (visaTenture.includes('2')) {\r\n        if (visaType.toLowerCase() === 'in') {\r\n          sum += parseFloat(Number(formData[\"2yearInsideRate\"]));\r\n        } else if (visaType.toLowerCase() === 'out') {\r\n          sum += parseFloat(Number(formData[\"2yearOutsideRate\"]));\r\n        }\r\n        sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n      }\r\n\r\n      if (visaTenture.includes('1')) {\r\n        if (visaType.toLowerCase() === 'in') {\r\n          sum2 += parseFloat(Number(charges?.one_year_inside));\r\n        } else if (visaType.toLowerCase() === 'out') {\r\n          sum2 += parseFloat(Number(charges?.one_year_outside));\r\n        }\r\n\r\n\r\n        sum2 += vipMedicalCheck ? parseFloat(Number(charges?.medical_extra)) || 0 : 0;\r\n\r\n      } else if (visaTenture.includes('2')) {\r\n        if (visaType.toLowerCase() === 'in') {\r\n          sum2 += parseFloat(Number(charges?.two_year_inside));\r\n        } else if (visaType.toLowerCase() === 'out') {\r\n          sum2 += parseFloat(Number(charges?.two_year_outside));\r\n        }\r\n        sum2 += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n      }\r\n      console.log(vipMedicalCheck, 'sum2');\r\n      let multiplier = parseFloat(payrollPercent) / 100\r\n      console.log(customerBalance);\r\n      console.log(customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier);\r\n\r\n\r\n\r\n      try {\r\n        let obj = {\r\n          serial_id: candidateIndex,\r\n          id: updateCandidate?.id,\r\n          name: formData?.candidateName,\r\n          customer_id: updateCandidate?.customer_id,\r\n          visa_id: updateCandidate?.visa_id,\r\n          phone: formData?.Phone,\r\n          email: formData?.email,\r\n          approval_status: \"Pending\",\r\n          camp_location: formData?.campLocation,\r\n          visa_charges: sum,\r\n          visa_cost: sum2,\r\n          visa_type: visaType,\r\n          visa_tenure: visaTenture,\r\n          employee_id: formData?.employeeid,\r\n          deposit_consumed: customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier,\r\n          security_deposit_visa: totalDepositCharges,\r\n          payroll_percentage: payrollPercent,\r\n          inside_rate: visaTenture.includes('1') ? formData[\"1yearInsideRate\"] : formData[\"2yearInsideRate\"],\r\n          outside_rate: visaTenture.includes('1') ? formData[\"1yearOutsideRate\"] : formData[\"2yearOutsideRate\"],\r\n          renewal_rate: 0,\r\n          total_deposit_charges: parseFloat(consumed) + (customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier),\r\n          deposit_balance: parseFloat(customerBalance) - (customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier),\r\n          vip_medical_temp: formData?.vipMedical,\r\n          vip_medical_extra: vipMedicalCheck ? formData?.vipMedical : null,\r\n          nationality: selectedCountry,\r\n          nationality_id: selectedCountry?.id,\r\n          passport_number: formData?.passportNumber,\r\n          passport_expiry: moment(formData?.passportExp).format('YYYY-MM-DD'),\r\n          visa_designation: formData?.visaDesignation,\r\n          salary_basic: formData?.basic,\r\n          salary_allowance: formData?.allowance,\r\n          salary_total: parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)).toFixed(2),\r\n          end_consumer: formData?.endConsumer,\r\n          end_consumer_company: formData?.endConsumerCompany,\r\n          documents: documents\r\n        }\r\n        console.log(totalDepositCharges);\r\n        console.log(parseFloat(consumed));\r\n        console.log(parseFloat(formData?.basic) + parseFloat(formData?.allowance));\r\n        console.log(multiplier);\r\n\r\n        console.log((customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier));\r\n\r\n\r\n        console.log(obj, 'obj');\r\n\r\n        // console.log(obj);\r\n        // // setCandidates((prevCandidates) => [...prevCandidates, obj]);\r\n        // const updatedCandidates = candidates.map(candidate =>\r\n        //   candidate.serial_id === candidateIndex ? obj : candidate\r\n        // );\r\n        // console.log(updatedCandidates);\r\n        // setUpdateDialog2(false)\r\n        // // Update the state with the updated candidates array\r\n        // setCandidates(updatedCandidates);\r\n        reset()\r\n        setDocuments([\r\n          {\r\n            name: \"Employee Undertaking\",\r\n            key: \"undertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n\r\n\r\n          },\r\n          {\r\n            name: \"Company Undertaking\",\r\n            key: \"cundertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n          },\r\n\r\n          {\r\n            name: \"Passport Copy\",\r\n            key: \"passportcopy\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n          },\r\n          {\r\n            name: \"Digital Photo\",\r\n            key: \"digitalphoto\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n          },\r\n          {\r\n            name: \"Employment Contract\",\r\n            key: \"contract\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n          },\r\n          {\r\n            name: \"Offer Letter\",\r\n            key: \"offerletter\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n          },\r\n          {\r\n            name: \"Previous Emirates Ids\",\r\n            key: \"emiratesids\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n          {\r\n            name: \"Previous UAE Visa Copy\",\r\n            key: \"uaevisa\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n          {\r\n            name: \"Cancellation\",\r\n            key: \"cancellation\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n          {\r\n            name: \"UAE Driving License\",\r\n            key: \"drivinglicense\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n          {\r\n            name: \"Work Permit\",\r\n            key: \"workpermit\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n          {\r\n            name: \"Other Documents\",\r\n            key: \"otherdoc\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n          },\r\n\r\n        ])\r\n        console.log(obj);\r\n        const promise = VisaServices.CustomerCandidateUpdate(obj);\r\n        console.log(promise);\r\n\r\n        showPromiseToast(\r\n          promise,\r\n          \"Saving...\",\r\n          \"Added Successfully\",\r\n          \"Something Went Wrong\"\r\n        );\r\n        setOpen1(false)\r\n        // Await the promise and then check its response\r\n        const response = await promise;\r\n        if (response?.responseCode === 200) {\r\n          getVisaDetail()\r\n        }\r\n        setButtonDisabled(false)\r\n        console.log(candidates);\r\n        // Add your logic to handle the form data here, e.g., sending it to an API.\r\n      } catch (error) {\r\n        console.error('Error adding candidate:', error);\r\n        // Handle the error appropriately, e.g., displaying an error message to the user.\r\n      }\r\n    }\r\n    else {\r\n      showErrorToast('Salary Limit Exceeded')\r\n    }\r\n  }\r\n\r\n  const handleUpdateCandidate = (item, index) => {\r\n    let serialId = item?.serial_id\r\n    console.log(item);\r\n    setCandidateIndex(item?.serial_id)\r\n    console.log(item?.documents, 'documents');\r\n    if (item?.documents.length > 0) {\r\n\r\n      setDocuments(item?.documents)\r\n    }\r\n    else {\r\n      setDocuments([\r\n        {\r\n          name: \"Employee Undertaking\",\r\n          key: \"undertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n\r\n\r\n        },\r\n        {\r\n          name: \"Company Undertaking\",\r\n          key: \"cundertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n\r\n        {\r\n          name: \"Passport Copy\",\r\n          key: \"passportcopy\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Digital Photo\",\r\n          key: \"digitalphoto\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Employment Contract\",\r\n          key: \"contract\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Offer Letter\",\r\n          key: \"offerletter\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Previous Emirates Ids\",\r\n          key: \"emiratesids\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Previous UAE Visa Copy\",\r\n          key: \"uaevisa\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Cancellation\",\r\n          key: \"cancellation\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"UAE Driving License\",\r\n          key: \"drivinglicense\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Work Permit\",\r\n          key: \"workpermit\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Other Documents\",\r\n          key: \"otherdoc\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n\r\n      ])\r\n    }\r\n    setUpdateCandidate(item)\r\n    setOpen1(true)\r\n    console.log(item);\r\n    setValue2('candidateName', item?.name)\r\n    setValue2('Phone', item?.phone)\r\n    setValue2('email', item?.email)\r\n    setValue2('campLocation', item?.camp_location)\r\n    setValue2('passportNumber', item?.passport_number)\r\n    setValue2('passportExp', moment(item?.passport_expiry).format('MM-DD-YYYY'))\r\n    handleDate(item?.passport_expiry)\r\n    setSelectedCountry(item?.nationality)\r\n    setValue2('nationality', item?.nationality)\r\n    setValue2('visaDesignation', item?.visa_designation)\r\n    setValue2('basic', item?.salary_basic)\r\n    setValue2('allowance', item?.salary_allowance)\r\n    setValue2('employeeid', item?.employee_id)\r\n    setValue2('endConsumer', item?.end_consumer)\r\n    setValue2('endConsumerCompany', item?.end_consumer_company)\r\n    setValue2('totalSalary', item?.salary_total)\r\n    setVisaTenture(item?.visa_tenure)\r\n    setVisaType(item?.visa_type)\r\n    if (item?.vip_medical_extra) {\r\n      setVipMedicalCheck(true)\r\n    }\r\n    else {\r\n      setVipMedicalCheck(false)\r\n    }\r\n\r\n    setValue2('2yearInsideRate', item?.inside_rate)\r\n    setValue2('2yearOutsideRate', item?.outside_rate)\r\n    setValue2('2yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n\r\n    setValue2('1yearInsideRate', item?.inside_rate)\r\n    setValue2('1yearOutsideRate', item?.outside_rate)\r\n    setValue2('1yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n\r\n    setValue2('monthlyVisaServiceCharges', item?.monthly_visa_service)\r\n    setValue2('vipMedical', item?.vip_medical_extra)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const handleUpdateCandidate3 = (item, index) => {\r\n    let serialId = item?.serial_id\r\n    console.log(item);\r\n    setCandidateIndex(item?.serial_id)\r\n    console.log(item?.documents, 'documents');\r\n    if (item?.documents.length > 0) {\r\n\r\n      setDocuments(item?.documents)\r\n    }\r\n    else {\r\n      setDocuments([\r\n        {\r\n          name: \"Employee Undertaking\",\r\n          key: \"undertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n\r\n\r\n        },\r\n        {\r\n          name: \"Company Undertaking\",\r\n          key: \"cundertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n\r\n        {\r\n          name: \"Passport Copy\",\r\n          key: \"passportcopy\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Digital Photo\",\r\n          key: \"digitalphoto\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Employment Contract\",\r\n          key: \"contract\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Offer Letter\",\r\n          key: \"offerletter\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true\r\n        },\r\n        {\r\n          name: \"Previous Emirates Ids\",\r\n          key: \"emiratesids\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Previous UAE Visa Copy\",\r\n          key: \"uaevisa\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Cancellation\",\r\n          key: \"cancellation\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"UAE Driving License\",\r\n          key: \"drivinglicense\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Work Permit\",\r\n          key: \"workpermit\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n        {\r\n          name: \"Other Documents\",\r\n          key: \"otherdoc\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false\r\n        },\r\n\r\n      ])\r\n    }\r\n\r\n    setUpdateCandidate(item)\r\n    setUpdateDialog2(true)\r\n    console.log(item);\r\n    setValue3('candidateName', item?.name)\r\n    setValue3('Phone', item?.phone)\r\n    setValue3('email', item?.email)\r\n    setValue3('campLocation', item?.camp_location)\r\n    setValue3('employeeid', item?.employee_id)\r\n\r\n    setConsumed(parseFloat(visaDetail?.total_deposit_charges) - parseFloat(item?.deposit_consumed))\r\n    setCustomerBalance(parseFloat(customerBalance) + parseFloat(item?.deposit_consumed))\r\n    setValue3('passportNumber', item?.passport_number)\r\n    setValue3('passportExp', moment(item?.passport_expiry).format('MM-DD-YYYY'))\r\n    handleDate(item?.passport_expiry)\r\n    setSelectedCountry(item?.nationality)\r\n    setValue3('nationality', item?.nationality)\r\n    setValue3('visaDesignation', item?.visa_designation)\r\n    setValue3('basic', item?.salary_basic)\r\n    setValue3('allowance', item?.salary_allowance)\r\n    setValue3('endConsumer', item?.end_consumer)\r\n\r\n    setValue3('endConsumerCompany', item?.end_consumer_company)\r\n    setValue3('totalSalary', item?.salary_total)\r\n    setVisaTenture(item?.visa_tenure)\r\n    setVisaType(item?.visa_type)\r\n    if (item?.vip_medical_extra) {\r\n      setVipMedicalCheck(true)\r\n    }\r\n    else {\r\n      setVipMedicalCheck(false)\r\n    }\r\n\r\n    setValue3('2yearInsideRate', item?.inside_rate)\r\n    setValue3('2yearOutsideRate', item?.outside_rate)\r\n    setValue3('2yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n\r\n    setValue3('1yearInsideRate', item?.inside_rate)\r\n    setValue3('1yearOutsideRate', item?.outside_rate)\r\n    setValue3('1yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n\r\n    setValue3('monthlyVisaServiceCharges', item?.monthly_visa_service)\r\n    setValue3('vipMedical', item?.vip_medical_extra)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const handleUploadDocument = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const file = e.target.files[0];\r\n      let arr = [\r\n        {\r\n          name: file?.name,\r\n          file: \"\",\r\n          type: file?.type.split(\"/\")[1],\r\n          size: getFileSize(file.size),\r\n          isUpload: false,\r\n        },\r\n      ];\r\n      if (allowFilesType.includes(file.type)) {\r\n        let maxSize = 10 * 1024 * 1024;\r\n        if (file.size > maxSize) {\r\n          showErrorToast(\"File Size Must Be Less than 10 MB\");\r\n        } else {\r\n          handleUpload(file, arr);\r\n          const path = await handleUpload(file, arr);\r\n          console.log(\"Uploaded file path:\", path);\r\n          console.log(path, \"pathpathpath\");\r\n          return path;\r\n        }\r\n      } else {\r\n        ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const totalSalaryCalc = (type) => {\r\n    let multiplier = payrollPercent / 100\r\n    if (type == 'update') {\r\n      console.log();\r\n\r\n      let basic = getValues3('basic')\r\n      let allowance = getValues3('allowance')\r\n      if (basic && allowance) {\r\n        let total = parseFloat(basic) + parseFloat(allowance)\r\n        setValue3('totalSalary', total)\r\n        console.log(total);\r\n        console.log(eligibility);\r\n        if (total > eligibility || parseFloat(parseFloat(total) * parseFloat(multiplier)) > customerBalance) {\r\n          setSalaryError(true)\r\n        }\r\n        else {\r\n          setSalaryError(false)\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      let basic = getValues('basic')\r\n      let allowance = getValues('allowance')\r\n      if (basic && allowance) {\r\n        let total = parseFloat(basic) + parseFloat(allowance)\r\n        setValue('totalSalary', total)\r\n        console.log(total);\r\n        console.log(eligibility);\r\n        if (total > eligibility || parseFloat(parseFloat(total) * parseFloat(multiplier)) > customerBalance) {\r\n          setSalaryError(true)\r\n        }\r\n        else {\r\n          setSalaryError(false)\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // *For Get Customer Detail\r\n  const getCustomerDetail = async (id, type) => {\r\n    console.log(updateCandidate);\r\n\r\n    try {\r\n      let params = { customer_id: updateCandidate?.customer_id };\r\n      if (updateCandidate?.customer_id) {\r\n\r\n        const { data } = await CustomerServices.getCustomerDetail(params);\r\n        console.log(data?.details?.security_deposit_scenario);\r\n\r\n        // setCandidates([])\r\n        setCustomerPaymentType(data?.details?.security_deposit_scenario)\r\n\r\n        setDepositScenario(data?.details?.security_deposit_scenario)\r\n        if (data?.details?.security_deposit_scenario == 'payroll') {\r\n          setEligibility(data?.details?.payroll_eligibility)\r\n        }\r\n        else {\r\n          setEligibility(data?.details?.visa_eligibility)\r\n        }\r\n        setCustomerDeposit(parseFloat(data?.details?.deposit_total))\r\n        setCustomerDetail(data?.details);\r\n        let details = data?.details\r\n        if (type == 'update') {\r\n          setValue3('1yearInsideRate', details?.one_year_inside)\r\n          setValue3('1yearOutsideRate', details?.one_year_outside)\r\n          setValue3('1yearRenewalRates', details?.one_year_renewal)\r\n          setValue3('2yearInsideRate', details?.two_year_inside)\r\n          setValue3('2yearOutsideRate', details?.two_year_outside)\r\n          setValue3('2yearRenewalRates', details?.two_year_renewal)\r\n          setValue3('monthlyVisaServiceCharges', details?.monthly_visa_service)\r\n\r\n\r\n\r\n          handleTotalVisaCharges()\r\n        }\r\n        setValue('1yearInsideRate', details?.one_year_inside)\r\n        setValue('1yearOutsideRate', details?.one_year_outside)\r\n        setValue('1yearRenewalRates', details?.one_year_renewal)\r\n        setValue('2yearInsideRate', details?.two_year_inside)\r\n        setValue('2yearOutsideRate', details?.two_year_outside)\r\n        setValue('2yearRenewalRates', details?.two_year_renewal)\r\n        setValue('monthlyVisaServiceCharges', details?.monthly_visa_service)\r\n        setValue('vipMedical', details?.medical_extra)\r\n        setValue2('vipMedical', details?.medical_extra)\r\n        if (parseFloat(details?.medical_extra) > 0) {\r\n          setVipMedicalCheck(true)\r\n        }\r\n        else {\r\n          setVipMedicalCheck(false)\r\n        }\r\n\r\n\r\n        handleTotalVisaCharges()\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n      console.log(file);\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n          console.log(getFileSize(uploadedBytes));\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n\r\n        console.log(data, \"asddasasd\");\r\n        return data?.data?.path;\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const steps = [\r\n    { label: 'Select campaign settings', rejectionDate: '2024-10-01', rejectionReason: 'Budget too low' },\r\n    { label: 'Create an ad group', rejectionDate: '2024-10-01', rejectionReason: 'Target audience not defined' },\r\n    { label: 'Create an ad', rejectionDate: '2024-10-02', rejectionReason: 'Invalid ad format' },\r\n  ];\r\n\r\n  const handleDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setDate(\"invalid\");\r\n        return;\r\n      }\r\n      setDate(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  const handleCheckboxChange = (name) => (event) => {\r\n    console.log(name);\r\n    setFieldsDisabled({\r\n      ...fieldsDisabled,\r\n      [name]: !event.target.checked,\r\n    });\r\n  };\r\n\r\n  const handleDocArrayUpdate = async (field, value, key) => {\r\n    console.log(documents);\r\n\r\n    if (field === 'path') {\r\n      const updatedDocuments = documents.map(doc => {\r\n        if (doc.key === key) {\r\n          return { ...doc, path: value }; // Update the path\r\n        }\r\n        return doc; // Return the document as is if the key doesn't match\r\n      });\r\n      console.log(updatedDocuments);\r\n      // Assuming you want to update the documents array\r\n      // You can replace the following line with your state updating logic\r\n      setDocuments(updatedDocuments)\r\n    } else {\r\n      const updatedDocuments = documents.map(doc => {\r\n        if (doc.key === key) {\r\n          return { ...doc, expiry_date: moment(value).format('MM-DD-YYYY') }; // Update the path\r\n        }\r\n        return doc; // Return the document as is if the key doesn't match\r\n      });\r\n      console.log(updatedDocuments);\r\n      setDocuments(updatedDocuments)\r\n      // Handle other fields if needed\r\n    }\r\n  }\r\n\r\n  const handleDownload = async (path, name) => {\r\n    try {\r\n      const url = `${process.env.REACT_APP_IMAGE_BASE_URL}${path}`;\r\n      window.open(url, \"_blank\");\r\n      // let params = { path: path, name: `${name}.png` };\r\n      // const response = await SystemServices.downloadDocuments(params, { responseType: 'blob' });\r\n\r\n      // // Create a Blob from the response data\r\n      // const blob = new Blob([response], { type: 'image/png' });\r\n      // const url = URL.createObjectURL(blob);\r\n\r\n      // // Create a link element, set its href to the blob URL, and trigger a click to download\r\n      // const link = document.createElement('a');\r\n      // link.href = url;\r\n\r\n      // link.download = name || 'download.png'; // Set the desired filename here\r\n      // document.body.appendChild(link);\r\n      // // Set the href attribute to the URL you want to open\r\n      // link.href = link;\r\n\r\n      // // Set the target attribute to '_blank' to open the link in a new tab\r\n      // link.target = '_blank';\r\n\r\n      // // Append the link to the body (not necessary for the link to work, but needed for click simulation)\r\n      // document.body.appendChild(link);\r\n\r\n      // // Simulate a click on the link\r\n      // // link.click();\r\n      // window.location.href = link\r\n\r\n      // // Clean up by removing the link element and revoking the object URL\r\n      // document.body.removeChild(link);\r\n      // URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n  // *For Reset User Password\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getVisaDetail();\r\n      getCountries();\r\n      getData()\r\n    }\r\n  }, [id]);\r\n\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Dialog\r\n        component={'form'} onSubmit={handleSubmit3(UpdateCandidate3)}\r\n        open={updateDialog2}\r\n\r\n        maxWidth={'md'}\r\n        fullWidth={true}\r\n        scroll={scroll}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"scroll-dialog-title\">Update Candidate</DialogTitle>\r\n        <DialogContent dividers={scroll === 'paper'}>\r\n          <DialogContentText\r\n            id=\"scroll-dialog-description\"\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}\r\n          >\r\n            <Grid container spacing={2}>\r\n              <Grid container mt={5} pl={3}>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Type : </Typography>\r\n                  <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaType}\r\n\r\n                      onChange={(e) => {\r\n                        setVisaType(e.target.value);\r\n                        console.log(getValues('1yearInsideRate'));\r\n                        console.log(getValues('1yearOutsideRate'));\r\n                        getCustomerDetail(selectedCustomer?.id, 'update')\r\n                        setTimeout(() => {\r\n                          setValue3('2yearInsideRate', getValues('2yearInsideRate'))\r\n                          setValue3('2yearOutsideRate', getValues('2yearOutsideRate'))\r\n                          console.log(getValues('1yearInsideRate'), 'asdasdasdasd');\r\n                        }, 1000);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"In\"\r\n                        control={<Radio />}\r\n                        label=\"In\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"out\"\r\n                        control={<Radio />}\r\n                        label=\"Out\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Tenure : </Typography>\r\n                  <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaTenture}\r\n                      onChange={(e) => {\r\n                        console.log(e.target.value);\r\n                        setVisaTenture(e.target.value);\r\n                        getCustomerDetail(selectedCustomer?.id, 'update')\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        value=\"1 year\"\r\n                        disabled={true}\r\n                        control={<Radio />}\r\n                        label=\"1 Year\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"2 year\"\r\n                        control={<Radio />}\r\n                        label=\"2 Years\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n              </Grid>\r\n              <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, p: 3 }}>Visa Rates : </Typography>\r\n              {<Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mt: 3 }}>{visaTenture.includes('1') ? \"1 Year Rates \" : \"2 Years Rates \"}</Typography>}\r\n\r\n              <Grid container pl={3}>\r\n\r\n                {visaTenture.includes('1') && visaType.toLowerCase() == 'in' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                  <Grid item xs={5} >\r\n                    <LabelCustomInput label={'Year Inside Rates :* '} disabled={true} StartLabel={'AED'} register={register3(\"1yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} />\r\n                  </Grid>\r\n\r\n                  {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                </Grid>}\r\n                {visaTenture.includes('1') && visaType.toLowerCase() == 'out' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                  <Grid item xs={5} >\r\n                    <LabelCustomInput label={'Year Outside Rates :*  '} disabled={true} StartLabel={'AED'} register={register3(\"1yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} />\r\n                  </Grid>\r\n\r\n                  {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '}  disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                </Grid>}\r\n\r\n                {visaTenture.includes('2') && visaType == 'in' && <>\r\n\r\n                  <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                    <Grid item xs={5} >\r\n                      <LabelCustomInput label={'Year Inside Rates :*  '} disabled={true} StartLabel={'AED'} register={register3(\"2yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} />\r\n\r\n                    </Grid>\r\n\r\n\r\n                    {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                  </Grid></>}\r\n                {visaTenture.includes('2') && visaType.toLowerCase() == 'out' && <>\r\n\r\n                  <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                    <Grid item xs={5} >\r\n                      <LabelCustomInput label={'Year Outside Rates :*  '} disabled={true} StartLabel={'AED'} register={register3(\"2yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} />\r\n                    </Grid>\r\n\r\n                    {/* \r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                  </Grid></>}\r\n              </Grid>\r\n              <Grid container p={3}>\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2 }}>Extra Costing : </Typography>\r\n\r\n                <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                  <Grid item xs={5}>\r\n                    <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n                      <Box sx={{ marginTop: '22px' }}>\r\n                        {<Checkbox checked={vipMedicalCheck} disabled={true} onChange={(e) => {\r\n                          console.log(!vipMedicalCheck);\r\n                          if (!vipMedicalCheck == true) {\r\n                            console.log(updateCandidate);\r\n\r\n\r\n                            setValue3('vipMedical', updateCandidate?.vip_medical_temp)\r\n                          }\r\n\r\n                          setVipMedicalCheck(!vipMedicalCheck)\r\n                        }} />}\r\n                      </Box>\r\n                      <LabelCustomInput\r\n                        label=\"VIP Medical Extra Charges : \"\r\n                        StartLabel=\"AED\"\r\n                        disabled={true}\r\n                        register={register3('vipMedical')}\r\n\r\n\r\n                      />\r\n\r\n                    </Box>\r\n                  </Grid>\r\n\r\n\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Candidate Name :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Candidate Name\"}\r\n                  error={errors3?.candidateName?.message}\r\n                  register={register3(\"candidateName\", {\r\n                    required:\r\n                      \"Please enter your candidate name.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Phone :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  type={'number'}\r\n                  placeholder={\"Phone\"}\r\n                  error={errors3?.Phone?.message}\r\n                  register={register3(\"Phone\", {\r\n                    required:\r\n                      \"Please enter your Phone.\",\r\n                    pattern: {\r\n                      value: /^05[0-9]{8}$/,\r\n                      message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                    }\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Email :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Email \"}\r\n                  error={errors3?.email?.message}\r\n                  register={register3(\"email\", {\r\n                    required:\r\n                      \"Please enter your email.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Camp Location  :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Camp Location \"}\r\n                  error={errors3?.campLocation?.message}\r\n                  register={register3(\"campLocation\", {\r\n                    required:\r\n                      \"Please enter your camp location.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Employee ID :*\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n\r\n\r\n                  placeholder={\"Employee ID\"}\r\n                  error={errors3?.employeeid?.message}\r\n                  register={register3(\"employeeid\", {\r\n                    required:\r\n                      \"Please enter your employee id.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Nationality :*'}\r\n                  options={countries}\r\n                  selected={selectedCountry}\r\n                  onSelect={(value) => setSelectedCountry(value)}\r\n                  error={errors3?.nationality?.message}\r\n                  register={register3(\"nationality\", {\r\n                    required: 'Please select nationality'\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Passport Number :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Passport Number\"}\r\n                  error={errors3?.passportNumber?.message}\r\n                  register={register3(\"passportNumber\", {\r\n                    required:\r\n                      \"Please enter your passport number.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <DatePicker\r\n                  label={\"Passport Expiry :*\"}\r\n                  value={date}\r\n                  disablePast={true}\r\n                  minDate={addDays(addMonths(new Date(), 6), 1)}\r\n                  size={'small'}\r\n                  error={errors3?.passportExp?.message}\r\n                  {...register3(\"passportExp\", {\r\n                    required: \"Please enter your passport expiry date.\",\r\n                    validate: (value) => {\r\n                      const minAllowedDate = addMonths(new Date(), 6);\r\n                      console.log(value, 'value');\r\n                      console.log(moment(minAllowedDate), 'value');\r\n                      console.log(moment(value) > moment(minAllowedDate), 'value');\r\n\r\n                      return moment(value) > moment(minAllowedDate) || \"Passport expiry date must be at least 6 months from today.\";\r\n                    },\r\n                  })}\r\n                  onChange={(date) => {\r\n                    handleDate(date);\r\n                    setValue3(\"passportExp\", date, { shouldValidate: true });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Visa Designation :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Visa Designation\"}\r\n                  error={errors3?.visaDesignation?.message}\r\n                  register={register3(\"visaDesignation\", {\r\n                    required:\r\n                      \"Please enter your visa designation .\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} >\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Salary : </Typography>\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput label={'Basic : '} StartLabel={'AED'} placeholder={'Basic'} error={errors?.basic?.message} register={register3(\"basic\", { required: \"Enter basic  salary\", onChange: (e) => totalSalaryCalc('update') })} />\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput allowance={true} label={'Allowance : '} StartLabel={'AED'} placeholder={'Allowance'} error={errors?.allowance?.message} register={register3(\"allowance\", { required: \"Enter allowance \", onChange: (e) => totalSalaryCalc('update') })} />\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput disabled={true} label={'Total Salary : '} StartLabel={'AED'} placeholder={'Total'} register={register3(\"totalSalary\")} />\r\n                {(customerPaymentType == 'payroll' && salaryError) ? <p style={{ color: 'red' }}>Salary Limit Exceeded </p> : ''}\r\n              </Grid>\r\n              {/* <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer\"}\r\n                                    error={errors2?.endConsumer?.message}\r\n                                    register={register2(\"endConsumer\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer  .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid> */}\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"End Consumer Company :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"End Consumer Company \"}\r\n                  error={errors3?.endConsumerCompany?.message}\r\n                  register={register3(\"endConsumerCompany\", {\r\n                    required:\r\n                      \"Please enter your end consumer company .\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} >\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Documents : </Typography>\r\n              </Grid>\r\n              {documents?.length > 0 && documents?.map((item, index) => (\r\n\r\n\r\n                <Grid item xs={5} >\r\n                  <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>{item?.is_required ? item?.name : item?.name + '(If Any)'} :{item?.is_required ? '*' : ' '} </Typography>\r\n                  <UploadFile\r\n                    Memo={true}\r\n                    accept={allowFilesType}\r\n                    file={documents}\r\n                    multiple={true}\r\n                    updateResult={updateResult}\r\n                    fileId={item?.key}\r\n                    error={errors3[item?.key]?.message}\r\n                    loader={loader}\r\n                    disabled={isUploading}\r\n                    register={register3(`${item?.key}`, {\r\n                      required: item?.is_required ? documents.find((item2 => item2?.key == item?.key))?.path != '' ? false :\r\n                        \"Please upload document.\" : false,\r\n                      onChange: async (e) => {\r\n                        setIsUploading(true); // Set uploading to true when the upload starts\r\n                        const path = await handleUploadDocument(e, item?.key);\r\n                        if (path) {\r\n                          handleDocArrayUpdate('path', path, item?.key);\r\n                          console.log(path);\r\n                        }\r\n                        setIsUploading(false); // Reset uploading status when done\r\n                      }\r\n                    })}\r\n                  />\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n              ))}\r\n\r\n\r\n            </Grid>\r\n\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button sx={{ fontFamily: 'Public Sans' }} onClick={() => { setUpdateDialog2(false); setCustomerBalance(parseFloat(customerBalance) - parseFloat(updateCandidate?.deposit_consumed)); setConsumed(parseFloat(consumed) - parseFloat(updateCandidate?.deposit_consumed)) }}>Cancel</Button>\r\n          <Button sx={{ fontFamily: 'Public Sans' }} disabled={(customerPaymentType == 'payroll' && salaryError) ? true : false} type='submit'>Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Dialog\r\n        component={'form'} onSubmit={handleSubmit2(UpdateCandidate)}\r\n        open={open1}\r\n\r\n        maxWidth={'md'}\r\n        fullWidth={true}\r\n        scroll={scroll}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"scroll-dialog-title\">Update Candidate</DialogTitle>\r\n        <DialogContent dividers={scroll === 'paper'}>\r\n          <DialogContentText\r\n            id=\"scroll-dialog-description\"\r\n            ref={descriptionElementRef}\r\n            tabIndex={-1}\r\n          >\r\n            <Grid container spacing={2}>\r\n              <Grid container mt={5} pl={3}>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Type : </Typography>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}> {visaType}</Typography>\r\n                  {/*                  \r\n                  <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaType}\r\n                      onChange={(e) => {\r\n                        setVisaType(e.target.value);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        value=\"In\"\r\n                        control={<Radio />}\r\n                        label=\"In\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        value=\"out\"\r\n                        control={<Radio />}\r\n                        label=\"Out\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl> */}\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Tenure : </Typography>\r\n                  <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>{visaTenture} </Typography>\r\n                  {/* <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaTenture}\r\n                      onChange={(e) => {\r\n                        console.log(e.target.value);\r\n                        setVisaTenture(e.target.value);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        value=\"1 year\"\r\n                        control={<Radio />}\r\n                        label=\"1 Year\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        value=\"2 year\"\r\n                        control={<Radio />}\r\n                        label=\"2 Years\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl> */}\r\n                </Grid>\r\n\r\n              </Grid>\r\n              <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, p: 3 }}>Visa Rates : </Typography>\r\n              {<Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mt: 3 }}>{visaTenture.includes('1') ? \"1 Year Rates \" : \"2 Years Rates \"}</Typography>}\r\n\r\n              <Grid container pl={3}>\r\n\r\n                {visaTenture.includes('1') && visaType.toLowerCase() == 'in' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                  <Grid item xs={5} >\r\n                    <LabelCustomInput label={'Year Inside Rates :* '} disabled={true} StartLabel={'AED'} register={register2(\"1yearInsideRate\", { required: false, onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                  </Grid>\r\n\r\n                  {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                </Grid>}\r\n                {visaTenture.includes('1') && visaType.toLowerCase() == 'out' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                  <Grid item xs={5} >\r\n                    <LabelCustomInput label={'Year Outside Rates :*  '} disabled={true} StartLabel={'AED'} register={register2(\"1yearOutsideRate\", { required: false, onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                  </Grid>\r\n\r\n                  {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '}  disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                </Grid>}\r\n\r\n                {visaTenture.includes('2') && visaType.toLowerCase() == 'in' && <>\r\n\r\n                  <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                    <Grid item xs={5} >\r\n                      <LabelCustomInput label={'Year Inside Rates :*  '} disabled={true} StartLabel={'AED'} register={register2(\"2yearInsideRate\", { required: false, onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n\r\n                    </Grid>\r\n\r\n\r\n                    {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                  </Grid></>}\r\n                {visaTenture.includes('2') && visaType.toLowerCase() == 'out' && <>\r\n\r\n                  <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                    <Grid item xs={5} >\r\n                      <LabelCustomInput label={'Year Outside Rates :*  '} disabled={true} StartLabel={'AED'} register={register2(\"2yearOutsideRate\", { required: false, onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                    </Grid>\r\n\r\n                    {/* \r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                  </Grid></>}\r\n              </Grid>\r\n              <Grid container p={3}>\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2 }}>Extra Costing : </Typography>\r\n\r\n                <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                  <Grid item xs={5}>\r\n                    <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n                      <Box sx={{ marginTop: '22px' }}>\r\n                        {<Checkbox checked={vipMedicalCheck} disabled={true} onChange={() => setVipMedicalCheck(!vipMedicalCheck)} />}\r\n                      </Box>\r\n                      <LabelCustomInput\r\n                        label=\"VIP Medical Extra Charges : \"\r\n                        StartLabel=\"AED\"\r\n                        register={register2('vipMedical', { required: false })}\r\n                        postfix={user?.user_type == 'C' ? false : true}\r\n                        disabled={true}\r\n                      />\r\n\r\n                    </Box>\r\n                  </Grid>\r\n\r\n\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Candidate Name :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  disabled={true}\r\n                  placeholder={\"Candidate Name\"}\r\n                  error={errors2?.candidateName?.message}\r\n                  register={register2(\"candidateName\", {\r\n                    required:\r\n                      false\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Phone :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  type={'number'}\r\n                  placeholder={\"Phone\"}\r\n                  error={errors2?.Phone?.message}\r\n                  register={register2(\"Phone\", {\r\n                    required:\r\n                      \"Please enter your Phone.\",\r\n                    pattern: {\r\n                      value: /^05[0-9]{8}$/,\r\n                      message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                    }\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Email :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Email \"}\r\n                  error={errors2?.email?.message}\r\n                  register={register2(\"email\", {\r\n                    required:\r\n                      \"Please enter your email.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Camp Location  :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  placeholder={\"Camp Location \"}\r\n                  error={errors2?.campLocation?.message}\r\n                  register={register2(\"campLocation\", {\r\n                    required:\r\n                      \"Please enter your camp location.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Employee ID  :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  disabled={true}\r\n                  placeholder={\"Employee ID \"}\r\n                  error={errors2?.employeeid?.message}\r\n                  register={register2(\"employeeid\", {\r\n                    required:\r\n                      \"Please enter your employee id.\"\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <SelectField\r\n                  size={'small'}\r\n                  label={'Nationality :*'}\r\n                  options={countries}\r\n                  disabled={true}\r\n                  selected={selectedCountry}\r\n                  onSelect={(value) => setSelectedCountry(value)}\r\n                  error={errors2?.nationality?.message}\r\n                  register={register2(\"nationality\", {\r\n                    required: false\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Passport Number :\"}\r\n                  size={'small'}\r\n\r\n                  fullWidth={true}\r\n                  placeholder={\"Passport Number\"}\r\n                  error={errors2?.passportNumber?.message}\r\n                  register={register2(\"passportNumber\", {\r\n                    required:\r\n                      'passport number is required'\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n              <DatePicker\r\n                  label={\"Passport Expiry :*\"}\r\n                  value={date}\r\n                  disablePast={true}\r\n                  minDate={addDays(addMonths(new Date(), 6), 1)}\r\n                  size={'small'}\r\n                  error={errors2?.passportExp?.message}\r\n                  {...register2(\"passportExp\", {\r\n                    required: \"Please enter your passport expiry date.\",\r\n                    validate: (value) => {\r\n                      const minAllowedDate = addMonths(new Date(), 6);\r\n                      console.log(value, 'value');\r\n                      console.log(moment(minAllowedDate), 'value');\r\n                      console.log(moment(value) > moment(minAllowedDate), 'value');\r\n\r\n                      return moment(value) > moment(minAllowedDate) || \"Passport expiry date must be at least 6 months from today.\";\r\n                    },\r\n                  })}\r\n                  onChange={(date) => {\r\n                    handleDate(date);\r\n                    setValue2(\"passportExp\", date, { shouldValidate: true });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Visa Designation :\"}\r\n                  size={'small'}\r\n                  disabled={true}\r\n                  fullWidth={true}\r\n                  placeholder={\"Visa Designation\"}\r\n                  error={errors2?.visaDesignation?.message}\r\n                  register={register2(\"visaDesignation\", {\r\n                    required:\r\n                      false\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} >\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Salary : </Typography>\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput label={'Basic : '} disabled={true} StartLabel={'AED'} placeholder={'Basic'} error={errors?.basic?.message} register={register2(\"basic\", { required: false, onChange: (e) => totalSalaryCalc('update') })} />\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput label={'Allowance : '} disabled={true} StartLabel={'AED'} placeholder={'Allowance'} error={errors?.allowance?.message} register={register2(\"allowance\", { required: false, onChange: (e) => totalSalaryCalc('update') })} />\r\n              </Grid>\r\n              <Grid item xs={6} >\r\n                <LabelCustomInput label={'Total Salary : '} StartLabel={'AED'} placeholder={'Total'} register={register2(\"totalSalary\")} disabled={true} />\r\n                {(customerPaymentType == 'payroll' && salaryError) ? <p style={{ color: 'red' }}>Salary Limit Exceeded </p> : ''}\r\n              </Grid>\r\n              {/* <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer\"}\r\n                                    error={errors2?.endConsumer?.message}\r\n                                    register={register2(\"endConsumer\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer  .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid> */}\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"End Consumer Company :\"}\r\n                  size={'small'}\r\n                  fullWidth={true}\r\n                  disabled={true}\r\n                  placeholder={\"End Consumer Company \"}\r\n                  error={errors2?.endConsumerCompany?.message}\r\n                  register={register2(\"endConsumerCompany\", {\r\n                    required:\r\n                      false\r\n\r\n                  })}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} >\r\n                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Documents : </Typography>\r\n              </Grid>\r\n              {documents?.length > 0 && documents.map((item, index) => (\r\n                <Grid item xs={5} key={index}>\r\n                  <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>\r\n                    {item?.is_required ? item?.name : `${item?.name} (If Any)`} : {item?.is_required ? '*' : ' '}\r\n                  </Typography>\r\n                  <UploadFile\r\n                    Memo={true}\r\n                    accept={allowFilesType}\r\n                    file={documents}\r\n                    multiple={true}\r\n                    disabled={isUploading}\r\n                    updateResult={updateResult}\r\n                    fileId={item?.key}\r\n                    error={errors2[item?.key]?.message}\r\n                    register={register2(`${item?.key}`, {\r\n                      required: item?.is_required ? documents.find((item2 => item2?.key == item?.key))?.path != '' ? false :\r\n                        \"Please upload document.\" : false,\r\n                      onChange: async (e) => {\r\n                        setIsUploading(true); // Set uploading to true when the upload starts\r\n                        const path = await handleUploadDocument(e, item?.key);\r\n                        if (path) {\r\n                          handleDocArrayUpdate('path', path, item?.key);\r\n                          console.log(path);\r\n                        }\r\n                        setIsUploading(false); // Reset uploading status when done\r\n                      }\r\n                    })}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button sx={{ fontFamily: 'Public Sans' }} onClick={() => setOpen1(false)}>Cancel</Button>\r\n          <Button sx={{ fontFamily: 'Public Sans' }} disabled={buttonDisabled}\r\n            type='submit'>Update</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={[\r\n                  { id: \"Approved\", name: \"Approved\" },\r\n                  { id: \"Rejected\", name: \"Rejected\" },\r\n                ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            {status?.id == 'Rejected' && <Grid item xs={12} sm={12}>\r\n              <InputField\r\n                label={\"Reason :*\"}\r\n                size={\"small\"}\r\n\r\n                multiline={true}\r\n                rows={5}\r\n                placeholder={\"Reason\"}\r\n                error={errors?.reason?.message}\r\n                register={register(\"reason\", {\r\n                  required: 'Please Enter Reason',\r\n                })}\r\n              />\r\n            </Grid>}\r\n\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                  disabled={buttonDisabled}\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={rejectionDialog}\r\n        onClose={() => setRejectionDialog(false)}\r\n        title={\"Rejections\"}\r\n      >\r\n        <Box >\r\n          <Grid container spacing={2}>\r\n\r\n            <Box sx={{ width: '100%' }}>\r\n              <Stepper activeStep={-1} orientation=\"vertical\">\r\n                {rejections?.map((item, index) => (\r\n                  <Step key={index}>\r\n                    <StepLabel StepIconComponent={() => <ErrorIcon sx={{ color: red[500] }} />}>\r\n                      <Typography variant=\"body2\" color={'black'}>\r\n                        <span style={{ fontWeight: 'bold' }}>Rejection Date : </span> {moment(item?.created_at).format('DD-MM-YYYY')}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color={'black'}>\r\n                        <span style={{ fontWeight: 'bold' }}>Reason : </span> {item?.reason}\r\n                      </Typography>\r\n                    </StepLabel>\r\n                  </Step>\r\n                ))}\r\n              </Stepper>\r\n            </Box>\r\n\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      {/* <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={\"Change Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container >\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Select Status :\"}\r\n                                options={statuses}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value);\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Date :\"}\r\n                                value={date}\r\n                                size={\"small\"}\r\n                                error={errors?.date?.message}\r\n                                register={register(\"date\", {\r\n                                    required: \"Please enter  date.\",\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date);\r\n                                    setValue(\"date\", date);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Box sx={{ fontWeight: \"bold\" }}>Upload Document:</Box>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors?.document?.message}\r\n\r\n                                file={document}\r\n                                register={register(\"document\", {\r\n                                    required: false,\r\n                                    onChange: async (e) => {\r\n                                        const path = await handleUploadDocument(e);\r\n                                        if (path) {\r\n                                            setDocument(path);\r\n                                        }\r\n                                    }\r\n                                })}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setStatusDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog> */}\r\n\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          gap: \"10px\",\r\n          alignItems: \"flex-end\",\r\n        }}\r\n      >\r\n        <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n          VISA DETAIL\r\n        </Typography>\r\n        <PrimaryButton\r\n          title=\"Back\"\r\n          style={{ backgroundColor: Colors.greyShade }}\r\n          onClick={() => navigate(-1)}\r\n        />\r\n        {/* <Box sx={{ display: 'flex', gap: '10px' }}>\r\n          <PrimaryButton\r\n           bgcolor={'#bd9b4a'}\r\n            title=\"Edit\"\r\n            onClick={() => navigate(`/update-customer/${id}`)}\r\n\r\n\r\n          />\r\n\r\n        </Box> */}\r\n      </Box>\r\n      <Grid\r\n        container\r\n        sx={{\r\n          mt: 5,\r\n          border: \"1px solid #B6B6B6\",\r\n          borderRadius: \"8px\",\r\n          p: \"15px\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Grid item xs={4}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Company Name:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.name}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Business Address:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.address}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Phone Number:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.userDetail?.phone}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Email :\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.userDetail?.email}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Website:</Typography>\r\n                        </Grid> */}\r\n            {/* <Grid item xs={7}>\r\n                            <Link sx={{ fontSize: '14px', color: '#0F2772 !important' }} href={visaDetail?.customer?.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {visaDetail?.customer?.website}\r\n                            </Link>\r\n                        </Grid> */}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4} display={\"flex\"} justifyContent={\"center\"}>\r\n          <Box>\r\n            <Avatar\r\n              alt=\"Remy Sharp\"\r\n              src={\r\n                visaDetail?.logo\r\n                  ? process.env.REACT_APP_IMAGE_BASE_URL + visaDetail?.logo\r\n                  : Images.logoDarkCircle\r\n              }\r\n              sx={{ width: 100, height: 100 }}\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        {/* <Grid item xs={4}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Guarantor Name:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.guarantor_name}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: \"14px\" }} variant=\"body1\">\r\n                Guarantor Number:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography\r\n                sx={{ fontSize: \"14px\", color: \"#0F2772\" }}\r\n                variant=\"body1\"\r\n              >\r\n                {visaDetail?.customer?.guarantor_number}\r\n              </Typography>\r\n            </Grid>\r\n\r\n       \r\n          </Grid>\r\n        </Grid> */}\r\n      </Grid>\r\n      <Box p={2}>\r\n        <Typography\r\n          mb={2}\r\n          mt={2}\r\n          sx={{ color: \"#03091A\", fontWeight: \"bold\" }}\r\n          variant=\"h6\"\r\n        >\r\n          Security Deposit:\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* Security Deposit Section */}\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              Security Deposit Scenario:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.customer?.security_deposit_scenario.toLowerCase() == \"visa\"\r\n                  ? \"VISA\"\r\n                  : \"PAYROLL\"}\r\n              </strong>\r\n            </Typography>\r\n\r\n            {visaDetail?.customer?.security_deposit_scenario.toLowerCase() != \"visa\" && <Typography mb={2} mt={2} variant=\"body1\">\r\n              Payroll Percentage:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.customer?.payroll_percentage} %\r\n              </strong>\r\n            </Typography>}\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              Security Deposit:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.customer?.deposit_total} AED\r\n              </strong>\r\n            </Typography>\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              Previously Consumed:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {parseFloat(visaDetail?.customer?.deposit_total) - parseFloat(visaDetail?.last_deposit_balance || 0)} AED\r\n              </strong>\r\n            </Typography>\r\n\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              Deposit Available:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.last_deposit_balance || 0} AED\r\n\r\n              </strong>\r\n            </Typography>\r\n\r\n            {/* <Typography mb={2} mt={2} variant=\"body1\">\r\n              {visaDetail?.customer?.security_deposit_scenario == \"payroll\"\r\n                ? \"Payroll Eligibility:\"\r\n                : \"Total Visa Quantity:\"}{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.customer?.security_deposit_scenario == \"payroll\"\r\n                  ? visaDetail?.customer?.payroll_eligibility + \" \" + \"AED\"\r\n                  : visaDetail?.customer?.visa_eligibility}\r\n              </strong>\r\n            </Typography> */}\r\n               {visaDetail?.customer?.security_deposit_scenario == 'visa' && <Typography mb={2} mt={2} variant=\"body1\">{ 'Visa Eligibility Remaining : '} <strong style={{ color: \"#0F2772\" }}> { visaDetail?.customer?.visa_eligibility_remaining} </strong></Typography>}\r\n\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              This VR Consumption:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.total_deposit_charges} AED\r\n              </strong>\r\n            </Typography>\r\n            <Typography mb={2} mt={2} variant=\"body1\">\r\n              Final Balance:{\" \"}\r\n              <strong style={{ color: \"#0F2772\" }}>\r\n                {visaDetail?.current_deposit_balance || 0} AED\r\n              </strong>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography\r\n          mb={2}\r\n          mt={2}\r\n          sx={{ color: \"#03091A\", fontWeight: \"bold\" }}\r\n          variant=\"h6\"\r\n        >\r\n          Total Visa Charges: <strong style={{ color: \"#0F2772\" }}>\r\n            {visaDetail?.total_visa_charges || 0} AED\r\n          </strong>\r\n        </Typography>\r\n        <Grid container>\r\n          <Box>\r\n            <Typography\r\n              sx={{ color: \"#03091A\", fontWeight: \"bold\" }}\r\n              variant=\"h6\"\r\n            >\r\n              Candidates :\r\n            </Typography>\r\n          </Box>\r\n        </Grid>\r\n\r\n        <Grid container mt={2}>\r\n          <Grid item md={12}>\r\n            {\r\n              <Box>\r\n                {candidates.length > 0 && (\r\n                  <Fragment>\r\n                    <PDFExport\r\n                      landscape={true}\r\n                      paperSize=\"A4\"\r\n                      margin={5}\r\n                      fileName=\"Import Customers\"\r\n                    >\r\n                      <TableContainer\r\n                        component={Paper}\r\n                        sx={{\r\n                          maxHeight: \"calc(100vh - 200px)\",\r\n                          backgroundColor: \"transparent\",\r\n                          boxShadow: \"none !important\",\r\n                          borderRadius: \"0px !important\",\r\n                        }}\r\n                      >\r\n                        <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                          <TableHead>\r\n                            <Row>\r\n                              {tableHead1.map((cell, index) => (\r\n                                <Cell\r\n                                  style={{\r\n                                    textAlign:\r\n                                      cell?.name == \"SR No.\"\r\n                                        ? \"center\"\r\n                                        : \"left\",\r\n                                    paddingRight:\r\n                                      cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                  }}\r\n                                  className=\"pdf-table\"\r\n                                  key={index}\r\n                                >\r\n                                  <Box\r\n                                    sx={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"flex-end\",\r\n                                    }}\r\n                                  >\r\n                                    {cell?.name}\r\n                                  </Box>\r\n                                </Cell>\r\n                              ))}\r\n                            </Row>\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {candidates.length > 0 && candidates?.sort((a, b) => a.serial_id - b.serial_id).map((item, index) => {\r\n                              console.log(item?.statuses);\r\n                              let sorteddata = item?.statuses?.sort(\r\n                                (a, b) => a.id - b.id\r\n                              );\r\n                              console.log(sorteddata);\r\n\r\n                              return (\r\n                                <Row\r\n                                  key={index}\r\n                                  sx={{\r\n                                    border: \"1px solid #EEEEEE !important\",\r\n                                  }}\r\n                                >\r\n                                  <Cell\r\n                                    style={{ textAlign: \"center\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    {item?.visa_id + \"_\" + item?.serial_id}\r\n                                  </Cell>\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    {moment(item?.created_at).format(\r\n                                      \"YYYY-MM-DD\"\r\n                                    )}\r\n                                  </Cell>\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    {visaDetail?.customer?.name}\r\n                                  </Cell>\r\n\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    {item?.name}\r\n                                  </Cell>\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    {item?.visa_charges}\r\n                                  </Cell>\r\n\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n\r\n                                    <Box\r\n                                      component={\"div\"}\r\n                                      sx={{\r\n                                        cursor: \"pointer\",\r\n                                        display: \"flex !important\",\r\n                                        justifyContent: \"flex-start !important\",\r\n                                        alignItems: \"center\",\r\n                                      }}\r\n                                      onClick={() => {\r\n                                        if (visaDetail?.payment_status == 'paid' && item?.approval_status == \"Pending\" && user?.user_type != 'C') {\r\n                                          setValue('reason', '')\r\n                                          setStatusDialog(true);\r\n                                        } else if (visaDetail?.payment_status != 'paid' && user?.user_type != 'C') {\r\n                                          showErrorToast(\"Please complete payment before updating\")\r\n                                        }\r\n                                        setSelectedVisa(item);\r\n                                      }}\r\n                                    >\r\n                                      <Box\r\n                                        component={\"img\"}\r\n                                        src={\r\n                                          item?.approval_status === \"Pending\"\r\n                                            ? Images.pendingIcon\r\n                                            : item?.approval_status === \"Approved\"\r\n                                              ? Images.successIcon\r\n                                              : item?.approval_status === \"Rejected\"\r\n                                                ? Images.errorIcon : \"\"\r\n\r\n                                        }\r\n                                        width={\"13px\"}\r\n                                        alt=\"status icon\"\r\n                                      />\r\n                                      <Box\r\n                                        component={\"span\"}\r\n                                        sx={{ marginLeft: \"5px\" }}\r\n                                      >\r\n                                        {item?.approval_status === \"Pending\"\r\n                                          ? \"Pending\"\r\n                                          : item?.approval_status === \"Approved\"\r\n                                            ? \"Approved\"\r\n                                            : item?.approval_status === \"Rejected\"\r\n                                              ? \"Rejected\" : \"\"}\r\n                                      </Box>\r\n                                    </Box>\r\n                                  </Cell>\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    <Box\r\n                                      component={\"div\"}\r\n                                      sx={{\r\n                                        cursor: \"pointer\",\r\n                                        display: \"flex !important\",\r\n                                        justifyContent: \"flex-start !important\",\r\n                                      }}\r\n\r\n                                    >\r\n                                      <Box\r\n                                        component={\"img\"}\r\n                                        src={sorteddata ?\r\n                                          sorteddata[sorteddata?.length - 1]\r\n                                            ?.status == \"Medical\"\r\n                                            ? Images.blueCircle\r\n                                            : sorteddata[sorteddata?.length - 1]\r\n                                              ?.status == \"Stamping\"\r\n                                              ? Images.successIcon\r\n                                              : sorteddata[sorteddata?.length - 1]\r\n                                                ?.status == \"Emirates Id\"\r\n                                                ? Images.lightGreenCircle\r\n                                                : sorteddata[sorteddata?.length - 1]\r\n                                                  ?.status == \"Entry permit\"\r\n                                                  ? Images.pendingIcon\r\n                                                  : sorteddata[sorteddata?.length - 1]\r\n                                                    ?.status == \"Change Status\"\r\n                                                    ? Images.pendingIcon\r\n                                                    : Images.errorIcon\r\n                                          : ''}\r\n                                        width={\"13px\"}\r\n                                      ></Box>\r\n                                      {sorteddata && sorteddata[sorteddata?.length - 1]?.status}\r\n                                    </Box>\r\n                                  </Cell>\r\n                                  <Cell\r\n                                    style={{ textAlign: \"left\" }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    <Box>\r\n                                      {sorteddata && (item?.approval_status == \"Approved\" && (sorteddata[sorteddata?.length - 1]?.status == 'Stamping' || sorteddata[sorteddata?.length - 1]?.status == 'Complete (EID)')) && <Box\r\n                                        component={\"img\"}\r\n                                        src={Images.editIcon}\r\n                                        onClick={() =>\r\n                                          handleUpdateCandidate(item, index)\r\n                                        }\r\n                                        width={\"35px\"}\r\n                                      ></Box>}\r\n                                      {(item?.approval_status == 'Rejected') && <Box\r\n                                        component={\"img\"}\r\n                                        src={Images.editIcon}\r\n                                        onClick={() =>\r\n                                          handleUpdateCandidate3(item, index)\r\n                                        }\r\n                                        width={\"35px\"}\r\n                                      ></Box>}\r\n                                      {item?.rejections.length > 0 && <Box component={'div'} onClick={() => {\r\n                                        setRejections(\r\n                                          item?.rejections?.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))\r\n                                        );; setRejectionDialog(true)\r\n                                      }}>\r\n                                        <InfoOutlinedIcon />\r\n                                      </Box>}\r\n                                      <Box\r\n                                        component={\"img\"}\r\n                                        src={Images.detailIcon}\r\n                                        onClick={() =>\r\n                                          navigate(\r\n                                            `/view-candidate-detail/${item?.id}`\r\n                                          )\r\n                                        }\r\n                                        width={\"35px\"}\r\n                                      ></Box>\r\n\r\n                                    </Box>\r\n\r\n                                  </Cell>\r\n                                </Row>\r\n                              );\r\n                            })}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                      <Pagination\r\n                        sx={{ mt: 2 }}\r\n                        count={totalPages}\r\n                        page={currentPage}\r\n                        onChange={handlePageChange}\r\n                        color=\"primary\"\r\n                      />\r\n                    </PDFExport>\r\n                  </Fragment>\r\n                )}\r\n\r\n                {loader && <CircleLoading />}\r\n              </Box>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default VisaDetail;\r\n"
        }
    ]
}