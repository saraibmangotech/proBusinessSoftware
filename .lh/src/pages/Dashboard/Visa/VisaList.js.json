{
    "sourceFile": "src/pages/Dashboard/Visa/VisaList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821321,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    tableCellClasses,\r\n    IconButton,\r\n    CircularProgress,\r\n    Chip,\r\n    Grid,\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from \"@mui/material\";\r\nimport {\r\n    AllocateIcon,\r\n    CheckIcon,\r\n    EyeIcon,\r\n    FontFamily,\r\n    Images,\r\n    MessageIcon,\r\n    PendingIcon,\r\n    RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n    CleanTypes,\r\n    Debounce,\r\n    encryptData,\r\n    formatPermissionData,\r\n    getFileSize,\r\n    handleDownload,\r\n    handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport VisaServices from \"services/Visa\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport excelFile from \"assets/excel/request_format.csv\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport ReceiptIcon from \"@mui/icons-material/Receipt\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport UploadFile2 from \"components/UploadFile2\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n        border: \"1px solid #EEEEEE\",\r\n        padding: \"15px\",\r\n        textAlign: \"left\",\r\n        whiteSpace: \"nowrap\",\r\n        color: \"#434343\",\r\n        paddingRight: \"50px\",\r\n        background: \"transparent\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n\r\n        textWrap: \"nowrap\",\r\n        padding: \"5px !important\",\r\n        paddingLeft: \"15px !important\",\r\n\r\n        \".MuiBox-root\": {\r\n            display: \"flex\",\r\n            gap: \"6px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            \".MuiBox-root\": {\r\n                cursor: \"pointer\",\r\n            },\r\n        },\r\n        svg: {\r\n            width: \"auto\",\r\n            height: \"24px\",\r\n        },\r\n        \".MuiTypography-root\": {\r\n            textTransform: \"capitalize\",\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: \"nowrap\",\r\n        },\r\n        \".MuiButtonBase-root\": {\r\n            padding: \"8px\",\r\n            width: \"28px\",\r\n            height: \"28px\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: \"flex\",\r\n        height: 100,\r\n        \"& svg\": {\r\n            width: \"40px !important\",\r\n            height: \"40px !important\",\r\n        },\r\n    },\r\n});\r\n\r\nfunction VisaList() {\r\n    const allowFilesType = [\"text/csv\"];\r\n    const { state } = useLocation()\r\n    const allowFilesType2 = [\r\n        \"image/png\",\r\n        \"image/jpg\",\r\n        \"image/jpeg\",\r\n        \"application/pdf\",\r\n        \"application/vnd.ms-excel\",\r\n        \"application/msword\",\r\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    ];\r\n    const { user, userLogout } = useAuth();\r\n    console.log(user);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        reset,\r\n        formState: { errors: errors2 },\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        formState: { errors: errors3 },\r\n    } = useForm();\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false);\r\n    const [paymentDialog, setPaymentDialog] = useState(false);\r\n\r\n    const tableHead = [\r\n        { name: \"VR ID.\", key: \"\" },\r\n        { name: \"Date\", key: \"created_at\" },\r\n        { name: \"Customer\", key: \"created_at\" },\r\n        { name: \"Visa Quantity\", key: \"commission_visa\" },\r\n        { name: \"Total Amount\", key: \"commission_monthly\" },\r\n        { name: \"VAT\", key: \"\" },\r\n        { name: \"Deposit Consumed\", key: \"customerCount\" },\r\n        { name: \"Payment\", key: \"\" },\r\n        { name: \"Actions\", key: \"\" },\r\n    ];\r\n\r\n    const [visas, setVisas] = useState([]);\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState(\"asc\");\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([\r\n\r\n\r\n    ]);\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            console.log(data?.rows?.length);\r\n\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null);\r\n    const [paymentAmount, setPaymentAmount] = useState(0);\r\n    const [itemAmount, setItemAmount] = useState();\r\n    const [status, setStatus] = useState();\r\n    const [date, setDate] = useState(null);\r\n    const [date2, setDate2] = useState(null);\r\n    const [date3, setDate3] = useState(null);\r\n    const [paymentType, setPaymentType] = useState(null);\r\n    const [banks, setBanks] = useState([]);\r\n    const [excelDialog, setExcelDialog] = useState(false);\r\n    const [selectedBank, setSelectedBank] = useState(null);\r\n    const [excel, setExcel] = useState();\r\n    const [proofAdmin, setProofAdmin] = useState(false);\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [file, setFile] = useState();\r\n    const [filename, setFilename] = useState();\r\n    const [fileDetail, setFileDetail] = useState();\r\n    const [extension, setExtension] = useState();\r\n    const [documents, setDocuments] = useState([])\r\n    const [proofDialog, setProofDialog] = useState(false);\r\n    const [proofDoc, setProofDoc] = useState();\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [selectedCustomer2, setSelectedCustomer2] = useState(null)\r\n    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n    const [wpsList, setWpsList] = useState([])\r\n    const [wpsValid, setWpsValid] = useState(false)\r\n    const [customerDetail, setCustomerDetail] = useState(null)\r\n    const [isUploading, setIsUploading] = useState(false)\r\n    const [selectedStatus, setSelectedStatus] = useState(null)\r\n    const [fromDate, setFromDate] = useState(null)\r\n    const [toDate, setToDate] = useState(null)\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getBanks = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const { data } = await SystemServices.getBanks();\r\n\r\n            setBanks(data?.banks);\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n\r\n        try {\r\n            console.log(e.target.files, 'e.target.files');\r\n            if (e.target.files.length > 0) {\r\n\r\n                e.preventDefault();\r\n                const file = e.target.files[0];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n                if (allowFilesType.includes(file.type)) {\r\n                    setFile(file);\r\n                    setFileDetail(arr);\r\n                    setIsUploading(false)\r\n                    // handleUpload(file, arr);\r\n                    // const path = await handleUpload(file, arr);\r\n                    // console.log('Uploaded file path:', path);\r\n                    // console.log(path, 'pathpathpath');\r\n                    // return path\r\n                } else {\r\n                    showErrorToast(\r\n                        `Only ${CleanTypes(allowFilesType)} formats is supported`\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n\r\n    };\r\n    // *For Upload Document\r\n    const handleUploadDocument2 = async (e) => {\r\n        try {\r\n            e.preventDefault()\r\n            const files = Array.from(e.target.files)\r\n            const maxSize = 10 * 1024 * 1024 // 10 MB\r\n            const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"] // Add or modify as needed\r\n\r\n            const uploadPromises = files.map(async (file) => {\r\n                if (file.size > maxSize) {\r\n                    showErrorToast(`File ${file.name} is larger than 10 MB`)\r\n                    return null\r\n                }\r\n\r\n                if (!allowedTypes.includes(file.type)) {\r\n                    showErrorToast(`File ${file.name} is not of an allowed type`)\r\n                    return null\r\n                }\r\n\r\n                const fileInfo = {\r\n                    name: file.name,\r\n                    file: \"\",\r\n                    type: file.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                }\r\n\r\n                try {\r\n                    const uploadedPath = await handleUpload2(file, [fileInfo])\r\n                    return uploadedPath\r\n                } catch (uploadError) {\r\n                    showErrorToast(`Failed to upload ${file.name}: ${uploadError.message}`)\r\n                    return null\r\n                }\r\n            })\r\n\r\n            const uploadedPaths = await Promise.all(uploadPromises)\r\n            const validPaths = uploadedPaths.filter((path) => path !== null)\r\n\r\n            if (validPaths.length === 0) {\r\n                showErrorToast(\"No files were successfully uploaded\")\r\n                return \"\"\r\n            }\r\n\r\n            const pathString = validPaths.join(\",\")\r\n            console.log(\"Uploaded file paths:\", pathString)\r\n            return pathString\r\n        } catch (error) {\r\n            ErrorToaster(error.message || \"An error occurred during file upload\")\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        setProgress(0);\r\n        let docs = fileDetail;\r\n        console.log(selectedCustomer, 'asdasdas');\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            formData.append(\"id\", selectedCustomer?.id );\r\n            console.log(file);\r\n\r\n            let maxSize = 10 * 1024 * 1024; // 10 MB\r\n            if (file.size > maxSize) {\r\n                showErrorToast(\"File Size Must Be Less than 10 MB\");\r\n                return; // Stop execution if file size is too large\r\n            }\r\n\r\n            const { data } = await instance.post(routes.uploadCVS, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                    console.log(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n\r\n            // Check if the response is successful\r\n            if (data?.responseCode === 200) {\r\n\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                console.log(data, \"Upload successful\");\r\n                toast.success(\"Successfully Updated!\");\r\n                setExcel(false);\r\n\r\n                setExcelDialog(false);\r\n                setFilename('')\r\n                return data?.data?.path;\r\n            } else {\r\n                console.log('asdasasdasdasdasdad');\r\n\r\n                // Handle API response error\r\n                setFilename('')\r\n                setExcel(false);\r\n                setExcelDialog(false)\r\n\r\n                showErrorToast(data?.message || \"An error occurred during upload.\");\r\n            }\r\n        } catch (error) {\r\n            // Handle network or other unexpected errors\r\n            console.error(\"Upload error:\", error);\r\n            setFilename('')\r\n            setExcel(false);\r\n            setExcelDialog(false)\r\n\r\n            showErrorToast(error.response?.data?.message || \"Something went wrong, please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleUpload2 = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, \"asddasasd\");\r\n                return data?.data?.path;\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getVisaRequestList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage;\r\n            const Limit = limit ? limit : pageLimit;\r\n            const Filter = filter ? { ...filters, ...filter } : null;\r\n            setCurrentPage(Page);\r\n            setPageLimit(Limit);\r\n            setFilters(Filter);\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: user?.user_type == \"C\" ? user?.customer_id : null,\r\n            };\r\n\r\n\r\n\r\n            params = { ...params, ...Filter };\r\n            console.log(params, 'params');\r\n            const { data } = await VisaServices.getVisaRequestList(params);\r\n            setVisas(data?.rows);\r\n            setTotalCount(data?.count);\r\n\r\n            console.log(formatPermissionData(data?.permissions));\r\n\r\n            setPermissions(formatPermissionData(data?.permissions));\r\n            setPermissions(formatPermissionData(data?.permissions));\r\n            data?.permissions.forEach((e) => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            });\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                status: status.id,\r\n                visa_id: selectedVisa?.id,\r\n            };\r\n\r\n            const promise = VisaServices.updateStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getVisaRequestList();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const UpdatePaymentStatus = async (formData) => {\r\n        setButtonDisabled(true)\r\n        let totalAmount = parseFloat((parseFloat(formData?.amount) * 0.05) + parseFloat(formData?.amount)).toFixed(2)\r\n        try {\r\n            let obj = {\r\n                customer_id: selectedVisa?.customer_id,\r\n                payment_date: date,\r\n                payment_type: paymentType?.name,\r\n                visa_id: selectedVisa?.id,\r\n                amount: paymentAmount,\r\n                bank_id: selectedBank?.id,\r\n                description: formData?.description,\r\n            };\r\n\r\n            const promise = VisaServices.updatePaymentStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                getVisaRequestList();\r\n                reset();\r\n                setButtonDisabled(false)\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const UpdateProof = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                proof_date: date,\r\n                id: selectedVisa?.id,\r\n                proof_document: proofDoc,\r\n                proof_amount: formData?.amount,\r\n            };\r\n\r\n            const promise = VisaServices.UpdateProof(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setProofDialog(false);\r\n                getVisaRequestList();\r\n                reset();\r\n                setProofDoc(\"\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleDate2 = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setFromDate(\"invalid\");\r\n                return;\r\n            }\r\n            setFromDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleDate3 = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setToDate(\"invalid\");\r\n                return;\r\n            }\r\n            setToDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getWpsCheck = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: 1,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : selectedCustomer?.id,\r\n\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CustomerServices.checkWPS(params)\r\n            setWpsValid(data?.wpsRequired)\r\n            console.log(data);\r\n            if (data?.wpsRequired) {\r\n                showErrorToast(\"You have to create WPS first\")\r\n            }\r\n            else {\r\n                handleUpload();\r\n            }\r\n\r\n            // if (data?.rows?.length > 0) {\r\n\r\n            //     let dateMonth = moment(data?.rows[0]?.date).startOf(\"month\");\r\n            //     let currentMonth = moment().startOf(\"month\");\r\n\r\n            //     let diff = currentMonth.diff((dateMonth), 'months')\r\n            //     console.log(diff, 'diff');\r\n            //     if (diff <= 1) {\r\n            //         setWpsValid(true)\r\n            //     }\r\n            //     else {\r\n            //         setWpsValid(false)\r\n            //     }\r\n            // }\r\n            // else {\r\n            //     setWpsValid(true)\r\n            // }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const UpdateCSV = async () => {\r\n        // const today = moment();\r\n        // const tenthOfMonth = moment().startOf('month').add(9, 'days');\r\n        // let valid = false\r\n        // const date = moment(wpsList?.date);\r\n        // const lastMonth = moment().subtract(1, 'months');\r\n        // console.log(customerDetail, 'customerDetailcustomerDetail');\r\n        // console.log(today.isAfter(tenthOfMonth));\r\n        // console.log(moment(customerDetail?.created_at));\r\n        // console.log(wpsList?.date);\r\n        // const createdAt = moment(customerDetail?.created_at).startOf('day');\r\n        // const today2 = moment().startOf('day');\r\n\r\n        // const differenceInDays = today2.diff(createdAt, 'days');\r\n\r\n        // console.log(`Difference in days: ${differenceInDays}`);\r\n\r\n\r\n        // console.log(today.isAfter(tenthOfMonth) && !moment(customerDetail?.created_at).isSame(moment(), 'month') && !wpsList?.date);\r\n\r\n\r\n        // if (today.isAfter(tenthOfMonth) && !date.isSame(lastMonth, 'month') && wpsList?.date) {\r\n\r\n\r\n        //     console.log(\"The 10th date of the current month has passed.\");\r\n        //     showErrorToast('You have to create WPS first')\r\n        // }\r\n        // else if ((today.isAfter(tenthOfMonth) && !moment(customerDetail?.created_at).isSame(moment(), 'month')) && !wpsList?.date) {\r\n        //     showErrorToast('You have to create WPS first')\r\n\r\n        // }\r\n        // else if (differenceInDays > 40) {\r\n        //     showErrorToast('You have to create WPS first')\r\n\r\n        // }\r\n\r\n        // else {\r\n        //     handleUpload();\r\n        //     console.log(\"The 10th date of the current month has not passed yet.\");\r\n        // }\r\n        getWpsCheck()\r\n\r\n    };\r\n\r\n\r\n    const updateResult = (key, newResult) => {\r\n        console.log(newResult, 'newResult');\r\n        setProofDoc(newResult)\r\n\r\n\r\n    };\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues(\"search\"),\r\n            payment_status: selectedStatus?.id,\r\n            customer_id: selectedCustomer2?.id,\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n        };\r\n        Debounce(() => getVisaRequestList(1, \"\", data));\r\n    };\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort,\r\n        };\r\n        Debounce(() => getVisaRequestList(1, \"\", data));\r\n    };\r\n\r\n    const downloadExcel = () => {\r\n        fetch(excelFile)\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n                console.log(blob);\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement(\"a\");\r\n                link.href = url;\r\n                link.setAttribute(\"download\", \"Format.csv\"); // Adjust the filename as needed\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n            .catch((error) => console.error(\"Error downloading Excel file:\", error));\r\n    };\r\n\r\n    // *For Get Customer Detail\r\n    const getCustomerDetail = async (id, type) => {\r\n        try {\r\n            let params = { customer_id: id };\r\n            if (id) {\r\n\r\n                const { data } = await CustomerServices.getCustomerDetail(params);\r\n                console.log(data?.details?.security_deposit_scenario);\r\n                getWPSList(1, 1, {}, id)\r\n                setCustomerDetail(data?.details)\r\n\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getWPSList = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : id,\r\n\r\n\r\n            }\r\n\r\n\r\n            const { data } = await CustomerServices.getWPSList(params)\r\n            setWpsList(data?.rows[0])\r\n            if (data?.rows?.length > 0) {\r\n\r\n                let dateMonth = moment(data?.rows[0]?.date).startOf(\"month\");\r\n                let currentMonth = moment().startOf(\"month\");\r\n\r\n                let diff = currentMonth.diff((dateMonth), 'months')\r\n                console.log(diff, 'diff');\r\n                if (diff <= 1) {\r\n                    setWpsValid(true)\r\n                }\r\n                else {\r\n                    setWpsValid(false)\r\n                }\r\n            }\r\n            else {\r\n                setWpsValid(true)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        getBanks();\r\n        getCustomerQueue()\r\n        if (user?.user_type == 'C') {\r\n            console.log(user, 'user');\r\n\r\n            setValue3('customer', user)\r\n            setSelectedCustomer(user)\r\n            getCustomerDetail(user?.customer_id)\r\n\r\n        }\r\n        if (state) {\r\n            console.log(state);\r\n            let data = {\r\n                approval_status: state,\r\n            };\r\n            getVisaRequestList(1, \"\", data);\r\n\r\n        }\r\n        else {\r\n            getVisaRequestList();\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <SimpleDialog\r\n                open={proofDialog}\r\n                onClose={() => {\r\n                    setDocuments([])\r\n                    setProofDialog(false);\r\n                    reset();\r\n                    setProofDoc(\"\");\r\n\r\n                }}\r\n                title={\"Proof Of Payment\"}\r\n            >\r\n                {!proofAdmin ? (\r\n                    <Box component=\"form\" onSubmit={handleSubmit4(UpdateProof)}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: \"18px\",\r\n                                        fontWeight: \"bold\",\r\n                                        color: Colors.gray,\r\n                                        mt: 1,\r\n                                    }}\r\n                                >\r\n                                    Upload Proof :*{\" \"}\r\n                                </Typography>\r\n                                <UploadFile2\r\n                                    Memo={true}\r\n                                    updateResult={updateResult}\r\n                                    multiple={true}\r\n                                    accept={allowFilesType2}\r\n                                    error={errors4?.proof?.message}\r\n                                    file={proofDoc}\r\n                                    register={register4(\"proof\", {\r\n                                        required: \"Please upload  proof   .\",\r\n                                        onChange: async (e) => {\r\n                                            const path = await handleUploadDocument2(e);\r\n                                            if (path) {\r\n                                                setProofDoc(path);\r\n                                            }\r\n                                        },\r\n                                    })}\r\n                                />\r\n                                {/* {proofDoc &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>} */}\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <LabelCustomInput\r\n                                    label={\"Amount : \"}\r\n                                    disabled={true}\r\n                                    StartLabel={\"AED\"}\r\n                                    register={register4(\"amount\", { required: \"Enter  amount\" })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <DatePicker\r\n                                    label={\"Payment Date :\"}\r\n                                    value={date}\r\n                                    size={\"small\"}\r\n                                    error={errors4?.date?.message}\r\n                                    register={register4(\"date\", {\r\n                                        required: \"Please enter  date.\",\r\n                                    })}\r\n                                    onChange={(date) => {\r\n                                        handleDate(date);\r\n                                        setValue4(\"date\", date);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid container sx={{ justifyContent: \"center\" }}>\r\n                                <Grid\r\n                                    item\r\n                                    xs={6}\r\n                                    sm={6}\r\n                                    sx={{\r\n                                        mt: 2,\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                        gap: \"25px\",\r\n                                    }}\r\n                                >\r\n                                    <PrimaryButton\r\n                                        bgcolor={Colors.primary}\r\n                                        title=\"Yes,Confirm\"\r\n                                        type=\"submit\"\r\n                                    />\r\n                                    <PrimaryButton\r\n                                        onClick={() => {\r\n                                            setProofDialog(false);\r\n                                            reset();\r\n                                            setProofDoc(\"\");\r\n                                        }}\r\n                                        bgcolor={\"#FF1F25\"}\r\n                                        title=\"No,Cancel\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                ) : (\r\n                    <Box>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: \"18px\",\r\n                                        fontWeight: \"bold\",\r\n                                        color: Colors.gray,\r\n                                        mt: 1,\r\n                                    }}\r\n                                >\r\n                                    Upload Proof : {\" \"}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid container>\r\n                                {documents?.map((document, index) => (\r\n\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        lg={6}\r\n                                        sx={{ cursor: \"pointer\", display: \"flex\", gap: \"5px\", alignItems: 'center' }}\r\n                                        component={\"div\"}\r\n                                        key={index}\r\n                                        onClick={() => {\r\n                                            console.log(process.env.REACT_APP_IMAGE_BASE_URL);\r\n                                            console.log(document.trim())\r\n\r\n                                            const fileName = document.trim().split(\"_\").pop()\r\n                                            if (fileName?.includes(\"doc\") || fileName?.includes(\"xls\")) {\r\n                                                handleDownload(document.trim(), fileName || \"\")\r\n                                            } else {\r\n                                                window.open(process.env.REACT_APP_IMAGE_BASE_URL + document.trim(), \"_blank\")\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        {console.log(documents)}\r\n                                        {document && (\r\n                                            <Box>\r\n                                                <Box component={'img'} src={Images.docIcon} alt=\"Document Icon\" width={35} height={35} />\r\n                                            </Box>\r\n                                        )}\r\n                                        <p\r\n                                            style={{\r\n                                                textAlign: \"center\",\r\n                                                lineHeight: \"20px\",\r\n                                                color: \"#0F2772\",\r\n                                                fontWeight: \"bold\",\r\n                                                fontSize: \"15px\",\r\n                                            }}\r\n                                        >\r\n                                            {document.trim().split(\"_\").pop()}\r\n                                        </p>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n\r\n\r\n\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <LabelCustomInput\r\n                                    value={selectedVisa?.proof_amount}\r\n                                    label={\"Amount : \"}\r\n                                    StartLabel={\"AED\"}\r\n                                    disabled={true}\r\n                                    register={register4(\"amount\", { required: \"Enter  amount\" })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <InputField\r\n                                    label={\"Date :\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    value={moment(selectedVisa?.proof_date).format(\"MM-DD-YYYY\")}\r\n                                    rows={5}\r\n                                    placeholder={\"Description\"}\r\n                                    error={errors2?.description?.message}\r\n                                    register={register2(\"description\", {\r\n                                        required: false,\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n                }\r\n            </SimpleDialog >\r\n            <SimpleDialog\r\n                open={excelDialog}\r\n                onClose={() => setExcelDialog(false)}\r\n                title={\"Upload Excel\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit3(UpdateCSV)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12} display={'flex'} justifyContent={'center'}>\r\n                            <PrimaryButton\r\n                                bgcolor={'#0076bf'}\r\n                                title=\"Download Template\"\r\n                                onClick={() => downloadExcel()}\r\n                                loading={loading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Customer :'}\r\n\r\n                                options={customerQueue}\r\n                                disabled={user?.user_type == 'C' ? true : false}\r\n                                selected={selectedCustomer}\r\n                                onSelect={(value) => {\r\n                                    setSelectedCustomer(value)\r\n                                    getCustomerDetail(value?.id)\r\n                                    setValue3('customer', value)\r\n\r\n                                }}\r\n                                error={errors3?.customer?.message}\r\n                                register={register3(\"customer\", {\r\n                                    required: 'Please select customer account.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        {selectedCustomer && <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload CSV :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors3?.excel?.message}\r\n                                disabled={isUploading}\r\n\r\n                                register={register3(\"excel\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  excel   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        setIsUploading(true)\r\n                                        handleUploadDocument(e);\r\n\r\n                                        const file = e.target.files[0];\r\n                                        console.log(file);\r\n                                        setFilename(file?.name)\r\n                                        setExcel(file)\r\n\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {console.log(excel?.name, 'asdasdasdasd')}\r\n                            {excel?.name &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>}\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton className='disbaledClass' bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => { setExcelDialog(false); setExcel(false); setSelectedCustomer(null) }} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={\"Change Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Select Status :\"}\r\n                                options={[\r\n                                    { id: \"Pending\", name: \"Pending\" },\r\n                                    { id: \"Approved\", name: \"Approved\" },\r\n                                    { id: \"Rejected\", name: \"Rejected\" },\r\n                                ]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value);\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setStatusDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={\"Change Payment Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdatePaymentStatus)}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Payment Date :\"}\r\n                                value={date}\r\n                                size={\"small\"}\r\n                                error={errors2?.date?.message}\r\n                                register={register2(\"date\", {\r\n                                    required: \"Please enter  date.\",\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date);\r\n                                    setValue2(\"date\", date);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Payment Type :\"}\r\n                                options={[\r\n                                    { id: \"cash\", name: \"Cash\" },\r\n                                    { id: \"bank\", name: \"Bank\" },\r\n                                ]}\r\n                                selected={paymentType}\r\n                                onSelect={(value) => {\r\n                                    setPaymentType(value);\r\n                                }}\r\n                                error={errors2?.status?.message}\r\n                                register={register2(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        {/* <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Bank :'}\r\n\r\n                                options={banks}\r\n                                selected={selectedBank}\r\n                                onSelect={(value) => {\r\n                                    setSelectedBank(value)\r\n\r\n\r\n                                }}\r\n                                error={errors2?.banks?.message}\r\n                                register={register2(\"bank\", {\r\n                                    required: 'Please select bank.',\r\n                                })}\r\n                            />\r\n                        </Grid> */}\r\n                        <Grid item xs={12} sm={12}>\r\n                            <LabelCustomInput\r\n                                label={\"Amount : \"}\r\n                                StartLabel={\"AED\"}\r\n                                value={paymentAmount}\r\n                                disabled={true}\r\n                                register={register2(\"amount\", {\r\n                                    required: \"Enter year inside rate\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} mt={2}>\r\n                            <InputField\r\n                                label={\"Description :\"}\r\n                                size={\"small\"}\r\n                                rows={5}\r\n                                multiline={true}\r\n                                placeholder={\"Description\"}\r\n                                error={errors2?.description?.message}\r\n                                register={register2(\"description\", {\r\n                                    required: false,\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    disabled={buttonDisabled}\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setPaymentDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n                <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n                    Visa Requests Management\r\n                </Typography>\r\n                <Box sx={{ display: \"flex\", gap: \"5px\" }}>\r\n                    {permissions?.create && (\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Create Request\"\r\n                            onClick={() => navigate(\"/create-request\")}\r\n                            loading={loading}\r\n                        />\r\n                    )}\r\n                    {permissions?.excel && (\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            title=\"Import Via Excel\"\r\n                            onClick={() => {\r\n                                setExcelDialog(true); setSelectedCustomer(null)\r\n\r\n\r\n                                if (user?.user_type == 'C') {\r\n                                    console.log(user, 'user');\r\n                                    console.log(customerQueue, 'customerQueue');\r\n                                    let newUser = customerQueue?.find(item => item?.id === user?.customer_id);\r\n\r\n                                    setValue3('customer', newUser)\r\n                                    console.log(newUser, 'customerQueue');\r\n                                    setSelectedCustomer(newUser)\r\n                                    getCustomerDetail(newUser?.id)\r\n\r\n                                }\r\n                            }}\r\n                            loading={loading}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={2}>\r\n                        <InputField\r\n                            label={\"Search :\"}\r\n                            size={'small'}\r\n                            fullWidth={true}\r\n                            placeholder={\"Search\"}\r\n                            error={errors?.search?.message}\r\n                            register={register(\"search\")}\r\n                        />\r\n                    </Grid>\r\n                    {user?.user_type != 'C' && <Grid item xs={2} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Customer :'}\r\n\r\n                            options={customerQueue}\r\n                            selected={selectedCustomer2}\r\n                            onSelect={(value) => {\r\n                                setSelectedCustomer2(value)\r\n\r\n\r\n                            }}\r\n                            error={errors?.customer?.message}\r\n                            register={register(\"customer\")}\r\n                        />\r\n                    </Grid>}\r\n                    <Grid item xs={2} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Status :'}\r\n\r\n                            options={[{ id: 'paid', name: 'Paid' }, { id: 'unpaid', name: 'Unpaid' }]}\r\n                            selected={selectedStatus}\r\n                            onSelect={(value) => {\r\n                                setSelectedStatus(value)\r\n\r\n\r\n                            }}\r\n                            error={errors?.status?.message}\r\n                            register={register(\"status\")}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <DatePicker\r\n                            label={\" From Date  :\"}\r\n                            value={fromDate}\r\n\r\n                            size={'small'}\r\n                            maxDate={new Date()}\r\n                            error={errors?.fromDate?.message}\r\n                            register={register(\"fromDate\")}\r\n                            onChange={(date) => {\r\n                                handleDate2(date)\r\n                                setValue('fromDate', date)\r\n                            }\r\n\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <DatePicker\r\n                            label={\" To Date  :\"}\r\n                            value={toDate}\r\n                            maxDate={new Date()}\r\n                            size={'small'}\r\n                            minDate={new Date(fromDate)}\r\n                            error={errors?.toDate?.message}\r\n                            register={register(\"toDate\")}\r\n                            onChange={(date) => {\r\n                                handleDate3(date)\r\n                                setValue('toDate', date)\r\n                            }\r\n\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={2} justifyContent={'flex-end'}>\r\n                    <Grid\r\n                        item\r\n                        xs={2}\r\n                        display={\"flex\"}\r\n                        justifyContent={\"flex-end\"}\r\n                        gap={2}\r\n                    >\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            textcolor={Colors.white}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => {\r\n                                setSelectedCustomer2(null)\r\n                                setToDate(null)\r\n                                setFromDate(null)\r\n                                setSelectedStatus(null)\r\n                                setValue('status', '')\r\n                                setValue(\"search\", \"\");\r\n                                getVisaRequestList(1, '', null);\r\n                            }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {visas && (\r\n                        <Box>\r\n                            <Grid container mb={2}></Grid>\r\n\r\n                            {visas && (\r\n                                <Fragment>\r\n                                    <PDFExport\r\n                                        ref={contentRef}\r\n                                        landscape={true}\r\n                                        paperSize=\"A4\"\r\n                                        margin={5}\r\n                                        fileName=\"Import Customers\"\r\n                                    >\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: \"calc(100vh - 200px)\",\r\n                                                mt: 5,\r\n                                                backgroundColor: \"transparent\",\r\n                                                boxShadow: \"none !important\",\r\n                                                borderRadius: \"0px !important\",\r\n                                            }}\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell\r\n                                                                style={{\r\n                                                                    textAlign:\r\n                                                                        cell?.name == \"SR No.\" ? \"center\" : \"left\",\r\n                                                                    paddingRight:\r\n                                                                        cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                                                }}\r\n                                                                className=\"pdf-table\"\r\n                                                                key={index}\r\n                                                            >\r\n                                                                <Box\r\n                                                                    sx={{\r\n                                                                        display: \"flex\",\r\n                                                                        alignItems: \"flex-end\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {cell?.name}{\" \"}\r\n                                                                    {cell?.name == \"Date\" && (\r\n                                                                        <>\r\n                                                                            &nbsp;\r\n                                                                            <span\r\n                                                                                style={{\r\n                                                                                    height: \"20px\",\r\n                                                                                    cursor: \"pointer\",\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <Box\r\n                                                                                    component={\"img\"}\r\n                                                                                    onClick={() => {\r\n                                                                                        setSort(\r\n                                                                                            sort == \"asc\" ? \"desc\" : \"asc\"\r\n                                                                                        );\r\n                                                                                        handleSort(cell?.key);\r\n                                                                                    }}\r\n                                                                                    src={Images.sortIcon}\r\n                                                                                    width={\"18px\"}\r\n                                                                                ></Box>\r\n                                                                            </span>\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {visas?.map((item, index) => {\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: \"1px solid #EEEEEE !important\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.id}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {moment(item?.created_at).format(\r\n                                                                        \"MM-DD-YYYY\"\r\n                                                                    )}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.customer?.name}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.candidates_count}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.total_visa_charges}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {parseFloat(parseFloat(item?.total_visa_charges) * 0.05).toFixed(2)}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.total_deposit_charges}\r\n                                                                </Cell>\r\n                                                                {/* <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                        if (user?.user_type != 'C' && permissions?.status_update) {\r\n                                                                            setStatusDialog(true); setSelectedVisa(item); setStatus({ id: item?.processing_status, name: item?.processing_status })\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        <Box component={'img'} src={item?.processing_status == 'Approved' ? Images.successIcon : item?.processing_status == 'Pending' ? Images.pendingIcon : Images.errorIcon} width={'13px'}></Box>\r\n                                                                        {item?.processing_status}\r\n                                                                    </Box>\r\n\r\n\r\n                                                                </Cell> */}\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    <Box\r\n                                                                        component={\"div\"}\r\n                                                                        sx={{ cursor: \"pointer\" }}\r\n                                                                        onClick={() => {\r\n                                                                            if (\r\n                                                                                user?.user_type != \"C\" &&\r\n                                                                                item?.payment_status != \"paid\" &&\r\n                                                                                permissions?.payment_status_update\r\n                                                                            ) {\r\n                                                                                setDate(null);\r\n                                                                                setPaymentType(null);\r\n                                                                                setPaymentDialog(true);\r\n                                                                                setSelectedVisa(item);\r\n\r\n                                                                                setValue2(\r\n                                                                                    \"amount\",\r\n                                                                                    parseFloat((parseFloat(item?.total_visa_charges) * 0.05) + parseFloat(item?.total_visa_charges)).toFixed(2)\r\n                                                                                );\r\n                                                                                setPaymentAmount(\r\n                                                                                    parseFloat((parseFloat(item?.total_visa_charges) * 0.05) + parseFloat(item?.total_visa_charges)).toFixed(2)\r\n                                                                                );\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <Box\r\n                                                                            component={\"img\"}\r\n                                                                            src={\r\n                                                                                item?.payment_status == 'paid'\r\n                                                                                    ? Images.successIcon\r\n                                                                                    : Images.errorIcon\r\n                                                                            }\r\n                                                                            width={\"13px\"}\r\n                                                                        ></Box>\r\n                                                                        {item?.payment_status == 'paid' ? \"Paid\" : \"Unpaid\"}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    <Box>\r\n                                                                        {permissions?.payment_proof && (\r\n                                                                            <IconButton\r\n                                                                                onClick={() => {\r\n                                                                                    console.log(item?.proof_document);\r\n\r\n                                                                                    if (item?.proof_document) {\r\n\r\n                                                                                        setDocuments(item?.proof_document?.split(\",\") || [])\r\n                                                                                    }\r\n\r\n                                                                                    if (user?.user_type == \"C\") {\r\n                                                                                        setDate(null);\r\n                                                                                        setPaymentType(null);\r\n\r\n                                                                                        setProofDialog(true);\r\n                                                                                        console.log(selectedVisa?.proof_document?.split(\",\"), 'asdasdas');\r\n\r\n\r\n                                                                                        setValue4(\r\n                                                                                            \"amount\",\r\n                                                                                            parseFloat((parseFloat(item?.total_visa_charges) * 0.05) + parseFloat(item?.total_visa_charges)).toFixed(2)\r\n                                                                                        );\r\n                                                                                        setSelectedVisa(item);\r\n                                                                                        setProofAdmin(false);\r\n                                                                                        if (item?.proof_document) {\r\n                                                                                            setProofAdmin(true);\r\n                                                                                        }\r\n                                                                                    } else {\r\n                                                                                        if (item?.proof_document) {\r\n                                                                                            setDate(null);\r\n                                                                                            setPaymentType(null);\r\n                                                                                            setProofDialog(true);\r\n\r\n                                                                                            setSelectedVisa(item);\r\n                                                                                            setProofAdmin(true);\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <ReceiptIcon\r\n                                                                                    sx={{\r\n                                                                                        color: item?.proof_document\r\n                                                                                            ? \"#56ba28\"\r\n                                                                                            : \"\",\r\n                                                                                    }}\r\n                                                                                    width={\"35px\"}\r\n                                                                                />\r\n                                                                            </IconButton>\r\n                                                                        )}\r\n                                                                        {permissions?.details && (\r\n                                                                            <Box\r\n                                                                                component={\"img\"}\r\n                                                                                src={Images.detailIcon}\r\n                                                                                onClick={() =>\r\n                                                                                    navigate(`/visa-detail/${item?.id}`)\r\n                                                                                }\r\n                                                                                width={\"35px\"}\r\n                                                                            ></Box>\r\n                                                                        )}\r\n                                                                        {\r\n                                                                            <Box\r\n                                                                                component={\"img\"}\r\n                                                                                sx={{ cursor: \"pointer\" }}\r\n                                                                                onClick={() => {\r\n                                                                                    navigate(\r\n                                                                                        `/update-request/${item?.id}`\r\n                                                                                    );\r\n                                                                                    localStorage.setItem(\r\n                                                                                        \"currentUrl\",\r\n                                                                                        \"/update-agent\"\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                                src={Images.editIcon}\r\n                                                                                width={\"35px\"}\r\n                                                                            ></Box>\r\n                                                                        }\r\n                                                                        {permissions?.invoice && (\r\n                                                                            <Box\r\n                                                                                component={\"img\"}\r\n                                                                                onClick={() =>\r\n                                                                                    navigate(`/view-invoice/${item?.id}`)\r\n                                                                                }\r\n                                                                                sx={{ cursor: \"pointer\" }}\r\n                                                                                src={Images.invoiceIcon}\r\n                                                                                width={\"35px\"}\r\n                                                                            ></Box>\r\n                                                                        )}\r\n                                                                        {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                            </Row>\r\n                                                        );\r\n                                                    })}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) =>\r\n                                            getVisaRequestList(1, size.target.value, filters)\r\n                                        }\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getVisaRequestList(page, \"\", filters)}\r\n                                    />\r\n                                </Fragment>\r\n                            )}\r\n\r\n                            {loader && <CircleLoading />}\r\n                        </Box>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Box >\r\n    );\r\n}\r\n\r\nexport default VisaList;\r\n"
        }
    ]
}