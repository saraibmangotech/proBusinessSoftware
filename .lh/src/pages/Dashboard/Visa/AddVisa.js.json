{
    "sourceFile": "src/pages/Dashboard/Visa/AddVisa.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821282,
            "name": "Commit-0",
            "content": "import { Box, Button, Checkbox, Chip, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material'\r\nimport Colors from 'assets/Style/Colors'\r\nimport { PrimaryButton } from 'components/Buttons'\r\nimport DatePicker from 'components/DatePicker'\r\nimport InputField from 'components/Input'\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput'\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster'\r\nimport SelectField from 'components/Select'\r\nimport { ErrorToaster } from 'components/Toaster'\r\nimport UploadFile from 'components/UploadFile'\r\nimport instance from 'config/axios'\r\nimport moment from 'moment'\r\nimport React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { Controller, useForm } from 'react-hook-form'\r\nimport CustomerServices from 'services/Customer'\r\nimport routes from 'services/System/routes'\r\nimport { CleanTypes, Debounce2, getFileSize } from 'utils'\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport VisaServices from 'services/Visa'\r\nimport { useBlocker, useLocation, useNavigate } from 'react-router-dom'\r\nimport SystemServices from 'services/System'\r\nimport { useAuth } from 'context/UseContext'\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog'\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt'\r\nimport { addDays, addMonths } from 'date-fns'\r\nimport ConfirmationDialog2 from 'components/Dialog/confrimationDialog2'\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\n\r\nconst AddVisa = () => {\r\n    const navigate = useNavigate()\r\n    const { register, handleSubmit, getValues, setValue, control, formState: { errors }, reset } = useForm();\r\n    const [submit, setSubmit] = useState(false)\r\n    const [handleBlockedNavigation] =\r\n        useCallbackPrompt(submit)\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [open1, setOpen1] = React.useState(false);\r\n    const [scroll, setScroll] = React.useState('paper');\r\n    const [visaType, setVisaType] = useState('In')\r\n    const [visaTenture, setVisaTenture] = useState('1 year')\r\n    const [customerDetail, setCustomerDetail] = useState(null)\r\n    const [candidateIndex, setCandidateIndex] = useState()\r\n    const [eligibility, setEligibility] = useState()\r\n    const [salaryError, setSalaryError] = useState(false)\r\n    const [depositError, setDepositError] = useState(false)\r\n    const [countries, setCountries] = useState([])\r\n    const [selectedCountry, setSelectedCountry] = useState(null)\r\n    const [vipMedicalCheck, setVipMedicalCheck] = useState(false)\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [updateCandidate, setUpdateCandidate] = useState(null)\r\n    const [customerPaymentType, setCustomerPaymentType] = useState(null)\r\n    const [candidateSalary, setCandidateSalary] = useState()\r\n    const [payrollPercent, setPayrollPercent] = useState()\r\n    const [customerDeposit, setCustomerDeposit] = useState()\r\n    const [totalVisaCharges, setTotalVisaCharges] = useState()\r\n    const [totalDepositCharges, setTotalDepositCharges] = useState()\r\n    const [candidates, setCandidates] = useState([])\r\n    const [customerBalance, setCustomerBalance] = useState()\r\n    const { user, userLogout } = useAuth();\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n    const [confirmationDialog2, setConfirmationDialog2] = useState(false)\r\n    const [confirmationDialog3, setConfirmationDialog3] = useState(false)\r\n    const [wpsList, setWpsList] = useState([])\r\n    const [wpsValid, setWpsValid] = useState(false)\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [depositScenario, setDepositScenario] = useState()\r\n    const [verifyPassport, setVerifyPassport] = useState(false)\r\n    const [verifyPassport2, setVerifyPassport2] = useState(false)\r\n    const [charges, setCharges] = useState(null)\r\n    const [byPass, setByPass] = useState(null)\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n    const [date, setDate] = useState(null)\r\n    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n        monthlyVisaServiceCharges: true,\r\n        vipMedical: false,\r\n        extraTyping: true,\r\n    });\r\n    //documents array\r\n    const [documents, setDocuments] = useState([\r\n        {\r\n            name: \"Employee Undertaking\",\r\n            key: \"undertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n\r\n\r\n        },\r\n        {\r\n            name: \"Company Undertaking\",\r\n            key: \"cundertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n\r\n        {\r\n            name: \"Passport Copy\",\r\n            key: \"passportcopy\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Digital Photo\",\r\n            key: \"digitalphoto\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Employment Contract\",\r\n            key: \"contract\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Offer Letter\",\r\n            key: \"offerletter\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Previous Emirates Ids\",\r\n            key: \"emiratesids\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n        {\r\n            name: \"Previous UAE Visa Copy\",\r\n            key: \"uaevisa\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n        {\r\n            name: \"Cancellation\",\r\n            key: \"cancellation\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n        {\r\n            name: \"UAE Driving License\",\r\n            key: \"drivinglicense\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n        {\r\n            name: \"Work Permit\",\r\n            key: \"workpermit\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n        {\r\n            name: \"Other Documents\",\r\n            key: \"otherdoc\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false\r\n        },\r\n\r\n    ]\r\n    )\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleClickOpen = (scrollType) => {\r\n        console.log(selectedCustomer);\r\n        setDocuments([\r\n            {\r\n                name: \"Employee Undertaking\",\r\n                key: \"undertaking\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n\r\n\r\n            },\r\n            {\r\n                name: \"Company Undertaking\",\r\n                key: \"cundertaking\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n\r\n            {\r\n                name: \"Passport Copy\",\r\n                key: \"passportcopy\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Digital Photo\",\r\n                key: \"digitalphoto\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Employment Contract\",\r\n                key: \"contract\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Offer Letter\",\r\n                key: \"offerletter\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: true\r\n            },\r\n            {\r\n                name: \"Previous Emirates Ids\",\r\n                key: \"emiratesids\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Previous UAE Visa Copy\",\r\n                key: \"uaevisa\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Cancellation\",\r\n                key: \"cancellation\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"UAE Driving License\",\r\n                key: \"drivinglicense\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Work Permit\",\r\n                key: \"workpermit\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n            {\r\n                name: \"Other Documents\",\r\n                key: \"otherdoc\",\r\n                path: \"\",\r\n                expiry_date: null,\r\n                is_required: false\r\n            },\r\n\r\n        ])\r\n        if (true) {\r\n\r\n            setSelectedCountry(null)\r\n            setDate('')\r\n            setSalaryError(false)\r\n            reset()\r\n            getCustomerDetail(selectedCustomer?.id, 'balance')\r\n            if (customerPaymentType == 'visa') {\r\n                if (eligibility == 0 && !byPass) {\r\n                    showErrorToast('Deposit Limit Reached')\r\n                }\r\n                else {\r\n                    setOpen(true);\r\n                    setScroll(scrollType);\r\n                }\r\n            }\r\n            else {\r\n                if (candidateSalary > customerDeposit && !byPass) {\r\n                    showErrorToast('Deposit Limit Reached')\r\n                }\r\n                else {\r\n                    setOpen(true);\r\n                    setScroll(scrollType);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            showErrorToast(\"WPS for last month has not been added.\")\r\n        }\r\n    };\r\n    // *For Get Countries\r\n    const getCountries = async (id) => {\r\n        try {\r\n            const { data } = await SystemServices.getCountries();\r\n            setCountries(data?.countries?.rows);\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleClose = () => {\r\n\r\n        setOpen(false);\r\n    };\r\n    const handleClose1 = () => {\r\n        setOpen1(false);\r\n    };\r\n    const updateResult = (key, newResult) => {\r\n\r\n        console.log(newResult)\r\n        const updatedDocuments = documents.map(doc => {\r\n            if (doc.key === key) {\r\n                return { ...doc, path: newResult }; // Update the path\r\n            }\r\n            return doc; // Return the document as is if the key doesn't match\r\n        });\r\n        console.log(updatedDocuments, 'updatedDocuments');\r\n        setDocuments(updatedDocuments)\r\n    };\r\n\r\n    const handleUploadDocument = async (e, key) => {\r\n        setLoader(key)\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files.length, \"length\");\r\n\r\n            const inputElement = e.target; // Store a reference to the file input element\r\n\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n\r\n                let maxSize = 10 * 1024 * 1024;\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB');\r\n                } else {\r\n                    // Add the current date before the file name to ensure uniqueness\r\n                    const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n                    const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n                    // Create a new file with the date-prefixed name\r\n                    const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n                    // Upload the file with the new name\r\n                    const uploadedPath = await handleUpload(newFile, arr);\r\n\r\n                    if (path) {\r\n                        path += \",\" + uploadedPath;\r\n                    } else {\r\n                        path = uploadedPath;\r\n                    }\r\n                    setLoader(false)\r\n\r\n                }\r\n            }\r\n\r\n            console.log(path, \"path\");\r\n\r\n            // Clear the file input after processing\r\n            inputElement.value = \"\";\r\n\r\n            return path;\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const getData = async (formData) => {\r\n\r\n        console.log(formData);\r\n        try {\r\n            let params = {\r\n                charges_type: \"cost\",\r\n            };\r\n\r\n            const { data } = await SystemServices.getRates(params);\r\n\r\n            let details = data?.charges;\r\n            setCharges(details);\r\n        } catch (error) {\r\n        } finally {\r\n\r\n        }\r\n    };\r\n\r\n    const CreateVisa = async (formData) => {\r\n        setSubmit(false)\r\n        console.log(selectedCustomer);\r\n        const total = candidates.reduce((total, item) => total + item.visa_charges, 0);\r\n        const total2 = candidates.reduce((total2, item) => total2 + item.visa_cost, 0);\r\n        const totalsal = candidates.reduce((totalsal, item) => totalsal + item.salary_total, 0);\r\n\r\n        let multiplier = payrollPercent / 100\r\n        let multiplied = totalsal * multiplier\r\n        if (customerBalance < candidateSalary && !byPass) {\r\n            showErrorToast('Deposit Balance Is Low')\r\n        }\r\n        else {\r\n\r\n            console.log(total);\r\n            try {\r\n\r\n                let charges = customerPaymentType === 'visa' ? parseFloat(totalDepositCharges) * candidates.length : candidateSalary;\r\n                let obj = {\r\n                    customer_id: selectedCustomer?.id,\r\n                    customer_name: selectedCustomer?.name,\r\n                    due_date: customerDetail?.due_date_policy,\r\n                    agent_id: customerDetail?.agent_id,\r\n                    force_create:byPass,\r\n\r\n                    deposit_balance: parseFloat(customerBalance) - parseFloat(charges),\r\n\r\n                    total_deposit_charges: customerPaymentType === 'visa' ? parseFloat(totalDepositCharges) * candidates.length : candidateSalary,\r\n                    total_visa_charges: total,\r\n                    total_visa_cost: total2,\r\n                    request_date: new Date(),\r\n                    candidates: candidates\r\n                };\r\n\r\n                console.log(obj, 'obj');\r\n\r\n                const promise = VisaServices.AddVisa(obj);\r\n\r\n                showPromiseToast(\r\n                    promise,\r\n                    'Saving...',\r\n                    'Added Successfully',\r\n                    'Something Went Wrong'\r\n                );\r\n\r\n                const response = await promise;\r\n                if (response?.responseCode === 200) {\r\n                    navigate(\"/visa-list\");\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const descriptionElementRef = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (open) {\r\n            const { current: descriptionElement } = descriptionElementRef;\r\n            if (descriptionElement !== null) {\r\n                descriptionElement.focus();\r\n            }\r\n        }\r\n    }, [open]);\r\n    const totalSalaryCalc = (type) => {\r\n        if (type == 'update') {\r\n            let basic = getValues2('basic')\r\n            let allowance = getValues2('allowance')\r\n            if (basic && allowance) {\r\n                let total = parseFloat(basic) + parseFloat(allowance)\r\n                setValue2('totalSalary', total)\r\n                console.log(total);\r\n\r\n                console.log(eligibility);\r\n\r\n                let multiplier = payrollPercent / 100\r\n                let multiplied = total * multiplier\r\n                if (multiplied > customerBalance) {\r\n\r\n                    setDepositError(true)\r\n                }\r\n                else {\r\n                    setDepositError(false)\r\n                }\r\n                if (total > eligibility) {\r\n                    if (depositScenario.toLowerCase() == 'payroll') {\r\n\r\n                        setSalaryError(true)\r\n                    }\r\n                }\r\n                else {\r\n                    setSalaryError(false)\r\n                    setDepositError(false)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            let basic = getValues('basic')\r\n            let allowance = getValues('allowance')\r\n            if (basic && allowance) {\r\n                let total = parseFloat(basic) + parseFloat(allowance)\r\n                setValue('totalSalary', total)\r\n                console.log(total);\r\n                console.log(eligibility);\r\n                let multiplier = payrollPercent / 100\r\n                let multiplied = total * multiplier\r\n                if (multiplied > customerBalance) {\r\n\r\n                    setDepositError(true)\r\n                }\r\n                else {\r\n                    setDepositError(false)\r\n                }\r\n                if (total > eligibility) {\r\n                    if (depositScenario.toLowerCase() == 'payroll') {\r\n\r\n                        setSalaryError(true)\r\n                    }\r\n                }\r\n                else {\r\n                    setSalaryError(false)\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    const handleCheckboxChange = (name) => (event) => {\r\n        console.log(name);\r\n        setFieldsDisabled({\r\n            ...fieldsDisabled,\r\n            [name]: !event.target.checked,\r\n        });\r\n    };\r\n\r\n    const handleUpdateCandidate = (item, index) => {\r\n        let serialId = item?.serial_id\r\n        console.log(item);\r\n        setCandidateIndex(item?.serial_id)\r\n        setDocuments(item?.documents)\r\n        setUpdateCandidate(item)\r\n        setOpen1(true)\r\n        console.log(item);\r\n\r\n        setVisaTenture(item?.visa_tenure)\r\n        setVisaType(item?.visa_type)\r\n\r\n        setValue2('candidateName', item?.name)\r\n        setValue2('Phone', item?.phone)\r\n        setValue2('email', item?.email)\r\n        setValue2('campLocation', item?.camp_location)\r\n        setValue2('passportNumber', item?.passport_number)\r\n        setValue2('employeeid', item?.employee_id)\r\n        setValue2('passportExp', moment(item?.passport_expiry).format('YYYY-MM-DD'))\r\n        handleDate(item?.passport_expiry)\r\n        if (item.vip_medical_extra) {\r\n            setVipMedicalCheck(true)\r\n        }\r\n        else {\r\n            setVipMedicalCheck(false)\r\n        }\r\n        setSelectedCountry(item?.nationality)\r\n        setValue2('nationality', item?.nationality)\r\n        setValue2('visaDesignation', item?.visa_designation)\r\n        setValue2('basic', item?.salary_basic)\r\n        setValue2('allowance', item?.salary_allowance)\r\n        setValue2('endConsumer', item?.end_consumer)\r\n        setValue2('endConsumerCompany', item?.end_consumer_company)\r\n        setValue2('totalSalary', item?.salary_total)\r\n\r\n        setValue2('2yearInsideRate', item?.inside_rate)\r\n        setValue2('2yearOutsideRate', item?.outside_rate)\r\n        setValue2('2yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n        setValue2('1yearInsideRate', item?.inside_rate)\r\n        setValue2('1yearOutsideRate', item?.outside_rate)\r\n        setValue2('1yearRenewalRates', item?.renewal_rate)\r\n\r\n\r\n\r\n        setValue2('monthlyVisaServiceCharges', item?.monthly_visa_service)\r\n        setValue2('vipMedical', item?.vip_medical_extra)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    const handleTotalVisaCharges = () => {\r\n        let fields = [];\r\n\r\n        // Determine which fields to use based on visaTenture and visaType\r\n        if (visaTenture.includes('1') && visaType.toLowerCase() == 'in') {\r\n            fields = [\r\n                '1yearInsideRate',\r\n                '1yearRenewalRates',\r\n                'monthlyVisaServiceCharges',\r\n                'vipMedical',\r\n                'extraTyping'\r\n            ];\r\n        } else if (visaTenture.includes('1') && visaType.toLowerCase() == 'out') {\r\n            fields = [\r\n                '1yearOutsideRate',\r\n                '1yearRenewalRates',\r\n                'monthlyVisaServiceCharges',\r\n                'vipMedical',\r\n                'extraTyping'\r\n            ];\r\n        } else if (visaTenture.includes('2') && visaType == 'in') {\r\n            fields = [\r\n                '2yearInsideRate',\r\n                '2yearRenewalRates',\r\n                'monthlyVisaServiceCharges',\r\n                'vipMedical',\r\n                'extraTyping'\r\n            ];\r\n        } else if (visaTenture.includes('2') && visaType.toLowerCase() === 'out') {\r\n            fields = [\r\n                '2yearOutsideRate',\r\n                '2yearRenewalRates',\r\n                'monthlyVisaServiceCharges',\r\n                'vipMedical',\r\n                'extraTyping'\r\n            ];\r\n        }\r\n\r\n        // Retrieve the current values of the specified fields\r\n        const values = getValues(fields);\r\n\r\n        // Convert non-numeric values to 0 and calculate the sum\r\n        const total = values.reduce((acc, value) => {\r\n            const numericValue = parseFloat(value) || 0;\r\n            return acc + numericValue;\r\n        }, 0);\r\n        setTotalVisaCharges(total)\r\n        console.log('Total Visa Charges:', total);\r\n    };\r\n    // *For Get Customer Detail\r\n    const getCustomerDetail = async (id, type) => {\r\n        try {\r\n            let params = { customer_id: id };\r\n            if (id) {\r\n\r\n                const { data } = await CustomerServices.getCustomerDetail(params);\r\n                console.log(data?.details?.security_deposit_scenario);\r\n                setByPass(data?.details?.bypass_requirements)\r\n                if(!data?.details?.bypass_requirements){\r\n                    getWPSList(1, 1, {}, id)\r\n                }\r\n                else{\r\n                    setWpsValid(false)\r\n                }\r\n               \r\n                // setCandidates([])\r\n                setCustomerPaymentType(data?.details?.security_deposit_scenario)\r\n\r\n\r\n                setCustomerBalance(data?.details?.deposit_balance)\r\n\r\n                setDepositScenario(data?.details?.security_deposit_scenario)\r\n                if (data?.details?.security_deposit_scenario == 'visa') {\r\n\r\n                    setEligibility(data?.details?.visa_eligibility_remaining)\r\n                    setTotalDepositCharges(data?.details?.deposit_per_visa)\r\n\r\n                }\r\n                else {\r\n                    setPayrollPercent(parseFloat(data?.details?.payroll_percentage))\r\n                    setEligibility(data?.details?.payroll_eligibility)\r\n                }\r\n                setCustomerDeposit(parseFloat(data?.details?.deposit_balance))\r\n                setCustomerDetail(data?.details);\r\n                let details = data?.details\r\n                if (type == 'update') {\r\n                    setValue2('1yearInsideRate', details?.one_year_inside)\r\n                    setValue2('1yearOutsideRate', details?.one_year_outside)\r\n                    setValue2('1yearRenewalRates', details?.one_year_renewal)\r\n                    setValue2('2yearInsideRate', details?.two_year_inside)\r\n                    setValue2('2yearOutsideRate', details?.two_year_outside)\r\n                    setValue2('2yearRenewalRates', details?.two_year_renewal)\r\n                    setValue2('monthlyVisaServiceCharges', details?.monthly_visa_service)\r\n\r\n\r\n\r\n                    handleTotalVisaCharges()\r\n                }\r\n                setValue('1yearInsideRate', details?.one_year_inside)\r\n                setValue('1yearOutsideRate', details?.one_year_outside)\r\n                setValue('1yearRenewalRates', details?.one_year_renewal)\r\n                setValue('2yearInsideRate', details?.two_year_inside)\r\n                setValue('2yearOutsideRate', details?.two_year_outside)\r\n                setValue('2yearRenewalRates', details?.two_year_renewal)\r\n                setValue('monthlyVisaServiceCharges', details?.monthly_visa_service)\r\n                setValue('vipMedical', details?.medical_extra)\r\n                setValue2('vipMedical', details?.medical_extra)\r\n                if (parseFloat(details?.medical_extra) > 0) {\r\n                    setVipMedicalCheck(true)\r\n                }\r\n                else {\r\n                    setVipMedicalCheck(false)\r\n                }\r\n\r\n\r\n                handleTotalVisaCharges()\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getWPSList = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: 1,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : id,\r\n\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CustomerServices.checkWPS(params)\r\n            setWpsValid(data?.wpsRequired)\r\n            console.log(data);\r\n\r\n            // if (data?.rows?.length > 0) {\r\n\r\n            //     let dateMonth = moment(data?.rows[0]?.date).startOf(\"month\");\r\n            //     let currentMonth = moment().startOf(\"month\");\r\n\r\n            //     let diff = currentMonth.diff((dateMonth), 'months')\r\n            //     console.log(diff, 'diff');\r\n            //     if (diff <= 1) {\r\n            //         setWpsValid(true)\r\n            //     }\r\n            //     else {\r\n            //         setWpsValid(false)\r\n            //     }\r\n            // }\r\n            // else {\r\n            //     setWpsValid(true)\r\n            // }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const verifyPassportNumber = async (value) => {\r\n        let passportNumber = getValues('passportNumber')\r\n        if (passportNumber) {\r\n\r\n            try {\r\n                let obj = {\r\n                    passport_number: passportNumber.toUpperCase(),\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { data } = await CustomerServices.getCandidateDetail(obj);\r\n\r\n                console.log(data);\r\n                 if (data?.customer_id && (data.approval_status == 'Pending' || data.approval_status == 'Approved' || data.admin_rejected == false || data.admin_rejected == null)) {\r\n                    setVerifyPassport(true)\r\n                    showErrorToast('Passport Number  already exists')\r\n                }\r\n                else {\r\n                    setVerifyPassport(false)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setVerifyPassport(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    const verifyPassportNumber2 = async (value) => {\r\n        let passportNumber = getValues2('passportNumber')\r\n        if (passportNumber) {\r\n\r\n            try {\r\n                let obj = {\r\n                    passport_number: passportNumber.toUpperCase(),\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { data } = await CustomerServices.getCandidateDetail(obj);\r\n\r\n                console.log(data);\r\n                if (data?.customer_id && (data.approval_status == 'Pending' || data.approval_status == 'Approved' || data.admin_rejected == false || data.admin_rejected == null)){\r\n                    setVerifyPassport2(true)\r\n                    showErrorToast('Passport Number already existss')\r\n                }\r\n                else {\r\n                    setVerifyPassport2(false)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setVerifyPassport2(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDelete = (index) => {\r\n        // Access the candidate to be deleted\r\n        const deletedCandidate = candidates[index];\r\n\r\n        // Log the deposit_consumed value\r\n        setCustomerBalance(parseFloat(customerBalance) + parseFloat(deletedCandidate.deposit_consumed))\r\n        if (customerPaymentType == 'visa') {\r\n            setEligibility(eligibility + 1)\r\n        }\r\n        console.log('Deleted deposit_consumed', parseFloat(customerBalance) + parseFloat(deletedCandidate.deposit_consumed));\r\n        setCandidates((prevCandidates) => prevCandidates.filter((_, i) => i !== index));\r\n    };\r\n\r\n\r\n    const handleDocArrayUpdate = async (field, value, key) => {\r\n        console.log(documents);\r\n\r\n        if (field === 'path') {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, path: value }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            // Assuming you want to update the documents array\r\n            // You can replace the following line with your state updating logic\r\n            setDocuments(updatedDocuments)\r\n        } else {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, expiry_date: moment(value).format('YYYY-MM-DD') }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            setDocuments(updatedDocuments)\r\n            // Handle other fields if needed\r\n        }\r\n    }\r\n    const AddCandidate = async (formData) => {\r\n        handleClose()\r\n        console.log(formData);\r\n        let sum = 0;\r\n        let sum2 = 0;\r\n\r\n        if (visaTenture.includes('1')) {\r\n            if (visaType.toLowerCase() === 'in') {\r\n                sum += parseFloat(Number(formData[\"1yearInsideRate\"]));\r\n            } else if (visaType.toLowerCase() === 'out') {\r\n                sum += parseFloat(Number(formData[\"1yearOutsideRate\"]));\r\n            }\r\n\r\n\r\n            sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n        } else if (visaTenture.includes('2')) {\r\n            if (visaType.toLowerCase() === 'in') {\r\n                sum += parseFloat(Number(formData[\"2yearInsideRate\"]));\r\n            } else if (visaType.toLowerCase() === 'out') {\r\n                sum += parseFloat(Number(formData[\"2yearOutsideRate\"]));\r\n            }\r\n            sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n        }\r\n\r\n        if (visaTenture.includes('1')) {\r\n            if (visaType.toLowerCase() === 'in') {\r\n                sum2 += parseFloat(Number(charges?.one_year_inside));\r\n            } else if (visaType.toLowerCase() === 'out') {\r\n                sum2 += parseFloat(Number(charges?.one_year_outside));\r\n            }\r\n\r\n\r\n            sum2 += vipMedicalCheck ? parseFloat(Number(charges?.medical_extra)) || 0 : 0;\r\n\r\n        } else if (visaTenture.includes('2')) {\r\n            if (visaType.toLowerCase() === 'in') {\r\n                sum2 += parseFloat(Number(charges?.two_year_inside));\r\n            } else if (visaType.toLowerCase() === 'out') {\r\n                sum2 += parseFloat(Number(charges?.two_year_outside));\r\n            }\r\n            sum2 += vipMedicalCheck ? parseFloat(Number(charges?.medical_extra)) || 0 : 0;\r\n\r\n        }\r\n        console.log(sum, 'sum');\r\n        console.log(sum2, 'sum');\r\n\r\n        try {\r\n            setCandidates((prevCandidates) => {\r\n                // const newSerialId = prevCandidates.length + 1;\r\n                // console.log(prevCandidates);\r\n                const lastElement = prevCandidates[prevCandidates.length - 1];\r\n                console.log(lastElement);\r\n                let multiplier = payrollPercent / 100\r\n\r\n\r\n                let obj = {\r\n                    serial_id: prevCandidates?.length > 0 ? Number(lastElement.serial_id) + 1 : 1,\r\n                    name: formData?.candidateName,\r\n                    phone: formData?.Phone,\r\n                    email: formData?.email,\r\n                    visa_charges: sum,\r\n                    visa_cost: sum2,\r\n                    visa_type: visaType,\r\n                    visa_tenure: visaTenture,\r\n                    employee_id: formData?.employeeid,\r\n                    deposit_consumed: customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier,\r\n                    security_deposit_visa: totalDepositCharges,\r\n                    payroll_percentage: payrollPercent,\r\n                    inside_rate: visaTenture.includes('1') ? formData[\"1yearInsideRate\"] : formData[\"2yearInsideRate\"],\r\n                    outside_rate: visaTenture.includes('1') ? formData[\"1yearOutsideRate\"] : formData[\"2yearOutsideRate\"],\r\n                    renewal_rate: 0,\r\n                    vip_medical_temp: formData?.vipMedical,\r\n                    vip_medical_extra: vipMedicalCheck ? formData?.vipMedical ? formData?.vipMedical : null : null,\r\n                    camp_location: formData?.campLocation,\r\n                    nationality: selectedCountry,\r\n                    nationality_id: selectedCountry?.id,\r\n                    passport_number: formData?.passportNumber.toUpperCase(),\r\n                    passport_expiry: moment(formData?.passportExp).format('YYYY-MM-DD'),\r\n                    visa_designation: formData?.visaDesignation,\r\n                    salary_basic: formData?.basic,\r\n                    salary_allowance: formData?.allowance,\r\n                    salary_total: parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)).toFixed(2),\r\n                    end_consumer: formData?.endConsumer,\r\n                    end_consumer_company: formData?.endConsumerCompany,\r\n                    documents: documents\r\n                };\r\n\r\n                console.log('Adding candidate:', obj);\r\n                console.log('Previous candidates:', prevCandidates);\r\n\r\n                return [...prevCandidates, obj];\r\n            });\r\n\r\n\r\n\r\n\r\n            setDocuments([\r\n                {\r\n                    name: \"Employee Undertaking\",\r\n                    key: \"undertaking\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n\r\n\r\n                },\r\n                {\r\n                    name: \"Company Undertaking\",\r\n                    key: \"cundertaking\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n                },\r\n\r\n                {\r\n                    name: \"Passport Copy\",\r\n                    key: \"passportcopy\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n                },\r\n                {\r\n                    name: \"Digital Photo\",\r\n                    key: \"digitalphoto\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n                },\r\n                {\r\n                    name: \"Employment Contract\",\r\n                    key: \"contract\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n                },\r\n                {\r\n                    name: \"Offer Letter\",\r\n                    key: \"offerletter\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: true\r\n                },\r\n                {\r\n                    name: \"Previous Emirates Ids\",\r\n                    key: \"emiratesids\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n                {\r\n                    name: \"Previous UAE Visa Copy\",\r\n                    key: \"uaevisa\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n                {\r\n                    name: \"Cancellation\",\r\n                    key: \"cancellation\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n                {\r\n                    name: \"UAE Driving License\",\r\n                    key: \"drivinglicense\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n                {\r\n                    name: \"Work Permit\",\r\n                    key: \"workpermit\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n                {\r\n                    name: \"Other Documents\",\r\n                    key: \"otherdoc\",\r\n                    path: \"\",\r\n                    expiry_date: null,\r\n                    is_required: false\r\n                },\r\n\r\n            ])\r\n            reset()\r\n\r\n            setDate(null)\r\n            setSelectedCountry(null)\r\n            console.log(candidates);\r\n            // Add your logic to handle the form data here, e.g., sending it to an API.\r\n        } catch (error) {\r\n            console.error('Error adding candidate:', error);\r\n            // Handle the error appropriately, e.g., displaying an error message to the user.\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    const UpdateCandidate = async (formData) => {\r\n        if (!salaryError && !byPass) {\r\n\r\n            handleClose()\r\n            console.log(candidateIndex);\r\n            let sum = 0\r\n            let sum2 = 0\r\n            if (visaTenture.includes('1')) {\r\n                if (visaType.toLowerCase() === 'in') {\r\n                    sum += parseFloat(Number(formData[\"1yearInsideRate\"]));\r\n                } else if (visaType.toLowerCase() === 'out') {\r\n                    sum += parseFloat(Number(formData[\"1yearOutsideRate\"]));\r\n                }\r\n\r\n\r\n                sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n            } else if (visaTenture.includes('2')) {\r\n                if (visaType.toLowerCase() === 'in') {\r\n                    sum += parseFloat(Number(formData[\"2yearInsideRate\"]));\r\n                } else if (visaType.toLowerCase() === 'out') {\r\n                    sum += parseFloat(Number(formData[\"2yearOutsideRate\"]));\r\n                }\r\n                sum += vipMedicalCheck ? parseFloat(Number(formData[\"vipMedical\"])) || 0 : 0;\r\n\r\n            }\r\n            if (visaTenture.includes('1')) {\r\n                if (visaType.toLowerCase() === 'in') {\r\n                    sum2 += parseFloat(Number(charges?.one_year_inside));\r\n                } else if (visaType.toLowerCase() === 'out') {\r\n                    sum2 += parseFloat(Number(charges?.one_year_outside));\r\n                }\r\n\r\n\r\n                sum2 += vipMedicalCheck ? parseFloat(Number(charges?.medical_extra)) || 0 : 0;\r\n\r\n            } else if (visaTenture.includes('2')) {\r\n                if (visaType.toLowerCase() === 'in') {\r\n                    sum2 += parseFloat(Number(charges?.two_year_inside));\r\n                } else if (visaType.toLowerCase() === 'out') {\r\n                    sum2 += parseFloat(Number(charges?.two_year_outside));\r\n                }\r\n                sum2 += vipMedicalCheck ? parseFloat(Number(charges?.medical_extra)) || 0 : 0;\r\n\r\n            }\r\n            console.log(sum2, 'sum');\r\n            console.log(vipMedicalCheck, 'sum2');\r\n\r\n            let multiplier = payrollPercent / 100\r\n\r\n            try {\r\n                let obj = {\r\n                    serial_id: candidateIndex,\r\n                    name: formData?.candidateName,\r\n                    phone: formData?.Phone,\r\n                    email: formData?.email,\r\n                    camp_location: formData?.campLocation,\r\n                    visa_charges: sum,\r\n                    visa_cost: sum2,\r\n                    visa_type: visaType,\r\n                    visa_tenure: visaTenture,\r\n                    deposit_consumed: customerPaymentType === 'visa' ? totalDepositCharges : parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)) * multiplier,\r\n                    security_deposit_visa: totalDepositCharges,\r\n                    payroll_percentage: payrollPercent,\r\n                    inside_rate: visaTenture.includes('1') ? formData[\"1yearInsideRate\"] : formData[\"2yearInsideRate\"],\r\n                    outside_rate: visaTenture.includes('1') ? formData[\"1yearOutsideRate\"] : formData[\"2yearOutsideRate\"],\r\n                    renewal_rate: 0,\r\n                    vip_medical_temp: formData?.vipMedical,\r\n                    vip_medical_extra: vipMedicalCheck ? formData?.vipMedical : null,\r\n                    nationality: selectedCountry,\r\n                    nationality_id: selectedCountry?.id,\r\n                    passport_number: formData?.passportNumber.toUpperCase(),\r\n                    employee_id: formData?.employeeid,\r\n                    passport_expiry: moment(formData?.passportExp).format('YYYY-MM-DD'),\r\n                    visa_designation: formData?.visaDesignation,\r\n                    salary_basic: formData?.basic,\r\n                    salary_allowance: formData?.allowance,\r\n                    salary_total: parseFloat(parseFloat(formData?.basic) + parseFloat(formData?.allowance)).toFixed(2),\r\n                    end_consumer: formData?.endConsumer,\r\n                    end_consumer_company: formData?.endConsumerCompany,\r\n                    documents: documents\r\n                }\r\n                console.log(obj);\r\n                // setCandidates((prevCandidates) => [...prevCandidates, obj]);\r\n                const updatedCandidates = candidates.map(candidate =>\r\n                    candidate.serial_id === candidateIndex ? obj : candidate\r\n                );\r\n                console.log(updatedCandidates);\r\n                setOpen1(false)\r\n                // Update the state with the updated candidates array\r\n                setCandidates(updatedCandidates);\r\n                reset()\r\n                setDocuments([\r\n                    {\r\n                        name: \"Employee Undertaking\",\r\n                        key: \"undertaking\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n\r\n\r\n                    },\r\n                    {\r\n                        name: \"Company Undertaking\",\r\n                        key: \"cundertaking\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n\r\n                    {\r\n                        name: \"Passport Copy\",\r\n                        key: \"passportcopy\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Digital Photo\",\r\n                        key: \"digitalphoto\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Employment Contract\",\r\n                        key: \"contract\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Offer Letter\",\r\n                        key: \"offerletter\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: true\r\n                    },\r\n                    {\r\n                        name: \"Previous Emirates Ids\",\r\n                        key: \"emiratesids\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Previous UAE Visa Copy\",\r\n                        key: \"uaevisa\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Cancellation\",\r\n                        key: \"cancellation\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"UAE Driving License\",\r\n                        key: \"drivinglicense\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Work Permit\",\r\n                        key: \"workpermit\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n                    {\r\n                        name: \"Other Documents\",\r\n                        key: \"otherdoc\",\r\n                        path: \"\",\r\n                        expiry_date: null,\r\n                        is_required: false\r\n                    },\r\n\r\n                ])\r\n                console.log(candidates);\r\n                // Add your logic to handle the form data here, e.g., sending it to an API.\r\n            } catch (error) {\r\n                console.error('Error adding candidate:', error);\r\n                // Handle the error appropriately, e.g., displaying an error message to the user.\r\n            }\r\n        }\r\n        else {\r\n            showErrorToast('Salary Limit Exceeded')\r\n        }\r\n    }\r\n    // *For Get Customer Queue\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: 1000,\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            if (user?.user_type == 'C') {\r\n                console.log(customerQueue);\r\n                let currentUser = data?.rows?.find(item => item?.id == user?.customer_id)\r\n                console.log(currentUser);\r\n                setSelectedCustomer(currentUser)\r\n                setValue1('customer', currentUser)\r\n                getCustomerDetail(currentUser?.id)\r\n            }\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getCustomerQueue()\r\n        getCountries()\r\n        getData()\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        if (candidates.length > 0) {\r\n            setSubmit(true)\r\n        }\r\n        const totalSalary = candidates.reduce((sum, candidate) => sum + parseFloat(candidate.salary_total), 0);\r\n        // Update the candidateSalary state with the calculated sum\r\n        console.log(totalSalary);\r\n\r\n        let multiplier = payrollPercent / 100\r\n        setCandidateSalary(parseFloat(parseFloat(totalSalary) * parseFloat(multiplier)));\r\n\r\n\r\n    }, [candidates])\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            {/* ========== Confirmation Dialog ========== */}\r\n            <ConfirmationDialog2\r\n                warning={true}\r\n                open={confirmationDialog3}\r\n                onClose={() => setConfirmationDialog3(false)}\r\n\r\n                action={() => {\r\n                    setConfirmationDialog3(false);\r\n                    CreateVisa()\r\n                }}\r\n            />\r\n            <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"You Have Unsaved Changes on this Page\"}\r\n                action={() => {\r\n                    setConfirmationDialog(false);\r\n                    handleClose()\r\n                    handleClose1()\r\n                }}\r\n            />\r\n            <ConfirmationDialog\r\n                open={confirmationDialog2}\r\n                onClose={() => setConfirmationDialog2(false)}\r\n                message={\"You Have Unsaved Changes on this Page\"}\r\n                action={() => {\r\n                    setConfirmationDialog2(false);\r\n\r\n                }}\r\n            />\r\n            <Dialog\r\n                component={'form'} onSubmit={handleSubmit(AddCandidate)}\r\n                open={open}\r\n\r\n                maxWidth={'md'}\r\n                fullWidth={true}\r\n                scroll={scroll}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">Add Candidate</DialogTitle>\r\n                <DialogContent dividers={scroll === 'paper'}>\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid container mt={5} pl={3}>\r\n                                <Grid item xs={3} sm={3}>\r\n                                    <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Type : </Typography>\r\n                                    <FormControl>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            defaultValue={visaType}\r\n\r\n                                            onChange={(e) => {\r\n                                                setVisaType(e.target.value);\r\n                                                console.log(getValues('1yearInsideRate'));\r\n                                                console.log(getValues('1yearOutsideRate'));\r\n                                                setTimeout(() => {\r\n                                                    setValue('1yearInsideRate', getValues('1yearInsideRate'))\r\n                                                    setValue('1yearOutsideRate', getValues('1yearOutsideRate'))\r\n                                                    console.log(getValues('1yearInsideRate'), 'asdasdasdasd');\r\n                                                }, 1000);\r\n\r\n\r\n\r\n                                            }}\r\n                                        >\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"In\"\r\n                                                control={<Radio />}\r\n                                                label=\"In\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"out\"\r\n                                                control={<Radio />}\r\n                                                label=\"Out\"\r\n                                            />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={3} sm={3}>\r\n                                    <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Tenure : </Typography>\r\n                                    <FormControl>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            defaultValue={visaTenture}\r\n                                            onChange={(e) => {\r\n                                                console.log(e.target.value);\r\n                                                setVisaTenture(e.target.value);\r\n\r\n                                            }}\r\n                                        >\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"1 year\"\r\n                                                control={<Radio />}\r\n                                                label=\"1 Year\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"2 year\"\r\n                                                control={<Radio />}\r\n                                                label=\"2 Years\"\r\n                                            />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, p: 3 }}>Visa Rates : </Typography>\r\n                            {<Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mt: 3 }}>{visaTenture.includes('1') ? \"1 Year Rates \" : \"2 Years Rates \"}</Typography>}\r\n\r\n                            <Grid container pl={3}>\r\n\r\n                                {visaTenture.includes('1') && visaType.toLowerCase() == 'in' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                                    <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Year Inside Rates :* '} StartLabel={'AED'} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} register={register(\"1yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                    </Grid>\r\n\r\n                                    {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} StartLabel={'AED'} disabled={user?.user_type == 'C' ? true : false }  register={register(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                                </Grid>}\r\n                                {visaTenture.includes('1') && visaType.toLowerCase() == 'out' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                                    <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Year Outside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register(\"1yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                    </Grid>\r\n\r\n                                    {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                                </Grid>}\r\n\r\n                                {visaTenture.includes('2') && visaType.toLowerCase() == 'in' && <>\r\n\r\n                                    <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Year Inside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register(\"2yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n\r\n                                        </Grid>\r\n\r\n\r\n                                        {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                                    </Grid></>}\r\n                                {visaTenture.includes('2') && visaType.toLowerCase() == 'out' && <>\r\n\r\n                                    <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Year Outside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register(\"2yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                        </Grid>\r\n\r\n\r\n                                        {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                                    </Grid></>}\r\n                            </Grid>\r\n                            <Grid container p={3}>\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2 }}>Extra Costing : </Typography>\r\n\r\n                                <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                    <Grid item xs={5}>\r\n                                        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n                                            <Box sx={{ marginTop: '22px' }}>\r\n                                                {<Checkbox checked={vipMedicalCheck} onChange={() => setVipMedicalCheck(!vipMedicalCheck)} />}\r\n                                                {/* <Controller\r\n                                                    \r\n                                                    \r\n                                                        <FormControlLabel\r\n                                                            control={<Checkbox checked={vipMedicalCheck} onChange={()=> setVipMedicalCheck(!vipMedicalCheck)} />\r\n\r\n                                                        />\r\n                                                    \r\n                                                /> */}\r\n                                            </Box>\r\n                                            <LabelCustomInput\r\n                                                label=\"VIP Medical Charges : \"\r\n                                                disabled={user?.user_type == 'C' || user?.user_type == 'A' || !vipMedicalCheck}\r\n                                                StartLabel=\"AED\"\r\n                                                register={register('vipMedical', { required: false })}\r\n                                                postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true}\r\n\r\n                                            />\r\n\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Candidate Name :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Candidate Name\"}\r\n                                    error={errors?.candidateName?.message}\r\n                                    register={register(\"candidateName\", {\r\n                                        required:\r\n                                            \"Please enter your candidate name.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Phone :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    type={'number'}\r\n                                    placeholder={\"Phone\"}\r\n                                    error={errors?.Phone?.message}\r\n                                    register={register(\"Phone\", {\r\n                                        required:\r\n                                            \"Please enter your Phone.\",\r\n                                        pattern: {\r\n                                            value: /^05[0-9]{8}$/,\r\n                                            message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                        }\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Email :*\"}\r\n                                    fullWidth={true}\r\n                                    size={'small'}\r\n                                    placeholder={\"Email\"}\r\n                                    error={errors?.email?.message}\r\n                                    register={register(\"email\", {\r\n                                        required: \"Please enter your email.\",\r\n                                        pattern: {\r\n                                            value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                            message: \"Please enter a valid email address.\"\r\n                                        }\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Camp Location  :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Camp Location \"}\r\n                                    error={errors?.campLocation?.message}\r\n                                    register={register(\"campLocation\", {\r\n                                        required:\r\n                                            \"Please enter your camp location.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Employee ID :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Employee ID\"}\r\n                                    error={errors?.employeeid?.message}\r\n                                    register={register(\"employeeid\", {\r\n                                        required:\r\n                                            \"Please enter your employee id.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <SelectField\r\n                                    size={'small'}\r\n                                    label={'Nationality :*'}\r\n                                    options={countries}\r\n                                    selected={selectedCountry}\r\n                                    onSelect={(value) => setSelectedCountry(value)}\r\n                                    error={errors?.nationality?.message}\r\n                                    register={register(\"nationality\", {\r\n                                        required: 'Please select nationality'\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Passport Number :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Passport Number\"}\r\n                                    error={errors?.passportNumber?.message}\r\n                                    register={register(\"passportNumber\", {\r\n                                        required:\r\n                                            \"Please enter your passport number.\",\r\n                                        onChange: (e) => {\r\n                                            console.log('asdas');\r\n\r\n                                            Debounce2(() => verifyPassportNumber());\r\n                                            // Delay the execution of verifyPassportNumber by 2 seconds\r\n\r\n                                        },\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <DatePicker\r\n                                    label={\"Passport Expiry :*\"}\r\n                                    value={date}\r\n                                    disablePast={true}\r\n                                    minDate={addDays(addMonths(new Date(), 6), 1)} \r\n                                    size={'small'}\r\n                                    error={errors?.passportExp?.message}\r\n                                    {...register(\"passportExp\", {\r\n                                        required: \"Please enter your passport expiry date.\",\r\n                                        validate: (value) => {\r\n                                            const minAllowedDate = addMonths(new Date(), 6);\r\n                                            console.log(value,'value');\r\n                                            console.log(moment(minAllowedDate),'value');\r\n                                            console.log(moment(value) > moment(minAllowedDate),'value');\r\n                                            \r\n                                            return moment(value) > moment(minAllowedDate) || \"Passport expiry date must be at least 6 months from today.\";\r\n                                        },\r\n                                    })}\r\n                                    onChange={(date) => {\r\n                                        handleDate(date);\r\n                                        setValue(\"passportExp\", date, { shouldValidate: true });\r\n                                    }}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Visa Designation :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Visa Designation\"}\r\n                                    error={errors?.visaDesignation?.message}\r\n                                    register={register(\"visaDesignation\", {\r\n                                        required:\r\n                                            \"Please enter your visa designation .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Salary : </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n                                <LabelCustomInput label={'Basic :* '} StartLabel={'AED'} placeholder={'Basic'} error={errors?.basic?.message} register={register(\"basic\", { required: \"Enter basic  salary\", onChange: (e) => totalSalaryCalc() })} />\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n                                <LabelCustomInput allowance={true} label={'Allowance : '} StartLabel={'AED'} placeholder={'Allowance'} error={errors?.allowance?.message} register={register(\"allowance\", { required: \"Enter allowance \", onChange: (e) => totalSalaryCalc() })} />\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n\r\n                                <LabelCustomInput disabled={true} label={'Total Salary : '} StartLabel={'AED'} placeholder={'Total'} register={register(\"totalSalary\")} />\r\n                                {(customerPaymentType == 'payroll' && salaryError) ? <p style={{ color: 'red' }}>Salary Limit Exceeded </p> : ''}\r\n                                {(customerPaymentType == 'payroll' && depositError) ? <p style={{ color: 'red' }}>Deposit Balance is Low </p> : ''}\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer\"}\r\n                                    error={errors?.endConsumer?.message}\r\n                                    register={register(\"endConsumer\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer  .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid> */}\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer Company :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer Company \"}\r\n                                    error={errors?.endConsumerCompany?.message}\r\n                                    register={register(\"endConsumerCompany\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer company .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Documents : </Typography>\r\n                            </Grid>\r\n                            {documents?.length > 0 && documents?.map((item, index) => (\r\n\r\n\r\n                                <Grid item xs={5} >\r\n                                    <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>{item?.is_required ? item?.name : item?.name + \" \" + '(If Any)'} : {item?.is_required ? '*' : ''} </Typography>\r\n                                    <UploadFile\r\n                                        Memo={true}\r\n                                        accept={allowFilesType}\r\n                                        file={documents}\r\n                                        multiple={true}\r\n                                        updateResult={updateResult}\r\n                                        fileId={item?.key}\r\n                                        loader={loader}\r\n                                        error={errors[item?.key]?.message}\r\n                                        disabled={isUploading} // Disable while uploading\r\n                                        register={register(`${item?.key}`, {\r\n                                            required: item?.is_required ? documents.find((item2 => item2?.key == item?.key))?.path != '' ? false :\r\n                                                \"Please upload document.\" : false,\r\n                                            onChange: async (e) => {\r\n                                                setIsUploading(true); // Set uploading to true when the upload starts\r\n                                                const path = await handleUploadDocument(e, item?.key);\r\n                                                if (path) {\r\n                                                    handleDocArrayUpdate('path', path, item?.key);\r\n                                                    console.log(path);\r\n                                                }\r\n                                                setIsUploading(false); // Reset uploading status when done\r\n                                            }\r\n                                        })}\r\n                                    />\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            ))}\r\n\r\n\r\n                        </Grid>\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} onClick={() => {\r\n                        setConfirmationDialog(true)\r\n                        setVerifyPassport(false)\r\n                        setDocuments([\r\n                            {\r\n                                name: \"Employee Undertaking\",\r\n                                key: \"undertaking\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n\r\n\r\n                            },\r\n                            {\r\n                                name: \"Company Undertaking\",\r\n                                key: \"cundertaking\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n                            },\r\n\r\n                            {\r\n                                name: \"Passport Copy\",\r\n                                key: \"passportcopy\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n                            },\r\n                            {\r\n                                name: \"Digital Photo\",\r\n                                key: \"digitalphoto\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n                            },\r\n                            {\r\n                                name: \"Employment Contract\",\r\n                                key: \"contract\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n                            },\r\n                            {\r\n                                name: \"Offer Letter\",\r\n                                key: \"offerletter\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: true\r\n                            },\r\n                            {\r\n                                name: \"Previous Emirates Ids\",\r\n                                key: \"emiratesids\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n                            {\r\n                                name: \"Previous UAE Visa Copy\",\r\n                                key: \"uaevisa\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n                            {\r\n                                name: \"Cancellation\",\r\n                                key: \"cancellation\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n                            {\r\n                                name: \"UAE Driving License\",\r\n                                key: \"drivinglicense\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n                            {\r\n                                name: \"Work Permit\",\r\n                                key: \"workpermit\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n                            {\r\n                                name: \"Other Documents\",\r\n                                key: \"otherdoc\",\r\n                                path: \"\",\r\n                                expiry_date: null,\r\n                                is_required: false\r\n                            },\r\n\r\n                        ])\r\n\r\n                    }}>Cancel</Button>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} disabled={(customerPaymentType == 'payroll' && (salaryError || depositError)) || verifyPassport ? true : false} type='submit'>Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                component={'form'} onSubmit={handleSubmit2(UpdateCandidate)}\r\n                open={open1}\r\n\r\n                maxWidth={'md'}\r\n                fullWidth={true}\r\n                scroll={scroll}\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"scroll-dialog-title\">Update Candidate</DialogTitle>\r\n                <DialogContent dividers={scroll === 'paper'}>\r\n                    <DialogContentText\r\n                        id=\"scroll-dialog-description\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid container mt={5} pl={3}>\r\n                                <Grid item xs={3} sm={3}>\r\n                                    <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Type : </Typography>\r\n                                    <FormControl>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            defaultValue={visaType}\r\n                                            onChange={(e) => {\r\n                                                setVisaType(e.target.value);\r\n                                                console.log(getValues('1yearInsideRate'));\r\n                                                console.log(getValues('1yearOutsideRate'));\r\n                                                getCustomerDetail(selectedCustomer?.id, 'update')\r\n                                                setTimeout(() => {\r\n                                                    setValue2('2yearInsideRate', getValues('2yearInsideRate'))\r\n                                                    setValue2('2yearOutsideRate', getValues('2yearOutsideRate'))\r\n                                                    console.log(getValues('1yearInsideRate'), 'asdasdasdasd');\r\n                                                }, 1000);\r\n                                            }}\r\n                                        >\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n                                                value=\"In\"\r\n                                                control={<Radio />}\r\n                                                label=\"In\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n                                                value=\"out\"\r\n                                                control={<Radio />}\r\n                                                label=\"Out\"\r\n                                            />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={3} sm={3}>\r\n                                    <Typography sx={{ fontSize: '15px', color: Colors.black, mb: 2, fontWeight: 'bold' }}>Visa Tenure : </Typography>\r\n                                    <FormControl>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            defaultValue={visaTenture}\r\n                                            onChange={(e) => {\r\n                                                console.log(e.target.value);\r\n                                                setVisaTenture(e.target.value);\r\n                                                getCustomerDetail(selectedCustomer?.id, 'update')\r\n                                            }}\r\n                                        >\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"1 year\"\r\n                                                control={<Radio />}\r\n                                                label=\"1 Year\"\r\n                                            />\r\n                                            <FormControlLabel\r\n                                                sx={{ color: \"#000\" }}\r\n\r\n                                                value=\"2 year\"\r\n                                                control={<Radio />}\r\n                                                label=\"2 Years\"\r\n                                            />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, p: 3 }}>Visa Rates : </Typography>\r\n                            {<Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mt: 3 }}>{visaTenture.includes('1') ? \"1 Year Rates \" : \"2 Years Rates \"}</Typography>}\r\n\r\n                            <Grid container pl={3}>\r\n\r\n                                {visaTenture.includes('1') && visaType.toLowerCase() == 'in' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                                    <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Year Inside Rates :* '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register2(\"1yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                    </Grid>\r\n\r\n                                    {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                                </Grid>}\r\n                                {visaTenture.includes('1') && visaType.toLowerCase() == 'out' && <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n\r\n                                    <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Year Outside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register2(\"1yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                    </Grid>\r\n\r\n                                    {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '}  disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n\r\n\r\n\r\n                                </Grid>}\r\n\r\n                                {visaTenture.includes('2') && visaType.toLowerCase() == 'in' && <>\r\n\r\n                                    <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Year Inside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register2(\"2yearInsideRate\", { required: \"Enter year inside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n\r\n                                        </Grid>\r\n\r\n\r\n                                        {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                                    </Grid></>}\r\n                                {visaTenture.includes('2') && visaType.toLowerCase() == 'out' && <>\r\n\r\n                                    <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Year Outside Rates :*  '} disabled={user?.user_type == 'C' || user?.user_type == 'A' ? true : false} StartLabel={'AED'} register={register2(\"2yearOutsideRate\", { required: \"Enter year outside rate\", onChange: () => handleTotalVisaCharges() })} postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true} />\r\n                                        </Grid>\r\n\r\n                                        {/* \r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n\r\n\r\n\r\n                                    </Grid></>}\r\n                            </Grid>\r\n                            <Grid container p={3}>\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2 }}>Extra Costing : </Typography>\r\n\r\n                                <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                                    <Grid item xs={5}>\r\n                                        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\r\n                                            <Box sx={{ marginTop: '22px' }}>\r\n                                                {<Checkbox checked={vipMedicalCheck} onChange={(e) => {\r\n                                                    console.log(!vipMedicalCheck);\r\n                                                    if (!vipMedicalCheck == true) {\r\n                                                        console.log(updateCandidate);\r\n\r\n\r\n                                                        setValue2('vipMedical', updateCandidate?.vip_medical_temp)\r\n                                                    }\r\n\r\n                                                    setVipMedicalCheck(!vipMedicalCheck)\r\n                                                }} />}\r\n                                            </Box>\r\n                                            <LabelCustomInput\r\n                                                label=\"VIP Medical Extra Charges : \"\r\n                                                StartLabel=\"AED\"\r\n                                                register={register2('vipMedical')}\r\n                                                postfix={user?.user_type == 'C' || user?.user_type == 'A' ? false : true}\r\n                                                disabled={user?.user_type == 'C' || user?.user_type == 'A' || !vipMedicalCheck}\r\n                                            />\r\n\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Candidate Name :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Candidate Name\"}\r\n                                    error={errors2?.candidateName?.message}\r\n                                    register={register2(\"candidateName\", {\r\n                                        required:\r\n                                            \"Please enter your candidate name.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Phone :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    type={'number'}\r\n                                    placeholder={\"Phone\"}\r\n                                    error={errors2?.Phone?.message}\r\n                                    register={register2(\"Phone\", {\r\n                                        required:\r\n                                            \"Please enter your Phone.\",\r\n                                        pattern: {\r\n                                            value: /^05[0-9]{8}$/,\r\n                                            message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                        }\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Email :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Email \"}\r\n                                    error={errors2?.email?.message}\r\n                                    register={register2(\"email\", {\r\n                                        required:\r\n                                            \"Please enter your email.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Camp Location  :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Camp Location \"}\r\n                                    error={errors2?.campLocation?.message}\r\n                                    register={register2(\"campLocation\", {\r\n                                        required:\r\n                                            \"Please enter your camp location.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Employee ID :*\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Employee ID\"}\r\n                                    error={errors?.employeeid?.message}\r\n                                    register={register2(\"employeeid\", {\r\n                                        required:\r\n                                            \"Please enter your employee id.\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <SelectField\r\n                                    size={'small'}\r\n                                    label={'Nationality :*'}\r\n                                    options={countries}\r\n                                    selected={selectedCountry}\r\n                                    onSelect={(value) => setSelectedCountry(value)}\r\n                                    error={errors2?.nationality?.message}\r\n                                    register={register2(\"nationality\", {\r\n                                        required: 'Please select nationality'\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Passport Number :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Passport Number\"}\r\n                                    error={errors2?.passportNumber?.message}\r\n                                    register={register2(\"passportNumber\", {\r\n                                        required:\r\n                                            \"Please enter your passport number.\",\r\n                                        onChange: (e) => {\r\n                                            console.log('asdas');\r\n\r\n                                            Debounce2(() => verifyPassportNumber2());\r\n                                            // Delay the execution of verifyPassportNumber by 2 seconds\r\n\r\n                                        },\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <DatePicker\r\n                                    label={\"Passport Expiry :*\"}\r\n                                    value={date}\r\n                                    disablePast={true}\r\n                                    minDate={addDays(addMonths(new Date(), 6), 1)} \r\n                                    size={'small'}\r\n                                    error={errors2?.passportExp?.message}\r\n                                    {...register2(\"passportExp\", {\r\n                                        required: \"Please enter your passport expiry date.\",\r\n                                        validate: (value) => {\r\n                                            const minAllowedDate = addMonths(new Date(), 6);\r\n                                            console.log(value,'value');\r\n                                            console.log(moment(minAllowedDate),'value');\r\n                                            console.log(moment(value) > moment(minAllowedDate),'value');\r\n                                            \r\n                                            return moment(value) > moment(minAllowedDate) || \"Passport expiry date must be at least 6 months from today.\";\r\n                                        },\r\n                                    })}\r\n                                    onChange={(date) => {\r\n                                        handleDate(date);\r\n                                        setValue2(\"passportExp\", date, { shouldValidate: true });\r\n                                    }}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"Visa Designation :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"Visa Designation\"}\r\n                                    error={errors2?.visaDesignation?.message}\r\n                                    register={register2(\"visaDesignation\", {\r\n                                        required:\r\n                                            \"Please enter your visa designation .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Salary : </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n                                <LabelCustomInput label={'Basic : '} StartLabel={'AED'} placeholder={'Basic'} error={errors?.basic?.message} register={register2(\"basic\", { required: \"Enter basic  salary\", onChange: (e) => totalSalaryCalc('update') })} />\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n                                <LabelCustomInput allowance={true} label={'Allowance : '} StartLabel={'AED'} placeholder={'Allowance'} error={errors?.allowance?.message} register={register2(\"allowance\", { required: \"Enter allowance \", onChange: (e) => totalSalaryCalc('update') })} />\r\n                            </Grid>\r\n                            <Grid item xs={6} >\r\n                                <LabelCustomInput disabled={true} label={'Total Salary : '} StartLabel={'AED'} placeholder={'Total'} register={register2(\"totalSalary\")} />\r\n                                {(customerPaymentType == 'payroll' && salaryError) ? <p style={{ color: 'red' }}>Salary Limit Exceeded </p> : ''}\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer\"}\r\n                                    error={errors2?.endConsumer?.message}\r\n                                    register={register2(\"endConsumer\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer  .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid> */}\r\n                            <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer Company :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer Company \"}\r\n                                    error={errors2?.endConsumerCompany?.message}\r\n                                    register={register2(\"endConsumerCompany\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer company .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue }}>Documents : </Typography>\r\n                            </Grid>\r\n                            {documents?.length > 0 && documents?.map((item, index) => (\r\n\r\n\r\n                                <Grid item xs={5} >\r\n                                    <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>{item?.is_required ? item?.name : item?.name + '(If Any)'} :{item?.is_required ? '*' : ' '} </Typography>\r\n                                    <UploadFile\r\n                                        Memo={true}\r\n                                        accept={allowFilesType}\r\n                                        file={documents}\r\n                                        multiple={true}\r\n                                        updateResult={updateResult}\r\n                                        fileId={item?.key}\r\n                                        error={errors2[item?.key]?.message}\r\n                                        loader={loader}\r\n                                        disabled={isUploading}\r\n                                        register={register2(`${item?.key}`, {\r\n                                            required: item?.is_required ? documents.find((item2 => item2?.key == item?.key))?.path != '' ? false :\r\n                                                \"Please upload document.\" : false,\r\n                                            onChange: async (e) => {\r\n                                                setIsUploading(true); // Set uploading to true when the upload starts\r\n                                                const path = await handleUploadDocument(e, item?.key);\r\n                                                if (path) {\r\n                                                    handleDocArrayUpdate('path', path, item?.key);\r\n                                                    console.log(path);\r\n                                                }\r\n                                                setIsUploading(false); // Reset uploading status when done\r\n                                            }\r\n                                        })}\r\n                                    />\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            ))}\r\n\r\n\r\n                        </Grid>\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} onClick={() => {setConfirmationDialog(true); setVerifyPassport2(false)}}>Cancel</Button>\r\n                    <Button sx={{ fontFamily: 'Public Sans' }} disabled={verifyPassport2} type='submit'>Update</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Box component={'form'} onSubmit={handleSubmit1(CreateVisa)}>\r\n\r\n\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                    <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >ADD NEW</Typography>\r\n                    <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Save\"\r\n                            onClick={() => setConfirmationDialog3(true)}\r\n                            disabled={candidates.length > 0 ? false : true}\r\n                        // onClick={ ()=> navigate(`/update-customer/${id}`)}\r\n\r\n\r\n                        />\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Grid container mt={5}>\r\n                    <Grid item xs={5} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Customer :'}\r\n                            disabled={user?.user_type == 'C' ? true : false}\r\n                            options={customerQueue}\r\n                            selected={selectedCustomer}\r\n                            onSelect={(value) => {\r\n                                console.log(value,'asdasdasasd');\r\n                                \r\n                                setSelectedCustomer(value)\r\n                                getCustomerDetail(value?.id)\r\n                                setValue1('customer', value)\r\n                                setCandidates([])\r\n\r\n                            }}\r\n                            error={errors1?.customer?.message}\r\n                            register={register1(\"customer\", {\r\n                                required: 'Please select customer account.',\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                <Grid container mt={2} xs={10} justifyContent={'flex-end'}>\r\n                    <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Add Candidate\"\r\n                        disabled={(selectedCustomer && customerDetail) ? false : true}\r\n                        onClick={() => {\r\n                            const today = moment();\r\n                            const tenthOfMonth = moment().startOf('month').add(9, 'days');\r\n                            let valid = false\r\n\r\n                            const lastMonth = moment().subtract(1, 'months');\r\n                            console.log(customerDetail, 'customerDetailcustomerDetail');\r\n                            console.log(today.isAfter(tenthOfMonth));\r\n                            console.log(moment(customerDetail.created_at).isSame(moment(), 'month'));\r\n\r\n                            const total = candidates.reduce((total, item) => total + item.salary_total, 0);\r\n\r\n                            let multiplier = payrollPercent / 100\r\n                            let multiplied = total * multiplier\r\n                            console.log(customerBalance, 'customerBalance');\r\n                            console.log(candidateSalary, 'customerBalance');\r\n\r\n                            if (customerBalance < candidateSalary && !byPass) {\r\n                                showErrorToast('Deposit Balance Is Low')\r\n                            }\r\n                            else {\r\n\r\n\r\n\r\n\r\n                                if (wpsValid) {\r\n                                    showErrorToast('Create WPS First')\r\n                                }\r\n                                else {\r\n                                    handleClickOpen('paper')\r\n                                    console.log(\"The 10th date of the current month has not passed yet.\");\r\n                                }\r\n                            }\r\n\r\n\r\n                        }}\r\n\r\n\r\n                    />\r\n                </Grid>\r\n\r\n\r\n                {candidates?.length > 0 && <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mt: 5 }}>Candidates Details: </Typography>}\r\n                <Grid container mt={3} gap={2}>\r\n\r\n\r\n\r\n                    {candidates?.length > 0 && candidates?.map((item, index) => (\r\n\r\n                        <Grid item xs={5} >\r\n                            <Box\r\n                                component={'div'}\r\n\r\n                                sx={{\r\n                                    position: 'relative',\r\n                                    border: `2px solid ${Colors.primary}`,\r\n                                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n                                    padding: '16px',\r\n                                    borderRadius: '8px',\r\n                                    maxWidth: '400px',\r\n                                    margin: '0 auto',\r\n                                    backgroundColor: '#fff',\r\n                                    fontFamily: 'Public Sans'\r\n                                }}\r\n                            >\r\n                                <IconButton\r\n                                    sx={{\r\n                                        position: 'absolute',\r\n                                        top: '8px',\r\n                                        right: '35px'\r\n                                    }}\r\n                                    aria-label=\"delete\"\r\n                                    onClick={() => {\r\n\r\n                                        handleUpdateCandidate(item, index)\r\n\r\n                                    }}\r\n                                >\r\n                                    <MoreHorizIcon />\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    sx={{\r\n                                        position: 'absolute',\r\n                                        top: '8px',\r\n                                        right: '8px'\r\n                                    }}\r\n                                    aria-label=\"delete\"\r\n                                    onClick={() => {\r\n\r\n                                        handleDelete(index)\r\n\r\n                                    }}\r\n                                >\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n\r\n                                <Typography variant=\"body1\" gutterBottom>\r\n                                    <strong>Name:</strong>&nbsp; {item?.name?.length > 20 ? item?.name.slice(0, 20) + '...' : item?.name}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" gutterBottom>\r\n                                    <strong>Email:</strong>&nbsp;{item?.email}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\">\r\n                                    <strong>Number:</strong>&nbsp;{item?.phone}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\">\r\n                                    <strong>Visa Type:</strong>&nbsp;{item?.visa_type.toLowerCase() == 'out' ? 'Out' : 'In'}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\">\r\n                                    <strong>Visa Tenure:</strong>&nbsp;{item?.visa_tenure.includes('1') ? '1 Year' : '2 Year'}\r\n                                </Typography>\r\n                            </Box>\r\n                            {/* <Chip\r\n                                label={item?.name}\r\n                                onClick={() => {\r\n                                    handleUpdateCandidate(item, index)\r\n\r\n                                }}\r\n                                onDelete={() => handleDelete(index)}\r\n                                deleteIcon={<DeleteIcon />}\r\n                                variant=\"outlined\"\r\n                            /> */}\r\n\r\n\r\n                        </Grid>\r\n\r\n\r\n                    ))}\r\n                </Grid>\r\n            </Box>\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default AddVisa\r\n"
        }
    ]
}