{
    "sourceFile": "src/pages/Dashboard/Commission/CommissionList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821642,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction CommissionList() {\r\n    const { register, handleSubmit, getValues, setValue,formState: { errors } } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    \r\n\r\n    const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Agent Name ', key: 'name' }, { name: 'Date Added', key: 'created_at' }, { name: 'Commission on Visa', key: 'commission_visa' }, { name: 'Commission on Monthly Revenue', key: 'commission_monthly' }, { name: 'Allocated Customers', key: 'customerCount' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n\r\n    \r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n    \r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // *For Get Customer Queue\r\n    const getAgentList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = filter ?  { ...filters, ...filter } : null;\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CommissionServices.getAgents(params)\r\n            setCustomerQueue(data?.rows)\r\n            setTotalCount(data?.count)\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n              if (e?.route && e?.identifier && e?.permitted) {\r\n                dispatch(addPermission(e?.route));\r\n              }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data={\r\n            search:getValues('search')\r\n        }\r\n        Debounce(() => getAgentList(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getAgentList(1, '', data));\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getAgentList()\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n\r\n\r\n\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Commission Management</Typography>\r\n                {permissions?.create && <PrimaryButton\r\n                   bgcolor={'#bd9b4a'}\r\n                    title=\"Create Agent\"\r\n                    onClick={() =>{ navigate('/create-agent'); localStorage.setItem(\"currentUrl\", '/create-agent')}}\r\n                    loading={loading}\r\n                />}\r\n\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'}   register={register(\"search\")} />\r\n                    </Grid>\r\n                    {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n                    <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                    <PrimaryButton\r\n                    bgcolor={\"#0076bf\"}\r\n                    textcolor={Colors.white}\r\n                    // border={`1px solid ${Colors.primary}`}\r\n                    title=\"Reset\"\r\n                    onClick={() => { ;setValue('search','');getAgentList(1,'',null)}}\r\n                    loading={loading}\r\n                />\r\n                    <PrimaryButton\r\n                   bgcolor={'#bd9b4a'}\r\n                    title=\"Search\"\r\n                    onClick={() => handleFilter()}\r\n                    loading={loading}\r\n                />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {customerQueue && <Box>\r\n\r\n                        <Grid container mb={2} >\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                        {(\r\n                            customerQueue && (\r\n                                <Fragment>\r\n                                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: 'calc(100vh - 200px)', mt: 5, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                            }}\r\n\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell style={{ textAlign: cell?.name == 'SR No.' ? 'center' : 'left', paddingRight: cell?.name == 'SR No.' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                                                key={index}\r\n\r\n                                                            >\r\n                                                                <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                                                                    {cell?.name} {cell?.name != 'SR No.' && cell?.name != 'Actions' && <>&nbsp;<span style={{ height: '20px', cursor: 'pointer' }}><Box component={'img'} onClick={() => { setSort(sort == 'asc' ? 'desc' : 'asc'); handleSort(cell?.key) }} src={Images.sortIcon} width={'18px'}></Box></span></>}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {customerQueue.map((item, index) => {\r\n\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: '1px solid #EEEEEE !important',\r\n                                                                }}\r\n                                                            >\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.id}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.name}\r\n                                                                </Cell>\r\n                                                               \r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.commission_visa}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.commission_monthly ?? \"-\"}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.customerCount ?? \"-\"}\r\n\r\n                                                                    {/* {item?.name ?? \"-\"} */}\r\n                                                                </Cell>\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box>\r\n                                                                        {permissions?.details && <Box component={'img'} src={Images.detailIcon} onClick={()=> {navigate(`/agent-detail/${item?.id}`); localStorage.setItem(\"currentUrl\", '/agent-detail')}} width={'35px'}></Box>}\r\n                                                                        {permissions?.edit && <Box component={'img'} sx={{cursor:\"pointer\"}} onClick={()=> {navigate(`/update-agent/${item?.id}`); localStorage.setItem(\"currentUrl\", '/update-agent')}} src={Images.editIcon} width={'35px'}></Box>}\r\n                                                                        {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box> */}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n\r\n\r\n\r\n                                                            </Row>\r\n\r\n                                                        );\r\n                                                    })}\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getAgentList(1, size.target.value,filters)}\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getAgentList(page, \"\",filters)}\r\n                                    />\r\n\r\n                                </Fragment>\r\n                            )\r\n                        )}\r\n\r\n\r\n                        {loader && <CircleLoading />}\r\n\r\n\r\n                    </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default CommissionList;"
        }
    ]
}