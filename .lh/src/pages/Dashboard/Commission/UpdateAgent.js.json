{
    "sourceFile": "src/pages/Dashboard/Commission/UpdateAgent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821629,
            "name": "Commit-0",
            "content": "import UploadFile from 'components/UploadFile';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport instance from 'config/axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport routes from 'services/System/routes';\r\nimport { CleanTypes, Debounce2, getFileSize } from 'utils';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport CommissionServices from 'services/Commission';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport InputField from 'components/Input';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport CustomerServices from 'services/Customer';\r\nimport { addMonths } from 'date-fns';\r\n\r\nconst UpdateAgent = () => {\r\n    const navigate = useNavigate()\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n\r\n    const [submit, setSubmit] = useState(true)\r\n    const [handleBlockedNavigation] =\r\n        useCallbackPrompt(submit)\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const { id } = useParams();\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [tradeLiscense, setTradeLiscense] = useState()\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [emirateIds, setEmirateIds] = useState()\r\n    const [passport, setPassport] = useState()\r\n    const [otherDoc, setOtherDoc] = useState()\r\n    const [agreement, setAgreement] = useState()\r\n    const [isUploading, setIsUploading] = useState(false); \r\n    const [tradeLicenseWithExpiry, setTradeLicenseWithExpiry] = useState('');\r\n\r\n    const [emirateIdsWithExpiry, setEmirateIdsWithExpiry] = useState('');\r\n\r\n    const [agreementWithExpiry, setAgreementWithExpiry] = useState('');\r\n\r\n    const [passportWithExpiry, setPassportWithExpiry] = useState(``)\r\n    const [loading, setLoading] = useState(false)\r\n    const [emailVerify, setEmailVerify] = useState(true)\r\n\r\n    const [agentDetails, setAgentDetails] = useState(null)\r\n    const handelDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n\r\n                return;\r\n            }\r\n            return newDate ? new Date(newDate) : newDate\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const verifyEmail = async (value) => {\r\n        let email = getValues('email')\r\n        if(email){\r\n\r\n            try {\r\n                let obj = {\r\n                    email: email.toLowerCase(),\r\n                    validate: true,\r\n                    user_id: agentDetails?.user_id\r\n    \r\n    \r\n                };\r\n    \r\n                console.log(obj);\r\n    \r\n                const { status } = await CustomerServices.addCustomer(obj);\r\n    \r\n                console.log(status);\r\n                if (status) {\r\n                    setEmailVerify(true)\r\n                }\r\n    \r\n    \r\n            } catch (error) {\r\n                console.log(error);\r\n                setEmailVerify(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDocArrayUpdate = async (field, value, key) => {\r\n        console.log(documents);\r\n\r\n        if (field === 'path') {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, path: value }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            // Assuming you want to update the documents array\r\n            // You can replace the following line with your state updating logic\r\n            setDocuments(updatedDocuments)\r\n        } else {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, expiry_date: moment(value).format('MM-DD-YYYY') }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            setDocuments(updatedDocuments)\r\n            // Handle other fields if needed\r\n        }\r\n    }\r\n    //documents array\r\n    const [documents, setDocuments] = useState([\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {\r\n            name: \"otherdoc\",\r\n            key: \"otherdoc\",\r\n            path: \"\",\r\n            expiry_date: \"\"\r\n        },\r\n\r\n        {\r\n            name: \"tradeLicense\",\r\n            key: \"tradeLicense\",\r\n            path: \"\",\r\n            expiry_date: \"\"\r\n        },\r\n        {\r\n            name: \"passport\",\r\n            key: \"passport\",\r\n            path: \"\",\r\n            expiry_date: \"\"\r\n        },\r\n        {\r\n            name: \"emirateIds\",\r\n            key: \"emirateIds\",\r\n            path: \"\",\r\n            expiry_date: \"\"\r\n        },\r\n\r\n        {\r\n            name: \"Agreement\",\r\n            key: \"Agreement\",\r\n            path: \"\",\r\n            expiry_date: \"\"\r\n        }\r\n    ]\r\n    )\r\n\r\n    const updateResult = (key, newResult) => {\r\n\r\n        console.log(newResult)\r\n        const updatedDocuments = documents.map(doc => {\r\n            if (doc.key === key) {\r\n                return { ...doc, path: newResult }; // Update the path\r\n            }\r\n            return doc; // Return the document as is if the key doesn't match\r\n        });\r\n        console.log(updatedDocuments, 'updatedDocuments');\r\n        setDocuments(updatedDocuments)\r\n    };\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e,key) => {\r\n        setLoader(key)\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files, \"length\");\r\n\r\n            const inputElement = e.target; // Store a reference to the file input element\r\n\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n\r\n                let maxSize = 10 * 1024 * 1024;\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB');\r\n                } else {\r\n                    if (allowFilesType.includes(file.type)) {\r\n                        // Add the current date before the file name\r\n                        const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n                        const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n                        // Create a new file with the date-prefixed name\r\n                        const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n                        // Upload the file with the new name\r\n                        const uploadedPath = await handleUpload(newFile, arr);\r\n\r\n                        if (path) {\r\n                            path += \",\" + uploadedPath;\r\n                        } else {\r\n                            path = uploadedPath;\r\n                        }\r\n                        setLoader(false)\r\n                    } else {\r\n                        showErrorToast(`File type ${file.type} is not allowed.`);\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(path, \"path\");\r\n\r\n            // Clear the file input after processing\r\n            inputElement.value = \"\";\r\n\r\n            return path;\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const getData = async (formData) => {\r\n        setLoading(true)\r\n        console.log(formData);\r\n        try {\r\n            let params = {\r\n                agent_id: id\r\n\r\n            }\r\n\r\n            const { data } = await CommissionServices.getAgentDetail(params);\r\n            console.log(data);\r\n            let details = data?.details\r\n            setAgentDetails(details)\r\n            setValue('agentName', details?.name)\r\n            setValue('email', details?.userDetail?.email)\r\n            setValue('commissionVisa', details?.commission_visa)\r\n            setValue('commissionMonthly', details?.commission_monthly)\r\n\r\n            setDocuments(details?.documents)\r\n            console.log(details?.documents);\r\n            const passportData = details?.documents?.find(item => item.key == 'passport');\r\n            const licenseData = details?.documents?.find(item => item.key == 'tradeLicense');\r\n            const emiratesIds = details?.documents?.find(item => item.key == 'emirateIds');\r\n            const agreementData = details?.documents?.find(item => item.key == 'Agreement');\r\n            const otherDocData = details?.documents?.find(item => item.key == 'otherdoc');\r\n            console.log(passportData);\r\n            if (passportData) {\r\n                setPassport(passportData?.path);\r\n                setPassportWithExpiry(handelDate(passportData?.expiry_date))\r\n                setValue('passportExp', handelDate(passportData?.expiry_date))\r\n            }\r\n            if (licenseData) {\r\n                setTradeLiscense(licenseData?.path);\r\n                setTradeLicenseWithExpiry(handelDate(licenseData?.expiry_date))\r\n                setValue('LiscenseExp', handelDate(licenseData?.expiry_date))\r\n            }\r\n            if (emiratesIds) {\r\n                setEmirateIds(emiratesIds?.path);\r\n                setEmirateIdsWithExpiry(handelDate(emiratesIds?.expiry_date))\r\n                setValue('emirateIDsExpiry', handelDate(emiratesIds?.expiry_date))\r\n            }\r\n            if (agreementData) {\r\n                setAgreement(agreementData?.path);\r\n                setAgreementWithExpiry(handelDate(agreementData?.expiry_date))\r\n                setValue('agreementExpiry', handelDate(agreementData?.expiry_date))\r\n            }\r\n            if (otherDocData) {\r\n                setOtherDoc(otherDocData?.path);\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const UpdateAgentData = async (formData) => {\r\n        setSubmit(false)\r\n        setLoading(true)\r\n        console.log(formData);\r\n        let data = documents.find(item => item.key == 'passport')\r\n        console.log(data,'asdasad');\r\n\r\n  \r\n\r\n        const checkExpiryDates = (documents) => {\r\n            let hasExpired = false; // Initialize flag as false\r\n\r\n            for (let i = 0; i < documents.length; i++) {\r\n                const doc = documents[i];\r\n\r\n                if (\r\n                    doc.expiry_date && // If the document has an expiry date\r\n                    doc.key !== \"passport\" && // Exclude Passport\r\n                    doc.key !== \"otherdoc\" // Exclude Other doc\r\n                ) {\r\n                    const expiryDate = moment(doc.expiry_date).startOf('day'); // Set expiryDate to start of the day\r\n                    const currentDate = moment().startOf('day'); // Set currentDate to start of the day\r\n                    \r\n                    console.log(expiryDate.format('YYYY-MM-DD')); // Format for clear output\r\n                    console.log(currentDate.format('YYYY-MM-DD'));\r\n                    \r\n                    if (expiryDate.isBefore(currentDate)) {\r\n                        showErrorToast(`${doc.name} Date is not Valid.`);\r\n                        hasExpired = true; // Set flag to true if any document is expired\r\n                        break;\r\n                    }\r\n                }   \r\n            }\r\n\r\n            return hasExpired; // Return true if any document is expired, otherwise false\r\n        };\r\n\r\n        const result = checkExpiryDates(documents);\r\n\r\n        if (moment(data?.expiry_date).startOf('day') < moment().add(6, 'months').startOf('day') && !result) {\r\n\r\n            showErrorToast('Passport Expiry Date Must Be greater than ' + moment().add(6, 'months').startOf('day').format('MM-DD-YYYY'));\r\n        \r\n        }\r\n        \r\n        else if (result){\r\n\r\n        }\r\n        else{\r\n\r\n            try {\r\n                let obj = {\r\n                    id: Number(id),\r\n                    user_id: agentDetails?.user_id,\r\n                    name: formData?.agentName,\r\n                    email: formData?.email,\r\n                    commission_visa: formData?.commissionVisa,\r\n                    commission_monthly: formData?.commissionMonthly,\r\n                    documents: documents\r\n    \r\n                }\r\n                console.log(obj);\r\n                const promise = CommissionServices.UpdateAgent(obj);\r\n    \r\n                showPromiseToast(\r\n                    promise,\r\n                    'Saving ...',\r\n                    'Success',\r\n                    'Something Went Wrong'\r\n                );\r\n    \r\n                const result = await promise\r\n    \r\n                if (result.responseCode == 200) {\r\n                    navigate('/commission-list')\r\n                }\r\n    \r\n    \r\n            } catch (error) {\r\n    \r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (id) {\r\n\r\n            getData()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{ p: 3 }} component={'form'} onSubmit={handleSubmit(UpdateAgentData)}>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                    <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Update</Typography>\r\n                    <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Save\"\r\n                            disabled={!emailVerify ? true : false}\r\n                            type={'submit'}\r\n\r\n\r\n                        />\r\n\r\n                    </Box>\r\n                </Box>\r\n\r\n\r\n                <Grid container sx={{ gap: '5px 25px' }}>\r\n                    <Grid item xs={5}><InputField\r\n                        label={\"Agent Name :*\"}\r\n                        size={'small'}\r\n                        placeholder={\"Agent Name\"}\r\n                        error={errors?.agentName?.message}\r\n                        register={register(\"agentName\", {\r\n                            required:\r\n                                \"Please enter your agent name.\"\r\n\r\n                        })}\r\n                    /></Grid>\r\n                    <Grid item xs={5}>\r\n                        <InputField\r\n                            label={\"Email :*\"}\r\n                            size={\"small\"}\r\n                            placeholder={\"Email\"}\r\n                     \r\n                            error={errors?.email?.message}\r\n                            register={register(\"email\", {\r\n                                required: \"Please enter your email.\",\r\n                                onChange: (e) => {\r\n                                    console.log('asdas');\r\n\r\n                                    Debounce2(() => verifyEmail());\r\n                                    // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                },\r\n                                pattern: {\r\n                                    value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                    message: \"Please enter a valid email address.\"\r\n                                },\r\n\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n                    <Grid container sx={{ gap: '5px 25px' }}>\r\n                        <Grid item xs={5} >\r\n                            <LabelCustomInput label={'Commission on Visa :* '} max={100}  step={'0.01'} StartLabel={'%'} placeholder={'Enter Percentage'} error={errors?.commissionVisa?.message} register={register(\"commissionVisa\", { required: \"Enter commission on Visa\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={5} >\r\n                            <LabelCustomInput label={'Commission on Monthly Revenue :* '} max={100}  step={'0.01'} StartLabel={'%'} placeholder={'Enter Percentage'} error={errors?.commissionMonthly?.message} register={register(\"commissionMonthly\", { required: \"Enter Monthly Commission\" })} />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n                <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 2 }}>Upload Documents: </Typography>\r\n\r\n                <Grid container sx={{ gap: '5px 25px' }}>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Trade License:* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n              \r\n                            updateResult={updateResult}\r\n                            fileId={'tradeLicense'}\r\n                            error={errors?.tradeLicense?.message}\r\n                         loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`tradeLicense`, {\r\n                                required: documents.find((item => item?.key == 'tradeLicense'))?.path != '' ? false :\r\n                                \"Please upload your trade license.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e,\"tradeLicense\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path,'tradeLicense');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                        {/* <UploadFile\r\n                  Memo={true}\r\n                  accept={allowFilesType}\r\n                  file={documents}\r\n                  multiple={true}\r\n                  updateResult={updateResult}\r\n                  fileId={'tradeLicense'}\r\n                  error={errors?.tradeLicense?.message}\r\n                  register={register(\"tradeLicense\", {\r\n                    required:\r\n                      documents.find((item => item?.key == 'tradeLicense'))?.path != '' ? false :\r\n                        \"Please upload your trade license .\"\r\n                    ,\r\n                    onChange: async (e) => {\r\n                      const path = await handleUploadDocument(e);\r\n                      if (path) {\r\n                        setTradeLiscense(path);\r\n                        handleDocArrayUpdate('path', path, 'tradeLicense')\r\n                      }\r\n                    }\r\n                  })}\r\n                /> */}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Passport :* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'passport'}\r\n                            error={errors?.passport?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`passport`, {\r\n                                required: documents.find((item => item?.key == 'passport'))?.path != '' ? false :\r\n                                \"Please upload your passport.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e,\"passport\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path,'passport');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Trade License  Expiry Date :*\"}\r\n                        value={tradeLicenseWithExpiry}\r\n                        error={errors?.LiscenseExp?.message}\r\n                        register={register(\"LiscenseExp\", {\r\n                            required:\r\n\r\n                                \"please enter your License expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('LiscenseExp', date)\r\n                            setTradeLicenseWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'tradeLicense')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Passport Expiry Date :*\"}\r\n                        value={passportWithExpiry}\r\n                        minDate={addMonths(new Date(), 6)}\r\n                        error={errors?.passportExp?.message}\r\n                        register={register(\"passportExp\", {\r\n                            required:\r\n\r\n                                \"please enter your passport expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('passportExp', date)\r\n                            setPassportWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'passport')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Emirate ID's:* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'emirateIds'}\r\n                            error={errors?.emirateIds?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`emirateIds`, {\r\n                                required: documents.find((item => item?.key == 'emirateIds'))?.path != '' ? false :\r\n                                \"Please upload your trade emirateIds.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e,\"emirateIds\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path,'emirateIds');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Agreement :* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            error={errors?.Agreement?.message}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'Agreement'}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`Agreement`, {\r\n                                required: documents.find((item => item?.key == 'Agreement'))?.path != '' ? false :\r\n                                \"Please upload your trade Agreement.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e,\"Agreement\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path,'Agreement');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Emirate ID's  Expiry Date :*\"}\r\n                        value={emirateIdsWithExpiry}\r\n                        error={errors?.emirateIDsExpiry?.message}\r\n                        register={register(\"emirateIDsExpiry\", {\r\n                            required:\r\n\r\n                                \"please enter your passport expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('emirateIDsExpiry', date)\r\n                            setEmirateIdsWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'emirateIds')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Agreement Expiry Date :*\"}\r\n                        value={agreementWithExpiry}\r\n                        error={errors?.agreementExpiry?.message}\r\n                        register={register(\"agreementExpiry\", {\r\n                            required:\r\n\r\n                                \"please enter your agreement expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('agreementExpiry', date)\r\n                            setAgreementWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'Agreement')\r\n                        }}\r\n                    /></Grid>\r\n\r\n\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Other Documents : </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'otherdoc'}\r\n                            error={errors?.otherdoc?.message}\r\n                           loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`otherdoc`, {\r\n                                required:  false ,\r\n                               \r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e,\"otherdoc\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path,'otherdoc');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateAgent\r\n"
        }
    ]
}