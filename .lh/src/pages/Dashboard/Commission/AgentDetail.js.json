{
    "sourceFile": "src/pages/Dashboard/Commission/AgentDetail.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821941,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n  styled,\r\n} from '@mui/material';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { FontFamily, Images } from \"assets\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport InputField from \"components/Input\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport SelectField from \"components/Select\";\r\nimport SystemServices from \"services/System\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport InputPhone from \"components/InputPhone\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport UploadedFile from \"components/UploadedFile\";\r\nimport ConfirmationDialog from \"components/Dialog/ConfirmationDialog\";\r\nimport AuthServices from \"services/Auth\";\r\nimport UserServices from \"services/User\";\r\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\r\nimport { showErrorToast } from \"components/NewToaster\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport { formatPermissionData, handleDownload } from \"utils\";\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport ExportServices from \"services/Export\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\n\r\nfunction AgentDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch()\r\n  const { register, setValue, getValues, control, handleSubmit } = useForm();\r\n  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Action', key: 'action' }]\r\n  // *For Dialog Box\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false);\r\n  const [confirmationDialog2, setConfirmationDialog2] = useState(false);\r\n\r\n  // *For Customer Detail\r\n  const [agentDetail, setAgentDetail] = useState();\r\n  const [permissions, setPermissions] = useState()\r\n  const [docs, setDocs] = useState([])\r\n  const [customerQueue, setCustomerQueue] = useState([])\r\n\r\n  // *For Get Customer Detail\r\n  const getAgentDetail = async () => {\r\n    try {\r\n      let params = { agent_id: id };\r\n      const { data } = await CommissionServices.getAgentDetail(params);\r\n      console.log(data);\r\n      setAgentDetail(data?.details);\r\n      const processedDocuments = data?.details?.documents?.map((doc) => ({\r\n        ...doc,\r\n        paths: doc.path ? doc.path.split(\",\") : [], // Split the path by commas\r\n      })) || [];\r\n      console.log(processedDocuments);\r\n\r\n      setDocs(processedDocuments);\r\n\r\n\r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      console.log(formatPermissionData(data?.permissions));\r\n      console.log(data?.details?.customers);\r\n      \r\n      setCustomerQueue(data?.details?.customers)\r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      data?.permissions.forEach(e => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      })\r\n\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n\r\n  const downloadAll = async () => {\r\n    try {\r\n\r\n      // const data = await ExportServices.getAllDoc(\r\n      //   agentDetail?.documents[0]?.reference,\r\n      //   agentDetail?.documents[0]?.reference_id\r\n      // );\r\n         window.open(process.env.REACT_APP_BASE_URL +`/system/downloadZip?reference=${agentDetail?.documents[0]?.reference}&reference_id=${agentDetail?.documents[0]?.reference_id}`  , '_blank');\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error fetching the document:\", error);\r\n    }\r\n  };\r\n\r\n\r\n  // *For Reset User Password\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getAgentDetail();\r\n    }\r\n  }, [id]);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n        <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >AGENT DETAIL</Typography>\r\n        <Box sx={{ display: 'flex', gap: '10px' }}>\r\n          {permissions?.edit_details && <PrimaryButton\r\n           bgcolor={'#bd9b4a'}\r\n            title=\"Edit\"\r\n            onClick={() => navigate(`/update-agent/${id}`)}\r\n\r\n\r\n          />}\r\n\r\n        </Box>\r\n      </Box>\r\n      <Grid container sx={{ mt: 5, border: '1px solid #B6B6B6', borderRadius: \"8px\", p: '15px', justifyContent: 'space-between' }} >\r\n        <Grid item xs={6} mt={2}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Agent Name:</Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{agentDetail?.name}</Typography>\r\n            </Grid>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={6} mt={2}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n              <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Agent Email:</Typography>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{agentDetail?.userDetail?.email}</Typography>\r\n            </Grid>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={6} mt={2}   >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={5}>\r\n              <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Commission on Visa:</Typography>\r\n            </Grid>\r\n            <Grid item xs={7}>\r\n              <Typography sx={{ fontSize: '14px', color: '#0F2772' }} variant=\"body1\">{agentDetail?.commission_visa} %</Typography>\r\n            </Grid>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={6} mt={2}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={4}>\r\n              <Typography sx={{ fontSize: '14px' }} variant=\"body1\">Monthly Commission :</Typography>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <Typography sx={{ fontSize: '14px', color: '#0F2772' ,textAlign:'left'}} variant=\"body1\">{agentDetail?.commission_monthly} %</Typography>\r\n            </Grid>\r\n\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Box p={2}>\r\n\r\n        <Grid container spacing={4} p={3}>\r\n\r\n\r\n\r\n\r\n        <Box sx={{display:'flex' ,justifyContent:\"space-between\",alignItems:\"center\",width:\"100%\"}}>\r\n                 <Typography mb={2} mt={2} sx={{ color: '#03091A', fontWeight: 'bold' }} variant=\"h6\">Documents :</Typography>\r\n                 <Box sx={{background:Colors.DarkBlue,color:Colors.white,padding:\"8px 20px\",borderRadius:\"10px\",cursor:\"pointer\"}} onClick={downloadAll} > Download All</Box>\r\n                    </Box>\r\n          <Grid container spacing={2} mt={2}>\r\n            {docs\r\n              ?.sort((a, b) => (a.path ? 0 : 1) - (b.path ? 0 : 1)) // Sort documents with empty path last\r\n              .map((doc, index) => (\r\n                <>\r\n\r\n                  <Grid\r\n                    item\r\n                    md={6}\r\n                    lg={6}\r\n                        sx={{ cursor: 'pointer',paddingTop:\"35px !important\" }}\r\n    \r\n                    component={'div'}\r\n\r\n                  // Use index2 instead of index to avoid duplicate keys\r\n                  >\r\n                    {/* Conditionally render name only for the first doc */}\r\n                    {(\r\n                      <>\r\n                      <Box sx={{ fontSize: '15px', fontWeight: 'bold' }}>{doc?.name}</Box>\r\n                      {doc.paths.length > 0 && doc?.expiry_date != null &&(\r\n               \r\n               <Box sx={{mt:1,fontSize:\"13px\",color:Colors.gray}}><span style={{fontWeight:\"bold\"}}>Expiry Date : </span><span>{moment(doc?.expiry_date).format(\"YYYY-MM-DD\")}</span></Box>\r\n             )}\r\n                      </>\r\n                    )}\r\n                    <Box sx={{ display: 'flex', gap: '10px', mt: '15px', flexWrap: 'wrap' }} >\r\n                      {doc?.paths.length > 0 ? doc?.paths.map((item, index2) => {\r\n                        return (\r\n                          <>\r\n                            <Box component={'div'} sx={{ width: '30%' }} onClick={() => {\r\n                              \r\n                              if(item.split('_').pop().includes('doc') || item.split('_').pop().includes('xls') ){\r\n\r\n                                handleDownload(item, item.split('_').pop());\r\n                              }\r\n                              else{\r\n                                \r\n                                window.open(process.env.REACT_APP_IMAGE_BASE_URL+item, '_blank');\r\n                              }\r\n                            }}>\r\n                              <Box key={index2}>\r\n                                {item ? (\r\n                                  <Box component={'img'} src={Images.docIcon} width={'35px'} />\r\n                                ) : (\r\n                                  <DoDisturbIcon sx={{ fontSize: '35px', color: 'gray' }} />\r\n                                )}\r\n                              </Box>\r\n                              <Link rel=\"noopener noreferrer\">\r\n                                {item.split('_').pop()}\r\n                              </Link>\r\n                            </Box>\r\n                          </>\r\n                        );\r\n                      }) :\r\n                        <DoDisturbIcon sx={{ fontSize: '35px', color: 'gray' }} />}\r\n\r\n                    </Box>\r\n\r\n                  </Grid>\r\n                </>\r\n              ))}\r\n\r\n\r\n          </Grid>\r\n          {(\r\n              customerQueue?.length > 0 && (\r\n                <Fragment>\r\n                 \r\n\r\n                    <TableContainer\r\n                      component={Paper}\r\n                      sx={{\r\n                        maxHeight: 'calc(100vh - 330px)', mt: 5, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                      }}\r\n\r\n                    >\r\n                      <Table stickyHeader sx={{ minWidth: 500, position: 'relative' }}>\r\n                        <TableHead>\r\n\r\n                          <Row>\r\n                            {tableHead?.map((cell, index) => (\r\n                              <Cell style={{ textAlign: cell?.name == 'SR No.' ? 'center' : 'left', paddingRight: cell?.name == 'SR No.' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                key={index}\r\n\r\n                              >\r\n                                <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                                  {cell?.name}\r\n                                </Box>\r\n                              </Cell>\r\n                            ))}\r\n                          </Row>\r\n                        </TableHead>\r\n                        { <TableBody>\r\n                          {customerQueue?.length > 0 &&  [...customerQueue]?.sort((a, b) => a?.id - b?.id) ?.map((item, index) => {\r\n\r\n                            return (\r\n                              <Row\r\n                                key={index}\r\n                                sx={{\r\n                                  border: '1px solid #EEEEEE !important',\r\n                                }}\r\n                              >\r\n\r\n                                <Cell style={{ textAlign: 'center' }} className=\"pdf-table\">\r\n                                  {item?.id}\r\n                                </Cell>\r\n                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                  {item?.name}\r\n                                </Cell>\r\n                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                  {moment(item?.created_at).format('MM-DD-YYYY')}\r\n                                </Cell>\r\n                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                  {parseFloat(item?.deposit_total).toFixed(2)}\r\n                                </Cell>\r\n                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                  <Box>\r\n                                  <Box component={'img'} sx={{cursor:\"pointer\"}} onClick={()=> {navigate(`/customer-detail/${item?.id}`);   localStorage.setItem(\"currentUrl\", '/customer-detail');}} src={Images.detailIcon} width={'35px'}></Box>\r\n                              \r\n                                  </Box>\r\n                                </Cell>\r\n\r\n\r\n\r\n                              </Row>\r\n\r\n                            );\r\n                          })}\r\n\r\n                        </TableBody>}\r\n                      </Table>\r\n                    </TableContainer>\r\n              \r\n\r\n\r\n                </Fragment>\r\n              )\r\n            )}\r\n\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AgentDetail;\r\n"
        }
    ]
}