{
    "sourceFile": "src/pages/Dashboard/InvoicesPayments/Invoices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821643,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { CleanTypes, Debounce, encryptData, formatPermissionData, getFileSize, handleDownload, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\nimport VisaServices from 'services/Visa';\r\nimport DatePicker from 'components/DatePicker';\r\nimport SystemServices from 'services/System';\r\nimport excelFile from 'assets/excel/request_format.csv'\r\nimport UploadFile from 'components/UploadFile';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport toast from 'react-hot-toast';\r\nimport { useAuth } from 'context/UseContext';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport InvoiceServices from 'services/Invoicing';\r\n\r\n\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction Invoices() {\r\n    const allowFilesType = [\r\n\r\n        'text/csv',\r\n\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const { user, userLogout } = useAuth();\r\n    console.log(user);\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        formState: { errors: errors3 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        formState: { errors: errors4 },\r\n\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [paymentDialog, setPaymentDialog] = useState(false)\r\n\r\n    const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Date', key: 'created_at' }, { name: 'Customer', key: 'created_at' }, { name: 'Total Amount', key: 'commission_monthly' }, { name: 'Tax', key: 'customerCount' }, { name: 'Payment', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n    const [invoices, setInvoices] = useState([])\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([{ id: 1, name: 'asdasd' }, { id: 1, name: 'asdasd' }]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null)\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n    const [status, setStatus] = useState()\r\n    const [date, setDate] = useState(null)\r\n    const [paymentType, setPaymentType] = useState(null)\r\n    const [banks, setBanks] = useState([])\r\n    const [excelDialog, setExcelDialog] = useState(false)\r\n    const [selectedBank, setSelectedBank] = useState(null)\r\n    const [excel, setExcel] = useState()\r\n    const [proofAdmin, setProofAdmin] = useState(false)\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [file, setFile] = useState()\r\n    const [filename, setFilename] = useState()\r\n    const [fileDetail, setFileDetail] = useState()\r\n    const [extension, setExtension] = useState()\r\n    const [proofDialog, setProofDialog] = useState(false)\r\n    const [proofDoc, setProofDoc] = useState()\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const getBanks = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n\r\n\r\n\r\n\r\n            const { data } = await SystemServices.getBanks()\r\n\r\n            setBanks(data?.banks)\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n\r\n                setFile(file)\r\n                setFileDetail(arr)\r\n                // handleUpload(file, arr);\r\n                // const path = await handleUpload(file, arr);\r\n                // console.log('Uploaded file path:', path);\r\n                // console.log(path, 'pathpathpath');\r\n                // return path\r\n            } else {\r\n                showErrorToast(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n    // *For Upload Document\r\n    const handleUploadDocument2 = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files.length, \"length\")\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n                let maxSize = 10 * 1024 * 1024\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB')\r\n                }\r\n                else {\r\n\r\n                    const uploadedPath = await handleUpload2(file, arr);\r\n                    if (path) {\r\n                        path += \",\" + uploadedPath\r\n                    }\r\n                    else {\r\n                        path = uploadedPath\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n            console.log(path, \"path\")\r\n            return path;\r\n            // if (allowFilesType.includes(file.type)) {\r\n\r\n\r\n            //   return path\r\n            // } else {\r\n            //   ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            // }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        setProgress(0);\r\n        let docs = fileDetail\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            console.log(file);\r\n            let maxSize = 10 * 1024 * 1024\r\n            if (file.size > maxSize) {\r\n                showErrorToast('File Size Must Be Less than 10 MB')\r\n            }\r\n            else {\r\n\r\n                const { data } = await instance.post(routes.uploadCVS, formData, {\r\n                    onUploadProgress: (progressEvent) => {\r\n                        const uploadedBytes = progressEvent.loaded;\r\n                        const percentCompleted = Math.round(\r\n                            (uploadedBytes * 100) / progressEvent.total\r\n                        );\r\n\r\n                        setProgress(percentCompleted);\r\n                        console.log(getFileSize(uploadedBytes));\r\n                        setUploadedSize(getFileSize(uploadedBytes));\r\n                        toast.success(' Successfully Updated!')\r\n\r\n                        setExcelDialog(false)\r\n                    },\r\n                });\r\n                if (data) {\r\n                    docs[0].isUpload = true;\r\n                    docs[0].file = data?.data?.nations;\r\n\r\n                    console.log(data, 'asddasasd');\r\n                    return data?.data?.path\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n    const handleUpload2 = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getInvoices = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : null,\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await InvoiceServices.getInvoices(params)\r\n            setInvoices(data?.rows)\r\n            setTotalCount(data?.count)\r\n            console.log(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                status: status.id,\r\n                visa_id: selectedVisa?.id\r\n            };\r\n\r\n            const promise = VisaServices.updateStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getInvoices();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const UpdatePaymentStatus = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                payment_date: date,\r\n                payment_type: paymentType?.name,\r\n                invoice_id: selectedVisa?.id,\r\n                customer_id: selectedVisa?.customer_id,\r\n                amount: formData?.amount,\r\n                bank_id: selectedBank?.id,\r\n                reference: 'invoice',\r\n                description: formData?.description,\r\n\r\n\r\n            };\r\n\r\n            const promise = InvoiceServices.updatePaymentStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                getInvoices();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const UpdateProof = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                proof_date: date,\r\n                id: selectedVisa?.id,\r\n                proof_document: proofDoc,\r\n                proof_amount: formData?.amount,\r\n\r\n\r\n\r\n            };\r\n\r\n            const promise = VisaServices.UpdateProof(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setProofDialog(false);\r\n                getInvoices();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const UpdateCSV = async () => {\r\n        handleUpload()\r\n    }\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getInvoices(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getInvoices(1, '', data));\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        fetch(excelFile)\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n                console.log(blob);\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', 'filename.csv'); // Adjust the filename as needed\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n            .catch(error => console.error('Error downloading Excel file:', error));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getInvoices()\r\n        getBanks()\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <SimpleDialog\r\n                open={proofDialog}\r\n                onClose={() => setProofDialog(false)}\r\n                title={'Proof Of Payment'}\r\n            >\r\n                {!proofAdmin ? <Box component=\"form\" onSubmit={handleSubmit4(UpdateProof)}>\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload Proof :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType2}\r\n                                error={errors4?.proof?.message}\r\n                                file={proofDoc}\r\n                                register={register4(\"proof\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  proof   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        const path = await handleUploadDocument2(e);\r\n                                        if (path) {\r\n                                            setProofDoc(path);\r\n                                        }\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {filename &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <LabelCustomInput label={'Amount : '} StartLabel={'AED'} register={register4(\"amount\", { required: \"Enter  amount\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Payment Date :\"}\r\n                                value={date}\r\n\r\n                                size={'small'}\r\n                                error={errors4?.date?.message}\r\n                                register={register4(\"date\", {\r\n                                    required:\r\n\r\n                                        \"Please enter  date.\"\r\n\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date)\r\n                                    setValue4('date', date)\r\n\r\n\r\n                                }\r\n\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setProofDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box> :\r\n                    <Box >\r\n                        <Grid container spacing={2}>\r\n\r\n\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload Proof :* </Typography>\r\n\r\n                            <Grid\r\n                                item\r\n                                md={6}\r\n                                lg={4}\r\n                                sx={{ cursor: 'pointer', display: 'flex', gap: '5px' }}\r\n                                component={'div'}\r\n\r\n                                onClick={() => handleDownload(selectedVisa?.proof_document, selectedVisa?.proof_document?.split('_').pop())}\r\n\r\n                            >\r\n\r\n                                {selectedVisa?.proof_document && <Box>\r\n                                    <Box component={'img'} src={Images.docIcon} width={'35px'} />\r\n                                </Box>}\r\n                                <p style={{ textAlign: 'center', lineHeight: '20px', color: '#0F2772', fontWeight: 'bold', fontSize: '15px' }}>\r\n                                    {selectedVisa?.proof_document?.split('_').pop()}\r\n                                </p>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <LabelCustomInput value={selectedVisa?.proof_amount} label={'Amount : '} StartLabel={'AED'} disabled={true} register={register4(\"amount\", { required: \"Enter  amount\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <InputField\r\n                                    label={\"Date :\"}\r\n                                    size={'small'}\r\n                                    disabled={true}\r\n                                    value={moment(selectedVisa?.proof_date).format('MM-DD-YYYY')}\r\n                                    rows={5}\r\n                                    placeholder={\"Description\"}\r\n                                    error={errors2?.description?.message}\r\n                                    register={register2(\"description\", {\r\n                                        required:\r\n                                            false\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n\r\n                        </Grid>\r\n                    </Box>}\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={excelDialog}\r\n                onClose={() => setExcelDialog(false)}\r\n                title={'Upload Excel'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit3(UpdateCSV)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12} display={'flex'} justifyContent={'center'}>\r\n                            <PrimaryButton\r\n                                bgcolor={'#0076bf'}\r\n                                title=\"Download Template\"\r\n                                onClick={() => downloadExcel()}\r\n                                loading={loading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload CSV :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors3?.excel?.message}\r\n                                file={excel}\r\n                                register={register3(\"excel\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  excel   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        handleUploadDocument(e);\r\n\r\n                                        const file = e.target.files[0];\r\n                                        console.log(file);\r\n                                        setFilename(file?.name)\r\n\r\n\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {filename &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setExcelDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={'Change Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Status :'}\r\n\r\n                                options={[{ id: 'Pending', name: 'Pending' }, { id: 'Approved', name: 'Approved' }, { id: \"Rejected\", name: 'Rejected' }]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setStatusDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={'Change Payment Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdatePaymentStatus)}>\r\n                    <Grid container >\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Payment Date :\"}\r\n                                value={date}\r\n\r\n                                size={'small'}\r\n                                error={errors2?.date?.message}\r\n                                register={register2(\"date\", {\r\n                                    required:\r\n\r\n                                        \"Please enter  date.\"\r\n\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date)\r\n                                    setValue2('date', date)\r\n\r\n\r\n                                }\r\n\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Payment Type :'}\r\n\r\n                                options={[{ id: 'cash', name: 'Cash' }, { id: 'bank', name: 'Bank' }, { id: 'cheque', name: 'Cheque' }]}\r\n                                selected={paymentType}\r\n                                onSelect={(value) => {\r\n                                    setPaymentType(value)\r\n\r\n\r\n                                }}\r\n                                error={errors2?.status?.message}\r\n                                register={register2(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        {/* <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Bank :'}\r\n\r\n                                options={banks}\r\n                                selected={selectedBank}\r\n                                onSelect={(value) => {\r\n                                    setSelectedBank(value)\r\n\r\n\r\n                                }}\r\n                                error={errors2?.banks?.message}\r\n                                register={register2(\"bank\", {\r\n                                    required: 'Please select bank.',\r\n                                })}\r\n                            />\r\n                        </Grid> */}\r\n                        <Grid item xs={12} sm={12}>\r\n                            <LabelCustomInput disabled={true} label={'Amount : '} StartLabel={'AED'} register={register2(\"amount\", { required: \"Enter year inside rate\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} mt={2}>\r\n                            <InputField\r\n                                label={\"Description :\"}\r\n                                size={'small'}\r\n                                rows={5}\r\n                                multiline={true}\r\n                                placeholder={\"Description\"}\r\n                                error={errors2?.description?.message}\r\n                                register={register2(\"description\", {\r\n                                    required:\r\n                                        false\r\n\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setPaymentDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Invoices</Typography>\r\n\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'} register={register(\"search\")} />\r\n                    </Grid>\r\n                    {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n                    <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            textcolor={Colors.white}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => {  setValue('search', '');handleFilter() }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {invoices && <Box>\r\n\r\n                        <Grid container mb={2} >\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                        {(\r\n                            invoices && (\r\n                                <Fragment>\r\n                                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: 'calc(100vh - 200px)', mt: 5, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                            }}\r\n\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell style={{ textAlign: cell?.name == 'SR No.' ? 'center' : 'left', paddingRight: cell?.name == 'SR No.' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                                                key={index}\r\n\r\n                                                            >\r\n                                                                <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                                                                    {cell?.name} {cell?.name == 'Date' && <>&nbsp;<span style={{ height: '20px', cursor: 'pointer' }}><Box component={'img'} onClick={() => { setSort(sort == 'asc' ? 'desc' : 'asc'); handleSort(cell?.key) }} src={Images.sortIcon} width={'18px'}></Box></span></>}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {invoices?.map((item, index) => {\r\n\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: '1px solid #EEEEEE !important',\r\n                                                                }}\r\n                                                            >\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.id}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.customer_name}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.total_amount}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {parseFloat(item?.tax).toFixed(2)}\r\n                                                                </Cell>\r\n\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                        if (permissions?.payment && item?.payment_status?.toLowerCase() == 'unpaid') {\r\n                                                                            setValue2('amount', parseFloat(parseFloat(item?.total_amount) + parseFloat(item?.tax)).toFixed(2))\r\n                                                                            setPaymentDialog(true); setSelectedVisa(item)\r\n                                                                        }\r\n\r\n                                                                    }}>\r\n                                                                        <Box component={'img'} src={item?.payment_status == 'paid' ? Images.successIcon : Images.errorIcon} width={'13px'}></Box>\r\n                                                                        {item?.payment_status == 'paid' ? 'Paid' : 'Unpaid'}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box>\r\n                                                                        {/* {<IconButton onClick={() => {\r\n                                                                            if (user?.user_type == 'C') {\r\n\r\n                                                                                setProofDialog(true); setSelectedVisa(item)\r\n                                                                                setProofAdmin(false)\r\n                                                                            }\r\n                                                                            else {\r\n                                                                                setProofDialog(true)\r\n                                                                                setSelectedVisa(item)\r\n                                                                                setProofAdmin(true)\r\n                                                                            }\r\n\r\n                                                                        }}><ReceiptIcon sx={{ color: item?.proof_document ? '#56ba28' : '' }} width={'35px'} /></IconButton>}\r\n                                                                        <Box component={'img'} src={Images.detailIcon} onClick={() => navigate(`/visa-detail/${item?.id}`)} width={'35px'}></Box> */}\r\n                                                                        {permissions?.view_invoice && <Box component={'img'} onClick={() => {\r\n                                                                            if (item?.reference == \"visa_request\") {\r\n                                                                                navigate(`/view-invoice/${item?.reference_id}`)\r\n                                                                            }\r\n                                                                        }} sx={{ cursor: \"pointer\" }} src={Images.invoiceIcon} width={'35px'}></Box>}\r\n\r\n                                                                        {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n\r\n\r\n\r\n                                                            </Row>\r\n\r\n                                                        );\r\n                                                    })}\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getInvoices(1, size.target.value)}\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getInvoices(page, \"\")}\r\n                                    />\r\n\r\n                                </Fragment>\r\n                            )\r\n                        )}\r\n\r\n\r\n                        {loader && <CircleLoading />}\r\n\r\n\r\n                    </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Invoices;"
        }
    ]
}