{
    "sourceFile": "src/pages/Dashboard/InvoicesPayments/CreateMonthlyInvoice.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821627,
            "name": "Commit-0",
            "content": "\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n    Button,\r\n    styled,\r\n    PaginationItem,\r\n    Pagination,\r\n} from '@mui/material';\r\nimport { PDFExport } from '@progress/kendo-react-pdf'\r\nimport { FontFamily, Images } from 'assets'\r\nimport Colors from 'assets/Style/Colors'\r\nimport { PrimaryButton } from 'components/Buttons'\r\nimport InputField from 'components/Input';\r\nimport { CircleLoading } from 'components/Loaders'\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster'\r\n\r\nimport SelectField from 'components/Select'\r\nimport { useAuth } from 'context/UseContext'\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport moment from 'moment';\r\n\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CustomerServices from 'services/Customer'\r\nimport InvoiceServices from 'services/Invoicing'\r\nimport SystemServices from 'services/System';\r\nimport { Debounce } from 'utils';\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst CreateMonthlyInvoice = () => {\r\n    const navigate = useNavigate()\r\n    // const [handleBlockedNavigation] =\r\n    //     useCallbackPrompt(true)\r\n    const { register, handleSubmit, getValues, setValue, control, formState: { errors }, reset } = useForm();\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n    const { user, userLogout } = useAuth();\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(2);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [candidates, setCandidates] = useState([])\r\n    const [sort, setSort] = useState('asc')\r\n    const [charges, setCharges] = useState(0)\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const tableHead = [{ name: 'Select', key: 'created_at' }, { name: 'Candidate Name', key: 'name' }, { name: 'Customer', key: 'commission_visa' }, { name: 'Total Service Charges', key: 'commission_monthly' }, { name: 'Applicable Service Charges', key: 'commission_monthly' }, { name: 'Overstay Charges', key: 'commission_monthly' }]\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n    const [selectAll, setSelectAll] = useState(false)\r\n    const [deselectedArray, setDeselectedArray] = useState([])\r\n    const [totalData, setTotalData] = useState([])\r\n    const [originalArray, setOriginalArray] = useState([])\r\n    const [searchVal, setSearchVal] = useState('')\r\n\r\n    const [items, setItems] = useState([]); // Your array of items\r\n    const [page, setPage] = useState(1);\r\n    const itemsPerPage = 50; // Change this to the number of items you want per page\r\n\r\n    const pageCount = Math.ceil(candidates?.length / itemsPerPage);\r\n\r\n    const handleChangePage = (event, value) => {\r\n\r\n        setPage(value);\r\n        PaginationFunc(null, value)\r\n    };\r\n\r\n    let startIndex\r\n    let endIndex\r\n    let displayedItems\r\n\r\n    const PaginationFunc = (data, pg = 1) => {\r\n        if (!data) {\r\n            data = totalData\r\n        }\r\n        startIndex = (pg - 1) * itemsPerPage;\r\n        endIndex = startIndex + itemsPerPage;\r\n        console.log(startIndex, 'displayedItems');\r\n        console.log(endIndex, 'displayedItems');\r\n        console.log(data, 'displayedItems');\r\n\r\n        displayedItems = data?.slice(startIndex, endIndex);\r\n        console.log(displayedItems,'displayedItems2');\r\n        \r\n        setCandidates(displayedItems)\r\n        setOriginalArray(displayedItems)\r\n        if (selectAll) {\r\n            console.log(deselectedArray, 'deselectedArray');\r\n\r\n            const filteredItems = totalData.filter(\r\n                (item) => !deselectedArray.some((deselected) => deselected.id === item.id)\r\n            );\r\n            setSelectedRows(filteredItems.filter(item => item.applicableVisaCharges > 0));\r\n\r\n        }\r\n        if(searchVal){\r\n\r\n            handleSearchChange(displayedItems,searchVal)\r\n        }\r\n        console.log(displayedItems, 'displayedItems3');\r\n    }\r\n\r\n    const handleCheckboxChange = (item, isChecked) => {\r\n        if (isChecked) {\r\n\r\n            setSelectedRows([...selectedRows, item]);\r\n            setDeselectedArray(deselectedArray.filter(item2 => item2?.id != item?.id))\r\n        } else {\r\n            // Remove the item from the selectedRows state\r\n            setSelectedRows(selectedRows.filter(row => row?.id !== item?.id));\r\n            let deselectedElement = candidates.find(item2 => item2?.id == item?.id)\r\n            console.log(deselectedElement);\r\n\r\n            console.log([...deselectedArray, deselectedElement], 'deselectedArray');\r\n\r\n            setDeselectedArray([...deselectedArray, deselectedElement])\r\n        }\r\n    };\r\n    const handleCheckboxChange2 = (isChecked) => {\r\n        console.log(isChecked, 'isChecked');\r\n\r\n        setSelectAll(isChecked)\r\n        if (isChecked) {\r\n            console.log(candidates.filter(item => item.applicableVisaCharges > 0));\r\n\r\n            setSelectedRows(candidates.filter(item => item.applicableVisaCharges > 0));\r\n\r\n        } else {\r\n            setSelectedRows([]);\r\n        }\r\n    };\r\n\r\n    const getData = async (formData) => {\r\n\r\n        console.log(formData);\r\n        try {\r\n            let params = {\r\n                charges_type: 'rate'\r\n\r\n            }\r\n\r\n            const { data } = await SystemServices.getRates(params);\r\n\r\n            let details = data?.charges\r\n            setCharges(details)\r\n\r\n\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n    const CreateMonthlyInvoice = async (formData) => {\r\n\r\n        console.log(selectedRows, 'selectedRows');\r\n        const transformedData = selectedRows.map(item => ({\r\n            candidate_id: item.id,\r\n            total_amount: parseFloat(item.applicableVisaCharges).toFixed(2),\r\n            service_charges: parseFloat(item.applicableVisaCharges).toFixed(2),\r\n            overstay_charges: item.overstayDays ? parseFloat(parseFloat(item.overstayDays) * parseFloat(charges?.overstay)).toFixed(2) : 0,\r\n            overstay_days: item.overstayDays ? item.overstayDays : 0,\r\n        }));\r\n\r\n        console.log(transformedData, 'transformedDatatransformedData');\r\n        const total = selectedRows.reduce((total, item) => {\r\n            const overstayCharges = item.overstayDays ? item.overstayDays * charges?.overstay : 0;\r\n            return total + item.applicableVisaCharges + overstayCharges || 0;\r\n        }, 0);\r\n\r\n        if (transformedData.some(item => item.total_amount === 0)) {\r\n            showErrorToast('candidate has a total amount of 0');\r\n        }\r\n        else {\r\n\r\n            try {\r\n\r\n                let obj = {\r\n                    customer_id: selectedCustomer?.id,\r\n                    total_amount: total,\r\n                    due_date: null,\r\n                    tax: parseFloat(total) * 0.05,\r\n\r\n                    candidates: transformedData\r\n                };\r\n\r\n                console.log(selectedRows, 'obj');\r\n\r\n                const promise = InvoiceServices.CreateMonthlyInvoice(obj);\r\n\r\n                showPromiseToast(\r\n                    promise,\r\n                    'Saving...',\r\n                    'Added Successfully',\r\n                    'Something Went Wrong'\r\n                );\r\n\r\n                const response = await promise;\r\n                if (response?.responseCode === 200) {\r\n                    navigate(\"/monthly-invoices\");\r\n                    getCandidateList()\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            }\r\n            params = { ...params }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            console.log(user);\r\n\r\n            if (user?.user_type == 'C') {\r\n                console.log(customerQueue);\r\n                let currentUser = data?.rows?.find(item => item?.id == user?.customer_id)\r\n                console.log(currentUser);\r\n                setSelectedCustomer(currentUser)\r\n                setValue('customer', currentUser)\r\n\r\n            }\r\n\r\n\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getCandidateList = async (page, limit, filter, id) => {\r\n        try {\r\n            const Page = page || currentPage;\r\n            const Limit = 999;\r\n            const Filter = { ...filters, ...filter };\r\n            setCurrentPage(Page);\r\n            setPageLimit(Limit);\r\n            setFilters(Filter);\r\n\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: id ? id : selectedCustomer?.id\r\n            };\r\n            params = { ...params, ...Filter };\r\n\r\n            const { data } = await InvoiceServices.getCanidateList(params);\r\n\r\n            const candidatesWithCharges = data?.rows?.map(item => {\r\n                let additionalDays = 0;\r\n                const customer = item?.customer;\r\n                let overstayDays = 0\r\n\r\n\r\n                if (item?.visa_expiry) {\r\n                    console.log(\"yaha agia\", item)\r\n\r\n\r\n                    let visaExpiry = moment(item?.visa_expiry);\r\n                    let lastMonthEndDate = moment().subtract(1, \"month\").endOf(\"month\").endOf(\"day\");\r\n                    let expiryAfterGrace = visaExpiry.startOf(\"day\").add(30, \"days\");\r\n                    let newOverstayDays = moment().startOf(\"day\").diff(expiryAfterGrace, \"days\");\r\n\r\n                    if (newOverstayDays > 0) {\r\n                        overstayDays = newOverstayDays\r\n                    }\r\n                    let differenceInMonths = parseInt(moment().subtract(1, \"month\").format(\"MM\")) - parseInt(expiryAfterGrace.format(\"MM\"))\r\n                    console.log(differenceInMonths, 'differenceInMonths');\r\n                    if (moment(visaExpiry).isAfter(moment())) {\r\n                        differenceInMonths = -1;\r\n                    }\r\n                    if (differenceInMonths > 0) {\r\n                        overstayDays = lastMonthEndDate.format(\"DD\")\r\n                    }\r\n                    else if (differenceInMonths == 0) {\r\n\r\n                        if (parseInt(lastMonthEndDate.format(\"DD\")) == parseInt(expiryAfterGrace.format(\"DD\"))) {\r\n                            overstayDays = (parseInt(lastMonthEndDate.format(\"DD\")) - parseInt(expiryAfterGrace.format(\"DD\")))\r\n                        }\r\n                        else {\r\n                            overstayDays = (parseInt(lastMonthEndDate.format(\"DD\")) - parseInt(expiryAfterGrace.format(\"DD\"))) + 1\r\n                        }\r\n\r\n                        if (parseInt(expiryAfterGrace.format(\"YYYY\")) < parseInt(moment().format(\"YYYY\"))) {\r\n                            overstayDays = lastMonthEndDate.format(\"DD\")\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        overstayDays = 0\r\n\r\n                    }\r\n                    console.log(overstayDays, \"overstay check\")\r\n                    let sortedData = item.processings;\r\n                    if (sortedData.length > 0) {\r\n\r\n                        sortedData = item.processings.sort((a, b) => b.id - a.id);\r\n                    }\r\n\r\n                    if (sortedData.length > 0) {\r\n\r\n                        let renewed = {}\r\n                        if (item?.last_status) {\r\n\r\n                            renewed = sortedData.find(item => item?.last_status?.toLowerCase() === \"renewed\" && item?.type?.toLowerCase() === \"renew\");\r\n                        }\r\n                        if (renewed) {\r\n                            console.log(renewed, \"yaha agia\")\r\n                            const sortedStatuses = renewed?.statuses?.sort((a, b) => b.id - a.id);\r\n\r\n                            const renewedDate = sortedStatuses?.find(item => item.status == \"Renewed\");\r\n\r\n                            if (renewedDate) {\r\n                                console.log(\"ab yaha agia\")\r\n\r\n                                let oldExpiryDate = visaExpiry;\r\n\r\n                                if (item?.visa_tenure.includes(\"2\")) {\r\n                                    oldExpiryDate = moment(item?.visa_expiry).subtract(2, \"year\");\r\n                                }\r\n                                else {\r\n                                    oldExpiryDate = moment(item?.visa_expiry).subtract(1, \"year\");\r\n\r\n                                }\r\n\r\n                                console.log(oldExpiryDate, \"ab yaha agia\")\r\n\r\n\r\n                                expiryAfterGrace = oldExpiryDate.startOf(\"day\").add(30, \"days\");\r\n\r\n                                differenceInMonths = parseInt(moment().subtract(1, \"month\").format(\"MM\")) - parseInt(expiryAfterGrace.format(\"MM\"))\r\n\r\n\r\n                                if (moment(oldExpiryDate).format(\"YYYY\") != moment().format(\"YYYY\")) {\r\n                                    differenceInMonths = -99999;\r\n\r\n                                }\r\n\r\n\r\n                                console.log(differenceInMonths, 'differenceInMonthsYahaWala');\r\n\r\n                                if (differenceInMonths > 0) {\r\n                                    overstayDays = lastMonthEndDate.format(\"DD\")\r\n                                }\r\n                                else if (differenceInMonths == 0 && moment(oldExpiryDate).format(\"YYYY\") == moment().format(\"YYYY\")) {\r\n                                    let renewDate = moment(renewedDate.date)\r\n\r\n                                    if (parseInt(renewDate.format(\"DD\")) == parseInt(expiryAfterGrace.format(\"DD\"))) {\r\n                                        overstayDays = (parseInt(renewDate.format(\"DD\")) - parseInt(expiryAfterGrace.format(\"DD\")))\r\n                                    }\r\n                                    else {\r\n                                        overstayDays = (parseInt(renewDate.format(\"DD\")) - parseInt(expiryAfterGrace.format(\"DD\"))) + 1\r\n                                    }\r\n                                    console.log(parseInt(expiryAfterGrace.format(\"YYYY\")) < parseInt(moment().format(\"YYYY\")), 'testttt');\r\n\r\n                                    if (parseInt(expiryAfterGrace.format(\"YYYY\")) < parseInt(moment().format(\"YYYY\")) && parseInt(renewDate.format(\"YYYY\")) != parseInt(moment().format(\"YYYY\"))) {\r\n                                        overstayDays = lastMonthEndDate.format(\"DD\")\r\n                                    }\r\n                                }\r\n                                else if (differenceInMonths == -99999 && moment(renewedDate.date) <= lastMonthEndDate) {\r\n                                    let renewDate = moment(renewedDate.date)\r\n                                    console.log(\"testt\", renewDate)\r\n                                    overstayDays = (parseInt(renewDate.format(\"DD\")))\r\n\r\n                                }\r\n                                else {\r\n                                    overstayDays = 0\r\n                                }\r\n\r\n\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n                        // Find the first object with last_status = \"Canceled\" and type = \"Cancel\"\r\n                        let cancelled = {};\r\n                        if (item?.last_status) {\r\n\r\n                            cancelled = sortedData.find(item => (item?.last_status?.toLowerCase() === \"canceled\" || item?.last_status?.toLowerCase() === \"canceled-exited\" || item?.last_status?.toLowerCase() === \"canceled-status changed\") && (item?.type?.toLowerCase() === \"cancel\"));\r\n                        }\r\n\r\n                        if (cancelled) {\r\n                            console.log(cancelled);\r\n                            console.log(cancelled?.statuses);\r\n\r\n                            const cancelStartDate = cancelled?.statuses?.find(item => item.status == \"Canceled\");\r\n\r\n\r\n                            //et cancelStartDate = moment();\r\n                            //console.log(cancelStartDate, \"cancel\")\r\n                            let newDays = moment(cancelStartDate?.date).startOf('day').add(cancelled?.grace_period, 'days')\r\n                            let newDaysMonth = parseInt(newDays.format(\"MM\"));\r\n                            let lastMonthDays = parseInt(lastMonthEndDate.format(\"MM\"));\r\n                            newOverstayDays = lastMonthEndDate.diff(newDays, \"days\");\r\n\r\n                            if (newOverstayDays > 0) {\r\n                                overstayDays = newOverstayDays\r\n                            }\r\n\r\n                            if (lastMonthDays - newDaysMonth > 0) {\r\n                                const cancelEndDateObj = cancelled?.statuses?.find(item => item.status.toLowerCase() === \"canceled-exited\" || item.status.toLowerCase() === \"canceled-status changed\");\r\n                                if (cancelEndDateObj) {\r\n                                    let cancelEndDate = moment(cancelEndDateObj.date)\r\n\r\n                                    let differenceInEndDate = parseInt(lastMonthEndDate.format(\"MM\")) - parseInt(moment(cancelEndDateObj.date).format(\"MM\"))\r\n                                    overstayDays = lastMonthEndDate.format(\"DD\")\r\n                                    if (differenceInEndDate == 0) {\r\n                                        console.log(\"idhr hon\")\r\n                                        overstayDays = parseInt(cancelEndDate.startOf(\"day\").format(\"DD\"))\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    overstayDays = parseInt(lastMonthEndDate.startOf(\"day\").format(\"DD\"))\r\n\r\n                                }\r\n\r\n                            }\r\n                            else if (lastMonthDays - newDaysMonth == 0) {\r\n                                const cancelEndDateObj = cancelled?.statuses?.find(item => item.status.toLowerCase() === \"canceled-exited\" || item.status.toLowerCase() === \"canceled-status changed\");\r\n                                if (cancelEndDateObj) {\r\n                                    let cancelEndDate = moment(cancelEndDateObj.date)\r\n                                    if (parseInt(cancelEndDate.startOf(\"day\").format(\"DD\")) == parseInt(moment(newDays).format(\"DD\"))) {\r\n                                        overstayDays = (parseInt(cancelEndDate.startOf(\"day\").format(\"DD\")) - parseInt(moment(newDays).format(\"DD\")))\r\n                                    }\r\n                                    else {\r\n\r\n                                        overstayDays = (parseInt(cancelEndDate.startOf(\"day\").format(\"DD\")) - parseInt(moment(newDays).format(\"DD\"))) + 1\r\n                                    }\r\n\r\n\r\n                                }\r\n                                else {\r\n                                    if (parseInt(lastMonthEndDate.startOf(\"day\").format(\"DD\")) == parseInt(moment(newDays).format(\"DD\"))) {\r\n                                        overstayDays = (parseInt(lastMonthEndDate.startOf(\"day\").format(\"DD\")) - parseInt(moment(newDays).format(\"DD\")))\r\n                                    }\r\n                                    else {\r\n                                        overstayDays = (parseInt(lastMonthEndDate.startOf(\"day\").format(\"DD\")) - parseInt(moment(newDays).format(\"DD\"))) + 1\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                overstayDays = 0\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n\r\n                console.log(overstayDays, \"Overstay Days\")\r\n\r\n                if (customer.due_date_policy?.includes(\"7\")) {\r\n                    additionalDays = 7;\r\n                } else if (customer.due_date_policy?.includes(\"15\")) {\r\n                    additionalDays = 15;\r\n                }\r\n                else if (customer.due_date_policy?.includes(\"20\")) {\r\n                    additionalDays = 20;\r\n                }\r\n                else if (customer.due_date_policy?.includes(\"25\")) {\r\n                    additionalDays = 25;\r\n                }\r\n                else if (customer.due_date_policy?.includes(\"30\")) {\r\n                    additionalDays = 30;\r\n                }\r\n                else if (customer.due_date_policy?.includes(\"60\")) {\r\n                    additionalDays = 60;\r\n                }\r\n\r\n\r\n                else if (customer.due_date_policy?.includes(\"90\")) {\r\n                    additionalDays = 90;\r\n                }\r\n\r\n\r\n                // Find target status and calculate target date\r\n                let targetStatus = item?.statuses?.find(status => status?.status === 'Entry Permit' || status?.status === 'Change Status');\r\n                let targetDate = moment(item?.change_status_date).add(additionalDays, \"d\");\r\n\r\n                let previousMonth = moment().startOf(\"month\").startOf(\"day\").subtract(1, \"month\");\r\n\r\n                let previousMonthNumber = previousMonth.format(\"MM\");\r\n                let targetDateNumber = targetDate.format(\"MM\");\r\n\r\n                let differenceMonth = parseInt(previousMonthNumber) - parseInt(targetDateNumber)\r\n                let monthDifference = differenceMonth;\r\n                // let monthDifference = previousMonth.diff(targetDate, \"months\");\r\n                console.log(monthDifference, 'monthDifference');\r\n\r\n                let remainingDays = 0;\r\n                let totalDaysInPrevMonth = previousMonth.endOf(\"month\").format(\"DD\");\r\n\r\n                if (monthDifference === 0) {\r\n                    let totalDaysInTarget = targetDate.format(\"DD\");\r\n                    console.log(totalDaysInPrevMonth, 'sss');\r\n                    console.log(totalDaysInTarget, 'sss');\r\n                    remainingDays = parseInt(totalDaysInPrevMonth) - parseInt(totalDaysInTarget) + 1;\r\n                    if (parseInt(targetDate.format(\"YYYY\")) < parseInt(moment().format(\"YYYY\"))) {\r\n                        remainingDays = totalDaysInPrevMonth\r\n                    }\r\n                } else if (monthDifference > 0) {\r\n                    remainingDays = parseInt(totalDaysInPrevMonth);\r\n                } else {\r\n                    console.log(targetDate.format(\"YYYY\"), \"awaz\")\r\n                    if (parseInt(targetDate.format(\"YYYY\")) < parseInt(moment().format(\"YYYY\"))) {\r\n                        remainingDays = totalDaysInPrevMonth\r\n                    }\r\n                }\r\n                console.log(remainingDays, 'rem');\r\n\r\n                // Calculate applicable visa charges\r\n                let totalVisaCharges\r\n                if (parseFloat(item?.salary_total) > 2000) {\r\n                    totalVisaCharges = parseFloat(item?.customer?.monthly_visa_service_above);\r\n                }\r\n                else {\r\n                    totalVisaCharges = parseFloat(item?.customer?.monthly_visa_service_below);\r\n                }\r\n                console.log(totalVisaCharges, 'rem2');\r\n                console.log(totalDaysInPrevMonth, 'rem2');\r\n\r\n                let perDayVisaCharges = totalVisaCharges / parseInt(totalDaysInPrevMonth);\r\n                // let applicableVisaCharges = 30 * perDayVisaCharges;\r\n                let applicableVisaCharges = (remainingDays) * perDayVisaCharges;\r\n                console.log(remainingDays, perDayVisaCharges, 'rem');\r\n\r\n\r\n\r\n\r\n                // Add applicable charges to the item\r\n                return {\r\n                    ...item,\r\n                    applicableVisaCharges,\r\n                    overstayDays\r\n                };\r\n            });\r\n            if (selectAll) {\r\n                setSelectedRows(candidatesWithCharges.filter(item => item.applicableVisaCharges > 0));\r\n            }\r\n\r\n            setTotalData(candidatesWithCharges)\r\n            console.log(candidatesWithCharges);\r\n\r\n            setCandidates(candidatesWithCharges);\r\n            setOriginalArray(candidatesWithCharges)\r\n            PaginationFunc(candidatesWithCharges, 1)\r\n            setTotalCount(Math.ceil(candidatesWithCharges?.length / itemsPerPage));\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const handleSearchChange = (items,value) => {\r\n        \r\n        setSearchVal(value)\r\n        const value1 = value.toLowerCase();\r\n        console.log(value1);\r\n        let array = Array.isArray(items) ? items : originalArray\r\n        console.log(items,'array');\r\n        console.log(array,'array');\r\n        \r\n    if(value1){\r\n\r\n        const updatedData = array.filter((item) =>\r\n            Object.values(item).some((field) =>\r\n              typeof field === 'string' || typeof field === 'number'\r\n                ? field.toString().toLowerCase().includes(value1.toLowerCase())\r\n                : false\r\n            )\r\n          );\r\n          \r\n        setCandidates(updatedData);\r\n        \r\n    }\r\n    else{\r\n        setCandidates(originalArray);\r\n    }\r\n    \r\n    \r\n        \r\n      };\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getCandidateList(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getCandidateList(1, '', data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCustomerQueue()\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }} component={'form'} onSubmit={handleSubmit(CreateMonthlyInvoice)}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >\r\n                    Create Monthly Service Invoice</Typography>\r\n                {selectedRows.length > 0 && <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                    <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Create Invoice\"\r\n                        type='submit'\r\n\r\n                    // onClick={ ()=> navigate(`/update-customer/${id}`)}\r\n\r\n\r\n                    />\r\n\r\n                </Box>}\r\n            </Box>\r\n            <Grid container mt={5}>\r\n                <Grid item xs={5} >\r\n                    <SelectField\r\n                        size={'small'}\r\n                        label={'Select Customer :'}\r\n                        disabled={user?.user_type == 'C' ? true : false}\r\n                        options={customerQueue}\r\n                        selected={selectedCustomer}\r\n                        onSelect={(value) => {\r\n                            setSelectedCustomer(value)\r\n                            setSelectedRows([])\r\n                            setTotalData([])\r\n                            setSelectAll(false)\r\n                            getCandidateList(null, null, null, value?.id)\r\n                            setValue('customer', value)\r\n\r\n                        }}\r\n                        error={errors?.customer?.message}\r\n                        register={register(\"customer\", {\r\n                            required: 'Please select customer account.',\r\n                        })}\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <Grid container mt={2}>\r\n                <Grid item xs={2}>\r\n                    <InputField\r\n                        label={\"Search :\"}\r\n                        size={'small'}\r\n                        fullWidth={true}\r\n                        placeholder={\"Search\"}\r\n                        error={errors?.search?.message}\r\n                        register={register('code', {\r\n                            onChange: (e) => handleSearchChange(false, e.target.value )\r\n                          })}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item md={11}>\r\n                {<Box>\r\n\r\n                    <Grid container mb={2} >\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                    {(\r\n                        (\r\n                            <Fragment>\r\n                                <PDFExport landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                    <TableContainer\r\n                                        component={Paper}\r\n                                        sx={{\r\n                                            maxHeight: 'calc(100vh - 200px)', mt: 1, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                        }}\r\n\r\n                                    >\r\n                                        <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                            <TableHead>\r\n\r\n                                                <Row>\r\n                                                    {tableHead.map((cell, index) => (\r\n                                                        <Cell style={{ textAlign: cell?.name == 'Select' ? 'center' : 'left', paddingRight: cell?.name == 'Select' ? '15px' : '20px' }} className=\"pdf-table\"\r\n                                                            key={index}\r\n\r\n                                                        >\r\n                                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                                {cell.name == 'Select' && <Checkbox\r\n                                                                    checked={selectedRows.length == 0 ? false : selectAll}\r\n                                                                    disabled={false}\r\n                                                                    onChange={(e) => handleCheckboxChange2(e.target.checked)}\r\n                                                                />}    {cell?.name} {cell?.name == 'Date' && <>&nbsp;<span style={{ height: '20px', cursor: 'pointer' }}><Box component={'img'} onClick={() => { setSort(sort == 'asc' ? 'desc' : 'asc'); handleSort(cell?.key) }} src={Images.sortIcon} width={'18px'}></Box></span></>}\r\n                                                            </Box>\r\n                                                        </Cell>\r\n                                                    ))}\r\n                                                </Row>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {candidates?.length > 0 ? (\r\n                                                    candidates.map((item, index) => (\r\n                                                        <Row\r\n                                                            key={index}\r\n                                                            sx={{\r\n                                                                border: '1px solid #EEEEEE !important',\r\n                                                            }}\r\n                                                        >\r\n                                                            <Cell style={{ textAlign: 'center', paddingLeft: '0px !important' }} className=\"pdf-table\">\r\n                                                                <Checkbox\r\n                                                                    checked={selectedRows.includes(item)}\r\n                                                                    disabled={item?.applicableVisaCharges <= 0}\r\n                                                                    onChange={(e) => handleCheckboxChange(item, e.target.checked)}\r\n                                                                />\r\n                                                            </Cell>\r\n                                                            <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                {item?.name}\r\n                                                            </Cell>\r\n                                                            <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                {item?.customer?.name}\r\n                                                            </Cell>\r\n                                                            <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                {parseFloat(item?.salary_total) > 2000 ? item?.customer?.monthly_visa_service_above : item?.customer?.monthly_visa_service_below}\r\n                                                            </Cell>\r\n                                                            <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                {parseFloat(item?.applicableVisaCharges).toFixed(2)}\r\n                                                            </Cell>\r\n                                                            <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                {parseFloat(parseFloat(item?.overstayDays) * parseFloat(charges?.overstay)).toFixed(2)}\r\n                                                            </Cell>\r\n                                                        </Row>\r\n                                                    ))\r\n                                                ) : (\r\n                                                    <Row>\r\n                                                        <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                                                            No Data Found\r\n                                                        </Cell>\r\n                                                    </Row>\r\n                                                )}\r\n                                            </TableBody>\r\n\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </PDFExport>\r\n                                {/* ========== Pagination ========== */}\r\n                                <Grid container justifyContent={'flex-end'} mt={5}>\r\n                                    <Pagination\r\n                                        count={totalCount}\r\n                                        page={page}\r\n                                        onChange={handleChangePage}\r\n                                        renderItem={(item) => (\r\n                                            <PaginationItem\r\n                                                component=\"div\"\r\n                                                {...item}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n\r\n                            </Fragment>\r\n                        )\r\n                    )}\r\n\r\n\r\n\r\n\r\n\r\n                </Box>}\r\n\r\n\r\n\r\n\r\n\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CreateMonthlyInvoice\r\n"
        }
    ]
}