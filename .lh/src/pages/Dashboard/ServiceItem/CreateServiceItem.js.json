{
    "sourceFile": "src/pages/Dashboard/ServiceItem/CreateServiceItem.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821348,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, Box, Checkbox, Container, FormControlLabel, FormLabel, Grid, IconButton, InputLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\nimport axios from 'axios';\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from 'services/Finance';\r\n\r\n\r\nfunction CreateCategory() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth()\r\n    const navigate = useNavigate()\r\n    const [formChange, setFormChange] = useState(false)\r\n    const [submit, setSubmit] = useState(false)\r\n    const [excludeFromSales, setExcludeFromSales] = useState('no');\r\n    const [excludeFromPurchase, setExcludeFromPurchase] = useState('no');\r\n\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n    console.log(watch());\r\n\r\n\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === 'object' && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n\r\n    ];\r\n    const [guarantors, setGuarantors] = useState([])\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n    const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n    const [passport, setPassport] = useState()\r\n    const [allocation, setAllocation] = useState(false)\r\n    const [depositError, setDepositError] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [emailVerify, setEmailVerify] = useState(false)\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false)\r\n    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n        monthlyVisaServiceCharges: false,\r\n        vipMedical: false,\r\n        extraTyping: true,\r\n    });\r\n\r\n    const [center, setCenter] = useState(null)\r\n    const [status, setStatus] = useState(null)\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState()\r\n    const [step1FormData, setStep1FormData] = useState();\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [date, setDate] = useState(null)\r\n    const [balanceType, setBalanceType] = useState(null)\r\n    const [imageURL, setImageURL] = useState(null)\r\n    const fileInputRef = useRef(null);\r\n    const [hovered, setHovered] = useState(false);\r\n    const [accounts, setAccounts] = useState([])\r\n    const [salesAccount, setSalesAccount] = useState(null)\r\n    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n    const [cogsAccount, setCogsAccount] = useState(null)\r\n    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n    const [itemType, setItemType] = useState(null)\r\n    const [unit, setUnit] = useState(null)\r\n    const [taxes, setTaxes] = useState([])\r\n    const [tax, setTax] = useState(null)\r\n    const [category, setCategory] = useState(null)\r\n    const [categories, setCategories] = useState(null)\r\n    const [governmentAccount, setGovernmnentAccount] = useState(null)\r\n    const [description, setDescription] = useState(null)\r\n    const [ownGovBank, setOwnGovBank] = useState(null)\r\n    //documents array\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file.size);\r\n            console.log(getFileSize(file.size))\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                setSlipDetail(docs);\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const submitForm = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.companyName,\r\n\r\n                phone: formData?.mobile,\r\n                email: formData?.email,\r\n                address: formData?.businessAddress,\r\n                website: formData?.businessWebsite,\r\n                cp_name: formData?.personName,\r\n                cp_mobile: formData?.phone,\r\n\r\n            };\r\n\r\n            setStepFormData(obj);\r\n            handleNext()\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const submitForm1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.name,\r\n                name_ar: formData?.arabic,\r\n                category_id :category?.id,\r\n                center_fee:Number(formData?.center_fee),\r\n                govt_bank_account_id:governmentAccount?.id,\r\n                bank_service_charge:Number(formData?.bank_service_charges),\r\n                other_charge:Number(formData?.other_charge),\r\n                local_commission: Number(formData?.local_commission),\r\n                item_tax_type:tax?.name,\r\n                editable_description:description?.id,\r\n                sales_account_id:salesAccount?.id,\r\n                use_own_govt_bank:ownGovBank?.id,\r\n                cogs_account_id:cogsAccount?.id,\r\n                vat_bank_charge:Number(formData?.vat_bank_charge),\r\n                non_local_commission:Number(formData?.non_local_commission),\r\n                \r\n        \r\n\r\n\r\n            };\r\n            console.log(obj)\r\n            const promise = CustomerServices.AddServiceItem(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/service-list\");\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleFileChange = async (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                `${process.env.REACT_APP_BASE_URL}/system/uploadDocuments`,\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL(response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    // *For Get Account\r\n    const getAccounts = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getAccounts(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setAccounts(data?.accounts?.rows)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getTax= async () => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n                \r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getTax(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setTaxes(data?.tax)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getCategories= async () => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n                \r\n\r\n            }\r\n\r\n            const { data } = await CustomerServices.getCategoryList(params)\r\n\r\n            setCategories(data?.categories)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const verifyEmail = async (value) => {\r\n        let Myemail = getValues1('email')\r\n        if (Myemail) {\r\n\r\n            try {\r\n                let obj = {\r\n                    email: Myemail.toLowerCase(),\r\n                    validate: true\r\n\r\n\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n                console.log(status);\r\n                if (status) {\r\n                    setEmailVerify(true)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setEmailVerify(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAccounts()\r\n        getTax()\r\n        getCategories()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n            </Box>\r\n            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n                {<>\r\n\r\n                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Service Item</Typography>\r\n\r\n                        </Box>\r\n\r\n                        <Box sx={{ p: 3 }}>\r\n                            <Grid container sx={{ gap: '5px 25px' }}>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\" Name :*\"}\r\n                                        size={'small'}\r\n                                        placeholder={\" Name\"}\r\n                                        error={errors1?.name?.message}\r\n                                        register={register1(\"name\", {\r\n                                            required:\r\n                                                \"Please enter your name.\"\r\n\r\n                                        })}\r\n                                    /></Grid>\r\n\r\n\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Arabic Name :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Arabic Name\"}\r\n                                        error={errors1?.arabic?.message}\r\n                                        register={register1(\"arabic\", {\r\n                                            required: \"Please enter your arabic.\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Center Fee :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Center fee\"}\r\n                                        error={errors1?.center_fee?.message}\r\n                                        register={register1(\"center_fee\", {\r\n                                            required: \"Please Enter Center fee.\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                               \r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Category *:'}\r\n\r\n                                        options={categories}\r\n                                        selected={category}\r\n                                        onSelect={(value) => {\r\n                                            setCategory(value)\r\n                                        }}\r\n                                        error={errors?.category?.message}\r\n                                        register={register(\"category\", {\r\n                                            required: 'Please select category .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Tax Type *:'}\r\n\r\n                                        options={taxes}\r\n                                        selected={tax}\r\n                                        onSelect={(value) => {\r\n                                            setTax(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.tax?.message}\r\n                                        register={register(\"tax\", {\r\n                                            required: 'Please select tax .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Govt Bank Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={governmentAccount}\r\n                                        onSelect={(value) => {\r\n                                            setGovernmnentAccount(value)\r\n\r\n                                        }}\r\n                                        error={errors?.governmentAccount?.message}\r\n                                        register={register(\"governmentAccount\", {\r\n                                            required: 'Please select Government Account .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Bank Services Charges :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Service Charges\"}\r\n                                        error={errors1?.bank_service_charges?.message}\r\n                                        register={register1(\"bank_service_charges\", {\r\n                                            required: \"Please Enter Bank Service Charges .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Other Charges :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Other Charges\"}\r\n                                        error={errors1?.other_charge?.message}\r\n                                        register={register1(\"other_charge\", {\r\n                                            required: \"Please Enter Other Charges .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Local Commission:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Local Commission\"}\r\n                                        error={errors1?.local_commission?.message}\r\n                                        register={register1(\"local_commission\", {\r\n                                            required: \"Please Enter Local Commission .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Non Local Commission:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Non Local Commission\"}\r\n                                        error={errors1?.non_local_commission?.message}\r\n                                        register={register1(\"non_local_commission\", {\r\n                                            required: \"Please Enter Non Local Commission .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"vat Bank Charge:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"vat Bank Charge\"}\r\n                                        error={errors1?.vat_bank_charge?.message}\r\n                                        register={register1(\"vat_bank_charge\", {\r\n                                            required: \"Please Enter vat Bank Charge .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Sales Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={salesAccount}\r\n                                        onSelect={(value) => {\r\n                                            setSalesAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.sales?.message}\r\n                                        register={register(\"sales\", {\r\n                                            required: 'Please select sales account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                              \r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Cogs Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={cogsAccount}\r\n                                        onSelect={(value) => {\r\n                                            setCogsAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.cogs?.message}\r\n                                        register={register(\"cogs\", {\r\n                                            required: 'Please select cogs account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                              \r\n                              \r\n                            \r\n                                \r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Use Own Gov Bank *:'}\r\n\r\n                                        options={[{ id: true, name: 'Yes' }, { id: false, name: 'No' }]}\r\n                                        selected={ownGovBank}\r\n                                        onSelect={(value) => {\r\n                                            setOwnGovBank(value)\r\n\r\n                                        }}\r\n                                        error={errors?.use_own_govt_bank?.message}\r\n                                        register={register(\"use_own_govt_bank\", {\r\n                                            required: 'Please select Editable Description .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Editable Description *:'}\r\n\r\n                                        options={[{ id: true, name: 'Yes' }, { id: false, name: 'No' }]}\r\n                                        selected={description}\r\n                                        onSelect={(value) => {\r\n                                            setDescription(value)\r\nconsole.log(value)\r\n\r\n                                        }}\r\n                                        error={errors?.editable_description?.message}\r\n                                        register={register(\"editable_description\", {\r\n                                            required: 'Please select Editable Description .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <Grid container justifyContent={'flex-end'}>\r\n                                    <PrimaryButton\r\n                                       bgcolor={'#bd9b4a'}\r\n                                        title=\"Submit\"\r\n                                        type={'submit'}\r\n\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box></>}\r\n\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateCategory;"
        }
    ]
}