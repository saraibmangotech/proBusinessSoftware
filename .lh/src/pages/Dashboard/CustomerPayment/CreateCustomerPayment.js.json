{
    "sourceFile": "src/pages/Dashboard/CustomerPayment/CreateCustomerPayment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 66,
            "patches": [
                {
                    "date": 1745391518274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745391676341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1302,9 +1302,9 @@\n                     </TableRow>\r\n                   </TableBody>\r\n                 </Table>\r\n               </TableContainer>\r\n-              {payButton && (\r\n+              {true && (\r\n                 <Grid container mt={2} spacing={2}>\r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n"
                },
                {
                    "date": 1745391696998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1107,203 +1107,9 @@\n                   </Grid>\r\n                 </Grid>\r\n               </Box>\r\n \r\n-              <TableContainer component={Paper}>\r\n-                <Table>\r\n-                  <TableHead>\r\n-                    <TableRow>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n-                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n-\r\n-                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n-                    </TableRow>\r\n-                  </TableHead>\r\n-                  <TableBody>\r\n-                    {rows?.map((item, index) => (\r\n-                      <TableRow key={index}>\r\n-                        <TableCell sx={{display: \"none\"}}>{item?.id}</TableCell>\r\n-                        <TableCell>{item?.service?.item_code}</TableCell>\r\n-                        <TableCell>{item?.service?.name}</TableCell>\r\n-                        <TableCell>{item?.quantity}</TableCell>\r\n-                        <TableCell>{item?.govt_fee}</TableCell>\r\n-                        <TableCell>{item?.center_fee}</TableCell>\r\n-                        <TableCell>{item?.bank_charge}</TableCell>\r\n-                        <TableCell>{item?.total}</TableCell>\r\n-\r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Transaction Id\"\r\n-                            type=\"number\"\r\n-                            value={item.transaction_id || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n-\r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Application Id\"\r\n-                            type=\"number\"\r\n-                            disabled={true}\r\n-                            value={item.application_id || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n-\r\n-                        <TableCell>\r\n-                          <TextField\r\n-                            size=\"small\"\r\n-                            placeholder=\"Ref No\"\r\n-                            type=\"number\"\r\n-                            disabled={true}\r\n-                            value={item.ref_no || \"\"}\r\n-                            onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n-                          />\r\n-                        </TableCell>\r\n-                      </TableRow>\r\n-                    ))}\r\n-\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={9} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Sub-total:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {subTotal}\r\n-                        </Typography>{\" \"}\r\n-                        {/* Display the Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-\r\n-                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n-\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={9} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Net Taxable Amount:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {rows\r\n-                            ?.reduce((total, item) => {\r\n-                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-                              const qty = Number.parseInt(item?.quantity ?? 1)\r\n-                              return total + fee * qty\r\n-                            }, 0)\r\n-                            .toFixed(2)}\r\n-                        </Typography>{\" \"}\r\n-                        {/* Display the Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={9} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Total Vat:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {(\r\n-                            rows?.reduce((total, item) => {\r\n-                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-                              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-                              return total + fee * qty\r\n-                            }, 0) * 0.05\r\n-                          ).toFixed(2)}\r\n-                        </Typography>{\" \"}\r\n-                        {/* Display the Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={9} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          Amount Total:\r\n-                        </Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n-                          {(\r\n-                            Number.parseFloat(subTotal) +\r\n-                            rows?.reduce((total, item) => {\r\n-                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-                              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-                              return total + fee * qty\r\n-                            }, 0) *\r\n-                            0.05\r\n-                          ).toFixed(2)}\r\n-                        </Typography>{\" \"}\r\n-                        {/* This can be the same as Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={10} align=\"right\">\r\n-                        <Grid container gap={2} justifyContent={\"center\"}>\r\n-                          <Button\r\n-                            onClick={() => setPayButton(true)}\r\n-                            disabled={rows?.length == 0}\r\n-                            variant=\"contained\"\r\n-                            sx={{\r\n-                              textTransform: \"capitalize\",\r\n-                              backgroundColor: \"#bd9b4a\",\r\n-                              width: \"200px\",\r\n-                              \":hover\": {\r\n-                                backgroundColor: \"rgb(189 155 74)\",\r\n-                              },\r\n-                            }}\r\n-                          >\r\n-                            Pay\r\n-                          </Button>\r\n-                          {console.log(selectedCustomer,'selectedCustomer')\r\n-                          }\r\n-                          {creditButton && !detail?.credited_by && selectedCustomer?.id != 11002 && <Button\r\n-                            onClick={() => handleCredit()}\r\n-\r\n-                            variant=\"contained\"\r\n-                            sx={{\r\n-                              textTransform: \"capitalize\",\r\n-                              backgroundColor: \"#bd9b4a\",\r\n-                              width: \"200px\",\r\n-                              \":hover\": {\r\n-                                backgroundColor: \"rgb(189 155 74)\",\r\n-                              },\r\n-                            }}\r\n-                          >\r\n-                            Mark As Credit\r\n-                          </Button>}\r\n-                          <Button\r\n-                            onClick={() => setPayButton(false)}\r\n-                            variant=\"contained\"\r\n-                            sx={{\r\n-                              textTransform: \"capitalize\",\r\n-                              backgroundColor: \"#bd9b4a\",\r\n-                              width: \"200px\",\r\n-                              \":hover\": {\r\n-                                backgroundColor: \"rgb(189 155 74)\",\r\n-                              },\r\n-                            }}\r\n-                          >\r\n-                            Cancel\r\n-                          </Button>\r\n-                        </Grid>\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                  </TableBody>\r\n-                </Table>\r\n-              </TableContainer>\r\n+              \r\n               {true && (\r\n                 <Grid container mt={2} spacing={2}>\r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n"
                },
                {
                    "date": 1745391724361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1122,49 +1122,11 @@\n                       })}\r\n                       error={errors1?.total?.message}\r\n                     />\r\n                   </Grid>\r\n+               \r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n-                      label=\"Additional Percentage\"\r\n-                      size=\"small\"\r\n-                      disabled={chargesDisabled}\r\n-                      placeholder=\"Additional Percentage\"\r\n-                      register={register1(\"percentage\", {\r\n-                        required: \"please enter percentage.\",\r\n-                        onChange: (e) => {\r\n-                          const percentage = parseFloat(e.target.value) || 0;\r\n-                          const totalAmount = parseFloat(getValues1(\"total\")) || 0;\r\n-\r\n-                          const additionalCharges = (totalAmount * percentage) / 100;\r\n-\r\n-                          console.log(\"Additional Charges:\", additionalCharges.toFixed(2));\r\n-\r\n-                          setValue1(\"additionalCharges\", additionalCharges.toFixed(2));\r\n-                          setValue1('finalTotal', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n-                          setValue1('balance', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n-                          setValue1('payamount', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n-                        },\r\n-                      })}\r\n-                      error={errors1?.percentage?.message}\r\n-                    />\r\n-                  </Grid>\r\n-\r\n-\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Additional Charges\"\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Additional Charges\"\r\n-                      register={register1(\"additionalCharges\", {\r\n-                        required: \"please enter additionalCharges .\",\r\n-                      })}\r\n-                      error={errors1?.additionalCharges?.message}\r\n-                    />\r\n-                  </Grid>\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n                       label=\"Final Total\"\r\n                       size=\"small\"\r\n                       disabled={true}\r\n                       placeholder=\"Final Total\"\r\n"
                },
                {
                    "date": 1745391730176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1123,22 +1123,11 @@\n                       error={errors1?.total?.message}\r\n                     />\r\n                   </Grid>\r\n                \r\n+                  \r\n                   <Grid item md={3} sm={12} xs={12}>\r\n                     <InputField\r\n-                      label=\"Final Total\"\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Final Total\"\r\n-                      register={register1(\"finalTotal\", {\r\n-                        required: \"please enter finalTotal .\",\r\n-                      })}\r\n-                      error={errors1?.finalTotal?.message}\r\n-                    />\r\n-                  </Grid>\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n                       label=\"Paid Amount\"\r\n \r\n                       disabled={true}\r\n                       size=\"small\"\r\n"
                },
                {
                    "date": 1745391767959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1005,18 +1005,9 @@\n                           error={errors1?.customer?.message}\r\n                           register={register1(\"customer\")}\r\n                         />\r\n                       </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Display Customer\"\r\n-                          size=\"small\"\r\n-                          disabled={true}\r\n-                          placeholder=\"Walk-in Customer\"\r\n-                          register={register1(\"display_customer\")}\r\n-                          error={errors1?.display_customer?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                    \r\n \r\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <InputField\r\n                           label=\"Mobile\"\r\n"
                },
                {
                    "date": 1745391779711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1007,37 +1007,12 @@\n                         />\r\n                       </Grid>\r\n                     \r\n \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Mobile\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Mobile No\"\r\n-                          disabled={true}\r\n-                          register={register1(\"mobile\", {\r\n-                            pattern: {\r\n-                              value: /^05[0-9]{8}$/,\r\n-                              message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n-                            },\r\n-                          })}\r\n-                          error={errors1?.mobile?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                    \r\n \r\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <InputField\r\n-                          label=\"Email\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Email\"\r\n-                          disabled={true}\r\n-                          register={register1(\"email\")}\r\n-                          error={errors1?.email?.message}\r\n-                        />\r\n-                      </Grid>\r\n-\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n                           label=\"TRN\"\r\n                           size=\"small\"\r\n                           placeholder=\"TRN\"\r\n                           disabled={true}\r\n"
                },
                {
                    "date": 1745391786820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1009,33 +1009,12 @@\n                     \r\n \r\n                     \r\n \r\n+                    \r\n+                     \r\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <InputField\r\n-                          label=\"TRN\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"TRN\"\r\n-                          disabled={true}\r\n-                          register={register1(\"trn\", {\r\n-                            required: false,\r\n-                          })}\r\n-                        />\r\n-                      </Grid>\r\n-                      {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Case No\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Case No\"\r\n-                          disabled={true}\r\n-                          register={register1(\"caseno\", {\r\n-                            required: false\r\n-                          })}\r\n-\r\n-                        />\r\n-                      </Grid> */}\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n                           label=\"Ref\"\r\n                           disabled={true}\r\n                           size=\"small\"\r\n                           placeholder=\"Reference\"\r\n"
                },
                {
                    "date": 1745391803301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1010,18 +1010,9 @@\n \r\n                     \r\n \r\n                     \r\n-                     \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Ref\"\r\n-                          disabled={true}\r\n-                          size=\"small\"\r\n-                          placeholder=\"Reference\"\r\n-                          register={register1(\"ref\")}\r\n-                        />\r\n-                      </Grid>\r\n+                   \r\n \r\n                       {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <SelectField\r\n                           label=\"Cost Center\"\r\n"
                },
                {
                    "date": 1745391836813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1012,21 +1012,9 @@\n \r\n                     \r\n                    \r\n \r\n-                      {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Cost Center\"\r\n-                          size=\"small\"\r\n-                          disabled={true}\r\n-                          options={[{ id: \"TASHEEL\", name: \"TASHEEL\" }]}\r\n-                          selected={selectedCostCenter}\r\n-                          onSelect={(value) => setSelectedCostCenter(value)}\r\n-                          register={register1(\"cost_center\", {\r\n-                            required: false,\r\n-                          })}\r\n-                        />\r\n-                      </Grid> */}\r\n+                     \r\n                       \r\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <InputField\r\n                           label=\"Address\"\r\n"
                },
                {
                    "date": 1745391857491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -851,22 +851,9 @@\n               <Box sx={{ p: 3 }}>\r\n                 <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                   <Grid item xs={12}>\r\n                     <Grid container gap={2} alignItems={\"center\"}>\r\n-                      <Grid item xs={3}>\r\n-                        <DatePicker\r\n-                          label={\"Invoice Date :*\"}\r\n-                          value={date}\r\n-                          size={\"small\"}\r\n-                          disabled={fieldsDisabled}\r\n-                          error={errors1?.date?.message}\r\n-                          register={register1(\"date\")}\r\n-                          onChange={(date) => {\r\n-                            setValue1(\"date\", date)\r\n-                            setDate(new Date(date))\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n+                     \r\n                       <Grid item md={3} sm={12} xs={12} mt={1}>\r\n                         <InputField\r\n                           label=\"Invoice Number\"\r\n                           size=\"small\"\r\n"
                },
                {
                    "date": 1745391870598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -967,8 +967,22 @@\n                   >\r\n                     <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n+                          label={\"Invoice Date :*\"}\r\n+                          value={date}\r\n+                          size={\"small\"}\r\n+                          disabled={fieldsDisabled}\r\n+                          error={errors1?.date?.message}\r\n+                          register={register1(\"date\")}\r\n+                          onChange={(date) => {\r\n+                            setValue1(\"date\", date)\r\n+                            setDate(new Date(date))\r\n+                          }}\r\n+                        />\r\n+                      </Grid>\r\n+                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                        <DatePicker\r\n                           label={\"Payment Date :*\"}\r\n                           value={date}\r\n                           size={\"small\"}\r\n                           error={errors1?.date?.message}\r\n"
                },
                {
                    "date": 1745391903842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -849,74 +849,9 @@\n               </Box>\r\n \r\n               <Box sx={{ p: 3 }}>\r\n                 <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                  <Grid item xs={12}>\r\n-                    <Grid container gap={2} alignItems={\"center\"}>\r\n-                     \r\n-                      <Grid item md={3} sm={12} xs={12} mt={1}>\r\n-                        <InputField\r\n-                          label=\"Invoice Number\"\r\n-                          size=\"small\"\r\n-                          disabled={fieldsDisabled}\r\n-                          placeholder=\"Invoice Number\"\r\n-                          register={register1(\"invoicenumber\")}\r\n-                          InputProps={{\r\n-                            endAdornment: (\r\n-                              <IconButton onClick={() => getReceptionDetail(true)}>\r\n-                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n-                              </IconButton>\r\n-                            ),\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Token\"\r\n-                          size=\"small\"\r\n-                          disabled={fieldsDisabled}\r\n-                          placeholder=\"Enter Token\"\r\n-                          register={register1(\"token\")}\r\n-                          InputProps={{\r\n-                            endAdornment: (\r\n-                              <IconButton\r\n-                                onClick={() => {\r\n-                                  getReceiptDetail()\r\n-                                }}\r\n-                              >\r\n-                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n-                              </IconButton>\r\n-                            ),\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={2} sm={12} xs={12} mt={2.5}>\r\n-                        <PrimaryButton\r\n-                          bgcolor={\"#bd9b4a\"}\r\n-                          title=\"Clear\"\r\n-                          onClick={() => {\r\n-                            setCreditButton(false)\r\n-                            setFieldsDisabled(false)\r\n-                            setValue1(\"token\", \"\")\r\n-                            setValue1(\"invoicenumber\", \"\")\r\n-                            setValue1(\"customer\", \"\")\r\n-                            setValue1(\"invoice_date\", \"\")\r\n-                            setValue1(\"mobile\", \"\")\r\n-                            setValue1(\"ref\", \"\")\r\n-                            setValue1(\"display_customer\", \"\")\r\n-                            setValue1(\"email\", \"\")\r\n-                            setValue1(\"address\", \"\")\r\n-                            setValue1(\"trn\", \"\")\r\n-                            setValue1(\"cost_center\", \"\")\r\n-                            setRows([])\r\n-                            setPayButton(false)\r\n-                            setSubTotal(0)\r\n-                          }}\r\n-                          loading={loading}\r\n-                        />\r\n-                      </Grid>\r\n-                    </Grid>\r\n-                  </Grid>\r\n+               \r\n \r\n                   {/* <Grid\r\n                                         item\r\n                                         md={5.5}\r\n"
                },
                {
                    "date": 1745391909022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -851,44 +851,9 @@\n               <Box sx={{ p: 3 }}>\r\n                 <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                \r\n \r\n-                  {/* <Grid\r\n-                                        item\r\n-                                        md={5.5}\r\n-                                        sm={12}\r\n-                                        xs={12}\r\n-                                        sx={{\r\n-                                            border: \"2px solid black\",\r\n-                                            p: 2,\r\n-                                            borderRadius: \"15px\",\r\n-                                        }}\r\n-                                    >\r\n-                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-\r\n-\r\n-\r\n-                                            <Grid item xs={5.7} >\r\n-                                                <SelectField\r\n-                                                    size={'small'}\r\n-                                                    label={'Customer *:'}\r\n-                                                    disabled={true}\r\n-                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n-                                                    selected={selectedCustomer}\r\n-                                                    onSelect={(value) => {\r\n-                                                        setSelectedCustomer(value)\r\n-\r\n-\r\n-                                                    }}\r\n-                                                    error={errors1?.customer?.message}\r\n-                                                    register={register1(\"customer\")}\r\n-                                                />\r\n-                                            </Grid>\r\n-\r\n-\r\n-\r\n-                                        </Grid>\r\n-                                    </Grid> */}\r\n+                  \r\n                   <Grid\r\n                     item\r\n                     md={12}\r\n                     sm={12}\r\n"
                },
                {
                    "date": 1745391921112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -896,9 +896,9 @@\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <SelectField\r\n                           size={\"small\"}\r\n                           label={\"Customer *:\"}\r\n-                          disabled={true}\r\n+                          \r\n                           options={[{ id: 11002, name: \"Walk-in Customer\" }]}\r\n                           selected={selectedCustomer}\r\n                           onSelect={(value) => {\r\n                             setSelectedCustomer(value)\r\n"
                },
                {
                    "date": 1745391936345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -844,9 +844,9 @@\n                   p: 3,\r\n                   alignItems: \"flex-end\",\r\n                 }}\r\n               >\r\n-                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>Pay Receipt</Typography>\r\n+                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>Customer Payment</Typography>\r\n               </Box>\r\n \r\n               <Box sx={{ p: 3 }}>\r\n                 <Grid container sx={{ gap: \"5px 25px\" }}>\r\n"
                },
                {
                    "date": 1745391972159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -866,8 +866,22 @@\n                     }}\r\n                   >\r\n                     <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                        <SelectField\r\n+                          size={\"small\"}\r\n+                          label={\"Customer *:\"}\r\n+                          \r\n+                          options={[{ id: 11002, name: \"Walk-in Customer\" }]}\r\n+                          selected={selectedCustomer}\r\n+                          onSelect={(value) => {\r\n+                            setSelectedCustomer(value)\r\n+                          }}\r\n+                          error={errors1?.customer?.message}\r\n+                          register={register1(\"customer\")}\r\n+                        />\r\n+                      </Grid>\r\n+                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n                           label={\"Invoice Date :*\"}\r\n                           value={date}\r\n                           size={\"small\"}\r\n@@ -892,23 +906,10 @@\n                             setPaidAt(new Date(date))\r\n                           }}\r\n                         />\r\n                       </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <SelectField\r\n-                          size={\"small\"}\r\n-                          label={\"Customer *:\"}\r\n-                          \r\n-                          options={[{ id: 11002, name: \"Walk-in Customer\" }]}\r\n-                          selected={selectedCustomer}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCustomer(value)\r\n-                          }}\r\n-                          error={errors1?.customer?.message}\r\n-                          register={register1(\"customer\")}\r\n-                        />\r\n-                      </Grid>\r\n                     \r\n+                    \r\n \r\n                     \r\n \r\n                     \r\n"
                },
                {
                    "date": 1745391977642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -916,20 +916,9 @@\n                    \r\n \r\n                      \r\n                       \r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Address\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Address\"\r\n-                          multiline\r\n-                          disabled={true}\r\n-                          rows={2}\r\n-                          register={register1(\"address\")}\r\n-                          error={errors1?.address?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                    \r\n                     </Grid>\r\n                   </Grid>\r\n                 </Grid>\r\n               </Box>\r\n"
                },
                {
                    "date": 1745391985570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -879,8 +879,20 @@\n                           error={errors1?.customer?.message}\r\n                           register={register1(\"customer\")}\r\n                         />\r\n                       </Grid>\r\n+                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                        <InputField\r\n+                          label=\"Description\"\r\n+                          size=\"small\"\r\n+                          placeholder=\"Address\"\r\n+                          multiline\r\n+                          disabled={true}\r\n+                          rows={2}\r\n+                          register={register1(\"address\")}\r\n+                          error={errors1?.address?.message}\r\n+                        />\r\n+                      </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n                           label={\"Invoice Date :*\"}\r\n                           value={date}\r\n"
                },
                {
                    "date": 1745391993033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -883,14 +883,14 @@\n                       <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <InputField\r\n                           label=\"Description\"\r\n                           size=\"small\"\r\n-                          placeholder=\"Address\"\r\n+                          placeholder=\"Description\"\r\n                           multiline\r\n                           disabled={true}\r\n                           rows={2}\r\n-                          register={register1(\"address\")}\r\n-                          error={errors1?.address?.message}\r\n+                          register={register1(\"description\")}\r\n+                          error={errors1?.description?.message}\r\n                         />\r\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n"
                },
                {
                    "date": 1745392017849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -884,11 +884,9 @@\n                         <InputField\r\n                           label=\"Description\"\r\n                           size=\"small\"\r\n                           placeholder=\"Description\"\r\n-                          multiline\r\n-                          disabled={true}\r\n-                          rows={2}\r\n+                         \r\n                           register={register1(\"description\")}\r\n                           error={errors1?.description?.message}\r\n                         />\r\n                       </Grid>\r\n"
                },
                {
                    "date": 1745392058682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -935,205 +935,9 @@\n \r\n               \r\n               {true && (\r\n                 <Grid container mt={2} spacing={2}>\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Total Amount\"\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Total Amount\"\r\n-                      register={register1(\"total\", {\r\n-                        required: \"please enter total .\",\r\n-                      })}\r\n-                      error={errors1?.total?.message}\r\n-                    />\r\n-                  </Grid>\r\n-               \r\n-                  \r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Paid Amount\"\r\n-\r\n-                      disabled={true}\r\n-                      size=\"small\"\r\n-                      placeholder=\"Enter amount\"\r\n-\r\n-                      register={register1(\"amount\", {\r\n-                        required: false,\r\n-\r\n-                      })}\r\n-                      error={errors1?.amount?.message}\r\n-                    />\r\n-                  </Grid>\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Balance Amount\"\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Balance Amount\"\r\n-                      register={register1(\"balance\", {\r\n-                        required: \"please enter balance .\",\r\n-                      })}\r\n-                      error={errors1?.balance?.message}\r\n-                    />\r\n-                  </Grid>\r\n-\r\n-                  <Grid item md={3} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Narration\"\r\n-                      size=\"small\"\r\n-                      placeholder=\"Narration\"\r\n-                      register={register1(\"narration\")}\r\n-                      error={errors1?.narration?.message}\r\n-                    />\r\n-                  </Grid>\r\n-\r\n-                  <Grid container p={2} spacing={2}>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Amount\"\r\n-                        size=\"small\"\r\n-\r\n-                        placeholder=\"Amount\"\r\n-                        register={register1(\"payamount\", {\r\n-                          required: false,\r\n-                        })}\r\n-                        error={errors1?.payamount?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n-                      <SelectField\r\n-                        label=\"Payment Mode\"\r\n-                        size=\"small\"\r\n-                        options={[\r\n-                          { id: \"Cash\", name: \"Cash\" },\r\n-                          { id: \"Bank\", name: \"Bank\" },\r\n-                          { id: \"Card\", name: \"Card\" },\r\n-                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n-                        ]}\r\n-                        selected={watch1(\"payment\")}\r\n-                        onSelect={(value) => {\r\n-                          setValue1(\"payment\", value)\r\n-                          setSelectedMode(value)\r\n-                        }}\r\n-                        register={register1(\"payment\", {\r\n-                          required: \"Please select payment mode\",\r\n-                        })}\r\n-                        error={errors1?.payment?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    {selectedMode?.id == \"Bank\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Banks\"\r\n-                          size=\"small\"\r\n-                          options={banks}\r\n-                          selected={selectedBank}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedBank(value)\r\n-                          }}\r\n-                          register={register1(\"bank\", {\r\n-                            required: \"Please select a bank\",\r\n-                          })}\r\n-                          error={errors1?.bank?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Card\"\r\n-                          size=\"small\"\r\n-                          options={cards}\r\n-                          selected={selectedCard}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCard(value)\r\n-                          }}\r\n-                          register={register1(\"card\", {\r\n-                            required: \"Please select a card\",\r\n-                          })}\r\n-                          error={errors1?.card?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Authorization Code\"\r\n-                        size=\"small\"\r\n-                        placeholder=\"Authorization Code\"\r\n-                        register={register1(\"remarks\", {\r\n-                          required: \"Please enter code\",\r\n-                        })}\r\n-                        error={errors1?.remarks?.message}\r\n-                      />\r\n-                    </Grid>}\r\n-                    <Grid item md={12} sm={12} xs={12}>\r\n-                      <Button\r\n-                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n-\r\n-                        variant=\"contained\"\r\n-                        sx={{\r\n-                          textTransform: \"capitalize\",\r\n-                          backgroundColor: \"#bd9b4a\",\r\n-                          width: \"200px\",\r\n-                          \":hover\": {\r\n-                            backgroundColor: \"rgb(189 155 74)\",\r\n-                          },\r\n-                        }}\r\n-                      >\r\n-                        Add New Method\r\n-                      </Button>\r\n-\r\n-                      \r\n-                    </Grid>\r\n-                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n-\r\n-                      Payment Details\r\n-                    </Typography>\r\n-\r\n-                    <Grid container mt={2} p={2}>\r\n-                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n-                        {payments.map((payment, index) => (\r\n-                          <Box\r\n-                            key={index}\r\n-                            sx={{\r\n-                              border: '1px solid #ccc',\r\n-                              borderRadius: 2,\r\n-                              width: '30%',\r\n-                              p: 2,\r\n-                              mb: 1,\r\n-                              backgroundColor: '#f9f9f9',\r\n-                              position: 'relative',\r\n-                            }}\r\n-                          >\r\n-                            <IconButton\r\n-                              size=\"small\"\r\n-                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n-                              onClick={() => {\r\n-                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n-                                setPayments(updatedPayments);\r\n-                              }}\r\n-                            >\r\n-                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n-                            </IconButton>\r\n-\r\n-                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n-                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n-                            {payment.mode === 'Bank' && (\r\n-                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n-                            )}\r\n-                            {payment.mode === 'Card' && (\r\n-                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n-                            )}\r\n-                          </Box>\r\n-                        ))}\r\n-                      </Box>\r\n-                    </Grid>\r\n-                    <Grid>\r\n-\r\n-                    </Grid>\r\n-                  </Grid>\r\n+                 \r\n                   <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                     <Button\r\n                       type=\"submit\"\r\n                       disabled={rows?.length == 0 || buttonDisabled}\r\n"
                },
                {
                    "date": 1745392068521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -935,9 +935,155 @@\n \r\n               \r\n               {true && (\r\n                 <Grid container mt={2} spacing={2}>\r\n-                 \r\n+                  \r\n+\r\n+                  <Grid container p={2} spacing={2}>\r\n+                    <Grid item md={3} sm={12} xs={12}>\r\n+                      <InputField\r\n+                        label=\"Amount\"\r\n+                        size=\"small\"\r\n+\r\n+                        placeholder=\"Amount\"\r\n+                        register={register1(\"payamount\", {\r\n+                          required: false,\r\n+                        })}\r\n+                        error={errors1?.payamount?.message}\r\n+                      />\r\n+                    </Grid>\r\n+                    <Grid item md={3} sm={12} xs={12}>\r\n+                      <SelectField\r\n+                        label=\"Payment Mode\"\r\n+                        size=\"small\"\r\n+                        options={[\r\n+                          { id: \"Cash\", name: \"Cash\" },\r\n+                          { id: \"Bank\", name: \"Bank\" },\r\n+                          { id: \"Card\", name: \"Card\" },\r\n+                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n+                        ]}\r\n+                        selected={watch1(\"payment\")}\r\n+                        onSelect={(value) => {\r\n+                          setValue1(\"payment\", value)\r\n+                          setSelectedMode(value)\r\n+                        }}\r\n+                        register={register1(\"payment\", {\r\n+                          required: \"Please select payment mode\",\r\n+                        })}\r\n+                        error={errors1?.payment?.message}\r\n+                      />\r\n+                    </Grid>\r\n+                    {selectedMode?.id == \"Bank\" && (\r\n+                      <Grid item md={3} sm={12} xs={12}>\r\n+                        <SelectField\r\n+                          label=\"Banks\"\r\n+                          size=\"small\"\r\n+                          options={banks}\r\n+                          selected={selectedBank}\r\n+                          onSelect={(value) => {\r\n+                            setSelectedBank(value)\r\n+                          }}\r\n+                          register={register1(\"bank\", {\r\n+                            required: \"Please select a bank\",\r\n+                          })}\r\n+                          error={errors1?.bank?.message}\r\n+                        />\r\n+                      </Grid>\r\n+                    )}\r\n+                    {selectedMode?.id == \"Card\" && (\r\n+                      <Grid item md={3} sm={12} xs={12}>\r\n+                        <SelectField\r\n+                          label=\"Card\"\r\n+                          size=\"small\"\r\n+                          options={cards}\r\n+                          selected={selectedCard}\r\n+                          onSelect={(value) => {\r\n+                            setSelectedCard(value)\r\n+                          }}\r\n+                          register={register1(\"card\", {\r\n+                            required: \"Please select a card\",\r\n+                          })}\r\n+                          error={errors1?.card?.message}\r\n+                        />\r\n+                      </Grid>\r\n+                    )}\r\n+                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n+                      <InputField\r\n+                        label=\"Authorization Code\"\r\n+                        size=\"small\"\r\n+                        placeholder=\"Authorization Code\"\r\n+                        register={register1(\"remarks\", {\r\n+                          required: \"Please enter code\",\r\n+                        })}\r\n+                        error={errors1?.remarks?.message}\r\n+                      />\r\n+                    </Grid>}\r\n+                    <Grid item md={12} sm={12} xs={12}>\r\n+                      <Button\r\n+                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n+\r\n+                        variant=\"contained\"\r\n+                        sx={{\r\n+                          textTransform: \"capitalize\",\r\n+                          backgroundColor: \"#bd9b4a\",\r\n+                          width: \"200px\",\r\n+                          \":hover\": {\r\n+                            backgroundColor: \"rgb(189 155 74)\",\r\n+                          },\r\n+                        }}\r\n+                      >\r\n+                        Add New Method\r\n+                      </Button>\r\n+\r\n+                      \r\n+                    </Grid>\r\n+                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n+\r\n+                      Payment Details\r\n+                    </Typography>\r\n+\r\n+                    <Grid container mt={2} p={2}>\r\n+                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n+                        {payments.map((payment, index) => (\r\n+                          <Box\r\n+                            key={index}\r\n+                            sx={{\r\n+                              border: '1px solid #ccc',\r\n+                              borderRadius: 2,\r\n+                              width: '30%',\r\n+                              p: 2,\r\n+                              mb: 1,\r\n+                              backgroundColor: '#f9f9f9',\r\n+                              position: 'relative',\r\n+                            }}\r\n+                          >\r\n+                            <IconButton\r\n+                              size=\"small\"\r\n+                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n+                              onClick={() => {\r\n+                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n+                                setPayments(updatedPayments);\r\n+                              }}\r\n+                            >\r\n+                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n+                            </IconButton>\r\n+\r\n+                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n+                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n+                            {payment.mode === 'Bank' && (\r\n+                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n+                            )}\r\n+                            {payment.mode === 'Card' && (\r\n+                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n+                            )}\r\n+                          </Box>\r\n+                        ))}\r\n+                      </Box>\r\n+                    </Grid>\r\n+                    <Grid>\r\n+\r\n+                    </Grid>\r\n+                  </Grid>\r\n                   <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                     <Button\r\n                       type=\"submit\"\r\n                       disabled={rows?.length == 0 || buttonDisabled}\r\n"
                },
                {
                    "date": 1745392096455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,10 +917,60 @@\n                           }}\r\n                         />\r\n                       </Grid>\r\n                     \r\n-                    \r\n+                      <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                    <InputField\r\n+                      label=\"Total Amount\"\r\n+                      size=\"small\"\r\n+                      disabled={true}\r\n+                      placeholder=\"Total Amount\"\r\n+                      register={register1(\"total\", {\r\n+                        required: \"please enter total .\",\r\n+                      })}\r\n+                      error={errors1?.total?.message}\r\n+                    />\r\n+                  </Grid>\r\n+               \r\n+                  \r\n+                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                    <InputField\r\n+                      label=\"Paid Amount\"\r\n \r\n+                      disabled={true}\r\n+                      size=\"small\"\r\n+                      placeholder=\"Enter amount\"\r\n+\r\n+                      register={register1(\"amount\", {\r\n+                        required: false,\r\n+\r\n+                      })}\r\n+                      error={errors1?.amount?.message}\r\n+                    />\r\n+                  </Grid>\r\n+                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                    <InputField\r\n+                      label=\"Balance Amount\"\r\n+                      size=\"small\"\r\n+                      disabled={true}\r\n+                      placeholder=\"Balance Amount\"\r\n+                      register={register1(\"balance\", {\r\n+                        required: \"please enter balance .\",\r\n+                      })}\r\n+                      error={errors1?.balance?.message}\r\n+                    />\r\n+                  </Grid>\r\n+\r\n+                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                    <InputField\r\n+                      label=\"Narration\"\r\n+                      size=\"small\"\r\n+                      placeholder=\"Narration\"\r\n+                      register={register1(\"narration\")}\r\n+                      error={errors1?.narration?.message}\r\n+                    />\r\n+                  </Grid>\r\n+\r\n                     \r\n \r\n                     \r\n                    \r\n"
                },
                {
                    "date": 1745392102629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,9 +917,9 @@\n                           }}\r\n                         />\r\n                       </Grid>\r\n                     \r\n-                      <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                      <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n                       size=\"small\"\r\n                       disabled={true}\r\n@@ -931,9 +931,9 @@\n                     />\r\n                   </Grid>\r\n                \r\n                   \r\n-                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                  <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Paid Amount\"\r\n \r\n                       disabled={true}\r\n@@ -946,9 +946,9 @@\n                       })}\r\n                       error={errors1?.amount?.message}\r\n                     />\r\n                   </Grid>\r\n-                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                  <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Balance Amount\"\r\n                       size=\"small\"\r\n                       disabled={true}\r\n@@ -959,9 +959,9 @@\n                       error={errors1?.balance?.message}\r\n                     />\r\n                   </Grid>\r\n \r\n-                  <Grid item marginBlockEnd={.8} sm={12} xs={12}>\r\n+                  <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Narration\"\r\n                       size=\"small\"\r\n                       placeholder=\"Narration\"\r\n"
                },
                {
                    "date": 1745392130626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -987,153 +987,9 @@\n               {true && (\r\n                 <Grid container mt={2} spacing={2}>\r\n                   \r\n \r\n-                  <Grid container p={2} spacing={2}>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Amount\"\r\n-                        size=\"small\"\r\n-\r\n-                        placeholder=\"Amount\"\r\n-                        register={register1(\"payamount\", {\r\n-                          required: false,\r\n-                        })}\r\n-                        error={errors1?.payamount?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n-                      <SelectField\r\n-                        label=\"Payment Mode\"\r\n-                        size=\"small\"\r\n-                        options={[\r\n-                          { id: \"Cash\", name: \"Cash\" },\r\n-                          { id: \"Bank\", name: \"Bank\" },\r\n-                          { id: \"Card\", name: \"Card\" },\r\n-                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n-                        ]}\r\n-                        selected={watch1(\"payment\")}\r\n-                        onSelect={(value) => {\r\n-                          setValue1(\"payment\", value)\r\n-                          setSelectedMode(value)\r\n-                        }}\r\n-                        register={register1(\"payment\", {\r\n-                          required: \"Please select payment mode\",\r\n-                        })}\r\n-                        error={errors1?.payment?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    {selectedMode?.id == \"Bank\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Banks\"\r\n-                          size=\"small\"\r\n-                          options={banks}\r\n-                          selected={selectedBank}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedBank(value)\r\n-                          }}\r\n-                          register={register1(\"bank\", {\r\n-                            required: \"Please select a bank\",\r\n-                          })}\r\n-                          error={errors1?.bank?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Card\"\r\n-                          size=\"small\"\r\n-                          options={cards}\r\n-                          selected={selectedCard}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCard(value)\r\n-                          }}\r\n-                          register={register1(\"card\", {\r\n-                            required: \"Please select a card\",\r\n-                          })}\r\n-                          error={errors1?.card?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Authorization Code\"\r\n-                        size=\"small\"\r\n-                        placeholder=\"Authorization Code\"\r\n-                        register={register1(\"remarks\", {\r\n-                          required: \"Please enter code\",\r\n-                        })}\r\n-                        error={errors1?.remarks?.message}\r\n-                      />\r\n-                    </Grid>}\r\n-                    <Grid item md={12} sm={12} xs={12}>\r\n-                      <Button\r\n-                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n-\r\n-                        variant=\"contained\"\r\n-                        sx={{\r\n-                          textTransform: \"capitalize\",\r\n-                          backgroundColor: \"#bd9b4a\",\r\n-                          width: \"200px\",\r\n-                          \":hover\": {\r\n-                            backgroundColor: \"rgb(189 155 74)\",\r\n-                          },\r\n-                        }}\r\n-                      >\r\n-                        Add New Method\r\n-                      </Button>\r\n-\r\n-                      \r\n-                    </Grid>\r\n-                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n-\r\n-                      Payment Details\r\n-                    </Typography>\r\n-\r\n-                    <Grid container mt={2} p={2}>\r\n-                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n-                        {payments.map((payment, index) => (\r\n-                          <Box\r\n-                            key={index}\r\n-                            sx={{\r\n-                              border: '1px solid #ccc',\r\n-                              borderRadius: 2,\r\n-                              width: '30%',\r\n-                              p: 2,\r\n-                              mb: 1,\r\n-                              backgroundColor: '#f9f9f9',\r\n-                              position: 'relative',\r\n-                            }}\r\n-                          >\r\n-                            <IconButton\r\n-                              size=\"small\"\r\n-                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n-                              onClick={() => {\r\n-                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n-                                setPayments(updatedPayments);\r\n-                              }}\r\n-                            >\r\n-                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n-                            </IconButton>\r\n-\r\n-                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n-                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n-                            {payment.mode === 'Bank' && (\r\n-                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n-                            )}\r\n-                            {payment.mode === 'Card' && (\r\n-                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n-                            )}\r\n-                          </Box>\r\n-                        ))}\r\n-                      </Box>\r\n-                    </Grid>\r\n-                    <Grid>\r\n-\r\n-                    </Grid>\r\n-                  </Grid>\r\n+               \r\n                   <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                     <Button\r\n                       type=\"submit\"\r\n                       disabled={rows?.length == 0 || buttonDisabled}\r\n"
                },
                {
                    "date": 1745392136587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -978,9 +978,154 @@\n                      \r\n                       \r\n                     \r\n                     </Grid>\r\n+                    <Grid container p={2} spacing={2}>\r\n+                    <Grid item md={3} sm={12} xs={12}>\r\n+                      <InputField\r\n+                        label=\"Amount\"\r\n+                        size=\"small\"\r\n+\r\n+                        placeholder=\"Amount\"\r\n+                        register={register1(\"payamount\", {\r\n+                          required: false,\r\n+                        })}\r\n+                        error={errors1?.payamount?.message}\r\n+                      />\r\n+                    </Grid>\r\n+                    <Grid item md={3} sm={12} xs={12}>\r\n+                      <SelectField\r\n+                        label=\"Payment Mode\"\r\n+                        size=\"small\"\r\n+                        options={[\r\n+                          { id: \"Cash\", name: \"Cash\" },\r\n+                          { id: \"Bank\", name: \"Bank\" },\r\n+                          { id: \"Card\", name: \"Card\" },\r\n+                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n+                        ]}\r\n+                        selected={watch1(\"payment\")}\r\n+                        onSelect={(value) => {\r\n+                          setValue1(\"payment\", value)\r\n+                          setSelectedMode(value)\r\n+                        }}\r\n+                        register={register1(\"payment\", {\r\n+                          required: \"Please select payment mode\",\r\n+                        })}\r\n+                        error={errors1?.payment?.message}\r\n+                      />\r\n+                    </Grid>\r\n+                    {selectedMode?.id == \"Bank\" && (\r\n+                      <Grid item md={3} sm={12} xs={12}>\r\n+                        <SelectField\r\n+                          label=\"Banks\"\r\n+                          size=\"small\"\r\n+                          options={banks}\r\n+                          selected={selectedBank}\r\n+                          onSelect={(value) => {\r\n+                            setSelectedBank(value)\r\n+                          }}\r\n+                          register={register1(\"bank\", {\r\n+                            required: \"Please select a bank\",\r\n+                          })}\r\n+                          error={errors1?.bank?.message}\r\n+                        />\r\n+                      </Grid>\r\n+                    )}\r\n+                    {selectedMode?.id == \"Card\" && (\r\n+                      <Grid item md={3} sm={12} xs={12}>\r\n+                        <SelectField\r\n+                          label=\"Card\"\r\n+                          size=\"small\"\r\n+                          options={cards}\r\n+                          selected={selectedCard}\r\n+                          onSelect={(value) => {\r\n+                            setSelectedCard(value)\r\n+                          }}\r\n+                          register={register1(\"card\", {\r\n+                            required: \"Please select a card\",\r\n+                          })}\r\n+                          error={errors1?.card?.message}\r\n+                        />\r\n+                      </Grid>\r\n+                    )}\r\n+                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n+                      <InputField\r\n+                        label=\"Authorization Code\"\r\n+                        size=\"small\"\r\n+                        placeholder=\"Authorization Code\"\r\n+                        register={register1(\"remarks\", {\r\n+                          required: \"Please enter code\",\r\n+                        })}\r\n+                        error={errors1?.remarks?.message}\r\n+                      />\r\n+                    </Grid>}\r\n+                    <Grid item md={12} sm={12} xs={12}>\r\n+                      <Button\r\n+                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n+\r\n+                        variant=\"contained\"\r\n+                        sx={{\r\n+                          textTransform: \"capitalize\",\r\n+                          backgroundColor: \"#bd9b4a\",\r\n+                          width: \"200px\",\r\n+                          \":hover\": {\r\n+                            backgroundColor: \"rgb(189 155 74)\",\r\n+                          },\r\n+                        }}\r\n+                      >\r\n+                        Add New Method\r\n+                      </Button>\r\n+\r\n+                      \r\n+                    </Grid>\r\n+                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n+\r\n+                      Payment Details\r\n+                    </Typography>\r\n+\r\n+                    <Grid container mt={2} p={2}>\r\n+                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n+                        {payments.map((payment, index) => (\r\n+                          <Box\r\n+                            key={index}\r\n+                            sx={{\r\n+                              border: '1px solid #ccc',\r\n+                              borderRadius: 2,\r\n+                              width: '30%',\r\n+                              p: 2,\r\n+                              mb: 1,\r\n+                              backgroundColor: '#f9f9f9',\r\n+                              position: 'relative',\r\n+                            }}\r\n+                          >\r\n+                            <IconButton\r\n+                              size=\"small\"\r\n+                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n+                              onClick={() => {\r\n+                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n+                                setPayments(updatedPayments);\r\n+                              }}\r\n+                            >\r\n+                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n+                            </IconButton>\r\n+\r\n+                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n+                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n+                            {payment.mode === 'Bank' && (\r\n+                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n+                            )}\r\n+                            {payment.mode === 'Card' && (\r\n+                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n+                            )}\r\n+                          </Box>\r\n+                        ))}\r\n+                      </Box>\r\n+                    </Grid>\r\n+                    <Grid>\r\n+\r\n+                    </Grid>\r\n                   </Grid>\r\n+                  </Grid>\r\n                 </Grid>\r\n               </Box>\r\n \r\n               \r\n"
                },
                {
                    "date": 1745392176215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -979,9 +979,9 @@\n                       \r\n                     \r\n                     </Grid>\r\n                     <Grid container p={2} spacing={2}>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n+                    <Grid item md={3.8} sm={12} xs={12}>\r\n                       <InputField\r\n                         label=\"Amount\"\r\n                         size=\"small\"\r\n \r\n@@ -991,9 +991,9 @@\n                         })}\r\n                         error={errors1?.payamount?.message}\r\n                       />\r\n                     </Grid>\r\n-                    <Grid item md={3} sm={12} xs={12}>\r\n+                    <Grid item md={3.8} sm={12} xs={12}>\r\n                       <SelectField\r\n                         label=\"Payment Mode\"\r\n                         size=\"small\"\r\n                         options={[\r\n@@ -1013,9 +1013,9 @@\n                         error={errors1?.payment?.message}\r\n                       />\r\n                     </Grid>\r\n                     {selectedMode?.id == \"Bank\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n+                      <Grid item md={3.8} sm={12} xs={12}>\r\n                         <SelectField\r\n                           label=\"Banks\"\r\n                           size=\"small\"\r\n                           options={banks}\r\n@@ -1030,9 +1030,9 @@\n                         />\r\n                       </Grid>\r\n                     )}\r\n                     {selectedMode?.id == \"Card\" && (\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n+                      <Grid item md={3.8} sm={12} xs={12}>\r\n                         <SelectField\r\n                           label=\"Card\"\r\n                           size=\"small\"\r\n                           options={cards}\r\n@@ -1046,9 +1046,9 @@\n                           error={errors1?.card?.message}\r\n                         />\r\n                       </Grid>\r\n                     )}\r\n-                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n+                    {selectedMode?.id == \"Card\" && <Grid item md={3.8} sm={12} xs={12}>\r\n                       <InputField\r\n                         label=\"Authorization Code\"\r\n                         size=\"small\"\r\n                         placeholder=\"Authorization Code\"\r\n"
                },
                {
                    "date": 1745392248250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -891,9 +891,9 @@\n                         />\r\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n-                          label={\"Invoice Date :*\"}\r\n+                          label={\"Cheque Date :*\"}\r\n                           value={date}\r\n                           size={\"small\"}\r\n                           disabled={fieldsDisabled}\r\n                           error={errors1?.date?.message}\r\n"
                },
                {
                    "date": 1745392277901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -894,9 +894,9 @@\n                         <DatePicker\r\n                           label={\"Cheque Date :*\"}\r\n                           value={date}\r\n                           size={\"small\"}\r\n-                          disabled={fieldsDisabled}\r\n+                        \r\n                           error={errors1?.date?.message}\r\n                           register={register1(\"date\")}\r\n                           onChange={(date) => {\r\n                             setValue1(\"date\", date)\r\n"
                },
                {
                    "date": 1745392300583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -978,9 +978,9 @@\n                      \r\n                       \r\n                     \r\n                     </Grid>\r\n-                    <Grid container p={2} spacing={2}>\r\n+                    <Grid container  spacing={2}>\r\n                     <Grid item md={3.8} sm={12} xs={12}>\r\n                       <InputField\r\n                         label=\"Amount\"\r\n                         size=\"small\"\r\n"
                },
                {
                    "date": 1745392314287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -978,9 +978,9 @@\n                      \r\n                       \r\n                     \r\n                     </Grid>\r\n-                    <Grid container  spacing={2}>\r\n+                    <Grid container  spacing={3}>\r\n                     <Grid item md={3.8} sm={12} xs={12}>\r\n                       <InputField\r\n                         label=\"Amount\"\r\n                         size=\"small\"\r\n"
                },
                {
                    "date": 1745392340617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1076,9 +1076,9 @@\n                       </Button>\r\n \r\n                       \r\n                     </Grid>\r\n-                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n+                    <Typography variant=\"body1\" sx={{ p: 4, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n \r\n                       Payment Details\r\n                     </Typography>\r\n \r\n"
                },
                {
                    "date": 1745392352202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1076,9 +1076,9 @@\n                       </Button>\r\n \r\n                       \r\n                     </Grid>\r\n-                    <Typography variant=\"body1\" sx={{ p: 4, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n+                    <Typography variant=\"body1\" sx={{ p: 3, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n \r\n                       Payment Details\r\n                     </Typography>\r\n \r\n"
                },
                {
                    "date": 1745392415211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,36 @@\n       showErrorToast(`Remaining amount to be added is ${difference.toFixed(2)}`)\r\n     }\r\n   }\r\n \r\n+    // *For Get Customer Queue\r\n+    const getCustomerQueue = async (page, limit, filter) => {\r\n+      setLoader(true)\r\n+  \r\n+      try {\r\n+        const Page = page ? page : currentPage\r\n+        const Limit = limit ? limit : pageLimit\r\n+        const Filter = filter ? { ...filters, ...filter } : null;\r\n+        setCurrentPage(Page)\r\n+        setPageLimit(Limit)\r\n+        setFilters(Filter)\r\n+        let params = {\r\n+          page: Page,\r\n+          limit: Limit,\r\n+          sort_order: sort,\r\n+  \r\n+        }\r\n+        params = { ...params, ...Filter }\r\n+        const { data } = await CustomerServices.getCustomerQueue(params)\r\n+        setCustomerQueue(data?.rows)\r\n+     \r\n+      } catch (error) {\r\n+        showErrorToast(error)\r\n+      } finally {\r\n+        setLoader(false)\r\n+      }\r\n+    }\r\n+\r\n   const handleCredit = async (formData) => {\r\n \r\n \r\n     console.log(detail, 'detail');\r\n"
                },
                {
                    "date": 1745392420779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,18 +263,13 @@\n     const getCustomerQueue = async (page, limit, filter) => {\r\n       setLoader(true)\r\n   \r\n       try {\r\n-        const Page = page ? page : currentPage\r\n-        const Limit = limit ? limit : pageLimit\r\n-        const Filter = filter ? { ...filters, ...filter } : null;\r\n-        setCurrentPage(Page)\r\n-        setPageLimit(Limit)\r\n-        setFilters(Filter)\r\n+    \r\n         let params = {\r\n           page: Page,\r\n           limit: Limit,\r\n-          sort_order: sort,\r\n+    \r\n   \r\n         }\r\n         params = { ...params, ...Filter }\r\n         const { data } = await CustomerServices.getCustomerQueue(params)\r\n"
                },
                {
                    "date": 1745392426981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,10 +265,10 @@\n   \r\n       try {\r\n     \r\n         let params = {\r\n-          page: Page,\r\n-          limit: Limit,\r\n+          page: 1,\r\n+          limit: 1000,\r\n     \r\n   \r\n         }\r\n         params = { ...params, ...Filter }\r\n"
                },
                {
                    "date": 1745392443412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,9 @@\n   const [payments, setPayments] = useState([])\r\n   const [chargesDisabled, setChargesDisabled] = useState(false)\r\n   const [paymentTotal, setPaymentTotal] = useState(0)\r\n   const [creditButton, setCreditButton] = useState(false)\r\n+  const [customerQueue, setCustomerQueue] = useState([])\r\n   //documents array\r\n \r\n   const handleNext = () => {\r\n     setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n@@ -270,9 +271,9 @@\n           limit: 1000,\r\n     \r\n   \r\n         }\r\n-        params = { ...params, ...Filter }\r\n+    \r\n         const { data } = await CustomerServices.getCustomerQueue(params)\r\n         setCustomerQueue(data?.rows)\r\n      \r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1745392478981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -894,9 +894,9 @@\n                         <SelectField\r\n                           size={\"small\"}\r\n                           label={\"Customer *:\"}\r\n                           \r\n-                          options={[{ id: 11002, name: \"Walk-in Customer\" }]}\r\n+                          options={customerQueue}\r\n                           selected={selectedCustomer}\r\n                           onSelect={(value) => {\r\n                             setSelectedCustomer(value)\r\n                           }}\r\n"
                },
                {
                    "date": 1745392509664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -839,8 +839,9 @@\n       // setLoader(false)\r\n     }\r\n   }\r\n   useEffect(() => {\r\n+    getCustomerQueue()\r\n     getBanks()\r\n     getCards()\r\n     getAccounts()\r\n     getTax()\r\n"
                },
                {
                    "date": 1745392597432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -946,9 +946,9 @@\n                       <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n                       size=\"small\"\r\n-                      disabled={true}\r\n+                      \r\n                       placeholder=\"Total Amount\"\r\n                       register={register1(\"total\", {\r\n                         required: \"please enter total .\",\r\n                       })}\r\n"
                },
                {
                    "date": 1745392606457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -946,9 +946,9 @@\n                       <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n                       size=\"small\"\r\n-                      \r\n+                      disabled={payments.length == 0}\r\n                       placeholder=\"Total Amount\"\r\n                       register={register1(\"total\", {\r\n                         required: \"please enter total .\",\r\n                       })}\r\n"
                },
                {
                    "date": 1745392620199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -946,9 +946,9 @@\n                       <Grid item md={3.8} sm={12} xs={12}>\r\n                     <InputField\r\n                       label=\"Total Amount\"\r\n                       size=\"small\"\r\n-                      disabled={payments.length == 0}\r\n+                      disabled={payments.length != 0}\r\n                       placeholder=\"Total Amount\"\r\n                       register={register1(\"total\", {\r\n                         required: \"please enter total .\",\r\n                       })}\r\n"
                },
                {
                    "date": 1745392679559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -598,9 +598,9 @@\n     }\r\n   }\r\n \r\n   const addPayments = (amount, mode, bank, card, code, submit = null) => {\r\n-    const total = parseFloat(getValues1(\"finalTotal\")) || 0;\r\n+    const total = parseFloat(getValues1(\"total\")) || 0;\r\n \r\n \r\n     // Convert amount to number for calculation\r\n     const currentAmount = parseFloat(amount) || 0;\r\n"
                },
                {
                    "date": 1745392733060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n           \"additionalCharges\",\r\n           0,\r\n         )\r\n         setValue1(\r\n-          \"finalTotal\",\r\n+          \"total\",\r\n           (\r\n             Number.parseFloat(data?.receipt?.total_amount) +\r\n             data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n               const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n@@ -664,9 +664,9 @@\n   };\r\n   useEffect(() => {\r\n     console.log(payments, 'paymentspayments');\r\n \r\n-    const total = parseFloat(getValues1(\"finalTotal\")) || 0;\r\n+    const total = parseFloat(getValues1(\"total\")) || 0;\r\n     const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n     console.log(total, 'total');\r\n     console.log(existingTotal, 'existingTotal');\r\n     console.log(total, 'total');\r\n@@ -777,9 +777,9 @@\n           \"additionalCharges\",\r\n           0,\r\n         )\r\n         setValue1(\r\n-          \"finalTotal\",\r\n+          \"total\",\r\n           (\r\n             Number.parseFloat(data?.receipt?.total_amount) +\r\n             data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n               const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n"
                },
                {
                    "date": 1745392844657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1161,9 +1161,9 @@\n                \r\n                   <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                     <Button\r\n                       type=\"submit\"\r\n-                      disabled={rows?.length == 0 || buttonDisabled}\r\n+                      disabled={rows?.length == 0 }\r\n                       variant=\"contained\"\r\n                       sx={{\r\n                         textTransform: \"capitalize\",\r\n                         backgroundColor: \"#bd9b4a\",\r\n"
                },
                {
                    "date": 1745392890122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1161,9 +1161,9 @@\n                \r\n                   <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                     <Button\r\n                       type=\"submit\"\r\n-                      disabled={rows?.length == 0 }\r\n+                      disabled={payments?.length == 0 }\r\n                       variant=\"contained\"\r\n                       sx={{\r\n                         textTransform: \"capitalize\",\r\n                         backgroundColor: \"#bd9b4a\",\r\n"
                },
                {
                    "date": 1745392924161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n         setButtonDisabled(false)\r\n       }\r\n     }\r\n     else {\r\n-      const difference = getValues1('finalTotal') - existingTotal;\r\n+      const difference = getValues1('total') - existingTotal;\r\n       showErrorToast(`Remaining amount to be added is ${difference.toFixed(2)}`)\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1745393020810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,16 +917,16 @@\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n                           label={\"Cheque Date :*\"}\r\n-                          value={date}\r\n+                          value={ChequeDate}\r\n                           size={\"small\"}\r\n                         \r\n-                          error={errors1?.date?.message}\r\n-                          register={register1(\"date\")}\r\n+                          error={errors1?.ChequeDate?.message}\r\n+                          register={register1(\"ChequeDate\")}\r\n                           onChange={(date) => {\r\n-                            setValue1(\"date\", date)\r\n-                            setDate(new Date(date))\r\n+                            setValue1(\"ChequeDate\", date)\r\n+                            setChequeDate(new Date(date))\r\n                           }}\r\n                         />\r\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n"
                },
                {
                    "date": 1745393041039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,13 +917,13 @@\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n                           label={\"Cheque Date :*\"}\r\n-                          value={ChequeDate}\r\n+                          value={centerhequeDate}\r\n                           size={\"small\"}\r\n                         \r\n-                          error={errors1?.ChequeDate?.message}\r\n-                          register={register1(\"ChequeDate\")}\r\n+                          error={errors1?.chequeDate?.message}\r\n+                          register={register1(\"chequeDate\")}\r\n                           onChange={(date) => {\r\n                             setValue1(\"ChequeDate\", date)\r\n                             setChequeDate(new Date(date))\r\n                           }}\r\n"
                },
                {
                    "date": 1745393058999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -917,9 +917,9 @@\n                       </Grid>\r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n                           label={\"Cheque Date :*\"}\r\n-                          value={centerhequeDate}\r\n+                          value={chequeDate}\r\n                           size={\"small\"}\r\n                         \r\n                           error={errors1?.chequeDate?.message}\r\n                           register={register1(\"chequeDate\")}\r\n"
                },
                {
                    "date": 1745393080964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,8 +165,9 @@\n   const [balanceType, setBalanceType] = useState(null)\r\n   const [imageURL, setImageURL] = useState(null)\r\n   const fileInputRef = useRef(null)\r\n   const [hovered, setHovered] = useState(false)\r\n+  const [chequeDate, setChequeDate] = useState(null)\r\n   const [accounts, setAccounts] = useState([])\r\n   const [salesAccount, setSalesAccount] = useState(null)\r\n   const [inventoryAccount, setInventoryAccount] = useState(null)\r\n   const [cogsAccount, setCogsAccount] = useState(null)\r\n@@ -923,9 +924,9 @@\n                         \r\n                           error={errors1?.chequeDate?.message}\r\n                           register={register1(\"chequeDate\")}\r\n                           onChange={(date) => {\r\n-                            setValue1(\"ChequeDate\", date)\r\n+                            setValue1(\"chequeDate\", date)\r\n                             setChequeDate(new Date(date))\r\n                           }}\r\n                         />\r\n                       </Grid>\r\n"
                },
                {
                    "date": 1745393160191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,8 @@\n   const [balanceType, setBalanceType] = useState(null)\r\n   const [imageURL, setImageURL] = useState(null)\r\n   const fileInputRef = useRef(null)\r\n   const [hovered, setHovered] = useState(false)\r\n-  const [chequeDate, setChequeDate] = useState(null)\r\n   const [accounts, setAccounts] = useState([])\r\n   const [salesAccount, setSalesAccount] = useState(null)\r\n   const [inventoryAccount, setInventoryAccount] = useState(null)\r\n   const [cogsAccount, setCogsAccount] = useState(null)\r\n@@ -915,24 +914,11 @@\n                           register={register1(\"description\")}\r\n                           error={errors1?.description?.message}\r\n                         />\r\n                       </Grid>\r\n+                 \r\n                     <Grid item md={3.8} sm={5.5} xs={12}>\r\n                         <DatePicker\r\n-                          label={\"Cheque Date :*\"}\r\n-                          value={chequeDate}\r\n-                          size={\"small\"}\r\n-                        \r\n-                          error={errors1?.chequeDate?.message}\r\n-                          register={register1(\"chequeDate\")}\r\n-                          onChange={(date) => {\r\n-                            setValue1(\"chequeDate\", date)\r\n-                            setChequeDate(new Date(date))\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <DatePicker\r\n                           label={\"Payment Date :*\"}\r\n                           value={date}\r\n                           size={\"small\"}\r\n                           error={errors1?.date?.message}\r\n"
                },
                {
                    "date": 1745393446622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,8 +216,9 @@\n       try {\r\n         const obj = {\r\n           id: getValues1(\"invoicenumber\"),\r\n           total_amount: detail?.total_amount,\r\n+          customer_id:selectedCustomer?.id\r\n           items: rows,\r\n           paid_date: paidAt || new Date(),\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n"
                },
                {
                    "date": 1745393479968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,10 @@\n       try {\r\n         const obj = {\r\n           id: getValues1(\"invoicenumber\"),\r\n           total_amount: detail?.total_amount,\r\n-          customer_id:selectedCustomer?.id\r\n+          customer_id:selectedCustomer?.id,\r\n+          customer_account_id:selectedCustomer?.receivable_account_id\r\n           items: rows,\r\n           paid_date: paidAt || new Date(),\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n"
                },
                {
                    "date": 1745393494661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,10 @@\n         const obj = {\r\n           id: getValues1(\"invoicenumber\"),\r\n           total_amount: detail?.total_amount,\r\n           customer_id:selectedCustomer?.id,\r\n-          customer_account_id:selectedCustomer?.receivable_account_id\r\n+          customer_name:selectedCustomer?.name,\r\n+          customer_account_id:selectedCustomer?.receivable_account_id,\r\n           items: rows,\r\n           paid_date: paidAt || new Date(),\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n"
                },
                {
                    "date": 1745393512265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,9 +220,9 @@\n           customer_id:selectedCustomer?.id,\r\n           customer_name:selectedCustomer?.name,\r\n           customer_account_id:selectedCustomer?.receivable_account_id,\r\n           items: rows,\r\n-          paid_date: paidAt || new Date(),\r\n+          date: paidAt || new Date(),\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n           additional_charges_value: formData?.additionalCharges,\r\n           remarks: formData?.remarks,\r\n"
                },
                {
                    "date": 1745393526531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,16 +220,16 @@\n           customer_id:selectedCustomer?.id,\r\n           customer_name:selectedCustomer?.name,\r\n           customer_account_id:selectedCustomer?.receivable_account_id,\r\n           items: rows,\r\n-          date: paidAt || new Date(),\r\n+          date: date,\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n           additional_charges_value: formData?.additionalCharges,\r\n           remarks: formData?.remarks,\r\n           narration: formData?.narration,\r\n           payment_mode: paymentModesString,\r\n-          payment_status: 'Paid',\r\n+          \r\n           charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.center_fee || 0), 0),\r\n           govt_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.govt_fee || 0), 0),\r\n           bank_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.bank_charge || 0), 0),\r\n \r\n"
                },
                {
                    "date": 1745393532704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,14 +225,12 @@\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n           additional_charges_value: formData?.additionalCharges,\r\n           remarks: formData?.remarks,\r\n-          narration: formData?.narration,\r\n+       \r\n           payment_mode: paymentModesString,\r\n           \r\n-          charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.center_fee || 0), 0),\r\n-          govt_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.govt_fee || 0), 0),\r\n-          bank_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.bank_charge || 0), 0),\r\n+         \r\n \r\n \r\n           customer_id: detail?.customer_id,\r\n           invoice_prefix: detail?.invoice_prefix,\r\n"
                },
                {
                    "date": 1745393540743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n           date: date,\r\n           paid_amount: detail?.amount,\r\n           additional_charges_percentage: formData?.percentage,\r\n           additional_charges_value: formData?.additionalCharges,\r\n-          remarks: formData?.remarks,\r\n+          description: formData?.description,\r\n        \r\n           payment_mode: paymentModesString,\r\n           \r\n          \r\n"
                },
                {
                    "date": 1745393547933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n           customer_name:selectedCustomer?.name,\r\n           customer_account_id:selectedCustomer?.receivable_account_id,\r\n           items: rows,\r\n           date: date,\r\n-          paid_amount: detail?.amount,\r\n+    \r\n           additional_charges_percentage: formData?.percentage,\r\n           additional_charges_value: formData?.additionalCharges,\r\n           description: formData?.description,\r\n        \r\n"
                },
                {
                    "date": 1745393565758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n           \r\n          \r\n \r\n \r\n-          customer_id: detail?.customer_id,\r\n+ \r\n           invoice_prefix: detail?.invoice_prefix,\r\n           category_id: detail?.sale_receipt_items[0]?.service?.category_id,\r\n           payment_methods: payments\r\n         }\r\n"
                },
                {
                    "date": 1745393571715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1175 @@\n+\"use client\"\r\n+\r\n+import React, { useEffect, useRef, useState } from \"react\"\r\n+import {\r\n+    Box,\r\n+    Grid,\r\n+    IconButton,\r\n+    Table,\r\n+    TableCell,\r\n+    TableContainer,\r\n+    TableRow,\r\n+    Typography,\r\n+    TableBody,\r\n+    TableHead,\r\n+    TextField,\r\n+    Paper,\r\n+} from \"@mui/material\"\r\n+import { useTheme } from \"@mui/material/styles\"\r\n+import Button from \"@mui/material/Button\"\r\n+import { PrimaryButton } from \"components/Buttons\"\r\n+import { useForm } from \"react-hook-form\"\r\n+import InputField from \"components/Input\"\r\n+import DatePicker from \"components/DatePicker\"\r\n+import { ErrorToaster } from \"components/Toaster\"\r\n+import SelectField from \"components/Select\"\r\n+import CustomerServices from \"services/Customer\"\r\n+import { showErrorToast, showPromiseToast, showSuccessToast } from \"components/NewToaster\"\r\n+import moment from \"moment\"\r\n+import { useNavigate } from \"react-router-dom\"\r\n+import { useAuth } from \"context/UseContext\"\r\n+import FinanceServices from \"services/Finance\"\r\n+import SearchIcon from \"@mui/icons-material/Search\"\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+// import { TableBody, TableHead } from \"mui-datatables\";\r\n+\r\n+function CreateCustomerPayment() {\r\n+    const theme = useTheme()\r\n+    const { user } = useAuth()\r\n+    const navigate = useNavigate()\r\n+    const [formChange, setFormChange] = useState(false)\r\n+    const [submit, setSubmit] = useState(false)\r\n+    const [excludeFromSales, setExcludeFromSales] = useState(\"no\")\r\n+    const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\")\r\n+    const [total, setTotal] = useState(0)\r\n+    const [subTotal, setSubTotal] = useState(0)\r\n+    const [payButton, setPayButton] = useState(false)\r\n+    const [rows, setRows] = useState([])\r\n+    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n+    const [amountError, setAmountError] = useState(\"\")\r\n+    console.log(rows, \"data\")\r\n+    const [items, setItems] = useState([\r\n+        {\r\n+            itemCode: \"\",\r\n+            itemDescription: \"TASHEEL AUTO 19\",\r\n+            totalCharge: 17.1,\r\n+            mbNo: \"\",\r\n+            applicationId: \"\",\r\n+            total: 17.1,\r\n+        },\r\n+    ])\r\n+\r\n+    // const addItem = () => {\r\n+    //   const newItem = {\r\n+    //     itemCode: \"\",\r\n+    //     itemDescription: \"\",\r\n+    //     totalCharge: 0,\r\n+    //     mbNo: \"\",\r\n+    //     applicationId: \"\",\r\n+    //     total: 0,\r\n+    //   };\r\n+    //   setItems([...items, newItem]);\r\n+    // };\r\n+\r\n+    const {\r\n+        register,\r\n+        handleSubmit,\r\n+        getValues,\r\n+        setValue,\r\n+        watch,\r\n+        reset,\r\n+        formState: { errors },\r\n+    } = useForm()\r\n+    const {\r\n+        register: register1,\r\n+        handleSubmit: handleSubmit1,\r\n+        setValue: setValue1,\r\n+        getValues: getValues1,\r\n+        control,\r\n+        watch: watch1,\r\n+        formState: { errors: errors1 },\r\n+    } = useForm({\r\n+        defaultValues: {\r\n+            amount: \"\",\r\n+            payment: null,\r\n+            bank: null,\r\n+            card: null,\r\n+        },\r\n+    })\r\n+\r\n+    // Watch all form data\r\n+\r\n+    // Watch for changes in the fee-related fields\r\n+    const govtFee = watch(\"govt_fee\", 0)\r\n+    const centerFee = watch(\"center_fee\", 0)\r\n+    const bankCharges = watch(\"bank_charges\", 0)\r\n+    const qty = watch(\"qty\", 1)\r\n+    const paymentAmount = watch1(\"amount\", 0)\r\n+    const paymentMethod = watch1(\"payment\")\r\n+    console.log(errors1);\r\n+\r\n+    useEffect(() => {\r\n+        const feesTotal =\r\n+            (Number.parseFloat(govtFee) || 0) + (Number.parseFloat(centerFee) || 0) + (Number.parseFloat(bankCharges) || 0)\r\n+        const finalTotal = feesTotal * (Number.parseFloat(qty) || 1)\r\n+        setValue(\"total\", finalTotal)\r\n+    }, [govtFee, centerFee, bankCharges, qty])\r\n+\r\n+\r\n+    const addItem = (data) => {\r\n+        const total = data.total\r\n+        setRows((prevRows) => {\r\n+            const updatedRows = [...prevRows, data]\r\n+            const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0)\r\n+            setSubTotal(newSubTotal)\r\n+            return updatedRows\r\n+        })\r\n+        reset()\r\n+        setServiceItem(\"\")\r\n+    }\r\n+\r\n+    const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"]\r\n+    const [guarantors, setGuarantors] = useState([])\r\n+    const [activeStep, setActiveStep] = React.useState(1)\r\n+\r\n+    // *For Deposit Slip\r\n+    const [progress, setProgress] = useState(0)\r\n+    const [uploadedSize, setUploadedSize] = useState(0)\r\n+    const [slipDetail, setSlipDetail] = useState([])\r\n+\r\n+    const [selectedDue, setSelectedDue] = useState({\r\n+        id: \"Instant\",\r\n+        name: \"Instant\",\r\n+    })\r\n+    const [passport, setPassport] = useState()\r\n+    const [allocation, setAllocation] = useState(false)\r\n+    const [depositError, setDepositError] = useState(false)\r\n+    const [loading, setLoading] = useState(false)\r\n+    const [emailVerify, setEmailVerify] = useState(false)\r\n+    const [isUploading, setIsUploading] = useState(false)\r\n+    const [selectedBank, setSelectedBank] = useState(null)\r\n+    const [loader, setLoader] = useState(false)\r\n+    const [totalDepositVal, setTotalDepositVal] = useState(0)\r\n+    console.log(selectedBank, \"objobj\")\r\n+\r\n+    const [center, setCenter] = useState(null)\r\n+    const [status, setStatus] = useState(null)\r\n+    const [fieldsDisabled, setFieldsDisabled] = useState(false)\r\n+\r\n+    // *For Stepper Forms Data\r\n+    const [stepFormData, setStepFormData] = useState()\r\n+    const [step1FormData, setStep1FormData] = useState()\r\n+    const [selectedType, setSelectedType] = useState(null)\r\n+    const [date, setDate] = useState(null)\r\n+    const [paidAt, setPaidAt] = useState(null)\r\n+    const [balanceType, setBalanceType] = useState(null)\r\n+    const [imageURL, setImageURL] = useState(null)\r\n+    const fileInputRef = useRef(null)\r\n+    const [hovered, setHovered] = useState(false)\r\n+    const [accounts, setAccounts] = useState([])\r\n+    const [salesAccount, setSalesAccount] = useState(null)\r\n+    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n+    const [cogsAccount, setCogsAccount] = useState(null)\r\n+    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n+    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n+    const [itemType, setItemType] = useState(null)\r\n+    const [unit, setUnit] = useState(null)\r\n+    const [taxes, setTaxes] = useState([])\r\n+    const [tax, setTax] = useState(null)\r\n+    const [category, setCategory] = useState(null)\r\n+    const [categories, setCategories] = useState(null)\r\n+    const [governmentAccount, setGovernmnentAccount] = useState(null)\r\n+    const [description, setDescription] = useState(null)\r\n+    const [ownGovBank, setOwnGovBank] = useState(null)\r\n+    const [services, setServices] = useState(null)\r\n+    const [serviceItem, setServiceItem] = useState(null)\r\n+    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n+    const [detail, setDetail] = useState(null)\r\n+    const [banks, setBanks] = useState([])\r\n+    const [holdState, setHoldState] = useState(true)\r\n+    const [selectedMode, setSelectedMode] = useState(null)\r\n+    const [cards, setCards] = useState([])\r\n+    const [selectedCard, setSelectedCard] = useState(null)\r\n+    const [selectedCostCenter, setSelectedCostCenter] = useState(null)\r\n+    const [payments, setPayments] = useState([])\r\n+    const [chargesDisabled, setChargesDisabled] = useState(false)\r\n+    const [paymentTotal, setPaymentTotal] = useState(0)\r\n+    const [creditButton, setCreditButton] = useState(false)\r\n+    const [customerQueue, setCustomerQueue] = useState([])\r\n+    //documents array\r\n+\r\n+    const handleNext = () => {\r\n+        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n+    }\r\n+    console.log(\"objobj\", watch1(\"bank\"))\r\n+\r\n+    const submitForm1 = async (formData) => {\r\n+        console.log(formData, \"objobjj\")\r\n+        const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n+        const paymentModesString = payments.map((item) => item.payment_mode).join(\", \");\r\n+\r\n+        console.log(paymentModesString); // Output: \"Cash, Bank, Card\"\r\n+        getValues1('total')\r\n+        if (existingTotal == getValues1('finalTotal')) {\r\n+\r\n+            setButtonDisabled(true)\r\n+            try {\r\n+                const obj = {\r\n+                    id: getValues1(\"invoicenumber\"),\r\n+                    total_amount: detail?.total_amount,\r\n+                    customer_id: selectedCustomer?.id,\r\n+                    customer_name: selectedCustomer?.name,\r\n+                    customer_account_id: selectedCustomer?.receivable_account_id,\r\n+                    items: rows,\r\n+                    date: date,\r\n+\r\n+                    additional_charges_percentage: formData?.percentage,\r\n+                    additional_charges_value: formData?.additionalCharges,\r\n+                    description: formData?.description,\r\n+\r\n+                    payment_mode: paymentModesString,\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+                    payment_methods: payments\r\n+                }\r\n+\r\n+                console.log(obj, \"objobj\")\r\n+                if (detail?.is_paid == true) {\r\n+                    ErrorToaster(\"Already paid\")\r\n+                } else {\r\n+                    const promise = CustomerServices.PayReceipt(obj)\r\n+                    const response = await promise\r\n+                    showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n+                    if (response?.responseCode === 200) {\r\n+                        navigate('/paid-receipts')\r\n+                    }\r\n+                }\r\n+            } catch (error) {\r\n+                ErrorToaster(error)\r\n+            } finally {\r\n+                setButtonDisabled(false)\r\n+            }\r\n+        }\r\n+        else {\r\n+            const difference = getValues1('total') - existingTotal;\r\n+            showErrorToast(`Remaining amount to be added is ${difference.toFixed(2)}`)\r\n+        }\r\n+    }\r\n+\r\n+    // *For Get Customer Queue\r\n+    const getCustomerQueue = async (page, limit, filter) => {\r\n+        setLoader(true)\r\n+\r\n+        try {\r\n+\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+\r\n+\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getCustomerQueue(params)\r\n+            setCustomerQueue(data?.rows)\r\n+\r\n+        } catch (error) {\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+            setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const handleCredit = async (formData) => {\r\n+\r\n+\r\n+        console.log(detail, 'detail');\r\n+\r\n+        try {\r\n+            const obj = {\r\n+                id: detail?.id,\r\n+                customer: selectedCustomer?.id,\r\n+                total_amount: subTotal,\r\n+                final_amount: (\r\n+                    Number.parseFloat(subTotal) +\r\n+                    rows?.reduce((total, item) => {\r\n+                        const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                        const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                        return total + fee * qty\r\n+                    }, 0) *\r\n+                    0.05\r\n+                ).toFixed(2)\r\n+            }\r\n+            console.log(obj, 'detail');\r\n+\r\n+\r\n+            const promise = CustomerServices.CreditReceipt(obj)\r\n+            const response = await promise\r\n+            showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n+            if (response?.responseCode === 200) {\r\n+                navigate('/paid-receipts')\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            setButtonDisabled(false)\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    // *For Get Customer Queue\r\n+    const getBanks = async (page, limit, filter) => {\r\n+        setLoader(true)\r\n+\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getBanks(params)\r\n+            setBanks(data?.banks)\r\n+        } catch (error) {\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+            setLoader(false)\r\n+        }\r\n+    }\r\n+    // *For Get Customer Queue\r\n+    const getCards = async (page, limit, filter) => {\r\n+        setLoader(true)\r\n+\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getCards(params)\r\n+            let cardsData = data?.cards?.map((card) => ({\r\n+                ...card,\r\n+                name: card.account_name,\r\n+            }));\r\n+            setCards(\r\n+                data?.cards?.map((card) => ({\r\n+                    ...card,\r\n+                    name: card.account_name,\r\n+                })),\r\n+\r\n+            )\r\n+\r\n+            setSelectedCard({ id: cardsData[0]?.id, name: cardsData[0]?.name })\r\n+            setValue1(\"card\", { id: cardsData[0]?.id, name: cardsData[0]?.name })\r\n+\r\n+\r\n+        } catch (error) {\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+            setLoader(false)\r\n+        }\r\n+    }\r\n+    // *For Get Account\r\n+    const getReceptionDetail = async (state) => {\r\n+        setFieldsDisabled(true)\r\n+        try {\r\n+            let params = {\r\n+                token_number: getValues1(\"token\"),\r\n+            }\r\n+            if (state) {\r\n+                params = {\r\n+                    invoice_number: getValues1(\"invoicenumber\"),\r\n+                }\r\n+            }\r\n+            const { data } = await CustomerServices.getReceiptDetail(params)\r\n+            console.log(data?.receipt, \"dataaa\")\r\n+            if (data?.receipt) {\r\n+\r\n+                if (data?.receipt?.is_paid) {\r\n+                    ErrorToaster(\"Receipt already Paid\")\r\n+                    return;\r\n+                }\r\n+\r\n+                setRows(data?.receipt?.sale_receipt_items)\r\n+                setDetail(data?.receipt)\r\n+                setCreditButton(true)\r\n+                setValue1(\"paid\", 0)\r\n+                //setValue1(\"customer\", data?.receipt?.customer_name)\r\n+                setValue1(\"invoice_date\", moment().toDate())\r\n+                setDate(new Date(data?.receipt?.invoice_date))\r\n+                setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n+                setValue1(\"ref\", data?.receipt?.ref)\r\n+                setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n+                setValue1(\"email\", data?.receipt?.customer_email)\r\n+                setValue1(\"address\", data?.receipt?.customer_address)\r\n+                setValue1(\"trn\", data?.receipt?.trn)\r\n+                setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setValue1(\"caseno\", data?.receipt?.case_no)\r\n+                setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n+                setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n+                setSubTotal(data?.receipt?.total_amount)\r\n+                setTotalDepositVal((\r\n+                    Number.parseFloat(data?.receipt?.total_amount) +\r\n+                    data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                        const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                        const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                        console.log(fee);\r\n+                        console.log(qty);\r\n+                        console.log(total);\r\n+                        return total + fee * qty\r\n+                    }, 0) *\r\n+                    0.05\r\n+                ))\r\n+                setValue1(\r\n+                    \"total\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"percentage\",\r\n+                    0,\r\n+                )\r\n+                setValue1(\r\n+                    \"additionalCharges\",\r\n+                    0,\r\n+                )\r\n+                setValue1(\r\n+                    \"total\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"balance\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"payamount\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setSelectedCostCenter({ id: data?.receipt?.customer_id, name: data?.receipt?.customer_name })\r\n+                setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setAccounts(data?.accounts?.rows)\r\n+            }\r\n+            else {\r\n+                setCreditButton(false)\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const getServiceItem = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getServiceItem(params)\r\n+\r\n+            setServices(data?.rows)\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+    const handleServiceSelect = async (value) => {\r\n+        console.log(value, \"idididid\")\r\n+        setServiceItem(value)\r\n+        // setLoader(true)\r\n+        try {\r\n+            const params = {\r\n+                service_id: value?.id,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.DetailServiceItem(params)\r\n+            setValue(\"item_code\", data?.service?.id)\r\n+            setValue(\"govt_fee\", data?.service?.bank_service_charge)\r\n+            setValue(\"center_fee\", data?.service?.center_fee)\r\n+            setValue(\"bank_charges\", data?.service?.bank_service_charge)\r\n+\r\n+            setValue(\"qty\", 1)\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const getAccounts = async (page, limit, filter) => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await FinanceServices.getAccounts(params)\r\n+            console.log(data?.accounts?.rows)\r\n+\r\n+            setAccounts(data?.accounts?.rows)\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const handleInputChange = (index, field, value) => {\r\n+        const updatedRows = [...rows]\r\n+        updatedRows[index] = {\r\n+            ...updatedRows[index],\r\n+            [field]: value,\r\n+        }\r\n+        setRows(updatedRows)\r\n+    }\r\n+    console.log(rows)\r\n+\r\n+    const getTax = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await FinanceServices.getTax(params)\r\n+            console.log(data?.accounts?.rows)\r\n+\r\n+            setTaxes(data?.tax)\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const addPayments = (amount, mode, bank, card, code, submit = null) => {\r\n+        const total = parseFloat(getValues1(\"total\")) || 0;\r\n+\r\n+\r\n+        // Convert amount to number for calculation\r\n+        const currentAmount = parseFloat(amount) || 0;\r\n+\r\n+        // Calculate current total of payments\r\n+        const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n+\r\n+        // Check if new total will exceed\r\n+        if (existingTotal + currentAmount > total) {\r\n+            showErrorToast(\"Total payment exceeds the required amount.\");\r\n+            return;\r\n+        }\r\n+\r\n+        // Validation\r\n+        if (!amount) {\r\n+            showErrorToast(\"Amount is required\");\r\n+            return;\r\n+        }\r\n+\r\n+        if (parseFloat(amount) == 0) {\r\n+            showErrorToast(\"Amount is 0\");\r\n+            return;\r\n+        }\r\n+\r\n+\r\n+        if (!mode) {\r\n+            showErrorToast(\"Payment mode is required\");\r\n+            return;\r\n+        }\r\n+\r\n+        if (mode === \"Bank\" && !bank) {\r\n+            showErrorToast(\"Bank is required for Bank mode\");\r\n+            return;\r\n+        }\r\n+\r\n+        if (mode === \"Card\" && !card) {\r\n+            showErrorToast(\"Card is required for Card mode\");\r\n+            return;\r\n+        }\r\n+        if (mode === \"Card\" && !code) {\r\n+            showErrorToast(\"Authorization code is required for Card mode\");\r\n+            return;\r\n+        }\r\n+        const paymentObj = {\r\n+            amount: currentAmount,\r\n+            payment_mode: mode,\r\n+            account_id: mode === \"Bank\" ? bank?.account_id : mode === \"Card\" ? card?.account_id : mode === \"Cash\" ? 700117 : 700171,\r\n+            ref_id: mode === \"Bank\" ? bank?.id : mode === \"Card\" ? card?.id : null,\r\n+            ref_name: mode === \"Bank\" ? bank?.name : mode === \"Card\" ? card?.name : null,\r\n+\r\n+        };\r\n+\r\n+        setPayments((prev) => [...prev, paymentObj]);\r\n+        //setValue1('payamount', '')\r\n+\r\n+        setSelectedBank(null)\r\n+        setSelectedCard(null)\r\n+        setValue1('authCode', '')\r\n+        // setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n+        // setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n+    };\r\n+    useEffect(() => {\r\n+        console.log(payments, 'paymentspayments');\r\n+\r\n+        const total = parseFloat(getValues1(\"total\")) || 0;\r\n+        const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n+        console.log(total, 'total');\r\n+        console.log(existingTotal, 'existingTotal');\r\n+        console.log(total, 'total');\r\n+        console.log(parseFloat(parseFloat(total) - parseFloat(existingTotal)), 'minusval');\r\n+\r\n+        setValue1('amount', parseFloat(existingTotal).toFixed(2))\r\n+        setValue1('balance', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n+        setValue1('payamount', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n+\r\n+        if (payments?.length > 0) {\r\n+            setChargesDisabled(true)\r\n+        }\r\n+        else if (payments?.length == 0) {\r\n+            setChargesDisabled(false)\r\n+        }\r\n+        setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n+        setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n+    }, [payments])\r\n+\r\n+    const getCategories = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            const params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getCategoryList(params)\r\n+\r\n+            setCategories(data?.categories)\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    // *For Get Account\r\n+    const getReceiptDetail = async (state) => {\r\n+        setFieldsDisabled(true)\r\n+        try {\r\n+            const params = {\r\n+                token_number: getValues1(\"token\"),\r\n+                invoice_date: date,\r\n+            }\r\n+\r\n+            const { data } = await CustomerServices.getReceiptDetail(params)\r\n+            console.log(data)\r\n+            if (data?.receipt) {\r\n+                setHoldState(true)\r\n+                setCreditButton(true)\r\n+                setRows(data?.receipt?.sale_receipt_items)\r\n+                setDetail(data?.receipt)\r\n+\r\n+                //alert(\"Data found\")\r\n+                setValue1(\"paid\", 0)\r\n+                //setValue1(\"customer\", data?.receipt?.customer_name)\r\n+                setValue1(\"invoice_date\", moment().toDate())\r\n+                setValue1(\"invoicenumber\", data?.receipt?.id)\r\n+                setDate(new Date(data?.receipt?.invoice_date))\r\n+                setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n+                setValue1(\"ref\", data?.receipt?.ref)\r\n+                setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n+                setValue1(\"email\", data?.receipt?.customer_email)\r\n+                setValue1(\"address\", data?.receipt?.address)\r\n+                setValue1(\"trn\", data?.receipt?.trn)\r\n+                setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setValue1(\"caseno\", data?.receipt?.case_no)\r\n+                setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n+                setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n+                // setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n+                // setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n+                setSubTotal(data?.receipt?.total_amount)\r\n+                setTotalDepositVal((\r\n+                    Number.parseFloat(data?.receipt?.total_amount) +\r\n+                    data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                        const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                        const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                        console.log(fee);\r\n+                        console.log(qty);\r\n+                        console.log(total);\r\n+                        return total + fee * qty\r\n+                    }, 0) *\r\n+                    0.05\r\n+                ))\r\n+                setValue1(\r\n+                    \"total\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"percentage\",\r\n+                    0,\r\n+                )\r\n+                setValue1(\r\n+                    \"additionalCharges\",\r\n+                    0,\r\n+                )\r\n+                setValue1(\r\n+                    \"total\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"balance\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setValue1(\r\n+                    \"payamount\",\r\n+                    (\r\n+                        Number.parseFloat(data?.receipt?.total_amount) +\r\n+                        data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n+                            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n+                            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n+                            console.log(fee);\r\n+                            console.log(qty);\r\n+                            console.log(total);\r\n+                            return total + fee * qty\r\n+\r\n+                        }, 0) *\r\n+                        0.05\r\n+                    ).toFixed(2),\r\n+                )\r\n+                setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n+                setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n+                setAccounts(data?.accounts?.rows)\r\n+            } else {\r\n+                setCreditButton(false)\r\n+                showErrorToast(\"Data Not Found\")\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+    useEffect(() => {\r\n+        getCustomerQueue()\r\n+        getBanks()\r\n+        getCards()\r\n+        getAccounts()\r\n+        getTax()\r\n+        getCategories()\r\n+        getServiceItem()\r\n+        setDate(new Date())\r\n+        setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n+        setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n+        //setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n+        //setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n+    }, [])\r\n+\r\n+    return (\r\n+        <>\r\n+            <Box sx={{ width: \"100%\" }}></Box>\r\n+            <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n+                {\r\n+                    <>\r\n+                        <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n+                            <Box\r\n+                                sx={{\r\n+                                    display: \"flex\",\r\n+                                    justifyContent: \"space-between\",\r\n+                                    gap: \"10px\",\r\n+                                    p: 3,\r\n+                                    alignItems: \"flex-end\",\r\n+                                }}\r\n+                            >\r\n+                                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>Customer Payment</Typography>\r\n+                            </Box>\r\n+\r\n+                            <Box sx={{ p: 3 }}>\r\n+                                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+\r\n+\r\n+\r\n+                                    <Grid\r\n+                                        item\r\n+                                        md={12}\r\n+                                        sm={12}\r\n+                                        xs={12}\r\n+                                        sx={{\r\n+                                            border: \"2px solid black\",\r\n+                                            p: 2,\r\n+                                            borderRadius: \"15px\",\r\n+                                            mt: { md: 0, sm: 2, xs: 2 },\r\n+                                        }}\r\n+                                    >\r\n+                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <SelectField\r\n+                                                    size={\"small\"}\r\n+                                                    label={\"Customer *:\"}\r\n+\r\n+                                                    options={customerQueue}\r\n+                                                    selected={selectedCustomer}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setSelectedCustomer(value)\r\n+                                                    }}\r\n+                                                    error={errors1?.customer?.message}\r\n+                                                    register={register1(\"customer\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Description\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Description\"\r\n+\r\n+                                                    register={register1(\"description\")}\r\n+                                                    error={errors1?.description?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n+                                                <DatePicker\r\n+                                                    label={\"Payment Date :*\"}\r\n+                                                    value={date}\r\n+                                                    size={\"small\"}\r\n+                                                    error={errors1?.date?.message}\r\n+                                                    register={register1(\"paidAt\")}\r\n+                                                    onChange={(date) => {\r\n+                                                        setValue1(\"paidAt\", date)\r\n+                                                        setPaidAt(new Date(date))\r\n+                                                    }}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Total Amount\"\r\n+                                                    size=\"small\"\r\n+                                                    disabled={payments.length != 0}\r\n+                                                    placeholder=\"Total Amount\"\r\n+                                                    register={register1(\"total\", {\r\n+                                                        required: \"please enter total .\",\r\n+                                                    })}\r\n+                                                    error={errors1?.total?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Paid Amount\"\r\n+\r\n+                                                    disabled={true}\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Enter amount\"\r\n+\r\n+                                                    register={register1(\"amount\", {\r\n+                                                        required: false,\r\n+\r\n+                                                    })}\r\n+                                                    error={errors1?.amount?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Balance Amount\"\r\n+                                                    size=\"small\"\r\n+                                                    disabled={true}\r\n+                                                    placeholder=\"Balance Amount\"\r\n+                                                    register={register1(\"balance\", {\r\n+                                                        required: \"please enter balance .\",\r\n+                                                    })}\r\n+                                                    error={errors1?.balance?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Narration\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Narration\"\r\n+                                                    register={register1(\"narration\")}\r\n+                                                    error={errors1?.narration?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+                                        </Grid>\r\n+                                        <Grid container spacing={3}>\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Amount\"\r\n+                                                    size=\"small\"\r\n+\r\n+                                                    placeholder=\"Amount\"\r\n+                                                    register={register1(\"payamount\", {\r\n+                                                        required: false,\r\n+                                                    })}\r\n+                                                    error={errors1?.payamount?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <SelectField\r\n+                                                    label=\"Payment Mode\"\r\n+                                                    size=\"small\"\r\n+                                                    options={[\r\n+                                                        { id: \"Cash\", name: \"Cash\" },\r\n+                                                        { id: \"Bank\", name: \"Bank\" },\r\n+                                                        { id: \"Card\", name: \"Card\" },\r\n+                                                        { id: \"Payment Link\", name: \"Payment Link\" },\r\n+                                                    ]}\r\n+                                                    selected={watch1(\"payment\")}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setValue1(\"payment\", value)\r\n+                                                        setSelectedMode(value)\r\n+                                                    }}\r\n+                                                    register={register1(\"payment\", {\r\n+                                                        required: \"Please select payment mode\",\r\n+                                                    })}\r\n+                                                    error={errors1?.payment?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            {selectedMode?.id == \"Bank\" && (\r\n+                                                <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                    <SelectField\r\n+                                                        label=\"Banks\"\r\n+                                                        size=\"small\"\r\n+                                                        options={banks}\r\n+                                                        selected={selectedBank}\r\n+                                                        onSelect={(value) => {\r\n+                                                            setSelectedBank(value)\r\n+                                                        }}\r\n+                                                        register={register1(\"bank\", {\r\n+                                                            required: \"Please select a bank\",\r\n+                                                        })}\r\n+                                                        error={errors1?.bank?.message}\r\n+                                                    />\r\n+                                                </Grid>\r\n+                                            )}\r\n+                                            {selectedMode?.id == \"Card\" && (\r\n+                                                <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                    <SelectField\r\n+                                                        label=\"Card\"\r\n+                                                        size=\"small\"\r\n+                                                        options={cards}\r\n+                                                        selected={selectedCard}\r\n+                                                        onSelect={(value) => {\r\n+                                                            setSelectedCard(value)\r\n+                                                        }}\r\n+                                                        register={register1(\"card\", {\r\n+                                                            required: \"Please select a card\",\r\n+                                                        })}\r\n+                                                        error={errors1?.card?.message}\r\n+                                                    />\r\n+                                                </Grid>\r\n+                                            )}\r\n+                                            {selectedMode?.id == \"Card\" && <Grid item md={3.8} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Authorization Code\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Authorization Code\"\r\n+                                                    register={register1(\"remarks\", {\r\n+                                                        required: \"Please enter code\",\r\n+                                                    })}\r\n+                                                    error={errors1?.remarks?.message}\r\n+                                                />\r\n+                                            </Grid>}\r\n+                                            <Grid item md={12} sm={12} xs={12}>\r\n+                                                <Button\r\n+                                                    onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n+\r\n+                                                    variant=\"contained\"\r\n+                                                    sx={{\r\n+                                                        textTransform: \"capitalize\",\r\n+                                                        backgroundColor: \"#bd9b4a\",\r\n+                                                        width: \"200px\",\r\n+                                                        \":hover\": {\r\n+                                                            backgroundColor: \"rgb(189 155 74)\",\r\n+                                                        },\r\n+                                                    }}\r\n+                                                >\r\n+                                                    Add New Method\r\n+                                                </Button>\r\n+\r\n+\r\n+                                            </Grid>\r\n+                                            <Typography variant=\"body1\" sx={{ p: 3, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n+\r\n+                                                Payment Details\r\n+                                            </Typography>\r\n+\r\n+                                            <Grid container mt={2} p={2}>\r\n+                                                <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n+                                                    {payments.map((payment, index) => (\r\n+                                                        <Box\r\n+                                                            key={index}\r\n+                                                            sx={{\r\n+                                                                border: '1px solid #ccc',\r\n+                                                                borderRadius: 2,\r\n+                                                                width: '30%',\r\n+                                                                p: 2,\r\n+                                                                mb: 1,\r\n+                                                                backgroundColor: '#f9f9f9',\r\n+                                                                position: 'relative',\r\n+                                                            }}\r\n+                                                        >\r\n+                                                            <IconButton\r\n+                                                                size=\"small\"\r\n+                                                                sx={{ position: 'absolute', top: 8, right: 8 }}\r\n+                                                                onClick={() => {\r\n+                                                                    const updatedPayments = payments.filter((_, i) => i !== index);\r\n+                                                                    setPayments(updatedPayments);\r\n+                                                                }}\r\n+                                                            >\r\n+                                                                <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n+                                                            </IconButton>\r\n+\r\n+                                                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n+                                                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n+                                                            {payment.mode === 'Bank' && (\r\n+                                                                <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n+                                                            )}\r\n+                                                            {payment.mode === 'Card' && (\r\n+                                                                <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n+                                                            )}\r\n+                                                        </Box>\r\n+                                                    ))}\r\n+                                                </Box>\r\n+                                            </Grid>\r\n+                                            <Grid>\r\n+\r\n+                                            </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            </Box>\r\n+\r\n+\r\n+                            {true && (\r\n+                                <Grid container mt={2} spacing={2}>\r\n+\r\n+\r\n+\r\n+                                    <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n+                                        <Button\r\n+                                            type=\"submit\"\r\n+                                            disabled={payments?.length == 0}\r\n+                                            variant=\"contained\"\r\n+                                            sx={{\r\n+                                                textTransform: \"capitalize\",\r\n+                                                backgroundColor: \"#bd9b4a\",\r\n+                                                \":hover\": {\r\n+                                                    backgroundColor: \"rgb(189 155 74)\",\r\n+                                                },\r\n+                                            }}\r\n+                                        >\r\n+                                            Create Receipt\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            )}\r\n+                        </Box>\r\n+                    </>\r\n+                }\r\n+            </Box>\r\n+        </>\r\n+    )\r\n+}\r\n+\r\n+export default CreateCustomerPayment\r\n"
                },
                {
                    "date": 1745393589226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n \r\n             setButtonDisabled(true)\r\n             try {\r\n                 const obj = {\r\n-                    id: getValues1(\"invoicenumber\"),\r\n+                    \r\n                     total_amount: detail?.total_amount,\r\n                     customer_id: selectedCustomer?.id,\r\n                     customer_name: selectedCustomer?.name,\r\n                     customer_account_id: selectedCustomer?.receivable_account_id,\r\n@@ -1172,1180 +1172,4 @@\n     )\r\n }\r\n \r\n export default CreateCustomerPayment\r\n-\"use client\"\r\n-\r\n-import React, { useEffect, useRef, useState } from \"react\"\r\n-import {\r\n-  Box,\r\n-  Grid,\r\n-  IconButton,\r\n-  Table,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableRow,\r\n-  Typography,\r\n-  TableBody,\r\n-  TableHead,\r\n-  TextField,\r\n-  Paper,\r\n-} from \"@mui/material\"\r\n-import { useTheme } from \"@mui/material/styles\"\r\n-import Button from \"@mui/material/Button\"\r\n-import { PrimaryButton } from \"components/Buttons\"\r\n-import { useForm } from \"react-hook-form\"\r\n-import InputField from \"components/Input\"\r\n-import DatePicker from \"components/DatePicker\"\r\n-import { ErrorToaster } from \"components/Toaster\"\r\n-import SelectField from \"components/Select\"\r\n-import CustomerServices from \"services/Customer\"\r\n-import { showErrorToast, showPromiseToast, showSuccessToast } from \"components/NewToaster\"\r\n-import moment from \"moment\"\r\n-import { useNavigate } from \"react-router-dom\"\r\n-import { useAuth } from \"context/UseContext\"\r\n-import FinanceServices from \"services/Finance\"\r\n-import SearchIcon from \"@mui/icons-material/Search\"\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-// import { TableBody, TableHead } from \"mui-datatables\";\r\n-\r\n-function CreateCustomerPayment() {\r\n-  const theme = useTheme()\r\n-  const { user } = useAuth()\r\n-  const navigate = useNavigate()\r\n-  const [formChange, setFormChange] = useState(false)\r\n-  const [submit, setSubmit] = useState(false)\r\n-  const [excludeFromSales, setExcludeFromSales] = useState(\"no\")\r\n-  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\")\r\n-  const [total, setTotal] = useState(0)\r\n-  const [subTotal, setSubTotal] = useState(0)\r\n-  const [payButton, setPayButton] = useState(false)\r\n-  const [rows, setRows] = useState([])\r\n-  const [buttonDisabled, setButtonDisabled] = useState(false)\r\n-  const [amountError, setAmountError] = useState(\"\")\r\n-  console.log(rows, \"data\")\r\n-  const [items, setItems] = useState([\r\n-    {\r\n-      itemCode: \"\",\r\n-      itemDescription: \"TASHEEL AUTO 19\",\r\n-      totalCharge: 17.1,\r\n-      mbNo: \"\",\r\n-      applicationId: \"\",\r\n-      total: 17.1,\r\n-    },\r\n-  ])\r\n-\r\n-  // const addItem = () => {\r\n-  //   const newItem = {\r\n-  //     itemCode: \"\",\r\n-  //     itemDescription: \"\",\r\n-  //     totalCharge: 0,\r\n-  //     mbNo: \"\",\r\n-  //     applicationId: \"\",\r\n-  //     total: 0,\r\n-  //   };\r\n-  //   setItems([...items, newItem]);\r\n-  // };\r\n-\r\n-  const {\r\n-    register,\r\n-    handleSubmit,\r\n-    getValues,\r\n-    setValue,\r\n-    watch,\r\n-    reset,\r\n-    formState: { errors },\r\n-  } = useForm()\r\n-  const {\r\n-    register: register1,\r\n-    handleSubmit: handleSubmit1,\r\n-    setValue: setValue1,\r\n-    getValues: getValues1,\r\n-    control,\r\n-    watch: watch1,\r\n-    formState: { errors: errors1 },\r\n-  } = useForm({\r\n-    defaultValues: {\r\n-      amount: \"\",\r\n-      payment: null,\r\n-      bank: null,\r\n-      card: null,\r\n-    },\r\n-  })\r\n-\r\n-  // Watch all form data\r\n-\r\n-  // Watch for changes in the fee-related fields\r\n-  const govtFee = watch(\"govt_fee\", 0)\r\n-  const centerFee = watch(\"center_fee\", 0)\r\n-  const bankCharges = watch(\"bank_charges\", 0)\r\n-  const qty = watch(\"qty\", 1)\r\n-  const paymentAmount = watch1(\"amount\", 0)\r\n-  const paymentMethod = watch1(\"payment\")\r\n-  console.log(errors1);\r\n-\r\n-  useEffect(() => {\r\n-    const feesTotal =\r\n-      (Number.parseFloat(govtFee) || 0) + (Number.parseFloat(centerFee) || 0) + (Number.parseFloat(bankCharges) || 0)\r\n-    const finalTotal = feesTotal * (Number.parseFloat(qty) || 1)\r\n-    setValue(\"total\", finalTotal)\r\n-  }, [govtFee, centerFee, bankCharges, qty])\r\n-\r\n-\r\n-  const addItem = (data) => {\r\n-    const total = data.total\r\n-    setRows((prevRows) => {\r\n-      const updatedRows = [...prevRows, data]\r\n-      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0)\r\n-      setSubTotal(newSubTotal)\r\n-      return updatedRows\r\n-    })\r\n-    reset()\r\n-    setServiceItem(\"\")\r\n-  }\r\n-\r\n-  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"]\r\n-  const [guarantors, setGuarantors] = useState([])\r\n-  const [activeStep, setActiveStep] = React.useState(1)\r\n-\r\n-  // *For Deposit Slip\r\n-  const [progress, setProgress] = useState(0)\r\n-  const [uploadedSize, setUploadedSize] = useState(0)\r\n-  const [slipDetail, setSlipDetail] = useState([])\r\n-\r\n-  const [selectedDue, setSelectedDue] = useState({\r\n-    id: \"Instant\",\r\n-    name: \"Instant\",\r\n-  })\r\n-  const [passport, setPassport] = useState()\r\n-  const [allocation, setAllocation] = useState(false)\r\n-  const [depositError, setDepositError] = useState(false)\r\n-  const [loading, setLoading] = useState(false)\r\n-  const [emailVerify, setEmailVerify] = useState(false)\r\n-  const [isUploading, setIsUploading] = useState(false)\r\n-  const [selectedBank, setSelectedBank] = useState(null)\r\n-  const [loader, setLoader] = useState(false)\r\n-  const [totalDepositVal, setTotalDepositVal] = useState(0)\r\n-  console.log(selectedBank, \"objobj\")\r\n-\r\n-  const [center, setCenter] = useState(null)\r\n-  const [status, setStatus] = useState(null)\r\n-  const [fieldsDisabled, setFieldsDisabled] = useState(false)\r\n-\r\n-  // *For Stepper Forms Data\r\n-  const [stepFormData, setStepFormData] = useState()\r\n-  const [step1FormData, setStep1FormData] = useState()\r\n-  const [selectedType, setSelectedType] = useState(null)\r\n-  const [date, setDate] = useState(null)\r\n-  const [paidAt, setPaidAt] = useState(null)\r\n-  const [balanceType, setBalanceType] = useState(null)\r\n-  const [imageURL, setImageURL] = useState(null)\r\n-  const fileInputRef = useRef(null)\r\n-  const [hovered, setHovered] = useState(false)\r\n-  const [accounts, setAccounts] = useState([])\r\n-  const [salesAccount, setSalesAccount] = useState(null)\r\n-  const [inventoryAccount, setInventoryAccount] = useState(null)\r\n-  const [cogsAccount, setCogsAccount] = useState(null)\r\n-  const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n-  const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n-  const [itemType, setItemType] = useState(null)\r\n-  const [unit, setUnit] = useState(null)\r\n-  const [taxes, setTaxes] = useState([])\r\n-  const [tax, setTax] = useState(null)\r\n-  const [category, setCategory] = useState(null)\r\n-  const [categories, setCategories] = useState(null)\r\n-  const [governmentAccount, setGovernmnentAccount] = useState(null)\r\n-  const [description, setDescription] = useState(null)\r\n-  const [ownGovBank, setOwnGovBank] = useState(null)\r\n-  const [services, setServices] = useState(null)\r\n-  const [serviceItem, setServiceItem] = useState(null)\r\n-  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n-  const [detail, setDetail] = useState(null)\r\n-  const [banks, setBanks] = useState([])\r\n-  const [holdState, setHoldState] = useState(true)\r\n-  const [selectedMode, setSelectedMode] = useState(null)\r\n-  const [cards, setCards] = useState([])\r\n-  const [selectedCard, setSelectedCard] = useState(null)\r\n-  const [selectedCostCenter, setSelectedCostCenter] = useState(null)\r\n-  const [payments, setPayments] = useState([])\r\n-  const [chargesDisabled, setChargesDisabled] = useState(false)\r\n-  const [paymentTotal, setPaymentTotal] = useState(0)\r\n-  const [creditButton, setCreditButton] = useState(false)\r\n-  const [customerQueue, setCustomerQueue] = useState([])\r\n-  //documents array\r\n-\r\n-  const handleNext = () => {\r\n-    setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n-  }\r\n-  console.log(\"objobj\", watch1(\"bank\"))\r\n-\r\n-  const submitForm1 = async (formData) => {\r\n-    console.log(formData, \"objobjj\")\r\n-    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n-    const paymentModesString = payments.map((item) => item.payment_mode).join(\", \");\r\n-\r\n-    console.log(paymentModesString); // Output: \"Cash, Bank, Card\"\r\n-    getValues1('total')\r\n-    if (existingTotal == getValues1('finalTotal')) {\r\n-\r\n-      setButtonDisabled(true)\r\n-      try {\r\n-        const obj = {\r\n-          id: getValues1(\"invoicenumber\"),\r\n-          total_amount: detail?.total_amount,\r\n-          customer_id:selectedCustomer?.id,\r\n-          customer_name:selectedCustomer?.name,\r\n-          customer_account_id:selectedCustomer?.receivable_account_id,\r\n-          items: rows,\r\n-          date: date,\r\n-    \r\n-          additional_charges_percentage: formData?.percentage,\r\n-          additional_charges_value: formData?.additionalCharges,\r\n-          description: formData?.description,\r\n-       \r\n-          payment_mode: paymentModesString,\r\n-          \r\n-         \r\n-\r\n-\r\n- \r\n-          invoice_prefix: detail?.invoice_prefix,\r\n-          category_id: detail?.sale_receipt_items[0]?.service?.category_id,\r\n-          payment_methods: payments\r\n-        }\r\n-\r\n-        console.log(obj, \"objobj\")\r\n-        if (detail?.is_paid == true) {\r\n-          ErrorToaster(\"Already paid\")\r\n-        } else {\r\n-          const promise = CustomerServices.PayReceipt(obj)\r\n-          const response = await promise\r\n-          showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n-          if (response?.responseCode === 200) {\r\n-            navigate('/paid-receipts')\r\n-          }\r\n-        }\r\n-      } catch (error) {\r\n-        ErrorToaster(error)\r\n-      } finally {\r\n-        setButtonDisabled(false)\r\n-      }\r\n-    }\r\n-    else {\r\n-      const difference = getValues1('total') - existingTotal;\r\n-      showErrorToast(`Remaining amount to be added is ${difference.toFixed(2)}`)\r\n-    }\r\n-  }\r\n-\r\n-    // *For Get Customer Queue\r\n-    const getCustomerQueue = async (page, limit, filter) => {\r\n-      setLoader(true)\r\n-  \r\n-      try {\r\n-    \r\n-        let params = {\r\n-          page: 1,\r\n-          limit: 1000,\r\n-    \r\n-  \r\n-        }\r\n-    \r\n-        const { data } = await CustomerServices.getCustomerQueue(params)\r\n-        setCustomerQueue(data?.rows)\r\n-     \r\n-      } catch (error) {\r\n-        showErrorToast(error)\r\n-      } finally {\r\n-        setLoader(false)\r\n-      }\r\n-    }\r\n-\r\n-  const handleCredit = async (formData) => {\r\n-\r\n-\r\n-    console.log(detail, 'detail');\r\n-\r\n-    try {\r\n-      const obj = {\r\n-        id: detail?.id,\r\n-        customer: selectedCustomer?.id,\r\n-        total_amount: subTotal,\r\n-        final_amount: (\r\n-          Number.parseFloat(subTotal) +\r\n-          rows?.reduce((total, item) => {\r\n-            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-            return total + fee * qty\r\n-          }, 0) *\r\n-          0.05\r\n-        ).toFixed(2)\r\n-      }\r\n-      console.log(obj, 'detail');\r\n-\r\n-\r\n-      const promise = CustomerServices.CreditReceipt(obj)\r\n-      const response = await promise\r\n-      showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n-      if (response?.responseCode === 200) {\r\n-        navigate('/paid-receipts')\r\n-      }\r\n-\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      setButtonDisabled(false)\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  // *For Get Customer Queue\r\n-  const getBanks = async (page, limit, filter) => {\r\n-    setLoader(true)\r\n-\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.getBanks(params)\r\n-      setBanks(data?.banks)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoader(false)\r\n-    }\r\n-  }\r\n-  // *For Get Customer Queue\r\n-  const getCards = async (page, limit, filter) => {\r\n-    setLoader(true)\r\n-\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.getCards(params)\r\n-      let cardsData =  data?.cards?.map((card) => ({\r\n-        ...card,\r\n-        name: card.account_name,\r\n-      }));\r\n-      setCards(\r\n-        data?.cards?.map((card) => ({\r\n-          ...card,\r\n-          name: card.account_name,\r\n-        })),\r\n-\r\n-      )\r\n-      \r\n-      setSelectedCard({id: cardsData[0]?.id, name: cardsData[0]?.name})\r\n-      setValue1(\"card\", {id: cardsData[0]?.id, name: cardsData[0]?.name})\r\n-\r\n-\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoader(false)\r\n-    }\r\n-  }\r\n-  // *For Get Account\r\n-  const getReceptionDetail = async (state) => {\r\n-    setFieldsDisabled(true)\r\n-    try {\r\n-      let params = {\r\n-        token_number: getValues1(\"token\"),\r\n-      }\r\n-      if (state) {\r\n-        params = {\r\n-          invoice_number: getValues1(\"invoicenumber\"),\r\n-        }\r\n-      }\r\n-      const { data } = await CustomerServices.getReceiptDetail(params)\r\n-      console.log(data?.receipt, \"dataaa\")\r\n-      if (data?.receipt) {\r\n-\r\n-        if (data?.receipt?.is_paid) {\r\n-          ErrorToaster(\"Receipt already Paid\")\r\n-          return;\r\n-        }\r\n-\r\n-        setRows(data?.receipt?.sale_receipt_items)\r\n-        setDetail(data?.receipt)\r\n-        setCreditButton(true)\r\n-        setValue1(\"paid\", 0)\r\n-        //setValue1(\"customer\", data?.receipt?.customer_name)\r\n-        setValue1(\"invoice_date\", moment().toDate())\r\n-        setDate(new Date(data?.receipt?.invoice_date))\r\n-        setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n-        setValue1(\"ref\", data?.receipt?.ref)\r\n-        setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n-        setValue1(\"email\", data?.receipt?.customer_email)\r\n-        setValue1(\"address\", data?.receipt?.customer_address)\r\n-        setValue1(\"trn\", data?.receipt?.trn)\r\n-        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setValue1(\"caseno\", data?.receipt?.case_no)\r\n-        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n-        setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n-        setSubTotal(data?.receipt?.total_amount)\r\n-        setTotalDepositVal((\r\n-          Number.parseFloat(data?.receipt?.total_amount) +\r\n-          data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-            console.log(fee);\r\n-            console.log(qty);\r\n-            console.log(total);\r\n-            return total + fee * qty\r\n-          }, 0) *\r\n-          0.05\r\n-        ))\r\n-        setValue1(\r\n-          \"total\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"percentage\",\r\n-          0,\r\n-        )\r\n-        setValue1(\r\n-          \"additionalCharges\",\r\n-          0,\r\n-        )\r\n-        setValue1(\r\n-          \"total\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"balance\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"payamount\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setSelectedCostCenter({ id: data?.receipt?.customer_id, name: data?.receipt?.customer_name })\r\n-        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setAccounts(data?.accounts?.rows)\r\n-      }\r\n-      else {\r\n-        setCreditButton(false)\r\n-      }\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-  const getServiceItem = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.getServiceItem(params)\r\n-\r\n-      setServices(data?.rows)\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-  const handleServiceSelect = async (value) => {\r\n-    console.log(value, \"idididid\")\r\n-    setServiceItem(value)\r\n-    // setLoader(true)\r\n-    try {\r\n-      const params = {\r\n-        service_id: value?.id,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.DetailServiceItem(params)\r\n-      setValue(\"item_code\", data?.service?.id)\r\n-      setValue(\"govt_fee\", data?.service?.bank_service_charge)\r\n-      setValue(\"center_fee\", data?.service?.center_fee)\r\n-      setValue(\"bank_charges\", data?.service?.bank_service_charge)\r\n-\r\n-      setValue(\"qty\", 1)\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-  const getAccounts = async (page, limit, filter) => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await FinanceServices.getAccounts(params)\r\n-      console.log(data?.accounts?.rows)\r\n-\r\n-      setAccounts(data?.accounts?.rows)\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-  const handleInputChange = (index, field, value) => {\r\n-    const updatedRows = [...rows]\r\n-    updatedRows[index] = {\r\n-      ...updatedRows[index],\r\n-      [field]: value,\r\n-    }\r\n-    setRows(updatedRows)\r\n-  }\r\n-  console.log(rows)\r\n-\r\n-  const getTax = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await FinanceServices.getTax(params)\r\n-      console.log(data?.accounts?.rows)\r\n-\r\n-      setTaxes(data?.tax)\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-  const addPayments = (amount, mode, bank, card, code, submit = null) => {\r\n-    const total = parseFloat(getValues1(\"total\")) || 0;\r\n-\r\n-\r\n-    // Convert amount to number for calculation\r\n-    const currentAmount = parseFloat(amount) || 0;\r\n-\r\n-    // Calculate current total of payments\r\n-    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n-\r\n-    // Check if new total will exceed\r\n-    if (existingTotal + currentAmount > total) {\r\n-      showErrorToast(\"Total payment exceeds the required amount.\");\r\n-      return;\r\n-    }\r\n-\r\n-    // Validation\r\n-    if (!amount) {\r\n-      showErrorToast(\"Amount is required\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (parseFloat(amount) == 0) {\r\n-      showErrorToast(\"Amount is 0\");\r\n-      return;\r\n-    }\r\n-\r\n-\r\n-    if (!mode) {\r\n-      showErrorToast(\"Payment mode is required\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (mode === \"Bank\" && !bank) {\r\n-      showErrorToast(\"Bank is required for Bank mode\");\r\n-      return;\r\n-    }\r\n-\r\n-    if (mode === \"Card\" && !card) {\r\n-      showErrorToast(\"Card is required for Card mode\");\r\n-      return;\r\n-    }\r\n-    if (mode === \"Card\" && !code) {\r\n-      showErrorToast(\"Authorization code is required for Card mode\");\r\n-      return;\r\n-    }\r\n-    const paymentObj = {\r\n-      amount: currentAmount,\r\n-      payment_mode: mode,\r\n-      account_id: mode === \"Bank\" ? bank?.account_id : mode === \"Card\" ? card?.account_id : mode === \"Cash\" ? 700117 : 700171,\r\n-      ref_id: mode === \"Bank\" ? bank?.id : mode === \"Card\" ? card?.id : null,\r\n-      ref_name: mode === \"Bank\" ? bank?.name : mode === \"Card\" ? card?.name : null,\r\n-\r\n-    };\r\n-\r\n-    setPayments((prev) => [...prev, paymentObj]);\r\n-    //setValue1('payamount', '')\r\n-  \r\n-    setSelectedBank(null)\r\n-    setSelectedCard(null)\r\n-    setValue1('authCode', '')\r\n-    // setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n-    // setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n-  };\r\n-  useEffect(() => {\r\n-    console.log(payments, 'paymentspayments');\r\n-\r\n-    const total = parseFloat(getValues1(\"total\")) || 0;\r\n-    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n-    console.log(total, 'total');\r\n-    console.log(existingTotal, 'existingTotal');\r\n-    console.log(total, 'total');\r\n-    console.log(parseFloat(parseFloat(total) - parseFloat(existingTotal)), 'minusval');\r\n-\r\n-    setValue1('amount', parseFloat(existingTotal).toFixed(2))\r\n-    setValue1('balance', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n-    setValue1('payamount', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n-  \r\n-    if (payments?.length > 0) {\r\n-      setChargesDisabled(true)\r\n-    }\r\n-    else if (payments?.length == 0) {\r\n-      setChargesDisabled(false)\r\n-    }\r\n-    setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n-    setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n-  }, [payments])\r\n-\r\n-  const getCategories = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.getCategoryList(params)\r\n-\r\n-      setCategories(data?.categories)\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Get Account\r\n-  const getReceiptDetail = async (state) => {\r\n-    setFieldsDisabled(true)\r\n-    try {\r\n-      const params = {\r\n-        token_number: getValues1(\"token\"),\r\n-        invoice_date: date,\r\n-      }\r\n-\r\n-      const { data } = await CustomerServices.getReceiptDetail(params)\r\n-      console.log(data)\r\n-      if (data?.receipt) {\r\n-        setHoldState(true)\r\n-        setCreditButton(true)\r\n-        setRows(data?.receipt?.sale_receipt_items)\r\n-        setDetail(data?.receipt)\r\n-   \r\n-        //alert(\"Data found\")\r\n-        setValue1(\"paid\", 0)\r\n-        //setValue1(\"customer\", data?.receipt?.customer_name)\r\n-        setValue1(\"invoice_date\", moment().toDate())\r\n-        setValue1(\"invoicenumber\", data?.receipt?.id)\r\n-        setDate(new Date(data?.receipt?.invoice_date))\r\n-        setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n-        setValue1(\"ref\", data?.receipt?.ref)\r\n-        setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n-        setValue1(\"email\", data?.receipt?.customer_email)\r\n-        setValue1(\"address\", data?.receipt?.address)\r\n-        setValue1(\"trn\", data?.receipt?.trn)\r\n-        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setValue1(\"caseno\", data?.receipt?.case_no)\r\n-        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n-        setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n-        // setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n-        // setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n-        setSubTotal(data?.receipt?.total_amount)\r\n-        setTotalDepositVal((\r\n-          Number.parseFloat(data?.receipt?.total_amount) +\r\n-          data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-            console.log(fee);\r\n-            console.log(qty);\r\n-            console.log(total);\r\n-            return total + fee * qty\r\n-          }, 0) *\r\n-          0.05\r\n-        ))\r\n-        setValue1(\r\n-          \"total\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"percentage\",\r\n-          0,\r\n-        )\r\n-        setValue1(\r\n-          \"additionalCharges\",\r\n-          0,\r\n-        )\r\n-        setValue1(\r\n-          \"total\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"balance\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setValue1(\r\n-          \"payamount\",\r\n-          (\r\n-            Number.parseFloat(data?.receipt?.total_amount) +\r\n-            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n-              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n-              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n-              console.log(fee);\r\n-              console.log(qty);\r\n-              console.log(total);\r\n-              return total + fee * qty\r\n-\r\n-            }, 0) *\r\n-            0.05\r\n-          ).toFixed(2),\r\n-        )\r\n-        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n-        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n-        setAccounts(data?.accounts?.rows)\r\n-      } else {\r\n-        setCreditButton(false)\r\n-        showErrorToast(\"Data Not Found\")\r\n-      }\r\n-    } catch (error) {\r\n-      ErrorToaster(error)\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  }\r\n-  useEffect(() => {\r\n-    getCustomerQueue()\r\n-    getBanks()\r\n-    getCards()\r\n-    getAccounts()\r\n-    getTax()\r\n-    getCategories()\r\n-    getServiceItem()\r\n-    setDate(new Date())\r\n-    setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n-    setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n-    //setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n-    //setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n-  }, [])\r\n-\r\n-  return (\r\n-    <>\r\n-      <Box sx={{ width: \"100%\" }}></Box>\r\n-      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n-        {\r\n-          <>\r\n-            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n-              <Box\r\n-                sx={{\r\n-                  display: \"flex\",\r\n-                  justifyContent: \"space-between\",\r\n-                  gap: \"10px\",\r\n-                  p: 3,\r\n-                  alignItems: \"flex-end\",\r\n-                }}\r\n-              >\r\n-                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>Customer Payment</Typography>\r\n-              </Box>\r\n-\r\n-              <Box sx={{ p: 3 }}>\r\n-                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-               \r\n-\r\n-                  \r\n-                  <Grid\r\n-                    item\r\n-                    md={12}\r\n-                    sm={12}\r\n-                    xs={12}\r\n-                    sx={{\r\n-                      border: \"2px solid black\",\r\n-                      p: 2,\r\n-                      borderRadius: \"15px\",\r\n-                      mt: { md: 0, sm: 2, xs: 2 },\r\n-                    }}\r\n-                  >\r\n-                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <SelectField\r\n-                          size={\"small\"}\r\n-                          label={\"Customer *:\"}\r\n-                          \r\n-                          options={customerQueue}\r\n-                          selected={selectedCustomer}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCustomer(value)\r\n-                          }}\r\n-                          error={errors1?.customer?.message}\r\n-                          register={register1(\"customer\")}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Description\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Description\"\r\n-                         \r\n-                          register={register1(\"description\")}\r\n-                          error={errors1?.description?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                 \r\n-                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n-                        <DatePicker\r\n-                          label={\"Payment Date :*\"}\r\n-                          value={date}\r\n-                          size={\"small\"}\r\n-                          error={errors1?.date?.message}\r\n-                          register={register1(\"paidAt\")}\r\n-                          onChange={(date) => {\r\n-                            setValue1(\"paidAt\", date)\r\n-                            setPaidAt(new Date(date))\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                    \r\n-                      <Grid item md={3.8} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Total Amount\"\r\n-                      size=\"small\"\r\n-                      disabled={payments.length != 0}\r\n-                      placeholder=\"Total Amount\"\r\n-                      register={register1(\"total\", {\r\n-                        required: \"please enter total .\",\r\n-                      })}\r\n-                      error={errors1?.total?.message}\r\n-                    />\r\n-                  </Grid>\r\n-               \r\n-                  \r\n-                  <Grid item md={3.8} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Paid Amount\"\r\n-\r\n-                      disabled={true}\r\n-                      size=\"small\"\r\n-                      placeholder=\"Enter amount\"\r\n-\r\n-                      register={register1(\"amount\", {\r\n-                        required: false,\r\n-\r\n-                      })}\r\n-                      error={errors1?.amount?.message}\r\n-                    />\r\n-                  </Grid>\r\n-                  <Grid item md={3.8} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Balance Amount\"\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Balance Amount\"\r\n-                      register={register1(\"balance\", {\r\n-                        required: \"please enter balance .\",\r\n-                      })}\r\n-                      error={errors1?.balance?.message}\r\n-                    />\r\n-                  </Grid>\r\n-\r\n-                  <Grid item md={3.8} sm={12} xs={12}>\r\n-                    <InputField\r\n-                      label=\"Narration\"\r\n-                      size=\"small\"\r\n-                      placeholder=\"Narration\"\r\n-                      register={register1(\"narration\")}\r\n-                      error={errors1?.narration?.message}\r\n-                    />\r\n-                  </Grid>\r\n-\r\n-                    \r\n-\r\n-                    \r\n-                   \r\n-\r\n-                     \r\n-                      \r\n-                    \r\n-                    </Grid>\r\n-                    <Grid container  spacing={3}>\r\n-                    <Grid item md={3.8} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Amount\"\r\n-                        size=\"small\"\r\n-\r\n-                        placeholder=\"Amount\"\r\n-                        register={register1(\"payamount\", {\r\n-                          required: false,\r\n-                        })}\r\n-                        error={errors1?.payamount?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    <Grid item md={3.8} sm={12} xs={12}>\r\n-                      <SelectField\r\n-                        label=\"Payment Mode\"\r\n-                        size=\"small\"\r\n-                        options={[\r\n-                          { id: \"Cash\", name: \"Cash\" },\r\n-                          { id: \"Bank\", name: \"Bank\" },\r\n-                          { id: \"Card\", name: \"Card\" },\r\n-                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n-                        ]}\r\n-                        selected={watch1(\"payment\")}\r\n-                        onSelect={(value) => {\r\n-                          setValue1(\"payment\", value)\r\n-                          setSelectedMode(value)\r\n-                        }}\r\n-                        register={register1(\"payment\", {\r\n-                          required: \"Please select payment mode\",\r\n-                        })}\r\n-                        error={errors1?.payment?.message}\r\n-                      />\r\n-                    </Grid>\r\n-                    {selectedMode?.id == \"Bank\" && (\r\n-                      <Grid item md={3.8} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Banks\"\r\n-                          size=\"small\"\r\n-                          options={banks}\r\n-                          selected={selectedBank}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedBank(value)\r\n-                          }}\r\n-                          register={register1(\"bank\", {\r\n-                            required: \"Please select a bank\",\r\n-                          })}\r\n-                          error={errors1?.bank?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && (\r\n-                      <Grid item md={3.8} sm={12} xs={12}>\r\n-                        <SelectField\r\n-                          label=\"Card\"\r\n-                          size=\"small\"\r\n-                          options={cards}\r\n-                          selected={selectedCard}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCard(value)\r\n-                          }}\r\n-                          register={register1(\"card\", {\r\n-                            required: \"Please select a card\",\r\n-                          })}\r\n-                          error={errors1?.card?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    )}\r\n-                    {selectedMode?.id == \"Card\" && <Grid item md={3.8} sm={12} xs={12}>\r\n-                      <InputField\r\n-                        label=\"Authorization Code\"\r\n-                        size=\"small\"\r\n-                        placeholder=\"Authorization Code\"\r\n-                        register={register1(\"remarks\", {\r\n-                          required: \"Please enter code\",\r\n-                        })}\r\n-                        error={errors1?.remarks?.message}\r\n-                      />\r\n-                    </Grid>}\r\n-                    <Grid item md={12} sm={12} xs={12}>\r\n-                      <Button\r\n-                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n-\r\n-                        variant=\"contained\"\r\n-                        sx={{\r\n-                          textTransform: \"capitalize\",\r\n-                          backgroundColor: \"#bd9b4a\",\r\n-                          width: \"200px\",\r\n-                          \":hover\": {\r\n-                            backgroundColor: \"rgb(189 155 74)\",\r\n-                          },\r\n-                        }}\r\n-                      >\r\n-                        Add New Method\r\n-                      </Button>\r\n-\r\n-                      \r\n-                    </Grid>\r\n-                    <Typography variant=\"body1\" sx={{ p: 3, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n-\r\n-                      Payment Details\r\n-                    </Typography>\r\n-\r\n-                    <Grid container mt={2} p={2}>\r\n-                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n-                        {payments.map((payment, index) => (\r\n-                          <Box\r\n-                            key={index}\r\n-                            sx={{\r\n-                              border: '1px solid #ccc',\r\n-                              borderRadius: 2,\r\n-                              width: '30%',\r\n-                              p: 2,\r\n-                              mb: 1,\r\n-                              backgroundColor: '#f9f9f9',\r\n-                              position: 'relative',\r\n-                            }}\r\n-                          >\r\n-                            <IconButton\r\n-                              size=\"small\"\r\n-                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n-                              onClick={() => {\r\n-                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n-                                setPayments(updatedPayments);\r\n-                              }}\r\n-                            >\r\n-                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n-                            </IconButton>\r\n-\r\n-                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n-                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n-                            {payment.mode === 'Bank' && (\r\n-                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n-                            )}\r\n-                            {payment.mode === 'Card' && (\r\n-                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n-                            )}\r\n-                          </Box>\r\n-                        ))}\r\n-                      </Box>\r\n-                    </Grid>\r\n-                    <Grid>\r\n-\r\n-                    </Grid>\r\n-                  </Grid>\r\n-                  </Grid>\r\n-                </Grid>\r\n-              </Box>\r\n-\r\n-              \r\n-              {true && (\r\n-                <Grid container mt={2} spacing={2}>\r\n-                  \r\n-\r\n-               \r\n-                  <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n-                    <Button\r\n-                      type=\"submit\"\r\n-                      disabled={payments?.length == 0 }\r\n-                      variant=\"contained\"\r\n-                      sx={{\r\n-                        textTransform: \"capitalize\",\r\n-                        backgroundColor: \"#bd9b4a\",\r\n-                        \":hover\": {\r\n-                          backgroundColor: \"rgb(189 155 74)\",\r\n-                        },\r\n-                      }}\r\n-                    >\r\n-                      Create Receipt\r\n-                    </Button>\r\n-                  </Grid>\r\n-                </Grid>\r\n-              )}\r\n-            </Box>\r\n-          </>\r\n-        }\r\n-      </Box>\r\n-    </>\r\n-  )\r\n-}\r\n-\r\n-export default CreateCustomerPayment\r\n"
                },
                {
                    "date": 1745393597151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,13 +219,12 @@\n                     total_amount: detail?.total_amount,\r\n                     customer_id: selectedCustomer?.id,\r\n                     customer_name: selectedCustomer?.name,\r\n                     customer_account_id: selectedCustomer?.receivable_account_id,\r\n-                    items: rows,\r\n+                 \r\n                     date: date,\r\n \r\n-                    additional_charges_percentage: formData?.percentage,\r\n-                    additional_charges_value: formData?.additionalCharges,\r\n+                    \r\n                     description: formData?.description,\r\n \r\n                     payment_mode: paymentModesString,\r\n \r\n"
                },
                {
                    "date": 1745393612861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,21 +219,11 @@\n                     total_amount: detail?.total_amount,\r\n                     customer_id: selectedCustomer?.id,\r\n                     customer_name: selectedCustomer?.name,\r\n                     customer_account_id: selectedCustomer?.receivable_account_id,\r\n-                 \r\n                     date: date,\r\n-\r\n-                    \r\n                     description: formData?.description,\r\n-\r\n                     payment_mode: paymentModesString,\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n                     payment_methods: payments\r\n                 }\r\n \r\n                 console.log(obj, \"objobj\")\r\n"
                },
                {
                    "date": 1745393626257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,14 +209,13 @@\n         const paymentModesString = payments.map((item) => item.payment_mode).join(\", \");\r\n \r\n         console.log(paymentModesString); // Output: \"Cash, Bank, Card\"\r\n         getValues1('total')\r\n-        if (existingTotal == getValues1('finalTotal')) {\r\n+        if (existingTotal == getValues1('total')) {\r\n \r\n             setButtonDisabled(true)\r\n             try {\r\n                 const obj = {\r\n-                    \r\n                     total_amount: detail?.total_amount,\r\n                     customer_id: selectedCustomer?.id,\r\n                     customer_name: selectedCustomer?.name,\r\n                     customer_account_id: selectedCustomer?.receivable_account_id,\r\n"
                }
            ],
            "date": 1745391518274,
            "name": "Commit-0",
            "content": "\"use client\"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport {\r\n  Box,\r\n  Grid,\r\n  IconButton,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Typography,\r\n  TableBody,\r\n  TableHead,\r\n  TextField,\r\n  Paper,\r\n} from \"@mui/material\"\r\nimport { useTheme } from \"@mui/material/styles\"\r\nimport Button from \"@mui/material/Button\"\r\nimport { PrimaryButton } from \"components/Buttons\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport InputField from \"components/Input\"\r\nimport DatePicker from \"components/DatePicker\"\r\nimport { ErrorToaster } from \"components/Toaster\"\r\nimport SelectField from \"components/Select\"\r\nimport CustomerServices from \"services/Customer\"\r\nimport { showErrorToast, showPromiseToast, showSuccessToast } from \"components/NewToaster\"\r\nimport moment from \"moment\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useAuth } from \"context/UseContext\"\r\nimport FinanceServices from \"services/Finance\"\r\nimport SearchIcon from \"@mui/icons-material/Search\"\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n// import { TableBody, TableHead } from \"mui-datatables\";\r\n\r\nfunction CreateCustomerPayment() {\r\n  const theme = useTheme()\r\n  const { user } = useAuth()\r\n  const navigate = useNavigate()\r\n  const [formChange, setFormChange] = useState(false)\r\n  const [submit, setSubmit] = useState(false)\r\n  const [excludeFromSales, setExcludeFromSales] = useState(\"no\")\r\n  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\")\r\n  const [total, setTotal] = useState(0)\r\n  const [subTotal, setSubTotal] = useState(0)\r\n  const [payButton, setPayButton] = useState(false)\r\n  const [rows, setRows] = useState([])\r\n  const [buttonDisabled, setButtonDisabled] = useState(false)\r\n  const [amountError, setAmountError] = useState(\"\")\r\n  console.log(rows, \"data\")\r\n  const [items, setItems] = useState([\r\n    {\r\n      itemCode: \"\",\r\n      itemDescription: \"TASHEEL AUTO 19\",\r\n      totalCharge: 17.1,\r\n      mbNo: \"\",\r\n      applicationId: \"\",\r\n      total: 17.1,\r\n    },\r\n  ])\r\n\r\n  // const addItem = () => {\r\n  //   const newItem = {\r\n  //     itemCode: \"\",\r\n  //     itemDescription: \"\",\r\n  //     totalCharge: 0,\r\n  //     mbNo: \"\",\r\n  //     applicationId: \"\",\r\n  //     total: 0,\r\n  //   };\r\n  //   setItems([...items, newItem]);\r\n  // };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    watch,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm()\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    control,\r\n    watch: watch1,\r\n    formState: { errors: errors1 },\r\n  } = useForm({\r\n    defaultValues: {\r\n      amount: \"\",\r\n      payment: null,\r\n      bank: null,\r\n      card: null,\r\n    },\r\n  })\r\n\r\n  // Watch all form data\r\n\r\n  // Watch for changes in the fee-related fields\r\n  const govtFee = watch(\"govt_fee\", 0)\r\n  const centerFee = watch(\"center_fee\", 0)\r\n  const bankCharges = watch(\"bank_charges\", 0)\r\n  const qty = watch(\"qty\", 1)\r\n  const paymentAmount = watch1(\"amount\", 0)\r\n  const paymentMethod = watch1(\"payment\")\r\n  console.log(errors1);\r\n\r\n  useEffect(() => {\r\n    const feesTotal =\r\n      (Number.parseFloat(govtFee) || 0) + (Number.parseFloat(centerFee) || 0) + (Number.parseFloat(bankCharges) || 0)\r\n    const finalTotal = feesTotal * (Number.parseFloat(qty) || 1)\r\n    setValue(\"total\", finalTotal)\r\n  }, [govtFee, centerFee, bankCharges, qty])\r\n\r\n\r\n  const addItem = (data) => {\r\n    const total = data.total\r\n    setRows((prevRows) => {\r\n      const updatedRows = [...prevRows, data]\r\n      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0)\r\n      setSubTotal(newSubTotal)\r\n      return updatedRows\r\n    })\r\n    reset()\r\n    setServiceItem(\"\")\r\n  }\r\n\r\n  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"]\r\n  const [guarantors, setGuarantors] = useState([])\r\n  const [activeStep, setActiveStep] = React.useState(1)\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0)\r\n  const [uploadedSize, setUploadedSize] = useState(0)\r\n  const [slipDetail, setSlipDetail] = useState([])\r\n\r\n  const [selectedDue, setSelectedDue] = useState({\r\n    id: \"Instant\",\r\n    name: \"Instant\",\r\n  })\r\n  const [passport, setPassport] = useState()\r\n  const [allocation, setAllocation] = useState(false)\r\n  const [depositError, setDepositError] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [emailVerify, setEmailVerify] = useState(false)\r\n  const [isUploading, setIsUploading] = useState(false)\r\n  const [selectedBank, setSelectedBank] = useState(null)\r\n  const [loader, setLoader] = useState(false)\r\n  const [totalDepositVal, setTotalDepositVal] = useState(0)\r\n  console.log(selectedBank, \"objobj\")\r\n\r\n  const [center, setCenter] = useState(null)\r\n  const [status, setStatus] = useState(null)\r\n  const [fieldsDisabled, setFieldsDisabled] = useState(false)\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState()\r\n  const [step1FormData, setStep1FormData] = useState()\r\n  const [selectedType, setSelectedType] = useState(null)\r\n  const [date, setDate] = useState(null)\r\n  const [paidAt, setPaidAt] = useState(null)\r\n  const [balanceType, setBalanceType] = useState(null)\r\n  const [imageURL, setImageURL] = useState(null)\r\n  const fileInputRef = useRef(null)\r\n  const [hovered, setHovered] = useState(false)\r\n  const [accounts, setAccounts] = useState([])\r\n  const [salesAccount, setSalesAccount] = useState(null)\r\n  const [inventoryAccount, setInventoryAccount] = useState(null)\r\n  const [cogsAccount, setCogsAccount] = useState(null)\r\n  const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n  const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n  const [itemType, setItemType] = useState(null)\r\n  const [unit, setUnit] = useState(null)\r\n  const [taxes, setTaxes] = useState([])\r\n  const [tax, setTax] = useState(null)\r\n  const [category, setCategory] = useState(null)\r\n  const [categories, setCategories] = useState(null)\r\n  const [governmentAccount, setGovernmnentAccount] = useState(null)\r\n  const [description, setDescription] = useState(null)\r\n  const [ownGovBank, setOwnGovBank] = useState(null)\r\n  const [services, setServices] = useState(null)\r\n  const [serviceItem, setServiceItem] = useState(null)\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n  const [detail, setDetail] = useState(null)\r\n  const [banks, setBanks] = useState([])\r\n  const [holdState, setHoldState] = useState(true)\r\n  const [selectedMode, setSelectedMode] = useState(null)\r\n  const [cards, setCards] = useState([])\r\n  const [selectedCard, setSelectedCard] = useState(null)\r\n  const [selectedCostCenter, setSelectedCostCenter] = useState(null)\r\n  const [payments, setPayments] = useState([])\r\n  const [chargesDisabled, setChargesDisabled] = useState(false)\r\n  const [paymentTotal, setPaymentTotal] = useState(0)\r\n  const [creditButton, setCreditButton] = useState(false)\r\n  //documents array\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n  }\r\n  console.log(\"objobj\", watch1(\"bank\"))\r\n\r\n  const submitForm1 = async (formData) => {\r\n    console.log(formData, \"objobjj\")\r\n    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n    const paymentModesString = payments.map((item) => item.payment_mode).join(\", \");\r\n\r\n    console.log(paymentModesString); // Output: \"Cash, Bank, Card\"\r\n    getValues1('total')\r\n    if (existingTotal == getValues1('finalTotal')) {\r\n\r\n      setButtonDisabled(true)\r\n      try {\r\n        const obj = {\r\n          id: getValues1(\"invoicenumber\"),\r\n          total_amount: detail?.total_amount,\r\n          items: rows,\r\n          paid_date: paidAt || new Date(),\r\n          paid_amount: detail?.amount,\r\n          additional_charges_percentage: formData?.percentage,\r\n          additional_charges_value: formData?.additionalCharges,\r\n          remarks: formData?.remarks,\r\n          narration: formData?.narration,\r\n          payment_mode: paymentModesString,\r\n          payment_status: 'Paid',\r\n          charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.center_fee || 0), 0),\r\n          govt_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.govt_fee || 0), 0),\r\n          bank_charges: detail?.sale_receipt_items?.reduce((acc, item) => acc + Number(item?.bank_charge || 0), 0),\r\n\r\n\r\n          customer_id: detail?.customer_id,\r\n          invoice_prefix: detail?.invoice_prefix,\r\n          category_id: detail?.sale_receipt_items[0]?.service?.category_id,\r\n          payment_methods: payments\r\n        }\r\n\r\n        console.log(obj, \"objobj\")\r\n        if (detail?.is_paid == true) {\r\n          ErrorToaster(\"Already paid\")\r\n        } else {\r\n          const promise = CustomerServices.PayReceipt(obj)\r\n          const response = await promise\r\n          showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n          if (response?.responseCode === 200) {\r\n            navigate('/paid-receipts')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        ErrorToaster(error)\r\n      } finally {\r\n        setButtonDisabled(false)\r\n      }\r\n    }\r\n    else {\r\n      const difference = getValues1('finalTotal') - existingTotal;\r\n      showErrorToast(`Remaining amount to be added is ${difference.toFixed(2)}`)\r\n    }\r\n  }\r\n\r\n  const handleCredit = async (formData) => {\r\n\r\n\r\n    console.log(detail, 'detail');\r\n\r\n    try {\r\n      const obj = {\r\n        id: detail?.id,\r\n        customer: selectedCustomer?.id,\r\n        total_amount: subTotal,\r\n        final_amount: (\r\n          Number.parseFloat(subTotal) +\r\n          rows?.reduce((total, item) => {\r\n            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n            return total + fee * qty\r\n          }, 0) *\r\n          0.05\r\n        ).toFixed(2)\r\n      }\r\n      console.log(obj, 'detail');\r\n\r\n\r\n      const promise = CustomerServices.CreditReceipt(obj)\r\n      const response = await promise\r\n      showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n      if (response?.responseCode === 200) {\r\n        navigate('/paid-receipts')\r\n      }\r\n\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      setButtonDisabled(false)\r\n    }\r\n  }\r\n\r\n\r\n  // *For Get Customer Queue\r\n  const getBanks = async (page, limit, filter) => {\r\n    setLoader(true)\r\n\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await CustomerServices.getBanks(params)\r\n      setBanks(data?.banks)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoader(false)\r\n    }\r\n  }\r\n  // *For Get Customer Queue\r\n  const getCards = async (page, limit, filter) => {\r\n    setLoader(true)\r\n\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await CustomerServices.getCards(params)\r\n      let cardsData =  data?.cards?.map((card) => ({\r\n        ...card,\r\n        name: card.account_name,\r\n      }));\r\n      setCards(\r\n        data?.cards?.map((card) => ({\r\n          ...card,\r\n          name: card.account_name,\r\n        })),\r\n\r\n      )\r\n      \r\n      setSelectedCard({id: cardsData[0]?.id, name: cardsData[0]?.name})\r\n      setValue1(\"card\", {id: cardsData[0]?.id, name: cardsData[0]?.name})\r\n\r\n\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoader(false)\r\n    }\r\n  }\r\n  // *For Get Account\r\n  const getReceptionDetail = async (state) => {\r\n    setFieldsDisabled(true)\r\n    try {\r\n      let params = {\r\n        token_number: getValues1(\"token\"),\r\n      }\r\n      if (state) {\r\n        params = {\r\n          invoice_number: getValues1(\"invoicenumber\"),\r\n        }\r\n      }\r\n      const { data } = await CustomerServices.getReceiptDetail(params)\r\n      console.log(data?.receipt, \"dataaa\")\r\n      if (data?.receipt) {\r\n\r\n        if (data?.receipt?.is_paid) {\r\n          ErrorToaster(\"Receipt already Paid\")\r\n          return;\r\n        }\r\n\r\n        setRows(data?.receipt?.sale_receipt_items)\r\n        setDetail(data?.receipt)\r\n        setCreditButton(true)\r\n        setValue1(\"paid\", 0)\r\n        //setValue1(\"customer\", data?.receipt?.customer_name)\r\n        setValue1(\"invoice_date\", moment().toDate())\r\n        setDate(new Date(data?.receipt?.invoice_date))\r\n        setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n        setValue1(\"ref\", data?.receipt?.ref)\r\n        setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n        setValue1(\"email\", data?.receipt?.customer_email)\r\n        setValue1(\"address\", data?.receipt?.customer_address)\r\n        setValue1(\"trn\", data?.receipt?.trn)\r\n        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setValue1(\"caseno\", data?.receipt?.case_no)\r\n        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n        setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n        setSubTotal(data?.receipt?.total_amount)\r\n        setTotalDepositVal((\r\n          Number.parseFloat(data?.receipt?.total_amount) +\r\n          data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n            console.log(fee);\r\n            console.log(qty);\r\n            console.log(total);\r\n            return total + fee * qty\r\n          }, 0) *\r\n          0.05\r\n        ))\r\n        setValue1(\r\n          \"total\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"percentage\",\r\n          0,\r\n        )\r\n        setValue1(\r\n          \"additionalCharges\",\r\n          0,\r\n        )\r\n        setValue1(\r\n          \"finalTotal\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"balance\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"payamount\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setSelectedCostCenter({ id: data?.receipt?.customer_id, name: data?.receipt?.customer_name })\r\n        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setAccounts(data?.accounts?.rows)\r\n      }\r\n      else {\r\n        setCreditButton(false)\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const getServiceItem = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await CustomerServices.getServiceItem(params)\r\n\r\n      setServices(data?.rows)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n  const handleServiceSelect = async (value) => {\r\n    console.log(value, \"idididid\")\r\n    setServiceItem(value)\r\n    // setLoader(true)\r\n    try {\r\n      const params = {\r\n        service_id: value?.id,\r\n      }\r\n\r\n      const { data } = await CustomerServices.DetailServiceItem(params)\r\n      setValue(\"item_code\", data?.service?.id)\r\n      setValue(\"govt_fee\", data?.service?.bank_service_charge)\r\n      setValue(\"center_fee\", data?.service?.center_fee)\r\n      setValue(\"bank_charges\", data?.service?.bank_service_charge)\r\n\r\n      setValue(\"qty\", 1)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const getAccounts = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await FinanceServices.getAccounts(params)\r\n      console.log(data?.accounts?.rows)\r\n\r\n      setAccounts(data?.accounts?.rows)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (index, field, value) => {\r\n    const updatedRows = [...rows]\r\n    updatedRows[index] = {\r\n      ...updatedRows[index],\r\n      [field]: value,\r\n    }\r\n    setRows(updatedRows)\r\n  }\r\n  console.log(rows)\r\n\r\n  const getTax = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await FinanceServices.getTax(params)\r\n      console.log(data?.accounts?.rows)\r\n\r\n      setTaxes(data?.tax)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const addPayments = (amount, mode, bank, card, code, submit = null) => {\r\n    const total = parseFloat(getValues1(\"finalTotal\")) || 0;\r\n\r\n\r\n    // Convert amount to number for calculation\r\n    const currentAmount = parseFloat(amount) || 0;\r\n\r\n    // Calculate current total of payments\r\n    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n\r\n    // Check if new total will exceed\r\n    if (existingTotal + currentAmount > total) {\r\n      showErrorToast(\"Total payment exceeds the required amount.\");\r\n      return;\r\n    }\r\n\r\n    // Validation\r\n    if (!amount) {\r\n      showErrorToast(\"Amount is required\");\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(amount) == 0) {\r\n      showErrorToast(\"Amount is 0\");\r\n      return;\r\n    }\r\n\r\n\r\n    if (!mode) {\r\n      showErrorToast(\"Payment mode is required\");\r\n      return;\r\n    }\r\n\r\n    if (mode === \"Bank\" && !bank) {\r\n      showErrorToast(\"Bank is required for Bank mode\");\r\n      return;\r\n    }\r\n\r\n    if (mode === \"Card\" && !card) {\r\n      showErrorToast(\"Card is required for Card mode\");\r\n      return;\r\n    }\r\n    if (mode === \"Card\" && !code) {\r\n      showErrorToast(\"Authorization code is required for Card mode\");\r\n      return;\r\n    }\r\n    const paymentObj = {\r\n      amount: currentAmount,\r\n      payment_mode: mode,\r\n      account_id: mode === \"Bank\" ? bank?.account_id : mode === \"Card\" ? card?.account_id : mode === \"Cash\" ? 700117 : 700171,\r\n      ref_id: mode === \"Bank\" ? bank?.id : mode === \"Card\" ? card?.id : null,\r\n      ref_name: mode === \"Bank\" ? bank?.name : mode === \"Card\" ? card?.name : null,\r\n\r\n    };\r\n\r\n    setPayments((prev) => [...prev, paymentObj]);\r\n    //setValue1('payamount', '')\r\n  \r\n    setSelectedBank(null)\r\n    setSelectedCard(null)\r\n    setValue1('authCode', '')\r\n    // setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n    // setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n  };\r\n  useEffect(() => {\r\n    console.log(payments, 'paymentspayments');\r\n\r\n    const total = parseFloat(getValues1(\"finalTotal\")) || 0;\r\n    const existingTotal = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\r\n    console.log(total, 'total');\r\n    console.log(existingTotal, 'existingTotal');\r\n    console.log(total, 'total');\r\n    console.log(parseFloat(parseFloat(total) - parseFloat(existingTotal)), 'minusval');\r\n\r\n    setValue1('amount', parseFloat(existingTotal).toFixed(2))\r\n    setValue1('balance', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n    setValue1('payamount', parseFloat(parseFloat(parseFloat(total) - parseFloat(existingTotal))).toFixed(2))\r\n  \r\n    if (payments?.length > 0) {\r\n      setChargesDisabled(true)\r\n    }\r\n    else if (payments?.length == 0) {\r\n      setChargesDisabled(false)\r\n    }\r\n    setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n    setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n  }, [payments])\r\n\r\n  const getCategories = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      const params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      }\r\n\r\n      const { data } = await CustomerServices.getCategoryList(params)\r\n\r\n      setCategories(data?.categories)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  // *For Get Account\r\n  const getReceiptDetail = async (state) => {\r\n    setFieldsDisabled(true)\r\n    try {\r\n      const params = {\r\n        token_number: getValues1(\"token\"),\r\n        invoice_date: date,\r\n      }\r\n\r\n      const { data } = await CustomerServices.getReceiptDetail(params)\r\n      console.log(data)\r\n      if (data?.receipt) {\r\n        setHoldState(true)\r\n        setCreditButton(true)\r\n        setRows(data?.receipt?.sale_receipt_items)\r\n        setDetail(data?.receipt)\r\n   \r\n        //alert(\"Data found\")\r\n        setValue1(\"paid\", 0)\r\n        //setValue1(\"customer\", data?.receipt?.customer_name)\r\n        setValue1(\"invoice_date\", moment().toDate())\r\n        setValue1(\"invoicenumber\", data?.receipt?.id)\r\n        setDate(new Date(data?.receipt?.invoice_date))\r\n        setValue1(\"mobile\", data?.receipt?.customer_mobile)\r\n        setValue1(\"ref\", data?.receipt?.ref)\r\n        setValue1(\"display_customer\", data?.receipt?.customer_name)\r\n        setValue1(\"email\", data?.receipt?.customer_email)\r\n        setValue1(\"address\", data?.receipt?.address)\r\n        setValue1(\"trn\", data?.receipt?.trn)\r\n        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setValue1(\"caseno\", data?.receipt?.case_no)\r\n        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n        setValue1(\"customer\", { id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n        // setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n        // setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n        setSubTotal(data?.receipt?.total_amount)\r\n        setTotalDepositVal((\r\n          Number.parseFloat(data?.receipt?.total_amount) +\r\n          data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n            const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n            const qty = Number.parseFloat(item?.quantity ?? 1)\r\n            console.log(fee);\r\n            console.log(qty);\r\n            console.log(total);\r\n            return total + fee * qty\r\n          }, 0) *\r\n          0.05\r\n        ))\r\n        setValue1(\r\n          \"total\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"percentage\",\r\n          0,\r\n        )\r\n        setValue1(\r\n          \"additionalCharges\",\r\n          0,\r\n        )\r\n        setValue1(\r\n          \"finalTotal\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"balance\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setValue1(\r\n          \"payamount\",\r\n          (\r\n            Number.parseFloat(data?.receipt?.total_amount) +\r\n            data?.receipt?.sale_receipt_items?.reduce((total, item) => {\r\n              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n              console.log(fee);\r\n              console.log(qty);\r\n              console.log(total);\r\n              return total + fee * qty\r\n\r\n            }, 0) *\r\n            0.05\r\n          ).toFixed(2),\r\n        )\r\n        setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setSelectedCustomer({ id: data?.receipt?.customer_id, name: data?.receipt?.customer?.name })\r\n        setValue1(\"cost_center\", { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n        setAccounts(data?.accounts?.rows)\r\n      } else {\r\n        setCreditButton(false)\r\n        showErrorToast(\"Data Not Found\")\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getBanks()\r\n    getCards()\r\n    getAccounts()\r\n    getTax()\r\n    getCategories()\r\n    getServiceItem()\r\n    setDate(new Date())\r\n    setValue1(\"payment\", { id: \"Cash\", name: \"Cash\" })\r\n    setSelectedMode({ id: \"Cash\", name: \"Cash\" })\r\n    //setSelectedCustomer({ id: 11002, name: \"Walk-in Customer\" })\r\n    //setValue1(\"customer\", { id: 11002, name: \"Walk-in Customer\" })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}></Box>\r\n      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n        {\r\n          <>\r\n            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"10px\",\r\n                  p: 3,\r\n                  alignItems: \"flex-end\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>Pay Receipt</Typography>\r\n              </Box>\r\n\r\n              <Box sx={{ p: 3 }}>\r\n                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                  <Grid item xs={12}>\r\n                    <Grid container gap={2} alignItems={\"center\"}>\r\n                      <Grid item xs={3}>\r\n                        <DatePicker\r\n                          label={\"Invoice Date :*\"}\r\n                          value={date}\r\n                          size={\"small\"}\r\n                          disabled={fieldsDisabled}\r\n                          error={errors1?.date?.message}\r\n                          register={register1(\"date\")}\r\n                          onChange={(date) => {\r\n                            setValue1(\"date\", date)\r\n                            setDate(new Date(date))\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3} sm={12} xs={12} mt={1}>\r\n                        <InputField\r\n                          label=\"Invoice Number\"\r\n                          size=\"small\"\r\n                          disabled={fieldsDisabled}\r\n                          placeholder=\"Invoice Number\"\r\n                          register={register1(\"invoicenumber\")}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <IconButton onClick={() => getReceptionDetail(true)}>\r\n                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n                              </IconButton>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Token\"\r\n                          size=\"small\"\r\n                          disabled={fieldsDisabled}\r\n                          placeholder=\"Enter Token\"\r\n                          register={register1(\"token\")}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <IconButton\r\n                                onClick={() => {\r\n                                  getReceiptDetail()\r\n                                }}\r\n                              >\r\n                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n                              </IconButton>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={2} sm={12} xs={12} mt={2.5}>\r\n                        <PrimaryButton\r\n                          bgcolor={\"#bd9b4a\"}\r\n                          title=\"Clear\"\r\n                          onClick={() => {\r\n                            setCreditButton(false)\r\n                            setFieldsDisabled(false)\r\n                            setValue1(\"token\", \"\")\r\n                            setValue1(\"invoicenumber\", \"\")\r\n                            setValue1(\"customer\", \"\")\r\n                            setValue1(\"invoice_date\", \"\")\r\n                            setValue1(\"mobile\", \"\")\r\n                            setValue1(\"ref\", \"\")\r\n                            setValue1(\"display_customer\", \"\")\r\n                            setValue1(\"email\", \"\")\r\n                            setValue1(\"address\", \"\")\r\n                            setValue1(\"trn\", \"\")\r\n                            setValue1(\"cost_center\", \"\")\r\n                            setRows([])\r\n                            setPayButton(false)\r\n                            setSubTotal(0)\r\n                          }}\r\n                          loading={loading}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* <Grid\r\n                                        item\r\n                                        md={5.5}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n\r\n\r\n\r\n                                            <Grid item xs={5.7} >\r\n                                                <SelectField\r\n                                                    size={'small'}\r\n                                                    label={'Customer *:'}\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                                                    selected={selectedCustomer}\r\n                                                    onSelect={(value) => {\r\n                                                        setSelectedCustomer(value)\r\n\r\n\r\n                                                    }}\r\n                                                    error={errors1?.customer?.message}\r\n                                                    register={register1(\"customer\")}\r\n                                                />\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                        </Grid>\r\n                                    </Grid> */}\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{\r\n                      border: \"2px solid black\",\r\n                      p: 2,\r\n                      borderRadius: \"15px\",\r\n                      mt: { md: 0, sm: 2, xs: 2 },\r\n                    }}\r\n                  >\r\n                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                    <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <DatePicker\r\n                          label={\"Payment Date :*\"}\r\n                          value={date}\r\n                          size={\"small\"}\r\n                          error={errors1?.date?.message}\r\n                          register={register1(\"paidAt\")}\r\n                          onChange={(date) => {\r\n                            setValue1(\"paidAt\", date)\r\n                            setPaidAt(new Date(date))\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <SelectField\r\n                          size={\"small\"}\r\n                          label={\"Customer *:\"}\r\n                          disabled={true}\r\n                          options={[{ id: 11002, name: \"Walk-in Customer\" }]}\r\n                          selected={selectedCustomer}\r\n                          onSelect={(value) => {\r\n                            setSelectedCustomer(value)\r\n                          }}\r\n                          error={errors1?.customer?.message}\r\n                          register={register1(\"customer\")}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Display Customer\"\r\n                          size=\"small\"\r\n                          disabled={true}\r\n                          placeholder=\"Walk-in Customer\"\r\n                          register={register1(\"display_customer\")}\r\n                          error={errors1?.display_customer?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Mobile\"\r\n                          size=\"small\"\r\n                          placeholder=\"Mobile No\"\r\n                          disabled={true}\r\n                          register={register1(\"mobile\", {\r\n                            pattern: {\r\n                              value: /^05[0-9]{8}$/,\r\n                              message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                            },\r\n                          })}\r\n                          error={errors1?.mobile?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Email\"\r\n                          size=\"small\"\r\n                          placeholder=\"Email\"\r\n                          disabled={true}\r\n                          register={register1(\"email\")}\r\n                          error={errors1?.email?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"TRN\"\r\n                          size=\"small\"\r\n                          placeholder=\"TRN\"\r\n                          disabled={true}\r\n                          register={register1(\"trn\", {\r\n                            required: false,\r\n                          })}\r\n                        />\r\n                      </Grid>\r\n                      {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Case No\"\r\n                          size=\"small\"\r\n                          placeholder=\"Case No\"\r\n                          disabled={true}\r\n                          register={register1(\"caseno\", {\r\n                            required: false\r\n                          })}\r\n\r\n                        />\r\n                      </Grid> */}\r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Ref\"\r\n                          disabled={true}\r\n                          size=\"small\"\r\n                          placeholder=\"Reference\"\r\n                          register={register1(\"ref\")}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <SelectField\r\n                          label=\"Cost Center\"\r\n                          size=\"small\"\r\n                          disabled={true}\r\n                          options={[{ id: \"TASHEEL\", name: \"TASHEEL\" }]}\r\n                          selected={selectedCostCenter}\r\n                          onSelect={(value) => setSelectedCostCenter(value)}\r\n                          register={register1(\"cost_center\", {\r\n                            required: false,\r\n                          })}\r\n                        />\r\n                      </Grid> */}\r\n                      \r\n                      <Grid item md={3.8} sm={5.5} xs={12}>\r\n                        <InputField\r\n                          label=\"Address\"\r\n                          size=\"small\"\r\n                          placeholder=\"Address\"\r\n                          multiline\r\n                          disabled={true}\r\n                          rows={2}\r\n                          register={register1(\"address\")}\r\n                          error={errors1?.address?.message}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n\r\n                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows?.map((item, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell sx={{display: \"none\"}}>{item?.id}</TableCell>\r\n                        <TableCell>{item?.service?.item_code}</TableCell>\r\n                        <TableCell>{item?.service?.name}</TableCell>\r\n                        <TableCell>{item?.quantity}</TableCell>\r\n                        <TableCell>{item?.govt_fee}</TableCell>\r\n                        <TableCell>{item?.center_fee}</TableCell>\r\n                        <TableCell>{item?.bank_charge}</TableCell>\r\n                        <TableCell>{item?.total}</TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Transaction Id\"\r\n                            type=\"number\"\r\n                            value={item.transaction_id || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Application Id\"\r\n                            type=\"number\"\r\n                            disabled={true}\r\n                            value={item.application_id || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <TextField\r\n                            size=\"small\"\r\n                            placeholder=\"Ref No\"\r\n                            type=\"number\"\r\n                            disabled={true}\r\n                            value={item.ref_no || \"\"}\r\n                            onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n                          />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n\r\n                    <TableRow>\r\n                      <TableCell colSpan={9} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Sub-total:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {subTotal}\r\n                        </Typography>{\" \"}\r\n                        {/* Display the Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n\r\n                    <TableRow>\r\n                      <TableCell colSpan={9} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Net Taxable Amount:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {rows\r\n                            ?.reduce((total, item) => {\r\n                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n                              const qty = Number.parseInt(item?.quantity ?? 1)\r\n                              return total + fee * qty\r\n                            }, 0)\r\n                            .toFixed(2)}\r\n                        </Typography>{\" \"}\r\n                        {/* Display the Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell colSpan={9} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Total Vat:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {(\r\n                            rows?.reduce((total, item) => {\r\n                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n                              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n                              return total + fee * qty\r\n                            }, 0) * 0.05\r\n                          ).toFixed(2)}\r\n                        </Typography>{\" \"}\r\n                        {/* Display the Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                    <TableRow>\r\n                      <TableCell colSpan={9} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          Amount Total:\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                          {(\r\n                            Number.parseFloat(subTotal) +\r\n                            rows?.reduce((total, item) => {\r\n                              const fee = Number.parseFloat(item?.center_fee ?? 0)\r\n                              const qty = Number.parseFloat(item?.quantity ?? 1)\r\n                              return total + fee * qty\r\n                            }, 0) *\r\n                            0.05\r\n                          ).toFixed(2)}\r\n                        </Typography>{\" \"}\r\n                        {/* This can be the same as Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} align=\"right\">\r\n                        <Grid container gap={2} justifyContent={\"center\"}>\r\n                          <Button\r\n                            onClick={() => setPayButton(true)}\r\n                            disabled={rows?.length == 0}\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                              textTransform: \"capitalize\",\r\n                              backgroundColor: \"#bd9b4a\",\r\n                              width: \"200px\",\r\n                              \":hover\": {\r\n                                backgroundColor: \"rgb(189 155 74)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            Pay\r\n                          </Button>\r\n                          {console.log(selectedCustomer,'selectedCustomer')\r\n                          }\r\n                          {creditButton && !detail?.credited_by && selectedCustomer?.id != 11002 && <Button\r\n                            onClick={() => handleCredit()}\r\n\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                              textTransform: \"capitalize\",\r\n                              backgroundColor: \"#bd9b4a\",\r\n                              width: \"200px\",\r\n                              \":hover\": {\r\n                                backgroundColor: \"rgb(189 155 74)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            Mark As Credit\r\n                          </Button>}\r\n                          <Button\r\n                            onClick={() => setPayButton(false)}\r\n                            variant=\"contained\"\r\n                            sx={{\r\n                              textTransform: \"capitalize\",\r\n                              backgroundColor: \"#bd9b4a\",\r\n                              width: \"200px\",\r\n                              \":hover\": {\r\n                                backgroundColor: \"rgb(189 155 74)\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </Grid>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              {payButton && (\r\n                <Grid container mt={2} spacing={2}>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Total Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Total Amount\"\r\n                      register={register1(\"total\", {\r\n                        required: \"please enter total .\",\r\n                      })}\r\n                      error={errors1?.total?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Additional Percentage\"\r\n                      size=\"small\"\r\n                      disabled={chargesDisabled}\r\n                      placeholder=\"Additional Percentage\"\r\n                      register={register1(\"percentage\", {\r\n                        required: \"please enter percentage.\",\r\n                        onChange: (e) => {\r\n                          const percentage = parseFloat(e.target.value) || 0;\r\n                          const totalAmount = parseFloat(getValues1(\"total\")) || 0;\r\n\r\n                          const additionalCharges = (totalAmount * percentage) / 100;\r\n\r\n                          console.log(\"Additional Charges:\", additionalCharges.toFixed(2));\r\n\r\n                          setValue1(\"additionalCharges\", additionalCharges.toFixed(2));\r\n                          setValue1('finalTotal', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n                          setValue1('balance', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n                          setValue1('payamount', parseFloat(parseFloat(getValues1('total')) + parseFloat(additionalCharges)).toFixed(2))\r\n                        },\r\n                      })}\r\n                      error={errors1?.percentage?.message}\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Additional Charges\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Additional Charges\"\r\n                      register={register1(\"additionalCharges\", {\r\n                        required: \"please enter additionalCharges .\",\r\n                      })}\r\n                      error={errors1?.additionalCharges?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Final Total\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Final Total\"\r\n                      register={register1(\"finalTotal\", {\r\n                        required: \"please enter finalTotal .\",\r\n                      })}\r\n                      error={errors1?.finalTotal?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Paid Amount\"\r\n\r\n                      disabled={true}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter amount\"\r\n\r\n                      register={register1(\"amount\", {\r\n                        required: false,\r\n\r\n                      })}\r\n                      error={errors1?.amount?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Balance Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Balance Amount\"\r\n                      register={register1(\"balance\", {\r\n                        required: \"please enter balance .\",\r\n                      })}\r\n                      error={errors1?.balance?.message}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Narration\"\r\n                      size=\"small\"\r\n                      placeholder=\"Narration\"\r\n                      register={register1(\"narration\")}\r\n                      error={errors1?.narration?.message}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid container p={2} spacing={2}>\r\n                    <Grid item md={3} sm={12} xs={12}>\r\n                      <InputField\r\n                        label=\"Amount\"\r\n                        size=\"small\"\r\n\r\n                        placeholder=\"Amount\"\r\n                        register={register1(\"payamount\", {\r\n                          required: false,\r\n                        })}\r\n                        error={errors1?.payamount?.message}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item md={3} sm={12} xs={12}>\r\n                      <SelectField\r\n                        label=\"Payment Mode\"\r\n                        size=\"small\"\r\n                        options={[\r\n                          { id: \"Cash\", name: \"Cash\" },\r\n                          { id: \"Bank\", name: \"Bank\" },\r\n                          { id: \"Card\", name: \"Card\" },\r\n                          { id: \"Payment Link\", name: \"Payment Link\" },\r\n                        ]}\r\n                        selected={watch1(\"payment\")}\r\n                        onSelect={(value) => {\r\n                          setValue1(\"payment\", value)\r\n                          setSelectedMode(value)\r\n                        }}\r\n                        register={register1(\"payment\", {\r\n                          required: \"Please select payment mode\",\r\n                        })}\r\n                        error={errors1?.payment?.message}\r\n                      />\r\n                    </Grid>\r\n                    {selectedMode?.id == \"Bank\" && (\r\n                      <Grid item md={3} sm={12} xs={12}>\r\n                        <SelectField\r\n                          label=\"Banks\"\r\n                          size=\"small\"\r\n                          options={banks}\r\n                          selected={selectedBank}\r\n                          onSelect={(value) => {\r\n                            setSelectedBank(value)\r\n                          }}\r\n                          register={register1(\"bank\", {\r\n                            required: \"Please select a bank\",\r\n                          })}\r\n                          error={errors1?.bank?.message}\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {selectedMode?.id == \"Card\" && (\r\n                      <Grid item md={3} sm={12} xs={12}>\r\n                        <SelectField\r\n                          label=\"Card\"\r\n                          size=\"small\"\r\n                          options={cards}\r\n                          selected={selectedCard}\r\n                          onSelect={(value) => {\r\n                            setSelectedCard(value)\r\n                          }}\r\n                          register={register1(\"card\", {\r\n                            required: \"Please select a card\",\r\n                          })}\r\n                          error={errors1?.card?.message}\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                    {selectedMode?.id == \"Card\" && <Grid item md={3} sm={12} xs={12}>\r\n                      <InputField\r\n                        label=\"Authorization Code\"\r\n                        size=\"small\"\r\n                        placeholder=\"Authorization Code\"\r\n                        register={register1(\"remarks\", {\r\n                          required: \"Please enter code\",\r\n                        })}\r\n                        error={errors1?.remarks?.message}\r\n                      />\r\n                    </Grid>}\r\n                    <Grid item md={12} sm={12} xs={12}>\r\n                      <Button\r\n                        onClick={() => addPayments(getValues1('payamount'), selectedMode?.id, selectedBank, selectedCard, getValues1('remarks'))}\r\n\r\n                        variant=\"contained\"\r\n                        sx={{\r\n                          textTransform: \"capitalize\",\r\n                          backgroundColor: \"#bd9b4a\",\r\n                          width: \"200px\",\r\n                          \":hover\": {\r\n                            backgroundColor: \"rgb(189 155 74)\",\r\n                          },\r\n                        }}\r\n                      >\r\n                        Add New Method\r\n                      </Button>\r\n\r\n                      \r\n                    </Grid>\r\n                    <Typography variant=\"body1\" sx={{ p: 2, fontWeight: 'bold', mt: 2 }} color=\"initial\">\r\n\r\n                      Payment Details\r\n                    </Typography>\r\n\r\n                    <Grid container mt={2} p={2}>\r\n                      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2, width: '100%' }}>\r\n                        {payments.map((payment, index) => (\r\n                          <Box\r\n                            key={index}\r\n                            sx={{\r\n                              border: '1px solid #ccc',\r\n                              borderRadius: 2,\r\n                              width: '30%',\r\n                              p: 2,\r\n                              mb: 1,\r\n                              backgroundColor: '#f9f9f9',\r\n                              position: 'relative',\r\n                            }}\r\n                          >\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              sx={{ position: 'absolute', top: 8, right: 8 }}\r\n                              onClick={() => {\r\n                                const updatedPayments = payments.filter((_, i) => i !== index);\r\n                                setPayments(updatedPayments);\r\n                              }}\r\n                            >\r\n                              <DeleteIcon color=\"error\" fontSize=\"small\" />\r\n                            </IconButton>\r\n\r\n                            <Typography variant=\"body1\"><strong>Amount:</strong> {payment.amount}</Typography>\r\n                            <Typography variant=\"body1\"><strong>Mode:</strong> {payment.payment_mode}</Typography>\r\n                            {payment.mode === 'Bank' && (\r\n                              <Typography variant=\"body1\"><strong>Bank:</strong> {payment.bank?.name || payment.bank}</Typography>\r\n                            )}\r\n                            {payment.mode === 'Card' && (\r\n                              <Typography variant=\"body1\"><strong>Card:</strong> {payment.card?.name || payment.card}</Typography>\r\n                            )}\r\n                          </Box>\r\n                        ))}\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container justifyContent={\"flex-end\"} mt={2} pr={2}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={rows?.length == 0 || buttonDisabled}\r\n                      variant=\"contained\"\r\n                      sx={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: \"#bd9b4a\",\r\n                        \":hover\": {\r\n                          backgroundColor: \"rgb(189 155 74)\",\r\n                        },\r\n                      }}\r\n                    >\r\n                      Create Receipt\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n            </Box>\r\n          </>\r\n        }\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateCustomerPayment\r\n"
        }
    ]
}