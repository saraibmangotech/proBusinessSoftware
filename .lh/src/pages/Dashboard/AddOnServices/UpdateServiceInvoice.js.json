{
    "sourceFile": "src/pages/Dashboard/AddOnServices/UpdateServiceInvoice.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821635,
            "name": "Commit-0",
            "content": "\r\nimport { Box, Grid, TextField, Typography } from '@mui/material'\r\nimport Colors from 'assets/Style/Colors'\r\nimport { PrimaryButton } from 'components/Buttons'\r\nimport DatePicker from 'components/DatePicker'\r\nimport InputField from 'components/Input'\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput'\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster'\r\nimport SelectField from 'components/Select'\r\nimport { ErrorToaster } from 'components/Toaster'\r\nimport moment from 'moment'\r\nimport React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport CustomerServices from 'services/Customer'\r\n\r\nconst UpdateServiceInvoice = () => {\r\n  const navigate = useNavigate()\r\n  const {id}=useParams()\r\n  const { register, handleSubmit, getValues, setValue, control, formState: { errors }, reset } = useForm();\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n  const [date, setDate] = useState(null)\r\n\r\n\r\n  const getData = async (formData) => {\r\n    setLoading(true)\r\n    console.log(formData);\r\n    try {\r\n        let params = {\r\n            service_id: id\r\n\r\n        }\r\n\r\n        const { data } = await CustomerServices.ServiceInvoiceDetail(params);\r\n        console.log(data?.details);\r\n        hanldeDate(data?.details?.date)\r\n        setSelectedCustomer(data?.details?.customer)\r\n        setValue('customer',data?.details?.customer)\r\n        setValue('description',data?.details?.description)\r\n        setValue('cost',data?.details?.service_cost)\r\n \r\n\r\n    } catch (error) {\r\n\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n}\r\n\r\n\r\nconst hanldeDate = (newDate) => {\r\n  try {\r\n    // eslint-disable-next-line eqeqeq\r\n    if (newDate == \"Invalid Date\") {\r\n      setDate(\"invalid\");\r\n      return;\r\n    }\r\n    setDate(new Date(newDate));\r\n  } catch (error) {\r\n    ErrorToaster(error);\r\n  }\r\n};\r\n  // *For Get Customer Queue\r\n\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = { ...filters, ...filter }\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n      }\r\n      params = { ...params, ...Filter }\r\n      const { data } = await CustomerServices.getCustomerQueue(params)\r\n      setCustomerQueue(data?.rows)\r\n\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const CreateAddOnService = async (formData) => {\r\n\r\n\r\n    try {\r\n\r\n      let obj = {\r\n        id:id,\r\n        customer_id: selectedCustomer?.id,\r\n        description: getValues('description'),\r\n        service_cost: getValues('cost'),\r\n        date:date\r\n      };\r\n\r\n      console.log(obj, 'obj');\r\n\r\n      const promise = CustomerServices.UpdateAddOnService(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving...',\r\n        'Added Successfully',\r\n        'Something Went Wrong'\r\n      );\r\n\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate(\"/service-invoice\");\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getCustomerQueue()\r\n    getData()\r\n    \r\n  }, [])\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }} component={'form'} onSubmit={handleSubmit(CreateAddOnService)}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Update Service Invoice</Typography>\r\n        <PrimaryButton\r\n         bgcolor={'#bd9b4a'}\r\n          title=\"Save\"\r\n          type={'submit'}\r\n          loading={loading}\r\n        />\r\n\r\n\r\n      </Box>\r\n      <Box sx={{ p: 3, border: '1px solid #EEEEEE', borderRadius: '10px' }}>\r\n        {/* <Box display=\"flex\" alignItems=\"center\" borderRadius={1} overflow=\"hidden\" >\r\n          <Box bgcolor=\"white\" px={2} py={1} sx={{ border: '2px solid #f5f5f5' }}>\r\n            <Typography variant=\"body1\" >Date</Typography>\r\n          </Box>\r\n          <Box bgcolor=\"grey.100\" px={2} py={1} sx={{ border: '2px solid #f5f5f5' }}>\r\n            <Typography variant=\"body1\">{moment().format('MM-DD-YYYY')}</Typography>\r\n          </Box>\r\n        </Box> */}\r\n        <Grid container mt={5}>\r\n        <Grid item xs={5} >\r\n          <SelectField\r\n            size={'small'}\r\n            label={'Select Customer :'}\r\n\r\n            options={customerQueue}\r\n            selected={selectedCustomer}\r\n            onSelect={(value) => {\r\n              setSelectedCustomer(value)\r\n\r\n\r\n            }}\r\n            error={errors?.customer?.message}\r\n            register={register(\"customer\", {\r\n              required: 'Please select customer account.',\r\n            })}\r\n          />\r\n        </Grid>\r\n\r\n      </Grid>\r\n      <Grid container>\r\n          <Grid item xs={5}>\r\n\r\n            <DatePicker\r\n              label={\"Date :*\"}\r\n              value={date}\r\n              disableFuture={true}\r\n              size={'small'}\r\n\r\n              error={errors?.date?.message}\r\n              register={register(\"date\", {\r\n                required:\r\n                  date ? false :\r\n                    \"please enter date.\"\r\n\r\n              })}\r\n              onChange={(date) => {\r\n                hanldeDate(date)\r\n                setValue('date', date)\r\n\r\n              }\r\n\r\n              }\r\n            /></Grid>\r\n        </Grid>\r\n      <Grid container mt={2}>\r\n        <Grid item xs={5}>\r\n          <InputField\r\n            label={\"Description :\"}\r\n            size={'small'}\r\n            fullWidth={true}\r\n            multiline={true}\r\n            rows={7}\r\n            placeholder={\"Description\"}\r\n            error={errors?.description?.message}\r\n            register={register(\"description\", {\r\n              required:\r\n                false\r\n\r\n            })}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container mt={1}>\r\n        <Grid item xs={5} >\r\n          <LabelCustomInput label={'Service Cost :* '} StartLabel={'AED'} placeholder={'Service Cost'} error={errors?.cost?.message} register={register(\"cost\", { required: \"Enter service  cost\" })} />\r\n        </Grid>\r\n      </Grid>\r\n      </Box>\r\n    \r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default UpdateServiceInvoice\r\n"
        }
    ]
}