{
    "sourceFile": "src/pages/Dashboard/VisaProcessing/RejectedVisaList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821333,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    tableCellClasses,\r\n    IconButton,\r\n    CircularProgress,\r\n    Chip,\r\n    Grid,\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n    TextField,\r\n    Button,\r\n    Radio,\r\n} from \"@mui/material\";\r\nimport {\r\n    AllocateIcon,\r\n    CheckIcon,\r\n    EyeIcon,\r\n    FontFamily,\r\n    Images,\r\n    MessageIcon,\r\n    PendingIcon,\r\n    RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n    Debounce,\r\n    encryptData,\r\n    formatPermissionData,\r\n    handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport VisaServices from \"services/Visa\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport { CleanTypes, getFileSize } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { useAuth } from \"context/UseContext\";\r\n\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n        border: \"1px solid #EEEEEE\",\r\n        padding: \"15px\",\r\n        textAlign: \"left\",\r\n        whiteSpace: \"nowrap\",\r\n        color: \"#434343\",\r\n        paddingRight: \"50px\",\r\n        background: \"transparent\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n\r\n        textWrap: \"nowrap\",\r\n        padding: \"12px !important\",\r\n        paddingLeft: \"15px !important\",\r\n\r\n        \".MuiBox-root\": {\r\n            display: \"flex\",\r\n            gap: \"6px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            \".MuiBox-root\": {\r\n                cursor: \"pointer\",\r\n            },\r\n        },\r\n        svg: {\r\n            width: \"auto\",\r\n            height: \"24px\",\r\n        },\r\n        \".MuiTypography-root\": {\r\n            textTransform: \"capitalize\",\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: \"nowrap\",\r\n        },\r\n        \".MuiButtonBase-root\": {\r\n            padding: \"8px\",\r\n            width: \"28px\",\r\n            height: \"28px\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: \"flex\",\r\n        height: 100,\r\n        \"& svg\": {\r\n            width: \"40px !important\",\r\n            height: \"40px !important\",\r\n        },\r\n    },\r\n});\r\n\r\nfunction RejectedVisaList() {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        control,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false);\r\n    const [activaVisaDialog, setActiveVisaDialog] = useState(false);\r\n    const [paymentDialog, setPaymentDialog] = useState(false);\r\n    const [isClicked, setIsClicked] = useState(false);\r\n\r\n    const tableHead = [\r\n        ...(isClicked ? [{ name: \"Select\", key: \"\" }] : []),\r\n        { name: \"VR No.\", key: \"\" },\r\n        { name: \"Date\", key: \"created_at\" },\r\n        { name: \"Customer\", key: \"created_at\" },\r\n\r\n        { name: \"Candidate Name\", key: \"candidate_name\" },\r\n        { name: \"Passport Number\", key: \"created_at\" },\r\n        { name: \"Request Status\", key: \"\" },\r\n        { name: \"Processing Status\", key: \"\" },\r\n        { name: \"Action\", key: \"\" },\r\n\r\n    ];\r\n    //   state for visaprocessing use it later saraib\r\n    const [candidates, setCandidates] = useState([])\r\n\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState(\"asc\");\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([\r\n        { id: 1, name: \"asdasd\" },\r\n        { id: 1, name: \"asdasd\" },\r\n    ]);\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null);\r\n    const { user, userLogout } = useAuth();\r\n    const [itemAmount, setItemAmount] = useState();\r\n    const [status, setStatus] = useState();\r\n    const [date, setDate] = useState(null);\r\n    const [paymentType, setPaymentType] = useState(null);\r\n    const [banks, setBanks] = useState([]);\r\n    const [selectedBank, setSelectedBank] = useState(null);\r\n    const [buttonValue, setButtonValue] = useState(\"\");\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [progress, setProgress] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n    const [document, setDocument] = useState(null);\r\n    const [cost, setCost] = useState(0)\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n    const handleRadioChange = (item) => {\r\n        console.log(item);\r\n        setSelectedItem(item);\r\n    };\r\n\r\n\r\n\r\n    // *For Get Customer Queue\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                status: status.id ? \"approved\" : \"rejected\",\r\n                visa_id: selectedVisa?.id,\r\n            };\r\n\r\n            const promise = VisaServices.updateStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                // getVisaRequestList();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const updateActiveVisa = async () => {\r\n        try {\r\n            let obj = {\r\n                type: buttonValue,\r\n                candidate_id: selectedItem?.id,\r\n                visa_id: selectedItem?.visa_id,\r\n                document: document,\r\n                date: new Date()\r\n            };\r\n            console.log(obj);\r\n\r\n            const promise = VisaServices.visaProcessingAdd(obj);\r\n\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setActiveVisaDialog(false);\r\n                getVisaRequestList();\r\n                setDocument('')\r\n                setButtonValue('')\r\n                setIsClicked(false)\r\n                setSelectedItem(null)\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues(\"search\"),\r\n        };\r\n        Debounce(() => getVisaRequestList(1, '', data));\r\n    };\r\n\r\n    const getVisaRequestList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = filter ?  { ...filters, ...filter } : null\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : null,\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CustomerServices.getRejectedVisa(params)\r\n            setCandidates(data?.rows)\r\n\r\n            setTotalCount(data?.count)\r\n            console.log(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort,\r\n        };\r\n        // Debounce(() => getVisaRequestList(1, '', data));\r\n    };\r\n    const CustomCheckbox = styled(Checkbox)(({ theme }) => ({\r\n        \"& .MuiSvgIcon-root\": {\r\n            display: \"none\", // Hide the default check icon\r\n        },\r\n        \"&.Mui-checked\": {\r\n            // This class applies when the checkbox is checked\r\n            position: \"relative\",\r\n            \"&::before\": {\r\n                content: '\"\"',\r\n                position: \"absolute\",\r\n                top: \"3px\", // Adjust this value to control top padding\r\n                left: \"3px\", // Adjust this value to control left padding\r\n                width: \"calc(100% - 6px)\", // Adjust this value to control width\r\n                height: \"calc(100% - 6px)\", // Adjust this value to control height\r\n                backgroundColor: Colors.primary, // Background color when checked\r\n                borderRadius: \"4px\", // Ensure border-radius matches checkbox\r\n            },\r\n        },\r\n\r\n        width: 20, // Set the width of the checkbox\r\n        height: 20, // Set the height of the checkbox\r\n        borderRadius: 4, // Border-radius for the checkbox\r\n        border: \"1px solid grey\", // Border for the checkbox\r\n        position: \"relative\", // Ensure that the pseudo-element positions correctly\r\n    }));\r\n    const handleClick = (value) => {\r\n        setIsClicked(true);\r\n        // Handle the value as needed, for example:\r\n        console.log(value);\r\n        // Or set a state or call another function with the value\r\n        setButtonValue(value);\r\n    };\r\n\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            const inputElement = e.target; // Store a reference to the file input element\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n                let maxSize = 10 * 1024 * 1024\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB')\r\n                }\r\n                else {\r\n                    const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n                    const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n                    // Create a new file with the date-prefixed name\r\n                    const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n\r\n                    const path = await handleUpload(newFile, arr);\r\n                    console.log('Uploaded file path:', path);\r\n                    console.log(path, 'pathpathpath');\r\n                    // Clear the file input after processing\r\n                    inputElement.value = \"\";\r\n                    setDocument('')\r\n                    return path\r\n                }\r\n            } else {\r\n                ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                setSlipDetail(docs);\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getVisaRequestList()\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            {/* <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={[\r\n                  { id: false, name: \"rejected\" },\r\n                  { id: true, name: \"approved\" },\r\n                ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors2?.date?.message}\r\n                register={register2(\"date\", {\r\n                  required: \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue2(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog> */}\r\n            <SimpleDialog\r\n                open={activaVisaDialog}\r\n                onClose={() => { setActiveVisaDialog(false); setDocument('') }}\r\n                title={buttonValue + \" \" + \"Visa\"}\r\n            >\r\n                {buttonValue == 'Absconder' && <Box sx={{ textAlign: 'center' }}>Please deliver original passport of the candidate to MABDE office to process absconder request</Box>}\r\n                <Box component=\"form\" onSubmit={handleSubmit(updateActiveVisa)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12} mt={buttonValue == 'Absconder' ? 4 : ''}>\r\n\r\n                            <Box sx={{ fontWeight: \"bold\" }}>{buttonValue == 'Absconder' ? 'Upload Document:' : 'Upload Document:*'}</Box>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors?.document?.message}\r\n\r\n                                file={document}\r\n                                register={register(\"document\", {\r\n                                    required: (document || buttonValue == 'Absconder') ? false : 'please upload doc',\r\n                                    onChange: async (e) => {\r\n                                        const path = await handleUploadDocument(e);\r\n                                        if (path) {\r\n                                            setDocument(path);\r\n                                        }\r\n                                    }\r\n                                })}\r\n                            />\r\n\r\n\r\n                        </Grid>\r\n\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    disabled={buttonValue == 'Absconder' ? false : !document}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => { setActiveVisaDialog(false); setDocument('') }}\r\n                                    bgcolor={\"#FF1F25\"}\r\n\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n                <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n                    Rejected Visa List\r\n                </Typography>\r\n                {/* <Box sx={{ display: \"flex\", gap: \"10px\" }}>\r\n          {isClicked == true ? (\r\n            <>\r\n              {\r\n                <Button\r\n                  sx={{\r\n                    border: `2px solid ${Colors.primary}`,\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: Colors.primary,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onClick={() => {setIsClicked(false); setSelectedItem(null)}}\r\n                >\r\n                  Cancel\r\n                </Button>}\r\n              {selectedItem && <Button\r\n                sx={{\r\n                  padding: \"10px 20px\",\r\n                  borderRadius: \"10px\",\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"600\",\r\n                  color: Colors.white,\r\n                  display: \"flex\",\r\n                  background: Colors.primary,\r\n                  alignItems: \"center\",\r\n                  \"&:hover\": {\r\n                    background: Colors.primary,\r\n                  }\r\n                }}\r\n                onClick={() => setActiveVisaDialog(true)}\r\n              >\r\n                Next\r\n              </Button>}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {permissions?.renew && <Button\r\n                sx={{\r\n                  border: `2px solid ${Colors.green}`,\r\n                  padding: \"10px 20px\",\r\n                  borderRadius: \"10px\",\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"600\",\r\n                  color: Colors.green,\r\n                  backgroundColor: Colors.lightGreen,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n                onClick={() => handleClick('Renew')}\r\n              >\r\n                Renew\r\n              </Button>}\r\n\r\n              {permissions?.cancel && <Button\r\n                sx={{\r\n                  border: \"2px solid rgba(229, 37, 42, 1)\",\r\n                  padding: \"10px 20px\",\r\n                  borderRadius: \"10px\",\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"600\",\r\n                  color: \"rgba(229, 37, 42, 1)\",\r\n                  backgroundColor: \"rgba(229, 37, 42, 0.1)\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n                onClick={() => handleClick('Cancel')}\r\n              >\r\n                Cancel\r\n              </Button>}\r\n\r\n              {permissions?.absconder && <Button\r\n                sx={{\r\n                  border: `2px solid ${Colors.orange}`,\r\n                  padding: \"10px 20px\",\r\n                  borderRadius: \"10px\",\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"600\",\r\n                  color: Colors.orange,\r\n                  backgroundColor: Colors.lightOrange,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n                onClick={() => handleClick('Absconder')}\r\n              >\r\n                Absconder\r\n              </Button>}\r\n            </>\r\n          )}\r\n        </Box> */}\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                        <LabelCustomInput\r\n                            type={\"text\"}\r\n                            bgcolor={\"#FAFAFA\"}\r\n                            color={Colors.primary}\r\n                            border={\"3px solid #FAFAFA\"}\r\n                            StartLabel={\"Search\"}\r\n                            placeholder={\"Search\"}\r\n                            register={register(\"search\")}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                        item\r\n                        xs={6}\r\n                        display={\"flex\"}\r\n                        justifyContent={\"flex-end\"}\r\n                        gap={2}\r\n                    >\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            textcolor={Colors.white}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => { setValue('search', '');getVisaRequestList(1,'',null);  }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {candidates && (\r\n                        <Box>\r\n                            <Grid container mb={2}></Grid>\r\n\r\n                            {candidates && (\r\n                                <Fragment>\r\n                                    <PDFExport\r\n                                        ref={contentRef}\r\n                                        landscape={true}\r\n                                        paperSize=\"A4\"\r\n                                        margin={5}\r\n                                        fileName=\"Import Customers\"\r\n                                    >\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: \"calc(100vh - 200px)\",\r\n                                                mt: 5,\r\n                                                backgroundColor: \"transparent\",\r\n                                                boxShadow: \"none !important\",\r\n                                                borderRadius: \"0px !important\",\r\n                                            }}\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell\r\n                                                                style={{\r\n                                                                    textAlign:\r\n                                                                        cell?.name == \"SR No.\" ? \"center\" : \"left\",\r\n                                                                    paddingRight:\r\n                                                                        cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                                                }}\r\n                                                                className=\"pdf-table\"\r\n                                                                key={index}\r\n                                                            >\r\n                                                                <Box\r\n                                                                    sx={{\r\n                                                                        display: \"flex\",\r\n                                                                        alignItems: \"flex-end\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {cell?.name}{\" \"}\r\n                                                                    {cell?.name == \"Date\" && (\r\n                                                                        <>\r\n                                                                            &nbsp;\r\n                                                                            <span\r\n                                                                                style={{\r\n                                                                                    height: \"20px\",\r\n                                                                                    cursor: \"pointer\",\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <Box\r\n                                                                                    component={\"img\"}\r\n                                                                                    onClick={() => {\r\n                                                                                        setSort(\r\n                                                                                            sort == \"asc\" ? \"desc\" : \"asc\"\r\n                                                                                        );\r\n                                                                                        handleSort(cell?.key);\r\n                                                                                    }}\r\n                                                                                    src={Images.sortIcon}\r\n                                                                                    width={\"18px\"}\r\n                                                                                ></Box>\r\n                                                                            </span>\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {candidates?.map((item, index) => {\r\n                                                           let sorteddata = item?.statuses.sort((a, b) => a.id - b.id);\r\n                                                           console.log(sorteddata);\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: \"1px solid #EEEEEE !important\",\r\n                                                                }}\r\n                                                            >\r\n                                                                {isClicked && (\r\n                                                                    <Cell\r\n                                                                        sx={{\r\n                                                                            textAlign: \"center\",\r\n                                                                            span: {\r\n                                                                                padding: \"8px\",\r\n                                                                                width: \"22px !important\",\r\n                                                                                height: \"23px !important\",\r\n                                                                            },\r\n                                                                        }}\r\n                                                                        className=\"pdf-table\"\r\n                                                                    >\r\n                                                                        <input\r\n                                                                            disabled={buttonValue == 'Renew' && !moment().add(\"2\", \"months\").startOf(\"day\").isAfter(moment(item.visa_expiry).startOf(\"day\"))}\r\n                                                                            type=\"radio\"\r\n                                                                            checked={selectedItem?.id === item?.id}\r\n                                                                            onChange={() => handleRadioChange(item)}\r\n                                                                            style={{ cursor: 'pointer' }}\r\n                                                                        />\r\n                                                                    </Cell>\r\n                                                                )}\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    {item?.visa_id + '_' + item?.serial_id}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    {item?.passport_number}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    {item?.visa_request?.customer?.name}\r\n                                                                </Cell>\r\n\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    {item?.name}\r\n                                                                </Cell>\r\n\r\n\r\n\r\n\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    <Box sx={{ display: 'flex !important', justifyContent: 'flex-start !important' }}>\r\n                                                                        <Box component={'img'} src={item?.approval_status == 'Rejected' ? Images?.errorIcon : Images.successIcon} width={'15px'}></Box>\r\n                                                                        {item?.approval_status}\r\n\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                <Box sx={{ display: 'flex !important', justifyContent: 'flex-start !important' }}>\r\n                                                                <Box component={'img'} src={sorteddata[sorteddata.length - 1]?.status == \"Medical\" ?\r\n                                                                                Images.blueCircle :\r\n                                                                                sorteddata[sorteddata.length - 1]?.status == \"Stamping\" ?\r\n                                                                                    Images.successIcon :\r\n                                                                                    sorteddata[sorteddata.length - 1]?.status == \"Emirates Id\" ?\r\n                                                                                        Images.lightGreenCircle :\r\n                                                                                        sorteddata[sorteddata.length - 1]?.status == \"Entry permit\"  ?\r\n\r\n                                                                                            Images.pendingIcon :  sorteddata[sorteddata.length - 1]?.status == \"Change Status\"  ? Images.pendingIcon  :   Images.errorIcon} width={'13px'}></Box>\r\n                                                                            {sorteddata[sorteddata.length - 1]?.status}\r\n                                                                        </Box>\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                                    <Box>\r\n                                                                        {<Box component={'img'} src={Images.detailIcon} onClick={() => {\r\n                                                                            if(item?.approval_status == 'Rejected'){\r\n                                                                                navigate(`/visa-detail/${item?.visa_id}`)\r\n                                                                            }\r\n                                                                            else{\r\n                                                                                navigate(`/view-candidate-detail/${item?.id}`)\r\n                                                                            }\r\n                                 \r\n                                                                            }} width={'35px'}></Box>}\r\n\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n\r\n\r\n                                                            </Row>\r\n                                                        );\r\n                                                    })}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getVisaRequestList(1, size.target.value)}\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getVisaRequestList(page, \"\")}\r\n                                    />\r\n                                </Fragment>\r\n                            )}\r\n\r\n                            {loader && <CircleLoading />}\r\n                        </Box>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default RejectedVisaList;\r\n"
        }
    ]
}