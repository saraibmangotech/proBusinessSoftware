{
    "sourceFile": "src/pages/Dashboard/VisaProcessing/VisaProcessingList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821335,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  tableCellClasses,\r\n  IconButton,\r\n  CircularProgress,\r\n  Chip,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n  TextField,\r\n  Button,\r\n  Radio,\r\n  DialogActions,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n} from \"@mui/material\";\r\nimport {\r\n  AllocateIcon,\r\n  CheckIcon,\r\n  EyeIcon,\r\n  FontFamily,\r\n  Images,\r\n  MessageIcon,\r\n  PendingIcon,\r\n  RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n  Debounce,\r\n  encryptData,\r\n  formatPermissionData,\r\n  handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport VisaServices from \"services/Visa\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport { CleanTypes, getFileSize } from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport CalendarMonthIcon from \"@mui/icons-material/CalendarMonth\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport { addDays, addMonths } from \"date-fns\";\r\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\r\nimport SummarizeIcon from \"@mui/icons-material/Summarize\";\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n    border: \"1px solid #EEEEEE\",\r\n    padding: \"15px\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n    color: \"#434343\",\r\n    paddingRight: \"50px\",\r\n    background: \"transparent\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n\r\n    textWrap: \"nowrap\",\r\n    padding: \"12px !important\",\r\n    paddingLeft: \"15px !important\",\r\n\r\n    \".MuiBox-root\": {\r\n      display: \"flex\",\r\n      gap: \"6px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      \".MuiBox-root\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    svg: {\r\n      width: \"auto\",\r\n      height: \"24px\",\r\n    },\r\n    \".MuiTypography-root\": {\r\n      textTransform: \"capitalize\",\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: \"nowrap\",\r\n    },\r\n    \".MuiButtonBase-root\": {\r\n      padding: \"8px\",\r\n      width: \"28px\",\r\n      height: \"28px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: \"flex\",\r\n    height: 100,\r\n    \"& svg\": {\r\n      width: \"40px !important\",\r\n      height: \"40px !important\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction VisaList() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n\r\n    control,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    watch,\r\n    getValues: getValues2,\r\n    formState: { errors: errors2 },\r\n  } = useForm();\r\n  const {\r\n    register: register3,\r\n    handleSubmit: handleSubmit3,\r\n    setValue: setValue3,\r\n\r\n    getValues: getValues3,\r\n    formState: { errors: errors3 },\r\n  } = useForm();\r\n  const {\r\n    register: register4,\r\n    handleSubmit: handleSubmit4,\r\n    setValue: setValue4,\r\n\r\n    getValues: getValues4,\r\n    formState: { errors: errors4 },\r\n  } = useForm();\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [statusDialog, setStatusDialog] = useState(false);\r\n  const [activaVisaDialog, setActiveVisaDialog] = useState(false);\r\n  const [paymentDialog, setPaymentDialog] = useState(false);\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [dateDialog, setDateDialog] = useState(null);\r\n  const [reasonDialog, setReasonDialog] = useState(false);\r\n  const [charges, setCharges] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const docRef = useRef(null);\r\n  const [visaType, setVisaType] = useState(\"In\");\r\n  const [visaTenture, setVisaTenture] = useState(\"1 year\");\r\n\r\n  const tableHead = [\r\n    ...(isClicked ? [{ name: \"Select\", key: \"\" }] : []),\r\n    { name: \"VR No.\", key: \"\" },\r\n    { name: \"Date\", key: \"created_at\" },\r\n    { name: \"Customer\", key: \"created_at\" },\r\n    { name: \"Passport # \", key: \"candidate_name\" },\r\n    { name: \"Candidate Name\", key: \"candidate_name\" },\r\n    { name: \"Visa Rate\", key: \"visa_rate\" },\r\n\r\n    { name: \"Visa Type\", key: \"visa_type\" },\r\n    { name: \"Status\", key: \"\" },\r\n\r\n    { name: \"CS/EP Date\", key: \"\" },\r\n    { name: \"Action\", key: \"\" },\r\n  ];\r\n  //   state for visaprocessing use it later saraib\r\n  const [candidates, setCandidates] = useState([]);\r\n\r\n  const allowFilesType = [\r\n    \"image/png\",\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"application/pdf\",\r\n    \"application/vnd.ms-excel\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ];\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [sort, setSort] = useState(\"asc\");\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n  // *For setPermissions\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedVisa, setSelectedVisa] = useState(null);\r\n  const { user, userLogout } = useAuth();\r\n  const [itemAmount, setItemAmount] = useState();\r\n  const [status, setStatus] = useState();\r\n  const [date, setDate] = useState(null);\r\n  const [date2, setDate2] = useState(null);\r\n  const [paymentType, setPaymentType] = useState(null);\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedBank, setSelectedBank] = useState(null);\r\n  const [buttonValue, setButtonValue] = useState(\"\");\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n  const [document, setDocument] = useState(null);\r\n  const [fitnessDocument, setFitnessDocument] = useState(null);\r\n  const [cost, setCost] = useState(0);\r\n  const [statuses, setStatuses] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [currentStatus, setCurrentStatus] = useState(null);\r\n  const [disabledButton, setDisabledButton] = useState(false);\r\n  const [reason, setReason] = useState(null);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n  const [selectedStatus, setSelectedStatus] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [vipMedicalCheck, setVipMedicalCheck] = useState(false);\r\n  const [selectedCandidate, setSelectedCandidate] = useState(null);\r\n  const [passPortNo, setPassPortNo] = useState(null);\r\n  const [customers2, setCustomers2] = useState([]);\r\n  const [openEditDialog, setOpenEditDialog] = useState(false);\r\n  const [cancelStatus, setCancelStatus] = useState(false)\r\n\r\n  const [documents, setDocuments] = useState([\r\n    {\r\n      name: \"Employee Undertaking\",\r\n      key: \"undertaking\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n    {\r\n      name: \"Company Undertaking\",\r\n      key: \"cundertaking\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n\r\n    {\r\n      name: \"Passport Copy\",\r\n      key: \"passportcopy\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n    {\r\n      name: \"Digital Photo\",\r\n      key: \"digitalphoto\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n    {\r\n      name: \"Employment Contract\",\r\n      key: \"contract\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n    {\r\n      name: \"Offer Letter\",\r\n      key: \"offerletter\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: true,\r\n    },\r\n    {\r\n      name: \"Previous Emirates Ids\",\r\n      key: \"emiratesids\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n    {\r\n      name: \"Previous UAE Visa Copy\",\r\n      key: \"uaevisa\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n    {\r\n      name: \"Cancellation\",\r\n      key: \"cancellation\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n    {\r\n      name: \"UAE Driving License\",\r\n      key: \"drivinglicense\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n    {\r\n      name: \"Work Permit\",\r\n      key: \"workpermit\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n    {\r\n      name: \"Other Documents\",\r\n      key: \"otherdoc\",\r\n      path: \"\",\r\n      expiry_date: null,\r\n      is_required: false,\r\n    },\r\n  ]);\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const handleRadioChange = (item) => {\r\n    setSelectedItem(item);\r\n  };\r\n  const DepositReversal = async (status) => {\r\n    console.log(status,'status');\r\n    \r\n  \r\n    try {\r\n      let obj = {\r\n       candidate_id:selectedVisa?.id\r\n      };\r\n\r\n      const promise = VisaServices.DepositReversal(obj);\r\n      console.log(promise);\r\n\r\n     \r\n\r\n     \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  // *For Get Customer Queue\r\n\r\n  const UpdateStatus = async () => {\r\n    setDisabled(true);\r\n    setStatusDialog(false);\r\n    try {\r\n      let obj = {\r\n        id: selectedVisa?.id,\r\n        candidate_name: selectedVisa?.name,\r\n        visa_id: selectedVisa?.visa_id,\r\n        visa_charges: selectedVisa?.visa_charges,\r\n        visa_cost: selectedVisa?.visa_cost,\r\n        rejection_charges: getValues(\"rejectionCharges\"),\r\n        rejection_tax: parseFloat(getValues(\"rejectionCharges\")) * 0.05,\r\n        rejection_reason: getValues(\"rejectionReason\"),\r\n        status: status?.id,\r\n\r\n        date: moment(date).format(\"YYYY-MM-DD\"),\r\n        visa_tenure: selectedVisa?.visa_tenure,\r\n        document: document,\r\n      };\r\n\r\n      const promise = VisaServices.CandidateUpdateStatus(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setDisabled(false);\r\n        getVisaRequestList();\r\n        setStatus(null);\r\n        if(status?.id == 'Reject' || status?.id == 'Cancel' ){\r\n          DepositReversal(status?.id)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  // *For Get Customer Queue\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    setLoader(true);\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n        sort_order: sort,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getCustomerQueue(params);\r\n      setCustomerQueue(data?.rows);\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (file) => {\r\n    setDocument(file);\r\n\r\n    if (!file) {\r\n      setDocument(null);\r\n    }\r\n  };\r\n\r\n  const UpdateDate = async () => {\r\n    setDisabled(true);\r\n    setStatusDialog(false);\r\n\r\n    try {\r\n      let obj = {\r\n        id: selectedVisa?.id,\r\n        visa_id: selectedVisa?.visa_id,\r\n        passport_number: selectedVisa?.passport_number,\r\n        actual_entry_date: moment(date).format(\"YYYY-MM-DD\"),\r\n      };\r\n\r\n      const promise = VisaServices.UpdateDate(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setDisabled(false);\r\n        getVisaRequestList();\r\n        setDate(null);\r\n\r\n        setStatus(null);\r\n        setDateDialog(false);\r\n      }\r\n    } catch (error) {\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  // *For Get Countries\r\n  const getCountries = async (id) => {\r\n    try {\r\n      const { data } = await SystemServices.getCountries();\r\n      setCountries(data?.countries?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const updateActiveVisa = async () => {\r\n    try {\r\n      let obj = {\r\n        type: buttonValue,\r\n        candidate_id: selectedItem?.id,\r\n        visa_id: selectedItem?.visa_id,\r\n        document: document,\r\n        date: new Date(),\r\n      };\r\n\r\n      const promise = VisaServices.visaProcessingAdd(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setActiveVisaDialog(false);\r\n        getVisaRequestList();\r\n        setDocument(\"\");\r\n        setButtonValue(\"\");\r\n        setIsClicked(false);\r\n        setSelectedItem(null);\r\n      }\r\n    } catch (error) { }\r\n  };\r\n\r\n  const handleDocArrayUpdate = async (field, value, key) => {\r\n    if (field === \"path\") {\r\n      const updatedDocuments = documents.map((doc) => {\r\n        if (doc.key === key) {\r\n          return { ...doc, path: value }; // Update the path\r\n        }\r\n        return doc; // Return the document as is if the key doesn't match\r\n      });\r\n\r\n      // Assuming you want to update the documents array\r\n      // You can replace the following line with your state updating logic\r\n      setDocuments(updatedDocuments);\r\n    } else {\r\n      const updatedDocuments = documents.map((doc) => {\r\n        if (doc.key === key) {\r\n          return { ...doc, expiry_date: moment(value).format(\"YYYY-MM-DD\") }; // Update the path\r\n        }\r\n        return doc; // Return the document as is if the key doesn't match\r\n      });\r\n\r\n      setDocuments(updatedDocuments);\r\n      // Handle other fields if needed\r\n    }\r\n  };\r\n\r\n  const updateResult = (key, newResult) => {\r\n    console.log(newResult);\r\n    const updatedDocuments = documents.map((doc) => {\r\n      if (doc.key === key) {\r\n        return { ...doc, path: newResult }; // Update the path\r\n      }\r\n      return doc; // Return the document as is if the key doesn't match\r\n    });\r\n\r\n    setDocuments(updatedDocuments);\r\n  };\r\n\r\n  const handleDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setDate(\"invalid\");\r\n        return;\r\n      }\r\n      setDate(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const handleDate2 = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setDate2(\"invalid\");\r\n        return;\r\n      }\r\n      setDate2(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues(\"search\"),\r\n      customer_id: selectedCustomer?.id,\r\n      last_status: selectedStatus?.id,\r\n    };\r\n    Debounce(() => getVisaRequestList(1, \"\", data));\r\n  };\r\n\r\n  const getVisaRequestList = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage;\r\n      const Limit = limit ? limit : pageLimit;\r\n      const Filter = filter ? { ...filters, ...filter } : null;\r\n      setCurrentPage(Page);\r\n      setPageLimit(Limit);\r\n      setFilters(Filter);\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n        approval_status: \"Approved\",\r\n        customer_id: user?.user_type == \"C\" ? user?.customer_id : null,\r\n      };\r\n      params = { ...params, ...Filter };\r\n      console.log(params);\r\n\r\n      const { data } = await CustomerServices.getCandidateLists(params);\r\n      setCandidates(data?.rows);\r\n\r\n      setTotalCount(data?.count);\r\n\r\n      setPermissions(formatPermissionData(data?.permissions));\r\n      data?.permissions.forEach((e) => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort,\r\n    };\r\n    Debounce(() => getVisaRequestList(1, \"\", data));\r\n  };\r\n  const CustomCheckbox = styled(Checkbox)(({ theme }) => ({\r\n    \"& .MuiSvgIcon-root\": {\r\n      display: \"none\", // Hide the default check icon\r\n    },\r\n    \"&.Mui-checked\": {\r\n      // This class applies when the checkbox is checked\r\n      position: \"relative\",\r\n      \"&::before\": {\r\n        content: '\"\"',\r\n        position: \"absolute\",\r\n        top: \"3px\", // Adjust this value to control top padding\r\n        left: \"3px\", // Adjust this value to control left padding\r\n        width: \"calc(100% - 6px)\", // Adjust this value to control width\r\n        height: \"calc(100% - 6px)\", // Adjust this value to control height\r\n        backgroundColor: Colors.primary, // Background color when checked\r\n        borderRadius: \"4px\", // Ensure border-radius matches checkbox\r\n      },\r\n    },\r\n\r\n    width: 20, // Set the width of the checkbox\r\n    height: 20, // Set the height of the checkbox\r\n    borderRadius: 4, // Border-radius for the checkbox\r\n    border: \"1px solid grey\", // Border for the checkbox\r\n    position: \"relative\", // Ensure that the pseudo-element positions correctly\r\n  }));\r\n  const handleClick = (value) => {\r\n    setIsClicked(true);\r\n    // Handle the value as needed, for example:\r\n\r\n    // Or set a state or call another function with the value\r\n    setButtonValue(value);\r\n  };\r\n\r\n  const handleUploadDocument = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const inputElement = e.target;\r\n      const file = e.target.files[0];\r\n\r\n      let arr = [\r\n        {\r\n          name: file?.name,\r\n          file: \"\",\r\n          type: file?.type.split(\"/\")[1],\r\n          size: getFileSize(file.size),\r\n          isUpload: false,\r\n        },\r\n      ];\r\n      if (allowFilesType.includes(file.type)) {\r\n        let maxSize = 10 * 1024 * 1024;\r\n        if (file.size > maxSize) {\r\n          showErrorToast(\"File Size Must Be Less than 10 MB\");\r\n        } else {\r\n          const path = await handleUpload(file, arr);\r\n\r\n          return path;\r\n        }\r\n      } else {\r\n        ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const getData = async (formData) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      let params = {\r\n        charges_type: \"cost\",\r\n      };\r\n\r\n      const { data } = await SystemServices.getRates(params);\r\n\r\n      let details = data?.charges;\r\n      setCharges(details);\r\n    } catch (error) {\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n        setSlipDetail(docs);\r\n\r\n        return data?.data?.path;\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const handleOpenStatusDialog = (item) => {\r\n    if (permissions.processing_status_update) {\r\n      if (user?.user_type != \"C\") {\r\n        setSelectedVisa(item); // Set the currently selected visa\r\n\r\n        const sortedData = item?.statuses.sort((a, b) => a.id - b.id); // Sort statuses\r\n\r\n        setCurrentStatus(sortedData[sortedData?.length - 1].status);\r\n        // setStatuses(getAvailableStatuses(sortedData));\r\n        // setStatus(sortedData[sortedData.length - 1]?.status); // Set the current status\r\n        setStatusDialog(true); // Open the dialog\r\n      }\r\n    }\r\n  };\r\n\r\n  const UpdateCandidate = async (formData) => {\r\n    try {\r\n      let obj = {\r\n        id: selectedCandidate,\r\n        name: formData?.candidateName,\r\n        phone: formData?.Phone,\r\n        is_editable: selectedCandidate?.is_editable,\r\n        email: formData?.email,\r\n        camp_location: formData?.campLocation,\r\n        vip_medical_temp: formData?.vipMedical,\r\n        vip_medical_extra: vipMedicalCheck ? formData?.vipMedical : null,\r\n        nationality: selectedCountry,\r\n        nationality_id: selectedCountry?.id,\r\n        passport_number: formData?.passportNumber.toUpperCase(),\r\n        employee_id: formData?.employeeid,\r\n        passport_expiry: moment(formData?.passportExp).format(\"YYYY-MM-DD\"),\r\n        visa_designation: formData?.visaDesignation,\r\n        end_consumer: formData?.endConsumer,\r\n        end_consumer_company: formData?.endConsumerCompany,\r\n        documents: documents,\r\n      };\r\n\r\n      const promise = CustomerServices.UpdateCandidate(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        handleFilter();\r\n        setOpen(false);\r\n        setDocuments([\r\n          {\r\n            name: \"Employee Undertaking\",\r\n            key: \"undertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n          {\r\n            name: \"Company Undertaking\",\r\n            key: \"cundertaking\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n\r\n          {\r\n            name: \"Passport Copy\",\r\n            key: \"passportcopy\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n          {\r\n            name: \"Digital Photo\",\r\n            key: \"digitalphoto\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n          {\r\n            name: \"Employment Contract\",\r\n            key: \"contract\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n          {\r\n            name: \"Offer Letter\",\r\n            key: \"offerletter\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true,\r\n          },\r\n          {\r\n            name: \"Previous Emirates Ids\",\r\n            key: \"emiratesids\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n          {\r\n            name: \"Previous UAE Visa Copy\",\r\n            key: \"uaevisa\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n          {\r\n            name: \"Cancellation\",\r\n            key: \"cancellation\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n          {\r\n            name: \"UAE Driving License\",\r\n            key: \"drivinglicense\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n          {\r\n            name: \"Work Permit\",\r\n            key: \"workpermit\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n          {\r\n            name: \"Other Documents\",\r\n            key: \"otherdoc\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: false,\r\n          },\r\n        ]);\r\n      }\r\n      // setCandidates((prevCandidates) => [...prevCandidates, obj]);\r\n      // const updatedCandidates = candidates.map(candidate =>\r\n      //     candidate.serial_id === candidateIndex ? obj : candidate\r\n      // );\r\n      //\r\n      // setOpen(false)\r\n      // // Update the state with the updated candidates array\r\n      // setCandidates(updatedCandidates);\r\n\r\n      // Add your logic to handle the form data here, e.g., sending it to an API.\r\n    } catch (error) {\r\n      console.error(\"Error adding candidate:\", error);\r\n      // Handle the error appropriately, e.g., displaying an error message to the user.\r\n    }\r\n  };\r\n\r\n  const handleUpdateCandidate = (item, index) => {\r\n    let serialId = item?.serial_id;\r\n\r\n    setSelectedCandidate(item?.id);\r\n    if (item?.documents?.length > 0) {\r\n      setDocuments(item?.documents);\r\n    } else {\r\n      setDocuments([\r\n        {\r\n          name: \"Employee Undertaking\",\r\n          key: \"undertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n        {\r\n          name: \"Company Undertaking\",\r\n          key: \"cundertaking\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n\r\n        {\r\n          name: \"Passport Copy\",\r\n          key: \"passportcopy\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n        {\r\n          name: \"Digital Photo\",\r\n          key: \"digitalphoto\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n        {\r\n          name: \"Employment Contract\",\r\n          key: \"contract\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n        {\r\n          name: \"Offer Letter\",\r\n          key: \"offerletter\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: true,\r\n        },\r\n        {\r\n          name: \"Previous Emirates Ids\",\r\n          key: \"emiratesids\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n        {\r\n          name: \"Previous UAE Visa Copy\",\r\n          key: \"uaevisa\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n        {\r\n          name: \"Cancellation\",\r\n          key: \"cancellation\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n        {\r\n          name: \"UAE Driving License\",\r\n          key: \"drivinglicense\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n        {\r\n          name: \"Work Permit\",\r\n          key: \"workpermit\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n        {\r\n          name: \"Other Documents\",\r\n          key: \"otherdoc\",\r\n          path: \"\",\r\n          expiry_date: null,\r\n          is_required: false,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    setOpen(true);\r\n\r\n    setVisaTenture(item?.visa_tenure?.includes(\"1\") ? \"1 year\" : \"2 year\");\r\n    setVisaType(item?.visa_type);\r\n\r\n    setValue2(\"candidateName\", item?.name);\r\n    setValue2(\"Phone\", item?.phone);\r\n    setValue2(\"email\", item?.email);\r\n    setValue2(\"campLocation\", item?.camp_location);\r\n    setValue2(\"passportNumber\", item?.passport_number);\r\n    setValue2(\"employeeid\", item?.employee_id);\r\n    setValue2(\r\n      \"passportExp\",\r\n      moment(item?.passport_expiry).format(\"MM-DD-YYYY\")\r\n    );\r\n    handleDate2(item?.passport_expiry);\r\n    if (item?.vip_medical_extra) {\r\n      setVipMedicalCheck(true);\r\n    } else {\r\n      setVipMedicalCheck(false);\r\n    }\r\n    let nationality = countries?.find(\r\n      (item2) => item2?.id == item?.nationality_id\r\n    );\r\n\r\n    setSelectedCountry(nationality);\r\n    setValue2(\"nationality\", nationality);\r\n    setValue2(\"visaDesignation\", item?.visa_designation);\r\n    setValue2(\"basic\", item?.salary_basic);\r\n    setValue2(\"allowance\", item?.salary_allowance);\r\n    setValue2(\"endConsumer\", item?.end_consumer);\r\n    setValue2(\"endConsumerCompany\", item?.end_consumer_company);\r\n    setValue2(\"totalSalary\", item?.salary_total);\r\n\r\n    setValue2(\"2yearInsideRate\", item?.inside_rate);\r\n    setValue2(\"2yearOutsideRate\", item?.outside_rate);\r\n    setValue2(\"2yearRenewalRates\", item?.renewal_rate);\r\n\r\n    setValue2(\"1yearInsideRate\", item?.inside_rate);\r\n    setValue2(\"1yearOutsideRate\", item?.outside_rate);\r\n    setValue2(\"1yearRenewalRates\", item?.renewal_rate);\r\n\r\n    setValue2(\"vipMedical\", item?.vip_medical_extra);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getVisaRequestList();\r\n    getData();\r\n    getCustomerQueue();\r\n\r\n    getCountries();\r\n  }, []);\r\n  // const getAvailableStatuses = (sortedData) => {\r\n  //   const lastStatus = sortedData[sortedData.length - 1]?.status;\r\n\r\n  //   switch (lastStatus) {\r\n  //     case \"In Progress\":\r\n  //       return [\r\n\r\n  //         { id: \"Change Status\", name: \"Change Status\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Pending\":\r\n  //       return [\r\n  //         { id: \"In Progress\", name: \"In Progress\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Entry Permit\":\r\n  //       return [\r\n\r\n  //         { id: \"Medical\", name: \"Medical\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Change Status\":\r\n  //       return [\r\n\r\n  //         { id: \"Medical\", name: \"Medical\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Medical\":\r\n  //       return [\r\n\r\n  //         { id: \"Emirates Id\", name: \"Emirates Id\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Emirates Id\":\r\n  //       return [\r\n\r\n  //         { id: \"Stamping\", name: \"Stamping\" },\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     case \"Stamping\":\r\n  //       return [\r\n\r\n  //         { id: \"Reject\", name: \"Reject\" },\r\n  //       ];\r\n\r\n  //     default:\r\n  //       return [];\r\n  //   }\r\n  // };\r\n\r\n\r\n  const updateDocument = async () => {\r\n    const params = {\r\n      id: selectedCandidate,\r\n      fitness_report: fitnessDocument,\r\n      passport_number: passPortNo\r\n    }\r\n    console.log(params)\r\n    try {\r\n      const data = await VisaServices.CustomerCandidateUpdate(params);\r\n      SuccessToaster(data?.message)\r\n      setOpenEditDialog(false)\r\n      getVisaRequestList()\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status *:\"}\r\n                options={statuses}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                  setValue(\"status\", value?.name);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Date *:\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors?.date?.message}\r\n                register={register(\"date\", {\r\n                  required: \"Please enter date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            {(status?.name == \"Reject\" ||  status?.name == \"Cancel\") &&   (\r\n              <>\r\n                {\" \"}\r\n                <Grid item mt={2} xs={12}>\r\n                  <LabelCustomInput\r\n                    label={status?.name == \"Cancel\" ? \"Cancellation Charges *:\" : \"Rejection Charges *: \"}\r\n                    StartLabel={\"AED\"}\r\n                    register={register(\"rejectionCharges\", {\r\n                      required: \"Enter rejection charges\",\r\n                      onChange: (e) =>\r\n                        setValue(\r\n                          \"rejectionTax\",\r\n                          parseFloat(e.target.value * 0.05).toFixed(2)\r\n                        ),\r\n                    })}\r\n                    postfix={user?.user_type ? false : true}\r\n                  />\r\n                </Grid>\r\n                <Grid item mt={2} xs={12}>\r\n                  <LabelCustomInput\r\n                    label={\"Tax : \"}\r\n                    StartLabel={\"AED\"}\r\n                    register={register(\"rejectionTax\")}\r\n                    postfix={user?.user_type ? false : true}\r\n                    disabled={true}\r\n                  />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {(status?.name == \"Reject\" ||  status?.name == \"Cancel\") &&  (\r\n              <Grid item mt={2} xs={12}>\r\n                <InputField\r\n                  label={status?.name == \"Cancel\" ? \"Cancellation Reason * :\" : \"Rejection Reason * :\"}\r\n                  size={\"small\"}\r\n                  placeholder={status?.name == \"Cancel\" ? \"Cancellation Reason\" :\"Rejection Reason\"}\r\n                  multiline={true}\r\n                  rows={5}\r\n                  error={errors?.rejectionReason?.message}\r\n                  register={register(\"rejectionReason\", {\r\n                    required: \"reason is required\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid item mt={2} xs={12}>\r\n              <Box sx={{ fontWeight: \"bold\" }}>\r\n                {status?.name != \"In Progress\"\r\n                  ? \"Upload Document: *\"\r\n                  : \"Upload Document:\"}\r\n              </Box>\r\n              <UploadFileSingle\r\n                Memo={true}\r\n                accept={allowFilesType}\r\n                className={\"validationClass\"}\r\n                error={errors?.document?.message}\r\n                disabled={isUploading}\r\n                inputRef={docRef}\r\n                file={document}\r\n                register={register(\"document\", {\r\n                  required:\r\n                    status?.name !== \"In Progress\" && !docRef.current\r\n                      ? \"upload document\"\r\n                      : false,\r\n                  onChange: async (e) => {\r\n                    setIsUploading(true);\r\n\r\n                    // Check if file was deleted\r\n                    if (e.target.files.length === 0) {\r\n                      setDocument(null); // Reset the document state\r\n                      setIsUploading(false); // Handle any additional logic when the file is deleted\r\n                      return;\r\n                    }\r\n\r\n                    // If a new file is uploaded\r\n                    const path = await handleUploadDocument(e);\r\n                    if (path) {\r\n                      setDocument(path);\r\n                      setIsUploading(false);\r\n                    }\r\n                  },\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\", mt: 2 }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  disabled={disabled}\r\n                  className=\"disbaledClass\"\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={openEditDialog}\r\n        onClose={() => setOpenEditDialog(false)}\r\n        title={\"Upload Fitness Report\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit4(updateDocument)}>\r\n          <Grid container>\r\n            <Grid item mt={2} xs={12}>\r\n              <Box sx={{ fontWeight: \"bold\" }}>\"Upload Document\"</Box>\r\n              <UploadFileSingle\r\n                Memo={true}\r\n                accept={allowFilesType}\r\n                className={\"validationClass\"}\r\n                error={errors4?.document?.message}\r\n                disabled={isUploading}\r\n                inputRef={docRef}\r\n                file={fitnessDocument}\r\n                register={register4(\"document\", {\r\n                  required: !docRef.current ? \"upload document\" : false,\r\n                  onChange: async (e) => {\r\n                    setIsUploading(true);\r\n                    if (e.target.files.length === 0) {\r\n                      setFitnessDocument(null);\r\n                      setIsUploading(false);\r\n                      return;\r\n                    }\r\n                    const path = await handleUploadDocument(e);\r\n                    if (path) {\r\n                      setFitnessDocument(path);\r\n                      setIsUploading(false);\r\n                    }\r\n                  },\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\", mt: 2 }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  disabled={disabled}\r\n                  className=\"disbaledClass\"\r\n                  bgcolor={Colors.primary}\r\n                  title={isUploading ? <CircularProgress size={20} /> : \"Upload\"}\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setOpenEditDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={reasonDialog}\r\n        onClose={() => setReasonDialog(false)}\r\n        title={cancelStatus ? \"Cancellation Reason\" :\"Rejection Reason\"}\r\n      >\r\n        <Box sx={{ textAlign: \"left\" }}>\r\n          <span style={{ fontWeight: \"bold\" }}> Reason : </span>{\" \"}\r\n          {reason?.rejection_reason}\r\n        </Box>\r\n        <Box sx={{ display: \"flex\", mt: 2, gap: 4 }}>\r\n          <Box sx={{ textAlign: \"left\" }}>\r\n            <span style={{ fontWeight: \"bold\" }}> Charges : </span>{\" \"}\r\n            {reason?.rejection_charges}\r\n          </Box>\r\n          <Box sx={{ textAlign: \"left\" }}>\r\n            <span style={{ fontWeight: \"bold\" }}> Tax : </span>{\" \"}\r\n            {reason?.rejection_tax}\r\n          </Box>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={dateDialog}\r\n        onClose={() => setDateDialog(false)}\r\n        title={\"Change Date?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit3(UpdateDate)}>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Actual Entry Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors3?.date?.message}\r\n                register={register3(\"date\", {\r\n                  required: \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue3(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  disabled={disabled}\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setDateDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      {/* <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={[\r\n                  { id: false, name: \"rejected\" },\r\n                  { id: true, name: \"approved\" },\r\n                ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors2?.date?.message}\r\n                register={register2(\"date\", {\r\n                  required: \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue2(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog> */}\r\n      <SimpleDialog\r\n        open={activaVisaDialog}\r\n        onClose={() => {\r\n          setActiveVisaDialog(false);\r\n          setDocument(\"\");\r\n        }}\r\n        title={buttonValue + \" \" + \"Visa\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(updateActiveVisa)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <Box sx={{ fontWeight: \"bold\" }}>Upload Document:*</Box>\r\n              <UploadFileSingle\r\n                Memo={true}\r\n                accept={allowFilesType}\r\n                error={errors?.document?.message}\r\n                file={document}\r\n                register={register(\"document\", {\r\n                  required: false,\r\n                  onChange: async (e) => {\r\n                    const path = await handleUploadDocument(e);\r\n                    if (path) {\r\n                      setDocument(path);\r\n                    }\r\n                  },\r\n                })}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => {\r\n                    setActiveVisaDialog(false);\r\n                    setDocument(\"\");\r\n                  }}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n      <Dialog\r\n        component={\"form\"}\r\n        onSubmit={handleSubmit2(UpdateCandidate)}\r\n        open={open}\r\n        maxWidth={\"md\"}\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle id=\"scroll-dialog-title\">Update Candidate</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"scroll-dialog-description\" tabIndex={-1}>\r\n            <Grid container spacing={2}>\r\n              <Grid container mt={5} pl={3}>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography\r\n                    sx={{\r\n                      fontSize: \"15px\",\r\n                      color: Colors.black,\r\n                      mb: 2,\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    Visa Type :{\" \"}\r\n                  </Typography>\r\n                  <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaType}\r\n                      onChange={(e) => {\r\n                        setVisaType(e.target.value);\r\n\r\n                        setTimeout(() => {\r\n                          setValue2(\r\n                            \"2yearInsideRate\",\r\n                            getValues(\"2yearInsideRate\")\r\n                          );\r\n                          setValue2(\r\n                            \"2yearOutsideRate\",\r\n                            getValues(\"2yearOutsideRate\")\r\n                          );\r\n                        }, 1000);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"In\"\r\n                        control={<Radio />}\r\n                        label=\"In\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"out\"\r\n                        control={<Radio />}\r\n                        label=\"Out\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3} sm={3}>\r\n                  <Typography\r\n                    sx={{\r\n                      fontSize: \"15px\",\r\n                      color: Colors.black,\r\n                      mb: 2,\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    Visa Tenure :{\" \"}\r\n                  </Typography>\r\n                  <FormControl>\r\n                    <RadioGroup\r\n                      row\r\n                      defaultValue={visaTenture}\r\n                      onChange={(e) => {\r\n                        setVisaTenture(e.target.value);\r\n                      }}\r\n                    >\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"1 year\"\r\n                        control={<Radio />}\r\n                        label=\"1 Year\"\r\n                      />\r\n                      <FormControlLabel\r\n                        sx={{ color: \"#000\" }}\r\n                        disabled={true}\r\n                        value=\"2 year\"\r\n                        control={<Radio />}\r\n                        label=\"2 Years\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              <Typography\r\n                sx={{\r\n                  fontSize: \"18px\",\r\n                  fontWeight: \"bold\",\r\n                  color: Colors.textColorDarkBlue,\r\n                  p: 3,\r\n                }}\r\n              >\r\n                Visa Rates :{\" \"}\r\n              </Typography>\r\n              {\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.textColorDarkBlue,\r\n                    mt: 3,\r\n                  }}\r\n                >\r\n                  {visaTenture.includes(\"1\")\r\n                    ? \"1 Year Rates \"\r\n                    : \"2 Years Rates \"}\r\n                </Typography>\r\n              }\r\n\r\n              <Grid container pl={3}>\r\n                {visaTenture.includes(\"1\") &&\r\n                  visaType?.toLowerCase() == \"in\" && (\r\n                    <Grid container sx={{ gap: \"20px 25px\" }}>\r\n                      <Grid item xs={5}>\r\n                        <LabelCustomInput\r\n                          label={\"Year Inside Rates :* \"}\r\n                          disabled={true}\r\n                          StartLabel={\"AED\"}\r\n                          register={register2(\"1yearInsideRate\", {\r\n                            required: \"Enter year inside rate\",\r\n                          })}\r\n                          postfix={false}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false }  StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n                    </Grid>\r\n                  )}\r\n                {visaTenture.includes(\"1\") &&\r\n                  visaType?.toLowerCase() == \"out\" && (\r\n                    <Grid container sx={{ gap: \"20px 25px\" }}>\r\n                      <Grid item xs={5}>\r\n                        <LabelCustomInput\r\n                          label={\"Year Outside Rates :*  \"}\r\n                          disabled={true}\r\n                          StartLabel={\"AED\"}\r\n                          register={register2(\"1yearOutsideRate\", {\r\n                            required: \"Enter year outside rate\",\r\n                          })}\r\n                          postfix={true}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* <Grid item xs={5} >\r\n                                        <LabelCustomInput label={'Renewal Rates :*  '}  disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"1yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                    </Grid> */}\r\n                    </Grid>\r\n                  )}\r\n\r\n                {visaTenture.includes(\"2\") &&\r\n                  visaType?.toLowerCase() == \"in\" && (\r\n                    <>\r\n                      <Grid container sx={{ gap: \"20px 25px\" }}>\r\n                        <Grid item xs={5}>\r\n                          <LabelCustomInput\r\n                            label={\"Year Inside Rates :*  \"}\r\n                            disabled={true}\r\n                            StartLabel={\"AED\"}\r\n                            register={register2(\"2yearInsideRate\", {\r\n                              required: \"Enter year inside rate\",\r\n                            })}\r\n                            postfix={false}\r\n                          />\r\n                        </Grid>\r\n\r\n                        {/* <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n                      </Grid>\r\n                    </>\r\n                  )}\r\n                {visaTenture.includes(\"2\") &&\r\n                  visaType?.toLowerCase() == \"out\" && (\r\n                    <>\r\n                      <Grid container sx={{ gap: \"20px 25px\" }}>\r\n                        <Grid item xs={5}>\r\n                          <LabelCustomInput\r\n                            label={\"Year Outside Rates :*  \"}\r\n                            disabled={true}\r\n                            StartLabel={\"AED\"}\r\n                            register={register2(\"2yearOutsideRate\", {\r\n                              required: \"Enter year outside rate\",\r\n                            })}\r\n                            postfix={false}\r\n                          />\r\n                        </Grid>\r\n\r\n                        {/* \r\n                                        <Grid item xs={5} >\r\n                                            <LabelCustomInput label={'Renewal Rates :*  '} disabled={user?.user_type == 'C' ? true : false } StartLabel={'AED'} register={register2(\"2yearRenewalRates\", { required: \"Enter renewal rate\", onChange: () => handleTotalVisaCharges() })} postfix={true} />\r\n                                        </Grid> */}\r\n                      </Grid>\r\n                    </>\r\n                  )}\r\n              </Grid>\r\n              <Grid container p={3}>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.textColorDarkBlue,\r\n                    mb: 2,\r\n                  }}\r\n                >\r\n                  Extra Costing :{\" \"}\r\n                </Typography>\r\n\r\n                <Grid container sx={{ gap: \"20px 25px\" }}>\r\n                  <Grid item xs={5}>\r\n                    <Box sx={{ display: \"flex\", gap: 2, alignItems: \"center\" }}>\r\n                      <Box sx={{ marginTop: \"22px\" }}>\r\n                        {\r\n                          <Checkbox\r\n                            checked={vipMedicalCheck}\r\n                            disabled={true}\r\n                            onChange={(e) => { }}\r\n                          />\r\n                        }\r\n                      </Box>\r\n                      <LabelCustomInput\r\n                        label=\"VIP Medical Extra Charges : \"\r\n                        StartLabel=\"AED\"\r\n                        register={register2(\"vipMedical\")}\r\n                        postfix={false}\r\n                        disabled={true}\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Candidate Name :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Candidate Name\"}\r\n                  error={errors2?.candidateName?.message}\r\n                  register={register2(\"candidateName\", {\r\n                    required: \"Please enter your candidate name.\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Phone :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  type={\"number\"}\r\n                  placeholder={\"Phone\"}\r\n                  error={errors2?.Phone?.message}\r\n                  register={register2(\"Phone\", {\r\n                    required: \"Please enter your Phone.\",\r\n                    pattern: {\r\n                      value: /^05[0-9]{8}$/,\r\n                      message:\r\n                        \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\",\r\n                    },\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Email :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Email \"}\r\n                  error={errors2?.email?.message}\r\n                  register={register2(\"email\", {\r\n                    required: \"Please enter your email.\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Camp Location  :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Camp Location \"}\r\n                  error={errors2?.campLocation?.message}\r\n                  register={register2(\"campLocation\", {\r\n                    required: \"Please enter your camp location.\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Employee ID :*\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Employee ID\"}\r\n                  error={errors?.employeeid?.message}\r\n                  register={register2(\"employeeid\", {\r\n                    required: \"Please enter your employee id.\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <SelectField\r\n                  size={\"small\"}\r\n                  label={\"Nationality :*\"}\r\n                  options={countries}\r\n                  selected={selectedCountry}\r\n                  onSelect={(value) => setSelectedCountry(value)}\r\n                  error={errors2?.nationality?.message}\r\n                  register={register2(\"nationality\", {\r\n                    required: \"Please select nationality\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Passport Number :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Passport Number\"}\r\n                  error={errors2?.passportNumber?.message}\r\n                  register={register2(\"passportNumber\", {\r\n                    required: \"Please enter your passport number.\",\r\n                    onChange: (e) => { },\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <DatePicker\r\n                  label={\"Passport Expiry :*\"}\r\n                  value={date}\r\n                  disablePast={true}\r\n                  minDate={addDays(addMonths(new Date(), 6), 1)}\r\n                  size={\"small\"}\r\n                  error={errors2?.passportExp?.message}\r\n                  {...register2(\"passportExp\", {\r\n                    required: \"Please enter your passport expiry date.\",\r\n                    validate: (value) => {\r\n                      const minAllowedDate = addMonths(new Date(), 6);\r\n                      console.log(value, \"value\");\r\n                      console.log(moment(minAllowedDate), \"value\");\r\n                      console.log(\r\n                        moment(value) > moment(minAllowedDate),\r\n                        \"value\"\r\n                      );\r\n\r\n                      return (\r\n                        moment(value) > moment(minAllowedDate) ||\r\n                        \"Passport expiry date must be at least 6 months from today.\"\r\n                      );\r\n                    },\r\n                  })}\r\n                  onChange={(date) => {\r\n                    handleDate(date);\r\n                    setValue2(\"passportExp\", date, { shouldValidate: true });\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"Visa Designation :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"Visa Designation\"}\r\n                  error={errors2?.visaDesignation?.message}\r\n                  register={register2(\"visaDesignation\", {\r\n                    required: \"Please enter your visa designation .\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.textColorDarkBlue,\r\n                  }}\r\n                >\r\n                  Salary :{\" \"}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <LabelCustomInput\r\n                  label={\"Basic : \"}\r\n                  disabled={true}\r\n                  StartLabel={\"AED\"}\r\n                  placeholder={\"Basic\"}\r\n                  error={errors?.basic?.message}\r\n                  register={register2(\"basic\", {\r\n                    required: \"Enter basic  salary\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <LabelCustomInput\r\n                  allowance={true}\r\n                  label={\"Allowance : \"}\r\n                  disabled={true}\r\n                  StartLabel={\"AED\"}\r\n                  placeholder={\"Allowance\"}\r\n                  error={errors?.allowance?.message}\r\n                  register={register2(\"allowance\", {\r\n                    required: \"Enter allowance \",\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <LabelCustomInput\r\n                  disabled={true}\r\n                  label={\"Total Salary : \"}\r\n                  StartLabel={\"AED\"}\r\n                  placeholder={\"Total\"}\r\n                  register={register2(\"totalSalary\")}\r\n                />\r\n                {/* {(customerPaymentType == 'payroll' && salaryError) ? <p style={{ color: 'red' }}>Salary Limit Exceeded </p> : ''} */}\r\n              </Grid>\r\n              {/* <Grid item xs={6}>\r\n                                <InputField\r\n                                    label={\"End Consumer :\"}\r\n                                    size={'small'}\r\n                                    fullWidth={true}\r\n                                    placeholder={\"End Consumer\"}\r\n                                    error={errors2?.endConsumer?.message}\r\n                                    register={register2(\"endConsumer\", {\r\n                                        required:\r\n                                            \"Please enter your end consumer  .\"\r\n\r\n                                    })}\r\n                                />\r\n                            </Grid> */}\r\n              <Grid item xs={6}>\r\n                <InputField\r\n                  label={\"End Consumer Company :\"}\r\n                  size={\"small\"}\r\n                  fullWidth={true}\r\n                  placeholder={\"End Consumer Company \"}\r\n                  error={errors2?.endConsumerCompany?.message}\r\n                  register={register2(\"endConsumerCompany\", {\r\n                    required: \"Please enter your end consumer company .\",\r\n                  })}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"bold\",\r\n                    color: Colors.textColorDarkBlue,\r\n                  }}\r\n                >\r\n                  Documents :{\" \"}\r\n                </Typography>\r\n              </Grid>\r\n              {documents?.length > 0 &&\r\n                documents\r\n                  ?.sort((a, b) => a.id - b.id) // Sort by id in ascending order\r\n                  .map((item, index) => (\r\n                    <Grid item xs={5} key={index}>\r\n                      <Typography\r\n                        sx={{\r\n                          fontSize: \"18px\",\r\n                          fontWeight: \"bold\",\r\n                          color: Colors.gray,\r\n                        }}\r\n                      >\r\n                        {item?.is_required\r\n                          ? item?.name\r\n                          : `${item?.name} (If Any)`}{\" \"}\r\n                        :{item?.is_required ? \"*\" : \" \"}\r\n                      </Typography>\r\n                      <UploadFile\r\n                        Memo={true}\r\n                        accept={allowFilesType}\r\n                        file={documents}\r\n                        multiple={true}\r\n                        updateResult={updateResult}\r\n                        fileId={item?.key}\r\n                        error={errors2[item?.key]?.message}\r\n                        loader={loader}\r\n                        disabled={isUploading}\r\n                        register={register2(`${item?.key}`, {\r\n                          required: item?.is_required\r\n                            ? documents.find(\r\n                              (item2) => item2?.key === item?.key\r\n                            )?.path !== \"\"\r\n                              ? false\r\n                              : \"Please upload document.\"\r\n                            : false,\r\n                          onChange: async (e) => {\r\n                            setIsUploading(true); // Set uploading to true when the upload starts\r\n                            const path = await handleUploadDocument(\r\n                              e,\r\n                              item?.key\r\n                            );\r\n                            if (path) {\r\n                              handleDocArrayUpdate(\"path\", path, item?.key);\r\n                            }\r\n                            setIsUploading(false); // Reset uploading status when done\r\n                          },\r\n                        })}\r\n                      />\r\n                    </Grid>\r\n                  ))}\r\n            </Grid>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            sx={{ fontFamily: \"Public Sans\" }}\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button sx={{ fontFamily: \"Public Sans\" }} type=\"submit\">\r\n            Update\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n        <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Visa Processing Management List\r\n        </Typography>\r\n        {/* <Box sx={{ display: \"flex\", gap: \"10px\" }}>\r\n          {isClicked == true ? (\r\n            <>\r\n              {selectedItem && (\r\n                <Button\r\n                  sx={{\r\n                    border: `2px solid ${Colors.primary}`,\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: Colors.primary,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onClick={() => setIsClicked(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              )}\r\n              {selectedItem && (\r\n                <Button\r\n                  sx={{\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: Colors.white,\r\n                    display: \"flex\",\r\n                    background: Colors.primary,\r\n                    alignItems: \"center\",\r\n                    \"&:hover\": {\r\n                      background: Colors.primary,\r\n                    },\r\n                  }}\r\n                  onClick={() => setActiveVisaDialog(true)}\r\n                >\r\n                  Next\r\n                </Button>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              {permissions?.renew && (\r\n                <Button\r\n                  sx={{\r\n                    border: `2px solid ${Colors.green}`,\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: Colors.green,\r\n                    backgroundColor: Colors.lightGreen,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onClick={() => handleClick(\"Renew\")}\r\n                >\r\n                  Renew\r\n                </Button>\r\n              )}\r\n\r\n              {permissions?.cancel && (\r\n                <Button\r\n                  sx={{\r\n                    border: \"2px solid rgba(229, 37, 42, 1)\",\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: \"rgba(229, 37, 42, 1)\",\r\n                    backgroundColor: \"rgba(229, 37, 42, 0.1)\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onClick={() => handleClick(\"Cancel\")}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              )}\r\n\r\n              {permissions?.absconder && (\r\n                <Button\r\n                  sx={{\r\n                    border: `2px solid ${Colors.orange}`,\r\n                    padding: \"10px 20px\",\r\n                    borderRadius: \"10px\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: \"600\",\r\n                    color: Colors.orange,\r\n                    backgroundColor: Colors.lightOrange,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onClick={() => handleClick(\"Absconder\")}\r\n                >\r\n                  Absconder\r\n                </Button>\r\n              )}\r\n            </>\r\n          )}\r\n        </Box> */}\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box>\r\n        <Grid container spacing={2} alignItems={\"center\"}>\r\n          <Grid item xs={3}>\r\n            <InputField\r\n              label={\"Search :\"}\r\n              size={\"small\"}\r\n              fullWidth={true}\r\n              placeholder={\"Search\"}\r\n              error={errors?.search?.message}\r\n              register={register(\"search\")}\r\n            />\r\n          </Grid>\r\n          {user?.user_type != \"C\" && (\r\n            <Grid item xs={3}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Customer :\"}\r\n                options={customerQueue}\r\n                selected={selectedCustomer}\r\n                onSelect={(value) => {\r\n                  setSelectedCustomer(value);\r\n                }}\r\n                error={errors?.customer?.message}\r\n                register={register(\"customer\")}\r\n              />\r\n            </Grid>\r\n          )}\r\n          <Grid item xs={3}>\r\n            <SelectField\r\n              size={\"small\"}\r\n              label={\"Select Status :\"}\r\n              options={[\r\n                {\r\n                  id: \"Entry Permit\",\r\n                  name: \"Entry Permit\",\r\n                },\r\n                {\r\n                  id: \"In Progress\",\r\n                  name: \"In Progress\",\r\n                },\r\n                {\r\n                  id: \"Change Status\",\r\n                  name: \"Change Status\",\r\n                },\r\n                { id: \"Medical\", name: \"Medical\" },\r\n                {\r\n                  id: \"Emirates Id\",\r\n                  name: \"Emirates Id\",\r\n                },\r\n                { id: \"Stamping\", name: \"Stamping\" },\r\n                { id: \"Complete (EID)\", name: \"Complete (EID)\" },\r\n                {\r\n                  id: \"Cancel\",\r\n                  name: \"Cancel\",\r\n                },\r\n                { id: \"Reject\", name: \"Reject\" },\r\n              ]}\r\n              selected={selectedStatus}\r\n              onSelect={(value) => {\r\n                setSelectedStatus(value);\r\n              }}\r\n              error={errors?.status?.message}\r\n              register={register(\"status\")}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            gap={2}\r\n            mt={2}\r\n          >\r\n            <PrimaryButton\r\n              bgcolor={\"#0076bf\"}\r\n              textcolor={Colors.white}\r\n              // border={`1px solid ${Colors.primary}`}\r\n              title=\"Reset\"\r\n              onClick={() => {\r\n                setValue(\"search\", \"\");\r\n                setSelectedCustomer(null);\r\n                setSelectedStatus(null);\r\n                getVisaRequestList(1, \"\", null);\r\n              }}\r\n              loading={loading}\r\n            />\r\n            <PrimaryButton\r\n             bgcolor={'#bd9b4a'}\r\n              title=\"Search\"\r\n              onClick={() => handleFilter()}\r\n              loading={loading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item md={11}>\r\n          {candidates && (\r\n            <Box>\r\n              <Grid container mb={2}></Grid>\r\n\r\n              {candidates && (\r\n                <Fragment>\r\n                  <PDFExport\r\n                    ref={contentRef}\r\n                    landscape={true}\r\n                    paperSize=\"A4\"\r\n                    margin={5}\r\n                    fileName=\"Import Customers\"\r\n                  >\r\n                    <TableContainer\r\n                      component={Paper}\r\n                      sx={{\r\n                        maxHeight: \"calc(100vh - 200px)\",\r\n                        mt: 5,\r\n                        backgroundColor: \"transparent\",\r\n                        boxShadow: \"none !important\",\r\n                        borderRadius: \"0px !important\",\r\n                      }}\r\n                    >\r\n                      <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                        <TableHead>\r\n                          <Row>\r\n                            {tableHead.map((cell, index) => (\r\n                              <Cell\r\n                                style={{\r\n                                  textAlign:\r\n                                    cell?.name == \"SR No.\" ? \"center\" : \"left\",\r\n                                  paddingRight:\r\n                                    cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                }}\r\n                                className=\"pdf-table\"\r\n                                key={index}\r\n                              >\r\n                                <Box\r\n                                  sx={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"flex-end\",\r\n                                  }}\r\n                                >\r\n                                  {cell?.name}{\" \"}\r\n                                  {cell?.name == \"Date\" && (\r\n                                    <>\r\n                                      &nbsp;\r\n                                      <span\r\n                                        style={{\r\n                                          height: \"20px\",\r\n                                          cursor: \"pointer\",\r\n                                        }}\r\n                                      >\r\n                                        <Box\r\n                                          component={\"img\"}\r\n                                          onClick={() => {\r\n                                            setSort(\r\n                                              sort == \"asc\" ? \"desc\" : \"asc\"\r\n                                            );\r\n                                            handleSort(cell?.key);\r\n                                          }}\r\n                                          src={Images.sortIcon}\r\n                                          width={\"18px\"}\r\n                                        ></Box>\r\n                                      </span>\r\n                                    </>\r\n                                  )}\r\n                                </Box>\r\n                              </Cell>\r\n                            ))}\r\n                          </Row>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {candidates?.map((item, index) => {\r\n                            let sorteddata = item?.statuses.sort(\r\n                              (a, b) => a.id - b.id\r\n                            );\r\n\r\n                            return (\r\n                              <Row\r\n                                key={index}\r\n                                sx={{\r\n                                  border: \"1px solid #EEEEEE !important\",\r\n                                }}\r\n                              >\r\n                                {/* {isClicked && (\r\n                                  <Cell\r\n                                    sx={{\r\n                                      textAlign: \"center\",\r\n                                      span: {\r\n                                        padding: \"8px\",\r\n                                        width: \"22px !important\",\r\n                                        height: \"23px !important\",\r\n                                      },\r\n                                    }}\r\n                                    className=\"pdf-table\"\r\n                                  >\r\n                                    <input\r\n                                      type=\"radio\"\r\n                                      checked={selectedItem?.id === item?.id}\r\n                                      onChange={() => handleRadioChange(item)}\r\n                                      style={{ cursor: \"pointer\" }}\r\n                                    />\r\n                                  </Cell>\r\n                                )} */}\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.visa_id + \"_\" + item?.serial_id}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {moment(item?.created_at).format(\r\n                                    \"DD-MM-YYYY\"\r\n                                  )}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.visa_request?.customer?.name}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.passport_number}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.name}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.visa_charges\r\n                                    ? item?.visa_charges\r\n                                    : \"0\"}\r\n                                </Cell>\r\n\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.visa_type?.toLowerCase() == \"in\"\r\n                                    ? \"In\"\r\n                                    : \"Out\"}\r\n                                </Cell>\r\n\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                  onClick={() => {\r\n                                    if (\r\n                                      sorteddata[sorteddata?.length - 1]\r\n                                        .status != \"Complete (EID)\" &&\r\n                                      sorteddata[sorteddata?.length - 1]\r\n                                        .status != \"Reject\"\r\n                                        &&\r\n                                      sorteddata[sorteddata?.length - 1]\r\n                                        .status != \"Cancel\"\r\n                                    ) {\r\n                                      handleOpenStatusDialog(item);\r\n                                    }\r\n\r\n                                    handleDate(new Date());\r\n                                    // if (permissions?.update_candidate_status) {\r\n                                    // if (permissions?.update_candidate_status) {\r\n\r\n                                    // setStatusDialog(true);\r\n                                    // }\r\n                                    // }\r\n                                    setSelectedVisa(item);\r\n                                    setStatus(null);\r\n                                    setDate(null);\r\n                                    setDocument(\"\");\r\n                                    if (\r\n                                      sorteddata[sorteddata?.length - 1]\r\n                                        ?.status == \"In Progress\"\r\n                                    ) {\r\n                                      if (\r\n                                        item?.visa_type?.toLowerCase() == \"out\"\r\n                                      ) {\r\n                                        setStatuses([\r\n                                          // {\r\n                                          //   id: \"In Progress\",\r\n                                          //   name: \"In Progress\",\r\n                                          // },\r\n                                          {\r\n                                            id: \"Entry Permit\",\r\n                                            name: \"Entry Permit\",\r\n                                          },\r\n                                          { id: \"Reject\", name: \"Reject\" },\r\n                                          { id: \"Cancel\", name: \"Cancel\" },\r\n                                        ]);\r\n                                      } else {\r\n                                        setStatuses([\r\n                                          // {\r\n                                          //   id: \"In Progress\",\r\n                                          //   name: \"In Progress\",\r\n                                          // },\r\n                                          {\r\n                                            id: \"Change Status\",\r\n                                            name: \"Change Status\",\r\n                                          },\r\n\r\n                                          { id: \"Reject\", name: \"Reject\" },\r\n                                          { id: \"Cancel\", name: \"Cancel\" },\r\n                                        ]);\r\n                                      }\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Pending\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        {\r\n                                          id: \"In Progress\",\r\n                                          name: \"In Progress\",\r\n                                        },\r\n\r\n                                        { id: \"Reject\", name: \"Reject\" },\r\n                                        { id: \"Cancel\", name: \"Cancel\" },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Entry Permit\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        // {\r\n                                        //   id: \"Entry Permit\",\r\n                                        //   name: \"Entry Permit\",\r\n                                        // },\r\n                                        { id: \"Medical\", name: \"Medical\" },\r\n                                        { id: \"Reject\", name: \"Reject\" },\r\n                                        { id: \"Cancel\", name: \"Cancel\" },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Change Status\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        // {\r\n                                        //   id: \"Change Status\",\r\n                                        //   name: \"Change Status\",\r\n                                        // },\r\n                                        { id: \"Medical\", name: \"Medical\" },\r\n\r\n                                        { id: \"Reject\", name: \"Reject\" },\r\n                                        { id: \"Cancel\", name: \"Cancel\" },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Medical\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        // { id: \"Medical\", name: \"Medical\" },\r\n                                        {\r\n                                          id: \"Emirates Id\",\r\n                                          name: \"Emirates Id\",\r\n                                        },\r\n\r\n                                        { id: \"Reject\", name: \"Reject\" },\r\n                                        { id: \"Cancel\", name: \"Cancel\" },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Emirates Id\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        // {\r\n                                        //   id: \"Emirates Id\",\r\n                                        //   name: \"Emirates Id\",\r\n                                        // },\r\n                                        { id: \"Stamping\", name: \"Stamping\" },\r\n                                        { id: \"Reject\", name: \"Reject\" },\r\n                                        { id: \"Cancel\", name: \"Cancel\" },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Stamping\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        {\r\n                                          id: \"Complete (EID)\",\r\n                                          name: \"Complete (EID)\",\r\n                                        },\r\n                                      ]);\r\n                                    } else if (\r\n                                      sorteddata[sorteddata.length - 1]\r\n                                        .status == \"Reject\"\r\n                                    ) {\r\n                                      setStatuses([\r\n                                        // { id: \"Stamping\", name: \"Stamping\" },\r\n\r\n                                        {},\r\n                                      ]);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <Box\r\n                                    component={\"div\"}\r\n                                    sx={{\r\n                                      cursor: \"pointer\",\r\n                                      display: \"flex !important\",\r\n                                      justifyContent: \"flex-start !important\",\r\n                                    }}\r\n                                  >\r\n                                    <Box\r\n                                      sx={{\r\n                                        width: \"13px\",\r\n                                        height: \"13px\",\r\n                                        borderRadius: \"50%\",\r\n                                        backgroundColor:\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status === \"Medical\"\r\n                                            ? \"#007BFF\" // Blue\r\n                                            : sorteddata[sorteddata.length - 1]\r\n                                              ?.status === \"Stamping\"\r\n                                              ? \"#B0BEC5\" // Yellow\r\n                                              : sorteddata[sorteddata.length - 1]\r\n                                                ?.status === \"Emirates Id\"\r\n                                                ? \"#FF69B4\" // Pink\r\n                                                : sorteddata[sorteddata.length - 1]\r\n                                                  ?.status === \"Entry Permit\"\r\n                                                  ? \"#FFA500\" // Orange\r\n                                                  : sorteddata[sorteddata.length - 1]\r\n                                                    ?.status === \"Change Status\"\r\n                                                    ? \"#6C757D\" // Gray\r\n                                                    : sorteddata[sorteddata.length - 1]\r\n                                                      ?.status === \"Complete (EID)\"\r\n                                                      ? \"#2bcb0e\" :  // Green\r\n                                                      sorteddata[sorteddata.length - 1]\r\n                                                        ?.status === \"In Progress\"\r\n                                                        ? \"#e7e00a\" : \"#DC3545\", // Red (default for error)\r\n                                      }}\r\n                                    ></Box>\r\n\r\n                                    {sorteddata[sorteddata.length - 1]\r\n                                      ?.status === \"Reject\" ? (\r\n                                      <Tooltip\r\n                                        title={item?.rejection_reason}\r\n                                        placement=\"top\"\r\n                                      >\r\n                                        {\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status\r\n                                        }\r\n                                      </Tooltip>\r\n                                    ) : (\r\n                                      <span>\r\n                                        {\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status\r\n                                        }\r\n                                      </span>\r\n                                    )}\r\n                                  </Box>\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{\r\n                                    textAlign: \"left\",\r\n                                    cursor:\r\n                                      item?.visa_type?.toLowerCase() == \"in\" &&\r\n                                        (sorteddata[sorteddata.length - 1]\r\n                                          ?.status === \"Entry Permit\" ||\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status === \"Medical\" ||\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status === \"Emirates Id\" ||\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status === \"Stamping\" ||\r\n                                          sorteddata[sorteddata.length - 1]\r\n                                            ?.status === \"Complete (EID)\")\r\n                                        ? \"pointer\"\r\n                                        : \"\",\r\n                                  }}\r\n                                  className=\"pdf-table\"\r\n                                  onClick={() => {\r\n                                    if (\r\n                                      item?.visa_type?.toLowerCase() == \"in\" &&\r\n                                      (sorteddata[sorteddata.length - 1]\r\n                                        ?.status === \"Entry Permit\" ||\r\n                                        sorteddata[sorteddata.length - 1]\r\n                                          ?.status === \"Medical\" ||\r\n                                        sorteddata[sorteddata.length - 1]\r\n                                          ?.status === \"Emirates Id\" ||\r\n                                        sorteddata[sorteddata.length - 1]\r\n                                          ?.status === \"Stamping\" ||\r\n                                        sorteddata[sorteddata.length - 1]\r\n                                          ?.status === \"Complete (EID)\")\r\n                                    ) {\r\n                                      setSelectedVisa(item);\r\n\r\n                                      setDate(null);\r\n                                      setValue2(\"date\", \"\");\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  {item?.change_status_date\r\n                                    ? moment(item?.change_status_date).format(\r\n                                      \"DD-MM-YYYY\"\r\n                                    )\r\n                                    : \"-\"}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                  onClick={() => {\r\n                                    setSelectedVisa(item);\r\n                                    console.log(\r\n                                      moment(item?.actual_entry_date).format(\r\n                                        \"MM-DD-YYYY\"\r\n                                      )\r\n                                    );\r\n                                    setDate(\r\n                                      item?.actual_entry_date\r\n                                        ? new Date(item?.actual_entry_date)\r\n                                        : null\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  <Box>\r\n                                    {sorteddata[sorteddata.length - 1]\r\n                                      ?.status === \"Reject\" &&\r\n                                      permissions?.rejection_reason && (\r\n                                        <Box\r\n                                          component={\"div\"}\r\n                                          onClick={() => {\r\n                                            setCancelStatus(false)\r\n                                            setReason(item);\r\n                                            setReasonDialog(true);\r\n                                          }}\r\n                                          sx={{ cursor: \"pointer\" }}\r\n                                        >\r\n                                          <InfoOutlinedIcon />\r\n                                        </Box>\r\n                                      )}\r\n                                        {sorteddata[sorteddata.length - 1]\r\n                                      ?.status === \"Cancel\" &&\r\n                                      permissions?.rejection_reason && (\r\n                                        <Box\r\n                                          component={\"div\"}\r\n                                          onClick={() => {\r\n                                            setReason(item);\r\n                                            setCancelStatus(true)\r\n                                            setReasonDialog(true);\r\n                                          }}\r\n                                          sx={{ cursor: \"pointer\" }}\r\n                                        >\r\n                                          <InfoOutlinedIcon />\r\n                                        </Box>\r\n                                      )}\r\n                                    {item?.is_editable &&\r\n                                      permissions?.candidate_edit && (\r\n                                        <Box\r\n                                          component={\"img\"}\r\n                                          sx={{ cursor: \"pointer\" }}\r\n                                          onClick={() =>\r\n                                            handleUpdateCandidate(item)\r\n                                          }\r\n                                          src={Images.editIcon}\r\n                                          width={\"35px\"}\r\n                                        ></Box>\r\n                                      )}\r\n                                    {item?.visa_type?.toLowerCase() == \"out\" && (\r\n                                      <Box\r\n                                        component={\"div\"}\r\n                                        onClick={() => setDateDialog(true)}\r\n                                        sx={{ cursor: \"pointer\" }}\r\n                                      >\r\n                                        <CalendarMonthIcon />\r\n                                      </Box>\r\n                                    )}\r\n                                    <Box\r\n                                      component={\"img\"}\r\n                                      src={Images.detailIcon}\r\n                                      onClick={() => {\r\n                                        if (permissions?.processing_details) {\r\n                                          navigate(\r\n                                            `/view-candidate-detail/${item?.id}`\r\n                                          );\r\n                                        }\r\n                                      }}\r\n                                      width={\"35px\"}\r\n                                    ></Box>\r\n                                    <Box\r\n                                      component={\"div\"}\r\n                                      onClick={() => {\r\n                                        setSelectedCandidate(item?.id)\r\n                                        setPassPortNo(item?.passport_number)\r\n                                        setFitnessDocument(item?.fitness_report)\r\n                                        setOpenEditDialog(true)\r\n                                      }}\r\n                                      sx={{ cursor: \"pointer\" }}\r\n                                    >\r\n                                      <Tooltip title=\"Fitness Report\">\r\n\r\n                                        <SummarizeIcon sx={{ color: item?.fitness_report ? '#56ba28' : 'black' }} />\r\n                                      </Tooltip>\r\n                                    </Box>\r\n                                    <Box>\r\n\r\n\r\n                                      {(permissions.credit_note && (item?.last_status?.toLowerCase() == 'reject' || item?.last_status?.toLowerCase() == 'cancel') ) && <Box component={'img'} onClick={() => {\r\n\r\n                                        if (permissions.credit_note && (item?.last_status?.toLowerCase() == 'reject' || item?.last_status?.toLowerCase() == 'cancel')) {\r\n\r\n                                          navigate(`/credit_note/${item?.id}`)\r\n                                        }\r\n\r\n                                      }} sx={{ cursor: \"pointer\" }} src={Images.invoiceIcon} width={'35px'}></Box>}\r\n                                      {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                    </Box>\r\n                                  </Box>\r\n                                </Cell>\r\n                              </Row>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </PDFExport>\r\n                  {/* ========== Pagination ========== */}\r\n                  <Pagination\r\n                    currentPage={currentPage}\r\n                    pageSize={pageLimit}\r\n                    onPageSizeChange={(size) =>\r\n                      getVisaRequestList(1, size.target.value, filters)\r\n                    }\r\n                    tableCount={candidates.length}\r\n                    totalCount={totalCount}\r\n                    onPageChange={(page) =>\r\n                      getVisaRequestList(page, \"\", filters)\r\n                    }\r\n                  />\r\n                </Fragment>\r\n              )}\r\n\r\n              {loader && <CircleLoading />}\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default VisaList;\r\n"
        }
    ]
}