{
    "sourceFile": "src/pages/Dashboard/VisaProcessing/RenewVisaList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821334,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  tableCellClasses,\r\n  IconButton,\r\n  CircularProgress,\r\n  Chip,\r\n  Grid,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport {\r\n  AllocateIcon,\r\n  CheckIcon,\r\n  EyeIcon,\r\n  FontFamily,\r\n  Images,\r\n  MessageIcon,\r\n  PendingIcon,\r\n  RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n  Debounce,\r\n  encryptData,\r\n  formatPermissionData,\r\n  handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport VisaServices from \"services/Visa\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFile from 'components/UploadFile';\r\nimport { CleanTypes, getFileSize } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport VisaDetail from \"../Visa/VisaDetail\";\r\n\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n    border: \"1px solid #EEEEEE\",\r\n    padding: \"15px\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n    color: \"#434343\",\r\n    paddingRight: \"50px\",\r\n    background: \"transparent\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: \"Public Sans\",\r\n\r\n    textWrap: \"nowrap\",\r\n    padding: \"5px !important\",\r\n    paddingLeft: \"15px !important\",\r\n\r\n    \".MuiBox-root\": {\r\n      display: \"flex\",\r\n      gap: \"6px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      \".MuiBox-root\": {\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    svg: {\r\n      width: \"auto\",\r\n      height: \"24px\",\r\n    },\r\n    \".MuiTypography-root\": {\r\n      textTransform: \"capitalize\",\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: \"nowrap\",\r\n    },\r\n    \".MuiButtonBase-root\": {\r\n      padding: \"8px\",\r\n      width: \"28px\",\r\n      height: \"28px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: \"flex\",\r\n    height: 100,\r\n    \"& svg\": {\r\n      width: \"40px !important\",\r\n      height: \"40px !important\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction VisaList() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    control,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    getValues: getValues2,\r\n    formState: { errors: errors2 },\r\n  } = useForm();\r\n  const {\r\n    register: register3,\r\n    handleSubmit: handleSubmit3,\r\n    setValue: setValue3,\r\n    getValues: getValues3,\r\n    formState: { errors: errors3 },\r\n  } = useForm();\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [statusDialog, setStatusDialog] = useState(false);\r\n  const [paymentDialog, setPaymentDialog] = useState(false);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n  const [document, setDocument] = useState(null);\r\n  const [requestDialog, setRequestDialog] = useState(false)\r\n\r\n\r\n  const allowFilesType = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n    'application/pdf',\r\n    'application/vnd.ms-excel',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n  ];\r\n\r\n  const tableHead = [\r\n    { name: \"VR No.\", key: \"\" },\r\n    { name: \"Date\", key: \"created_at\" },\r\n    { name: \"Customer\", key: \"created_at\" },\r\n    { name: \"Candidate Name\", key: \"created_at\" },\r\n    { name: \"Fee\", key: \"visa_rate\" },\r\n    { name: \"VAT\", key: \"visa_rate\" },\r\n    { name: \"Request Status\", key: \"\" },\r\n    { name: \"Payment Status\", key: \"\" },\r\n    { name: \"Status\", key: \"\" },\r\n    { name: \"Actions\", key: \"\" },\r\n\r\n  ];\r\n  //   state for visaprocessing use it later saraib\r\n  //  const [renewVisas, setrenewVisas] = useState([])\r\n  const [renewVisas, setRenewVisas] = useState([])\r\n  const handleUploadDocument = async (e) => {\r\n    try {\r\n      e.preventDefault();\r\n      const file = e.target.files[0];\r\n      let arr = [\r\n        {\r\n          name: file?.name,\r\n          file: \"\",\r\n          type: file?.type.split(\"/\")[1],\r\n          size: getFileSize(file.size),\r\n          isUpload: false,\r\n        },\r\n      ];\r\n\r\n      if (allowFilesType.includes(file.type)) {\r\n        // Add the current date before the file name to ensure uniqueness\r\n        const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n        const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n        // Create a new file with the date-prefixed name\r\n        const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n        // Upload the file with the new name\r\n        const path = await handleUpload(newFile, arr);\r\n\r\n        console.log('Uploaded file path:', path);\r\n        console.log(path, 'pathpathpath');\r\n\r\n        // Clear the file input after processing\r\n        e.target.value = \"\";\r\n\r\n        return path;\r\n      } else {\r\n        ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n      console.log(file);\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n          console.log(getFileSize(uploadedBytes));\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n        setSlipDetail(docs);\r\n        console.log(data, 'asddasasd');\r\n        return data?.data?.path\r\n\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [sort, setSort] = useState(\"asc\");\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([\r\n    { id: 1, name: \"asdasd\" },\r\n    { id: 1, name: \"asdasd\" },\r\n  ]);\r\n\r\n  // *For setPermissions\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedVisa, setSelectedVisa] = useState(null);\r\n\r\n\r\n  const [itemAmount, setItemAmount] = useState();\r\n  const [status, setStatus] = useState();\r\n  const [date, setDate] = useState(null);\r\n  const [paymentType, setPaymentType] = useState(null);\r\n  const [banks, setBanks] = useState([]);\r\n  const [selectedBank, setSelectedBank] = useState(null);\r\n  const { user, userLogout } = useAuth();\r\n  const [rates, setRates] = useState()\r\n  const [buttonDisabled, setButtonDisabled] = useState(false)\r\n  const [fromDate, setFromDate] = useState(null)\r\n  const [toDate, setToDate] = useState(null)\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Get Customer Queue\r\n\r\n  const UpdateStatus = async () => {\r\n    console.log(selectedVisa?.candidate, 'selectedVisa');\r\n    let filteredDoc = selectedVisa?.candidate?.documents.filter((item => item?.is_required))\r\n    console.log(filteredDoc);\r\n\r\n    const allHavePath = filteredDoc.length > 0 ? filteredDoc?.every(doc => doc.path && doc.path.trim() !== \"\") : false;\r\n\r\n    // Step 3: Log the result\r\n    console.log(allHavePath);\r\n    console.log(moment().add(6, 'months').startOf('day').format('MM-DD-YYYY'));\r\n    console.log(moment().add(6, 'months').startOf('day').format('MM-DD-YYYY') < moment(selectedVisa?.candidate?.passport_expiry).startOf('day').format('MM-DD-YYYY'));\r\n\r\n    if ((status?.id == 'Renewed' && !allHavePath) || (status?.id == 'Renewed' && moment().add(6, 'months').startOf('day') > moment(selectedVisa?.candidate?.passport_expiry).startOf('day'))) {\r\n      showErrorToast((moment().add(6, 'months').startOf('day') > moment(selectedVisa?.candidate?.passport_expiry).startOf('day')) ? 'Passport Expired' : 'Candidate Document Missing')\r\n    }\r\n    else {\r\n      setButtonDisabled(true)\r\n      try {\r\n        let obj = {\r\n          status: status.id,\r\n          id: selectedVisa?.id,\r\n          candidate_id: selectedVisa?.candidate_id,\r\n          visa_expiry: moment(selectedVisa?.candidate?.visa_expiry).format('MM-DD-YYYY'),\r\n          visa_tenure: selectedVisa?.candidate?.visa_tenure,\r\n          date: moment(getValues('date')).format('MM-DD-YYYY'),\r\n          document: document\r\n        };\r\n\r\n        const promise = VisaServices.UpdateVisaProcessingStatus(obj);\r\n        console.log(promise);\r\n\r\n        showPromiseToast(\r\n          promise,\r\n          \"Saving...\",\r\n          \"Added Successfully\",\r\n          \"Something Went Wrong\"\r\n        );\r\n\r\n        // Await the promise and then check its response\r\n        const response = await promise;\r\n        if (response?.responseCode === 200) {\r\n          setStatusDialog(false);\r\n          setButtonDisabled(false)\r\n          getRenewList()\r\n\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n  const UpdateRequestStatus = async () => {\r\n    try {\r\n      let obj = {\r\n        request_status: status.id,\r\n        id: selectedVisa?.id,\r\n      };\r\n\r\n      const promise = VisaServices.UpdateRequestStatus(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setRequestDialog(false);\r\n        getRenewList()\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n  const handleDate2 = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setFromDate(\"invalid\");\r\n        return;\r\n      }\r\n      setFromDate(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  const handleDate3 = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setToDate(\"invalid\");\r\n        return;\r\n      }\r\n      setToDate(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  const UpdatePaymentStatus = async (formData) => {\r\n\r\n    try {\r\n      let obj = {\r\n        payment_date: date,\r\n        customer_id: selectedVisa?.visa?.customer?.id,\r\n        payment_type: paymentType?.name,\r\n        candidate_id: selectedVisa?.candidate_id,\r\n        id: selectedVisa?.id,\r\n        amount: formData?.amount,\r\n        tax: selectedVisa?.candidate?.visa_tenure?.includes('1') ? parseFloat((parseFloat(selectedVisa?.visa?.customer?.one_year_renewal) * 0.05)).toFixed(2) : parseFloat((parseFloat(selectedVisa?.visa?.customer?.two_year_renewal) * 0.05)),\r\n        bank_id: selectedBank?.id,\r\n        description: formData?.description,\r\n      };\r\n\r\n      const promise = VisaServices.updateProcessingPaymentStatus(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setPaymentDialog(false);\r\n        getRenewList()\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == \"Invalid Date\") {\r\n        setDate(\"invalid\");\r\n        return;\r\n      }\r\n      setDate(new Date(newDate));\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  const getRenewList = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    console.log(filter);\r\n\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = filter ? { ...filters, ...filter } : ''\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      console.log('asasd');\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n        type: \"Renew\",\r\n        customer_id: user?.user_type == 'C' ? user?.customer_id : null,\r\n      }\r\n      params = { ...params, ...Filter }\r\n\r\n      const { data } = await CustomerServices.VisaProcessing(params)\r\n      console.log(data);\r\n\r\n      console.log(formatPermissionData(data?.permissions))\r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      data?.permissions.forEach(e => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      })\r\n      setRenewVisas(data?.rows)\r\n      setTotalCount(data?.count)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  const getData = async (formData) => {\r\n    setLoading(true)\r\n    console.log(formData);\r\n    try {\r\n      let params = {\r\n        charges_type: 'rate'\r\n\r\n      }\r\n\r\n      const { data } = await SystemServices.getRates(params);\r\n\r\n\r\n      setRates(data?.charges)\r\n\r\n\r\n\r\n\r\n    } catch (error) {\r\n\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const getBanks = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n\r\n\r\n\r\n\r\n\r\n      const { data } = await SystemServices.getBanks()\r\n\r\n      setBanks(data?.banks)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n  // *For Handle Filter\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues(\"search\"),\r\n      from_date: fromDate,\r\n      to_date: toDate\r\n    };\r\n    Debounce(() => getRenewList(1, '', data));\r\n  };\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort,\r\n    };\r\n    Debounce(() => getRenewList(1, '', data));\r\n  };\r\n  useEffect(() => {\r\n    getRenewList()\r\n    getBanks()\r\n    getData()\r\n\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <SimpleDialog\r\n        open={requestDialog}\r\n        onClose={() => setRequestDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit3(UpdateRequestStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={[\r\n                  { id: 'Approved', name: \"Approved\" },\r\n                  { id: 'Rejected', name: \"Rejected\" },\r\n\r\n                ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors3?.status?.message}\r\n                register={register3(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors2?.date?.message}\r\n                register={register2(\"date\", {\r\n                  required: \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue2(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Box sx={{ fontWeight: \"bold\" }}>Upload Document:</Box>\r\n              <UploadFile\r\n                Memo={true}\r\n                accept={allowFilesType}\r\n                error={errors?.document?.message}\r\n\r\n                file={document}\r\n                register={register(\"document\", {\r\n                  required: false,\r\n                  onChange: async (e) => {\r\n                    const path = await handleUploadDocument(e);\r\n                    if (path) {\r\n                      setDocument(path);\r\n                    }\r\n                  }\r\n                })}\r\n              />\r\n              <Box sx={{ fontSize: \"11px\", marginTop: \"-12px\" }}>(Max File 25MB)</Box>\r\n            </Grid> */}\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => { setRequestDialog(false) }}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={[\r\n                  { id: \"In Process\", name: \"In Process\" },\r\n                  { id: \"Pending\", name: \"Pending\" },\r\n                  { id: \"Renewed\", name: \"Renewed\" },\r\n                ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                disableFuture={true}\r\n                error={errors?.date?.message}\r\n                register={register(\"date\", {\r\n                  required: \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Box sx={{ fontWeight: \"bold\" }}>Upload Document:</Box>\r\n              <UploadFileSingle\r\n                Memo={true}\r\n                accept={allowFilesType}\r\n                error={errors?.document?.message}\r\n\r\n                file={document}\r\n                register={register(\"document\", {\r\n                  required: false,\r\n                  onChange: async (e) => {\r\n                    const path = await handleUploadDocument(e);\r\n                    if (path) {\r\n                      setDocument(path);\r\n                    }\r\n                  }\r\n                })}\r\n              />\r\n\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  disabled={buttonDisabled}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <SimpleDialog\r\n        open={paymentDialog}\r\n        onClose={() => setPaymentDialog(false)}\r\n        title={\"Change Payment Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit2(UpdatePaymentStatus)}>\r\n          <Grid container>\r\n            <Grid item xs={12} sm={12}>\r\n              <DatePicker\r\n                label={\"Payment Date :\"}\r\n                value={date}\r\n                size={\"small\"}\r\n                error={errors2?.date?.message}\r\n                register={register2(\"date\", {\r\n                  required: date ? false : \"Please enter  date.\",\r\n                })}\r\n                onChange={(date) => {\r\n                  handleDate(date);\r\n                  setValue2(\"date\", date);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Payment Type :\"}\r\n                options={[\r\n                  { id: \"cash\", name: \"Cash\" },\r\n                  { id: \"bank\", name: \"Bank\" },\r\n                  // { id: \"cheque\", name: \"Cheque\" },\r\n\r\n                ]}\r\n                selected={paymentType}\r\n                onSelect={(value) => {\r\n                  setPaymentType(value);\r\n                }}\r\n                error={errors2?.status?.message}\r\n                register={register2(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Bank :\"}\r\n                options={banks}\r\n                selected={selectedBank}\r\n                onSelect={(value) => {\r\n                  setSelectedBank(value);\r\n                }}\r\n                error={errors2?.banks?.message}\r\n                register={register2(\"bank\", {\r\n                  required: \"Please select bank.\",\r\n                })}\r\n              />\r\n            </Grid> */}\r\n            <Grid item xs={12} sm={12}>\r\n              <LabelCustomInput\r\n                label={\"Amount : \"}\r\n                StartLabel={\"AED\"}\r\n                disabled={true}\r\n                register={register2(\"amount\", {\r\n                  required: \"Enter year inside rate\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} mt={2}>\r\n              <InputField\r\n                label={\"Description :\"}\r\n                size={\"small\"}\r\n                rows={5}\r\n                multiline={true}\r\n                placeholder={\"Description\"}\r\n                error={errors2?.description?.message}\r\n                register={register2(\"description\", {\r\n                  required: false,\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setPaymentDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n        <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n          Renewed Visa List\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box>\r\n        <Grid container spacing={2} alignItems={'center'}>\r\n          <Grid item xs={3} mt={1}>\r\n            <InputField\r\n              label={\"Search :\"}\r\n              size={'small'}\r\n              fullWidth={true}\r\n              placeholder={\"Search\"}\r\n              error={errors?.search?.message}\r\n              register={register(\"search\")}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <DatePicker\r\n              label={\" From Date  :\"}\r\n              value={fromDate}\r\n\r\n              size={'small'}\r\n              maxDate={new Date()}\r\n              error={errors?.fromDate?.message}\r\n              register={register(\"fromDate\")}\r\n              onChange={(date) => {\r\n                handleDate2(date)\r\n                setValue('fromDate', date)\r\n              }\r\n\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <DatePicker\r\n              label={\" To Date  :\"}\r\n              value={toDate}\r\n              maxDate={new Date()}\r\n              size={'small'}\r\n              minDate={new Date(fromDate)}\r\n              error={errors?.toDate?.message}\r\n              register={register(\"toDate\")}\r\n              onChange={(date) => {\r\n                handleDate3(date)\r\n                setValue('toDate', date)\r\n              }\r\n\r\n              }\r\n            />\r\n          </Grid>\r\n          {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            gap={2}\r\n            mt={2.5}\r\n          >\r\n            <PrimaryButton\r\n              bgcolor={\"#0076bf\"}\r\n              textcolor={Colors.white}\r\n              // border={`1px solid ${Colors.primary}`}\r\n              title=\"Reset\"\r\n              onClick={() => { setFilters(''); setFromDate(null); setToDate(null); setValue('search'); getRenewList(1, '', null) }}\r\n              loading={loading}\r\n            />\r\n            <PrimaryButton\r\n             bgcolor={'#bd9b4a'}\r\n              title=\"Search\"\r\n              onClick={() => handleFilter()}\r\n              loading={loading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item md={11}>\r\n          {renewVisas?.length > 0 && (\r\n            <Box>\r\n              <Grid container mb={2}></Grid>\r\n\r\n              {renewVisas && (\r\n                <Fragment>\r\n                  <PDFExport\r\n                    ref={contentRef}\r\n                    landscape={true}\r\n                    paperSize=\"A4\"\r\n                    margin={5}\r\n                    fileName=\"Import Customers\"\r\n                  >\r\n                    <TableContainer\r\n                      component={Paper}\r\n                      sx={{\r\n                        maxHeight: \"calc(100vh - 200px)\",\r\n                        mt: 5,\r\n                        backgroundColor: \"transparent\",\r\n                        boxShadow: \"none !important\",\r\n                        borderRadius: \"0px !important\",\r\n                      }}\r\n                    >\r\n                      <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                        <TableHead>\r\n                          <Row>\r\n                            {tableHead.map((cell, index) => (\r\n                              <Cell\r\n                                style={{\r\n                                  textAlign:\r\n                                    cell?.name == \"VR No.\" ? \"center\" : \"left\",\r\n                                  paddingRight:\r\n                                    cell?.name == \"VR No.\" ? \"15px\" : \"50px\",\r\n                                }}\r\n                                className=\"pdf-table\"\r\n                                key={index}\r\n                              >\r\n                                <Box\r\n                                  sx={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"flex-end\",\r\n                                  }}\r\n                                >\r\n                                  {cell?.name}{\" \"}\r\n                                  {cell?.name == \"Date\" && (\r\n                                    <>\r\n                                      &nbsp;\r\n                                      <span\r\n                                        style={{\r\n                                          height: \"20px\",\r\n                                          cursor: \"pointer\",\r\n                                        }}\r\n                                      >\r\n                                        <Box\r\n                                          component={\"img\"}\r\n                                          onClick={() => {\r\n                                            setSort(\r\n                                              sort == \"asc\" ? \"desc\" : \"asc\"\r\n                                            );\r\n                                            handleSort(cell?.key);\r\n                                          }}\r\n                                          src={Images.sortIcon}\r\n                                          width={\"18px\"}\r\n                                        ></Box>\r\n                                      </span>\r\n                                    </>\r\n                                  )}\r\n                                </Box>\r\n                              </Cell>\r\n                            ))}\r\n                          </Row>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {renewVisas?.map((item, index) => {\r\n                            return (\r\n                              <Row\r\n                                key={index}\r\n                                sx={{\r\n                                  border: \"1px solid #EEEEEE !important\",\r\n                                }}\r\n                              >\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.candidate?.visa_id + \"_\" + item?.candidate?.serial_id}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {moment(item?.created_at).format('MM-DD-YYYY')}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.visa?.customer?.name}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.candidate?.name}\r\n                                </Cell>\r\n\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.candidate?.visa_tenure?.includes('1') ? parseFloat((parseFloat(item?.visa?.customer?.one_year_renewal))).toFixed(2) : parseFloat((parseFloat(item?.visa?.customer?.two_year_renewal))).toFixed(2)}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  {item?.candidate?.visa_tenure?.includes('1') ? parseFloat((parseFloat(item?.visa?.customer?.one_year_renewal) * 0.05)).toFixed(2) : parseFloat((parseFloat(item?.visa?.customer?.two_year_renewal) * 0.05)).toFixed(2)}\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  <Box\r\n                                    component={\"div\"}\r\n                                    sx={{ cursor: \"pointer\", display: 'flex !important', justifyContent: 'flex-start !important' }}\r\n                                    onClick={() => {\r\n                                      if (permissions?.request_update) {\r\n                                        setStatus({ id: item?.request_status, name: item?.request_status })\r\n                                        setRequestDialog(true);\r\n                                        setSelectedVisa(item);\r\n                                      }\r\n                                    }}\r\n                                  >\r\n                                    <Box\r\n                                      component={\"img\"}\r\n                                      src={\r\n                                        item?.request_status == \"Approved\"\r\n                                          ? Images.successIcon\r\n                                          : Images.errorIcon\r\n                                      }\r\n                                      width={\"13px\"}\r\n                                    ></Box>\r\n                                    {item?.request_status == \"Approved\" ? 'Approved' : item?.request_status == \"pending\" ? \"Pending\" : 'Rejected'}\r\n                                  </Box>\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  <Box\r\n                                    component={\"div\"}\r\n                                    sx={{ cursor: \"pointer\", display: 'flex !important', justifyContent: 'flex-start !important' }}\r\n                                    onClick={() => {\r\n                                      if (item?.payment_status != \"paid\" && item?.request_status == \"Approved\") {\r\n                                        if (permissions?.payment_update) {\r\n\r\n                                          setPaymentDialog(true);\r\n\r\n                                          setValue2('amount', item?.candidate?.visa_tenure?.includes('1') ? parseFloat((parseFloat(item?.visa?.customer?.one_year_renewal) * 0.05) + parseFloat(item?.visa?.customer?.one_year_renewal)).toFixed(2) : parseFloat((parseFloat(item?.visa?.customer?.two_year_renewal) * 0.05) + parseFloat(item?.visa?.customer?.two_year_renewal)).toFixed(2))\r\n\r\n\r\n                                          setSelectedVisa(item);\r\n                                        }\r\n                                      }\r\n\r\n                                    }}\r\n                                  >\r\n                                    <Box\r\n                                      component={\"img\"}\r\n                                      src={\r\n                                        item?.payment_status == \"paid\"\r\n                                          ? Images.successIcon\r\n                                          : Images.errorIcon\r\n                                      }\r\n                                      width={\"13px\"}\r\n                                    ></Box>\r\n                                    {item?.payment_status == \"paid\" ? \"Paid\" : 'Unpaid'}\r\n                                  </Box>\r\n                                </Cell>\r\n                                <Cell\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"pdf-table\"\r\n                                >\r\n                                  <Box\r\n                                    component={\"div\"}\r\n                                    sx={{ cursor: \"pointer\", display: 'flex !important', justifyContent: 'flex-start !important' }}\r\n                                    onClick={() => {\r\n                                      setDate(null)\r\n                                      setStatus(null)\r\n                                      setDocument(null)\r\n                                      if (permissions?.status_update && item?.statuses[item?.statuses.length - 1].status != \"Renewed\") {\r\n\r\n                                        setStatus({ id: item?.statuses[item?.statuses.length - 1].status, name: item?.statuses[item?.statuses.length - 1].status })\r\n                                        setStatusDialog(true);\r\n                                        setSelectedVisa(item);\r\n                                      }\r\n                                    }}\r\n                                  >\r\n                                    <Box\r\n                                      component={\"img\"}\r\n                                      src={\r\n                                        item?.statuses[item?.statuses.length - 1].status == \"In Process\"\r\n                                          ? Images.pendingIcon\r\n                                          : item?.statuses[item?.statuses.length - 1].status == \"Renewed\" ?\r\n                                            Images.successIcon : Images.orangeCircle\r\n                                      }\r\n                                      width={\"13px\"}\r\n                                    ></Box>\r\n                                    {item?.statuses[item?.statuses.length - 1].status}\r\n                                  </Box>\r\n                                </Cell>\r\n                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                  <Box>\r\n\r\n                                    {permissions?.details && <Box component={'img'} src={Images.detailIcon} onClick={() => navigate(`/renewed-detail/${item?.id}`)} width={'35px'}></Box>}\r\n                                    {permissions?.invoice && <Box component={'img'} onClick={() => {\r\n\r\n                                      if (permissions?.invoice) {\r\n\r\n                                        navigate(`/renew-invoice/${item?.id}`)\r\n                                      }\r\n\r\n\r\n                                    }} sx={{ cursor: \"pointer\" }} src={Images.invoiceIcon} width={'35px'}></Box>}\r\n                                    {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                  </Box>\r\n                                </Cell>\r\n\r\n                              </Row>\r\n                            );\r\n                          })}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </PDFExport>\r\n                  {/* ========== Pagination ========== */}\r\n                  <Pagination\r\n                    currentPage={currentPage}\r\n                    pageSize={pageLimit}\r\n                    onPageSizeChange={(size) => getRenewList(1, size.target.value,filters)}\r\n                    tableCount={customerQueue?.length}\r\n                    totalCount={totalCount}\r\n                    onPageChange={(page) => getRenewList(page, \"\",filters)}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n\r\n              {loader && <CircleLoading />}\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default VisaList;\r\n"
        }
    ]
}