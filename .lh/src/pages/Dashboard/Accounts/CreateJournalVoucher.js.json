{
    "sourceFile": "src/pages/Dashboard/Accounts/CreateJournalVoucher.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1745322860714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745322879617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -556,9 +556,338 @@\n             />\r\n           </Box>\r\n         </Fragment>\r\n       }\r\n+    <form onSubmit={handleSubmit(!editState ? addItem : updateItem)}>\r\n+          <TableContainer component={Paper}>\r\n+            <Table>\r\n+              <TableHead>\r\n+                <TableRow>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n+                  <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n+                  <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n+                </TableRow>\r\n+              </TableHead>\r\n+              <TableBody>\r\n+                {<TableRow>\r\n+                  <TableCell sx={{ display: \"none\" }}>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={true}\r\n+                      placeholder=\"Item id\"\r\n+                      register={register(\"id\", { required: \"Item id is required\" })}\r\n+                    />\r\n+                    {errors.id && <span>{errors.id.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={true}\r\n+                      placeholder=\"Item code\"\r\n+                      register={register(\"item_code\", { required: \"Item code is required\" })}\r\n+                    />\r\n+                    {errors.id && <span>{errors.id.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <SelectField\r\n+                      size=\"small\"\r\n+                      options={services}\r\n+                      disabled={detail?.is_paid || editState}\r\n+                      selected={serviceItem}\r\n+                      onSelect={handleServiceSelect}\r\n+                      //  error={errors?.service?.message}\r\n+                      register={register(\"service\", {\r\n+                        required: \"Please select a service.\",\r\n+                      })}\r\n+                    />\r\n+                    {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={detail?.is_paid}\r\n+                      placeholder=\"Quantity\"\r\n+                      type=\"number\"\r\n+                      register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n+                    />\r\n+                    {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={detail?.is_paid}\r\n+                      placeholder=\"Govt fee\"\r\n \r\n+\r\n+                      register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n+                    />\r\n+                    {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={detail?.is_paid}\r\n+                      placeholder=\"Center Fee\"\r\n+\r\n+\r\n+                      register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n+                    />\r\n+                    {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      disabled={detail?.is_paid}\r\n+                      placeholder=\"Bank Charges\"\r\n+\r\n+                      register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n+\r\n+                    />\r\n+                    {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n+\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      placeholder=\"Transaction Id\"\r\n+\r\n+                      register={register(\"transaction_id\", { \r\n+                        required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n+                      })}\r\n+\r\n+                    />\r\n+                    {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n+\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      placeholder=\"Application Id\"\r\n+\r\n+                      register={register(\"application_id\", {\r\n+                        required: settings?.required_app_id ? 'Application id is required' : false,\r\n+                      })}\r\n+                    />\r\n+                    {errors.application_id && (\r\n+                      <span style={{ color: \"red\" }}>\r\n+                        {errors.application_id.message}\r\n+                      </span>\r\n+                    )}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      size=\"small\"\r\n+                      placeholder=\" Ref No\"\r\n+\r\n+                      register={register(\"ref_no\", {\r\n+                        required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n+                      })}\r\n+                    />\r\n+                    {errors.ref_no && (\r\n+                      <span style={{ color: \"red\" }}>\r\n+                        {errors.ref_no.message}\r\n+                      </span>\r\n+                    )}\r\n+                  </TableCell>\r\n+\r\n+                  <TableCell>\r\n+                    <InputField\r\n+                      disabled={true}\r\n+                      style={{ border: \"none\" }}\r\n+                      size=\"small\"\r\n+                      placeholder=\"\"\r\n+                      register={register(\"total\")}\r\n+                    />\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    {(!editState && !detail?.is_paid) && <Button\r\n+                      variant=\"contained\"\r\n+                      color=\"primary\"\r\n+                      type=\"submit\"\r\n+                      sx={{\r\n+                        textTransform: 'capitalize',\r\n+                        backgroundColor: \"rgb(189 155 74)\",\r\n+                        fontSize: \"12px\",\r\n+                        \":hover\": {\r\n+                          backgroundColor: \"rgb(189 155 74)\",\r\n+                        },\r\n+                      }}\r\n+                    >\r\n+                      <AddIcon />\r\n+                    </Button>}\r\n+                    {editState && <> <Button\r\n+                      variant=\"contained\"\r\n+                      color=\"primary\"\r\n+                      type=\"submit\"\r\n+                      sx={{\r\n+                        textTransform: 'capitalize',\r\n+                        backgroundColor: \"rgb(189 155 74)\",\r\n+                        fontSize: \"12px\",\r\n+                        \":hover\": {\r\n+                          backgroundColor: \"rgb(189 155 74)\",\r\n+                        },\r\n+                      }}\r\n+                    >\r\n+                      Update\r\n+                    </Button>\r\n+                      <Button\r\n+                        variant=\"contained\"\r\n+                        color=\"primary\"\r\n+\r\n+                        onClick={() => {\r\n+                          setEditState(false)\r\n+\r\n+                          setValue(\"id\", '');\r\n+                          setValue(\"item_code\", '');\r\n+                          setValue(\"govt_fee\", '');\r\n+                          setValue(\"center_fee\", '');\r\n+                          setValue(\"bank_charge\", '');\r\n+                          setValue(\"transaction_id\", '');\r\n+                          setValue(\"application_id\", '');\r\n+                          setValue(\"ref_no\", '');\r\n+                          setServiceItem(null);\r\n+                          setValue(\"quantity\", '');\r\n+                        }}\r\n+                        sx={{\r\n+                          mt: 2,\r\n+                          textTransform: 'capitalize',\r\n+                          backgroundColor: \"rgb(189 155 74)\",\r\n+                          fontSize: \"12px\",\r\n+                          \":hover\": {\r\n+                            backgroundColor: \"rgb(189 155 74)\",\r\n+                          },\r\n+                        }}\r\n+                      >\r\n+                        Cancel\r\n+                      </Button></>}\r\n+                  </TableCell>\r\n+                </TableRow>}\r\n+\r\n+                {rows?.length > 0 && rows?.map((item, index) => (\r\n+                  <TableRow key={index}>\r\n+                    <TableCell sx={{ display: \"none\" }}>{item?.id}</TableCell>\r\n+                    <TableCell>{item?.item_code}</TableCell>\r\n+                    <TableCell>{item?.service?.name}</TableCell>\r\n+                    <TableCell>{item?.quantity}</TableCell>\r\n+                    <TableCell>{item?.govt_fee}</TableCell>\r\n+                    <TableCell>{item?.center_fee}</TableCell>\r\n+                    <TableCell>{item?.bank_charge}</TableCell>\r\n+                    <TableCell>{item?.transaction_id}</TableCell>\r\n+                    <TableCell>{item?.application_id}</TableCell>\r\n+                    <TableCell>{item?.ref_no}</TableCell>\r\n+\r\n+                    <TableCell>{item?.total}</TableCell>\r\n+                    <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n+\r\n+                      {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n+                        setSelectedRow(item); setEditState(true)\r\n+                        console.log(item);\r\n+\r\n+                        setValue(\"id\", item?.id);\r\n+                        setValue(\"item_code\", item?.item_code);\r\n+                        setValue(\"govt_fee\", item?.govt_fee);\r\n+                        setValue(\"center_fee\", item?.center_fee);\r\n+                        setValue(\"bank_charge\", item?.bank_charge);\r\n+                        setValue(\"transaction_id\", item?.transaction_id);\r\n+                        setValue(\"application_id\", item?.application_id);\r\n+                        setValue(\"ref_no\", item?.ref_no);\r\n+                        setValue(\"service\", item?.service);\r\n+                        setServiceItem(item?.service);\r\n+                        setValue(\"quantity\", item?.quantity);\r\n+                        console.log(item?.service)\r\n+\r\n+                      }} src={Images.editIcon} width={'35px'}></Box>}\r\n+                      <Box>\r\n+                        {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n+\r\n+                          let selectedID = item?.id\r\n+                          setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n+                          let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n+                          // 👇 Calculate total after updating rows\r\n+                          const total = filteredData.reduce((sum, item) => {\r\n+                            // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n+                            return sum + (parseFloat(item.total) || 0);\r\n+                          }, 0);\r\n+\r\n+                          console.log(\"New total after update:\", total);\r\n+\r\n+                          // You can update a state for total if you have one:\r\n+                          setSubTotal(total); // <-- Make sure to declare this with useState\r\n+                        }} width={'35px'}></Box>}\r\n+\r\n+\r\n+                      </Box>\r\n+\r\n+                    </Box></TableCell>\r\n+                  </TableRow>\r\n+                ))}\r\n+\r\n+                <TableRow>\r\n+                  <TableCell colSpan={9} align=\"right\">\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+                <TableRow>\r\n+                  <TableCell colSpan={9} align=\"right\">\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{rows\r\n+                      ?.reduce((total, item) => {\r\n+                        const fee = parseFloat(item?.center_fee ?? 0);\r\n+                        const qty = parseInt(item?.quantity ?? 1);\r\n+                        return total + fee * qty;\r\n+                      }, 0)\r\n+                      .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+                <TableRow>\r\n+                  <TableCell colSpan={9} align=\"right\">\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Total Vat:</Typography>\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n+                      rows?.reduce((total, item) => {\r\n+                        const fee = parseFloat(item?.center_fee ?? 0);\r\n+                        const qty = parseFloat(item?.quantity ?? 1);\r\n+                        return total + fee * qty;\r\n+                      }, 0) * 0.05\r\n+                    ).toFixed(2)}\r\n+                    </Typography> {/* Display the Sub-total */}\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+                {/* Amount Total Row (optional, if needed for the final sum) */}\r\n+                <TableRow>\r\n+                  <TableCell colSpan={9} align=\"right\">\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n+                      parseFloat(subTotal) +\r\n+                      rows?.reduce((total, item) => {\r\n+                        const fee = parseFloat(item?.center_fee ?? 0);\r\n+                        const qty = parseFloat(item?.quantity ?? 1);\r\n+                        return total + fee * qty;\r\n+                      }, 0) * 0.05\r\n+                    ).toFixed(2)}\r\n+                    </Typography> {/* This can be the same as Sub-total */}\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+              </TableBody>\r\n+            </Table>\r\n+          </TableContainer>\r\n+        </form>\r\n     </Box>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1745322893155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -865,25 +865,9 @@\n                     ).toFixed(2)}\r\n                     </Typography> {/* Display the Sub-total */}\r\n                   </TableCell>\r\n                 </TableRow>\r\n-                {/* Amount Total Row (optional, if needed for the final sum) */}\r\n-                <TableRow>\r\n-                  <TableCell colSpan={9} align=\"right\">\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n-                      parseFloat(subTotal) +\r\n-                      rows?.reduce((total, item) => {\r\n-                        const fee = parseFloat(item?.center_fee ?? 0);\r\n-                        const qty = parseFloat(item?.quantity ?? 1);\r\n-                        return total + fee * qty;\r\n-                      }, 0) * 0.05\r\n-                    ).toFixed(2)}\r\n-                    </Typography> {/* This can be the same as Sub-total */}\r\n-                  </TableCell>\r\n-                </TableRow>\r\n+           \r\n               </TableBody>\r\n             </Table>\r\n           </TableContainer>\r\n         </form>\r\n"
                },
                {
                    "date": 1745322901706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -841,32 +841,19 @@\n                   <TableCell colSpan={9} align=\"right\">\r\n                     <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n                   </TableCell>\r\n                   <TableCell>\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{rows\r\n+                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{\r\n+                    rows\r\n                       ?.reduce((total, item) => {\r\n                         const fee = parseFloat(item?.center_fee ?? 0);\r\n                         const qty = parseInt(item?.quantity ?? 1);\r\n                         return total + fee * qty;\r\n                       }, 0)\r\n                       .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n                   </TableCell>\r\n                 </TableRow>\r\n-                <TableRow>\r\n-                  <TableCell colSpan={9} align=\"right\">\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Total Vat:</Typography>\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n-                      rows?.reduce((total, item) => {\r\n-                        const fee = parseFloat(item?.center_fee ?? 0);\r\n-                        const qty = parseFloat(item?.quantity ?? 1);\r\n-                        return total + fee * qty;\r\n-                      }, 0) * 0.05\r\n-                    ).toFixed(2)}\r\n-                    </Typography> {/* Display the Sub-total */}\r\n-                  </TableCell>\r\n-                </TableRow>\r\n+                \r\n            \r\n               </TableBody>\r\n             </Table>\r\n           </TableContainer>\r\n"
                },
                {
                    "date": 1745322907359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \r\n \r\n function CreateJournalVoucher() {\r\n   const [handleBlockedNavigation] =\r\n-  useCallbackPrompt(false)\r\n+    useCallbackPrompt(false)\r\n   const navigate = useNavigate();\r\n   const { usdExchangeRate, cadExchangeRate } = useSelector((state) => state.navigationReducer);\r\n \r\n   const { register, handleSubmit, formState: { errors }, setValue, reset, getValues } = useForm();\r\n@@ -145,13 +145,13 @@\n       let params = {\r\n         category_id: id ?? ''\r\n       }\r\n       const { data } = await FinanceServices.getSubCategories(params)\r\n-      if(id){\r\n+      if (id) {\r\n \r\n         setSubCategories(data?.categories)\r\n       }\r\n-      else{\r\n+      else {\r\n         setSubCategories([])\r\n       }\r\n     } catch (error) {\r\n       showErrorToast(error)\r\n@@ -556,309 +556,309 @@\n             />\r\n           </Box>\r\n         </Fragment>\r\n       }\r\n-    <form onSubmit={handleSubmit(!editState ? addItem : updateItem)}>\r\n-          <TableContainer component={Paper}>\r\n-            <Table>\r\n-              <TableHead>\r\n-                <TableRow>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n-                  <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n-                  <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n-                </TableRow>\r\n-              </TableHead>\r\n-              <TableBody>\r\n-                {<TableRow>\r\n-                  <TableCell sx={{ display: \"none\" }}>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Item id\"\r\n-                      register={register(\"id\", { required: \"Item id is required\" })}\r\n-                    />\r\n-                    {errors.id && <span>{errors.id.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={true}\r\n-                      placeholder=\"Item code\"\r\n-                      register={register(\"item_code\", { required: \"Item code is required\" })}\r\n-                    />\r\n-                    {errors.id && <span>{errors.id.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <SelectField\r\n-                      size=\"small\"\r\n-                      options={services}\r\n-                      disabled={detail?.is_paid || editState}\r\n-                      selected={serviceItem}\r\n-                      onSelect={handleServiceSelect}\r\n-                      //  error={errors?.service?.message}\r\n-                      register={register(\"service\", {\r\n-                        required: \"Please select a service.\",\r\n-                      })}\r\n-                    />\r\n-                    {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={detail?.is_paid}\r\n-                      placeholder=\"Quantity\"\r\n-                      type=\"number\"\r\n-                      register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n-                    />\r\n-                    {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={detail?.is_paid}\r\n-                      placeholder=\"Govt fee\"\r\n+      <form onSubmit={handleSubmit(!editState ? addItem : updateItem)}>\r\n+        <TableContainer component={Paper}>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n+                <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+            <TableBody>\r\n+              {<TableRow>\r\n+                <TableCell sx={{ display: \"none\" }}>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={true}\r\n+                    placeholder=\"Item id\"\r\n+                    register={register(\"id\", { required: \"Item id is required\" })}\r\n+                  />\r\n+                  {errors.id && <span>{errors.id.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={true}\r\n+                    placeholder=\"Item code\"\r\n+                    register={register(\"item_code\", { required: \"Item code is required\" })}\r\n+                  />\r\n+                  {errors.id && <span>{errors.id.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <SelectField\r\n+                    size=\"small\"\r\n+                    options={services}\r\n+                    disabled={detail?.is_paid || editState}\r\n+                    selected={serviceItem}\r\n+                    onSelect={handleServiceSelect}\r\n+                    //  error={errors?.service?.message}\r\n+                    register={register(\"service\", {\r\n+                      required: \"Please select a service.\",\r\n+                    })}\r\n+                  />\r\n+                  {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Quantity\"\r\n+                    type=\"number\"\r\n+                    register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n+                  />\r\n+                  {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Govt fee\"\r\n \r\n \r\n-                      register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n-                    />\r\n-                    {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={detail?.is_paid}\r\n-                      placeholder=\"Center Fee\"\r\n+                    register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n+                  />\r\n+                  {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Center Fee\"\r\n \r\n \r\n-                      register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n-                    />\r\n-                    {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      disabled={detail?.is_paid}\r\n-                      placeholder=\"Bank Charges\"\r\n+                    register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n+                  />\r\n+                  {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Bank Charges\"\r\n \r\n-                      register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n+                    register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n \r\n-                    />\r\n-                    {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n+                  />\r\n+                  {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n \r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      placeholder=\"Transaction Id\"\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\"Transaction Id\"\r\n \r\n-                      register={register(\"transaction_id\", { \r\n-                        required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n-                      })}\r\n+                    register={register(\"transaction_id\", {\r\n+                      required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n+                    })}\r\n \r\n-                    />\r\n-                    {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n+                  />\r\n+                  {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n \r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      placeholder=\"Application Id\"\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\"Application Id\"\r\n \r\n-                      register={register(\"application_id\", {\r\n-                        required: settings?.required_app_id ? 'Application id is required' : false,\r\n-                      })}\r\n-                    />\r\n-                    {errors.application_id && (\r\n-                      <span style={{ color: \"red\" }}>\r\n-                        {errors.application_id.message}\r\n-                      </span>\r\n-                    )}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      size=\"small\"\r\n-                      placeholder=\" Ref No\"\r\n+                    register={register(\"application_id\", {\r\n+                      required: settings?.required_app_id ? 'Application id is required' : false,\r\n+                    })}\r\n+                  />\r\n+                  {errors.application_id && (\r\n+                    <span style={{ color: \"red\" }}>\r\n+                      {errors.application_id.message}\r\n+                    </span>\r\n+                  )}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\" Ref No\"\r\n \r\n-                      register={register(\"ref_no\", {\r\n-                        required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n-                      })}\r\n-                    />\r\n-                    {errors.ref_no && (\r\n-                      <span style={{ color: \"red\" }}>\r\n-                        {errors.ref_no.message}\r\n-                      </span>\r\n-                    )}\r\n-                  </TableCell>\r\n+                    register={register(\"ref_no\", {\r\n+                      required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n+                    })}\r\n+                  />\r\n+                  {errors.ref_no && (\r\n+                    <span style={{ color: \"red\" }}>\r\n+                      {errors.ref_no.message}\r\n+                    </span>\r\n+                  )}\r\n+                </TableCell>\r\n \r\n-                  <TableCell>\r\n-                    <InputField\r\n-                      disabled={true}\r\n-                      style={{ border: \"none\" }}\r\n-                      size=\"small\"\r\n-                      placeholder=\"\"\r\n-                      register={register(\"total\")}\r\n-                    />\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    {(!editState && !detail?.is_paid) && <Button\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    disabled={true}\r\n+                    style={{ border: \"none\" }}\r\n+                    size=\"small\"\r\n+                    placeholder=\"\"\r\n+                    register={register(\"total\")}\r\n+                  />\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  {(!editState && !detail?.is_paid) && <Button\r\n+                    variant=\"contained\"\r\n+                    color=\"primary\"\r\n+                    type=\"submit\"\r\n+                    sx={{\r\n+                      textTransform: 'capitalize',\r\n+                      backgroundColor: \"rgb(189 155 74)\",\r\n+                      fontSize: \"12px\",\r\n+                      \":hover\": {\r\n+                        backgroundColor: \"rgb(189 155 74)\",\r\n+                      },\r\n+                    }}\r\n+                  >\r\n+                    <AddIcon />\r\n+                  </Button>}\r\n+                  {editState && <> <Button\r\n+                    variant=\"contained\"\r\n+                    color=\"primary\"\r\n+                    type=\"submit\"\r\n+                    sx={{\r\n+                      textTransform: 'capitalize',\r\n+                      backgroundColor: \"rgb(189 155 74)\",\r\n+                      fontSize: \"12px\",\r\n+                      \":hover\": {\r\n+                        backgroundColor: \"rgb(189 155 74)\",\r\n+                      },\r\n+                    }}\r\n+                  >\r\n+                    Update\r\n+                  </Button>\r\n+                    <Button\r\n                       variant=\"contained\"\r\n                       color=\"primary\"\r\n-                      type=\"submit\"\r\n-                      sx={{\r\n-                        textTransform: 'capitalize',\r\n-                        backgroundColor: \"rgb(189 155 74)\",\r\n-                        fontSize: \"12px\",\r\n-                        \":hover\": {\r\n-                          backgroundColor: \"rgb(189 155 74)\",\r\n-                        },\r\n+\r\n+                      onClick={() => {\r\n+                        setEditState(false)\r\n+\r\n+                        setValue(\"id\", '');\r\n+                        setValue(\"item_code\", '');\r\n+                        setValue(\"govt_fee\", '');\r\n+                        setValue(\"center_fee\", '');\r\n+                        setValue(\"bank_charge\", '');\r\n+                        setValue(\"transaction_id\", '');\r\n+                        setValue(\"application_id\", '');\r\n+                        setValue(\"ref_no\", '');\r\n+                        setServiceItem(null);\r\n+                        setValue(\"quantity\", '');\r\n                       }}\r\n-                    >\r\n-                      <AddIcon />\r\n-                    </Button>}\r\n-                    {editState && <> <Button\r\n-                      variant=\"contained\"\r\n-                      color=\"primary\"\r\n-                      type=\"submit\"\r\n                       sx={{\r\n+                        mt: 2,\r\n                         textTransform: 'capitalize',\r\n                         backgroundColor: \"rgb(189 155 74)\",\r\n                         fontSize: \"12px\",\r\n                         \":hover\": {\r\n                           backgroundColor: \"rgb(189 155 74)\",\r\n                         },\r\n                       }}\r\n                     >\r\n-                      Update\r\n-                    </Button>\r\n-                      <Button\r\n-                        variant=\"contained\"\r\n-                        color=\"primary\"\r\n+                      Cancel\r\n+                    </Button></>}\r\n+                </TableCell>\r\n+              </TableRow>}\r\n \r\n-                        onClick={() => {\r\n-                          setEditState(false)\r\n+              {rows?.length > 0 && rows?.map((item, index) => (\r\n+                <TableRow key={index}>\r\n+                  <TableCell sx={{ display: \"none\" }}>{item?.id}</TableCell>\r\n+                  <TableCell>{item?.item_code}</TableCell>\r\n+                  <TableCell>{item?.service?.name}</TableCell>\r\n+                  <TableCell>{item?.quantity}</TableCell>\r\n+                  <TableCell>{item?.govt_fee}</TableCell>\r\n+                  <TableCell>{item?.center_fee}</TableCell>\r\n+                  <TableCell>{item?.bank_charge}</TableCell>\r\n+                  <TableCell>{item?.transaction_id}</TableCell>\r\n+                  <TableCell>{item?.application_id}</TableCell>\r\n+                  <TableCell>{item?.ref_no}</TableCell>\r\n \r\n-                          setValue(\"id\", '');\r\n-                          setValue(\"item_code\", '');\r\n-                          setValue(\"govt_fee\", '');\r\n-                          setValue(\"center_fee\", '');\r\n-                          setValue(\"bank_charge\", '');\r\n-                          setValue(\"transaction_id\", '');\r\n-                          setValue(\"application_id\", '');\r\n-                          setValue(\"ref_no\", '');\r\n-                          setServiceItem(null);\r\n-                          setValue(\"quantity\", '');\r\n-                        }}\r\n-                        sx={{\r\n-                          mt: 2,\r\n-                          textTransform: 'capitalize',\r\n-                          backgroundColor: \"rgb(189 155 74)\",\r\n-                          fontSize: \"12px\",\r\n-                          \":hover\": {\r\n-                            backgroundColor: \"rgb(189 155 74)\",\r\n-                          },\r\n-                        }}\r\n-                      >\r\n-                        Cancel\r\n-                      </Button></>}\r\n-                  </TableCell>\r\n-                </TableRow>}\r\n+                  <TableCell>{item?.total}</TableCell>\r\n+                  <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n \r\n-                {rows?.length > 0 && rows?.map((item, index) => (\r\n-                  <TableRow key={index}>\r\n-                    <TableCell sx={{ display: \"none\" }}>{item?.id}</TableCell>\r\n-                    <TableCell>{item?.item_code}</TableCell>\r\n-                    <TableCell>{item?.service?.name}</TableCell>\r\n-                    <TableCell>{item?.quantity}</TableCell>\r\n-                    <TableCell>{item?.govt_fee}</TableCell>\r\n-                    <TableCell>{item?.center_fee}</TableCell>\r\n-                    <TableCell>{item?.bank_charge}</TableCell>\r\n-                    <TableCell>{item?.transaction_id}</TableCell>\r\n-                    <TableCell>{item?.application_id}</TableCell>\r\n-                    <TableCell>{item?.ref_no}</TableCell>\r\n+                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n+                      setSelectedRow(item); setEditState(true)\r\n+                      console.log(item);\r\n \r\n-                    <TableCell>{item?.total}</TableCell>\r\n-                    <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n+                      setValue(\"id\", item?.id);\r\n+                      setValue(\"item_code\", item?.item_code);\r\n+                      setValue(\"govt_fee\", item?.govt_fee);\r\n+                      setValue(\"center_fee\", item?.center_fee);\r\n+                      setValue(\"bank_charge\", item?.bank_charge);\r\n+                      setValue(\"transaction_id\", item?.transaction_id);\r\n+                      setValue(\"application_id\", item?.application_id);\r\n+                      setValue(\"ref_no\", item?.ref_no);\r\n+                      setValue(\"service\", item?.service);\r\n+                      setServiceItem(item?.service);\r\n+                      setValue(\"quantity\", item?.quantity);\r\n+                      console.log(item?.service)\r\n \r\n-                      {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n-                        setSelectedRow(item); setEditState(true)\r\n-                        console.log(item);\r\n+                    }} src={Images.editIcon} width={'35px'}></Box>}\r\n+                    <Box>\r\n+                      {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n \r\n-                        setValue(\"id\", item?.id);\r\n-                        setValue(\"item_code\", item?.item_code);\r\n-                        setValue(\"govt_fee\", item?.govt_fee);\r\n-                        setValue(\"center_fee\", item?.center_fee);\r\n-                        setValue(\"bank_charge\", item?.bank_charge);\r\n-                        setValue(\"transaction_id\", item?.transaction_id);\r\n-                        setValue(\"application_id\", item?.application_id);\r\n-                        setValue(\"ref_no\", item?.ref_no);\r\n-                        setValue(\"service\", item?.service);\r\n-                        setServiceItem(item?.service);\r\n-                        setValue(\"quantity\", item?.quantity);\r\n-                        console.log(item?.service)\r\n+                        let selectedID = item?.id\r\n+                        setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n+                        let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n+                        // 👇 Calculate total after updating rows\r\n+                        const total = filteredData.reduce((sum, item) => {\r\n+                          // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n+                          return sum + (parseFloat(item.total) || 0);\r\n+                        }, 0);\r\n \r\n-                      }} src={Images.editIcon} width={'35px'}></Box>}\r\n-                      <Box>\r\n-                        {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n+                        console.log(\"New total after update:\", total);\r\n \r\n-                          let selectedID = item?.id\r\n-                          setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n-                          let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n-                          // 👇 Calculate total after updating rows\r\n-                          const total = filteredData.reduce((sum, item) => {\r\n-                            // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n-                            return sum + (parseFloat(item.total) || 0);\r\n-                          }, 0);\r\n+                        // You can update a state for total if you have one:\r\n+                        setSubTotal(total); // <-- Make sure to declare this with useState\r\n+                      }} width={'35px'}></Box>}\r\n \r\n-                          console.log(\"New total after update:\", total);\r\n \r\n-                          // You can update a state for total if you have one:\r\n-                          setSubTotal(total); // <-- Make sure to declare this with useState\r\n-                        }} width={'35px'}></Box>}\r\n+                    </Box>\r\n \r\n+                  </Box></TableCell>\r\n+                </TableRow>\r\n+              ))}\r\n \r\n-                      </Box>\r\n-\r\n-                    </Box></TableCell>\r\n-                  </TableRow>\r\n-                ))}\r\n-\r\n-                <TableRow>\r\n-                  <TableCell colSpan={9} align=\"right\">\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-                <TableRow>\r\n-                  <TableCell colSpan={9} align=\"right\">\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{\r\n+              <TableRow>\r\n+                <TableCell colSpan={9} align=\"right\">\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{344}</Typography> {/* Display the Sub-total */}\r\n+                </TableCell>\r\n+              </TableRow>\r\n+              <TableRow>\r\n+                <TableCell colSpan={9} align=\"right\">\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{\r\n                     rows\r\n                       ?.reduce((total, item) => {\r\n                         const fee = parseFloat(item?.center_fee ?? 0);\r\n                         const qty = parseInt(item?.quantity ?? 1);\r\n                         return total + fee * qty;\r\n                       }, 0)\r\n                       .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-                \r\n-           \r\n-              </TableBody>\r\n-            </Table>\r\n-          </TableContainer>\r\n-        </form>\r\n+                </TableCell>\r\n+              </TableRow>\r\n+\r\n+\r\n+            </TableBody>\r\n+          </Table>\r\n+        </TableContainer>\r\n+      </form>\r\n     </Box>\r\n   );\r\n }\r\n \r\n"
                },
                {
                    "date": 1745322933468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -556,9 +556,9 @@\n             />\r\n           </Box>\r\n         </Fragment>\r\n       }\r\n-      <form onSubmit={handleSubmit(!editState ? addItem : updateItem)}>\r\n+      <form onSubmit={handleSubmit( addItem )}>\r\n         <TableContainer component={Paper}>\r\n           <Table>\r\n             <TableHead>\r\n               <TableRow>\r\n"
                },
                {
                    "date": 1745322946549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,8 +290,30 @@\n       setLoading(false)\r\n     }\r\n   }\r\n \r\n+  const addItem = (data) => {\r\n+    console.log(data);\r\n+\r\n+    // Create a new row with the serviceItem included\r\n+    const newRow = { ...data, service: serviceItem };\r\n+\r\n+    setRows((prevRows) => {\r\n+      const updatedRows = [...prevRows, newRow];\r\n+\r\n+      // Ensure all totals are treated as floats\r\n+      const newSubTotal = updatedRows.reduce((sum, row) => sum + parseFloat(row.total || 0), 0);\r\n+\r\n+      // Optionally round to 2 decimal places\r\n+      setSubTotal(parseFloat(newSubTotal.toFixed(2)));\r\n+\r\n+      return updatedRows;\r\n+    });\r\n+\r\n+    reset();\r\n+    setServiceItem(\"\");\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     getMajorCategories()\r\n     getSubCategories()\r\n     setFromDate(new Date())\r\n"
                },
                {
                    "date": 1745322963341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n \r\n   const [fromDate, setFromDate] = useState();\r\n   const [toDate, setToDate] = useState();\r\n   const [journalNo, setJournalNo] = useState()\r\n+  const [rows, setRows] = useState([])\r\n \r\n   // *For Total of Credit & Debit\r\n   let TotalDebit = 0\r\n   let TotalCredit = 0\r\n"
                },
                {
                    "date": 1745322971072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { useNavigate } from \"react-router-dom\";\r\n import SelectField from \"components/Select\";\r\n import { PrimaryButton } from \"components/Buttons\";\r\n import Colors from \"assets/Style/Colors\";\r\n-import { FontFamily } from \"assets\";\r\n+import { FontFamily, Images } from \"assets\";\r\n import { SuccessToaster } from \"components/Toaster\";\r\n import InputField from \"components/Input\";\r\n import FinanceServices from \"services/Finance\";\r\n import { Delete } from \"@mui/icons-material\";\r\n"
                },
                {
                    "date": 1745322996837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,9 @@\n   const [fromDate, setFromDate] = useState();\r\n   const [toDate, setToDate] = useState();\r\n   const [journalNo, setJournalNo] = useState()\r\n   const [rows, setRows] = useState([])\r\n+  const [subTotal, setSubTotal] = useState()\r\n \r\n   // *For Total of Credit & Debit\r\n   let TotalDebit = 0\r\n   let TotalCredit = 0\r\n@@ -821,9 +822,9 @@\n                       setValue(\"transaction_id\", item?.transaction_id);\r\n                       setValue(\"application_id\", item?.application_id);\r\n                       setValue(\"ref_no\", item?.ref_no);\r\n                       setValue(\"service\", item?.service);\r\n-                      setServiceItem(item?.service);\r\n+               \r\n                       setValue(\"quantity\", item?.quantity);\r\n                       console.log(item?.service)\r\n \r\n                     }} src={Images.editIcon} width={'35px'}></Box>}\r\n"
                },
                {
                    "date": 1745323011875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n   const addItem = (data) => {\r\n     console.log(data);\r\n \r\n     // Create a new row with the serviceItem included\r\n-    const newRow = { ...data, service: serviceItem };\r\n+    const newRow = { ...data, service: '' };\r\n \r\n     setRows((prevRows) => {\r\n       const updatedRows = [...prevRows, newRow];\r\n \r\n"
                },
                {
                    "date": 1745323019447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n       return updatedRows;\r\n     });\r\n \r\n     reset();\r\n-    setServiceItem(\"\");\r\n+\r\n   };\r\n \r\n   useEffect(() => {\r\n     getMajorCategories()\r\n"
                },
                {
                    "date": 1745323033235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -775,9 +775,9 @@\n                         setValue(\"bank_charge\", '');\r\n                         setValue(\"transaction_id\", '');\r\n                         setValue(\"application_id\", '');\r\n                         setValue(\"ref_no\", '');\r\n-                        setServiceItem(null);\r\n+                    \r\n                         setValue(\"quantity\", '');\r\n                       }}\r\n                       sx={{\r\n                         mt: 2,\r\n"
                },
                {
                    "date": 1745323068237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -745,53 +745,9 @@\n                     }}\r\n                   >\r\n                     <AddIcon />\r\n                   </Button>}\r\n-                  {editState && <> <Button\r\n-                    variant=\"contained\"\r\n-                    color=\"primary\"\r\n-                    type=\"submit\"\r\n-                    sx={{\r\n-                      textTransform: 'capitalize',\r\n-                      backgroundColor: \"rgb(189 155 74)\",\r\n-                      fontSize: \"12px\",\r\n-                      \":hover\": {\r\n-                        backgroundColor: \"rgb(189 155 74)\",\r\n-                      },\r\n-                    }}\r\n-                  >\r\n-                    Update\r\n-                  </Button>\r\n-                    <Button\r\n-                      variant=\"contained\"\r\n-                      color=\"primary\"\r\n-\r\n-                      onClick={() => {\r\n-                        setEditState(false)\r\n-\r\n-                        setValue(\"id\", '');\r\n-                        setValue(\"item_code\", '');\r\n-                        setValue(\"govt_fee\", '');\r\n-                        setValue(\"center_fee\", '');\r\n-                        setValue(\"bank_charge\", '');\r\n-                        setValue(\"transaction_id\", '');\r\n-                        setValue(\"application_id\", '');\r\n-                        setValue(\"ref_no\", '');\r\n-                    \r\n-                        setValue(\"quantity\", '');\r\n-                      }}\r\n-                      sx={{\r\n-                        mt: 2,\r\n-                        textTransform: 'capitalize',\r\n-                        backgroundColor: \"rgb(189 155 74)\",\r\n-                        fontSize: \"12px\",\r\n-                        \":hover\": {\r\n-                          backgroundColor: \"rgb(189 155 74)\",\r\n-                        },\r\n-                      }}\r\n-                    >\r\n-                      Cancel\r\n-                    </Button></>}\r\n+                \r\n                 </TableCell>\r\n               </TableRow>}\r\n \r\n               {rows?.length > 0 && rows?.map((item, index) => (\r\n"
                },
                {
                    "date": 1745323073842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -730,9 +730,9 @@\n                     register={register(\"total\")}\r\n                   />\r\n                 </TableCell>\r\n                 <TableCell>\r\n-                  {(!editState && !detail?.is_paid) && <Button\r\n+                  {<Button\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n                     type=\"submit\"\r\n                     sx={{\r\n"
                },
                {
                    "date": 1745323092884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { Fragment, useEffect, useState } from \"react\";\r\n-import { Paper, Box, Grid, TableCell, TableContainer, TableHead, TableRow, TableBody, Table, tableCellClasses, Typography, IconButton } from \"@mui/material\";\r\n+import { Paper, Box, Grid, TableCell, TableContainer, TableHead, TableRow, TableBody, Table, tableCellClasses, Typography, IconButton, Button } from \"@mui/material\";\r\n import styled from '@emotion/styled';\r\n import { useForm } from \"react-hook-form\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import SelectField from \"components/Select\";\r\n"
                },
                {
                    "date": 1745323141081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -624,9 +624,9 @@\n                     size=\"small\"\r\n                     options={services}\r\n                     disabled={detail?.is_paid || editState}\r\n                     selected={serviceItem}\r\n-                    onSelect={handleServiceSelect}\r\n+                    onSelect={}\r\n                     //  error={errors?.service?.message}\r\n                     register={register(\"service\", {\r\n                       required: \"Please select a service.\",\r\n                     })}\r\n"
                },
                {
                    "date": 1745323148813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,845 @@\n+import React, { Fragment, useEffect, useState } from \"react\";\r\n+import { Paper, Box, Grid, TableCell, TableContainer, TableHead, TableRow, TableBody, Table, tableCellClasses, Typography, IconButton, Button } from \"@mui/material\";\r\n+import styled from '@emotion/styled';\r\n+import { useForm } from \"react-hook-form\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import SelectField from \"components/Select\";\r\n+import { PrimaryButton } from \"components/Buttons\";\r\n+import Colors from \"assets/Style/Colors\";\r\n+import { FontFamily, Images } from \"assets\";\r\n+import { SuccessToaster } from \"components/Toaster\";\r\n+import InputField from \"components/Input\";\r\n+import FinanceServices from \"services/Finance\";\r\n+import { Delete } from \"@mui/icons-material\";\r\n+import { useSelector } from \"react-redux\";\r\n+import DatePicker from \"components/DatePicker\";\r\n+import { getYearMonthDateFormate } from \"utils\";\r\n+import { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\n+import { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n+// *For Table Style\r\n+const Row = styled(TableRow)(({ theme }) => ({\r\n+  border: 0,\r\n+\r\n+}));\r\n+\r\n+const Cell = styled(TableCell)(({ theme }) => ({\r\n+  [`&.${tableCellClasses.head}`]: {\r\n+    fontSize: 14,\r\n+    fontFamily: 'Public Sans',\r\n+    border: '1px solid #EEEEEE',\r\n+    padding: '15px',\r\n+    textAlign: 'left',\r\n+    whiteSpace: 'nowrap',\r\n+    color: '#434343',\r\n+    paddingRight: '50px',\r\n+    background: 'transparent',\r\n+    fontWeight: 'bold'\r\n+\r\n+  },\r\n+  [`&.${tableCellClasses.body}`]: {\r\n+    fontSize: 14,\r\n+    fontFamily: 'Public Sans',\r\n+\r\n+    textWrap: 'nowrap',\r\n+    padding: '5px !important',\r\n+    paddingLeft: '15px !important',\r\n+\r\n+    '.MuiBox-root': {\r\n+      display: 'flex',\r\n+      gap: '6px',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      '.MuiBox-root': {\r\n+        cursor: 'pointer'\r\n+      }\r\n+    },\r\n+    'svg': {\r\n+      width: 'auto',\r\n+      height: '24px',\r\n+    },\r\n+    '.MuiTypography-root': {\r\n+      textTransform: 'capitalize',\r\n+      fontFamily: FontFamily.NunitoRegular,\r\n+      textWrap: 'nowrap',\r\n+    },\r\n+    '.MuiButtonBase-root': {\r\n+      padding: '8px',\r\n+      width: '28px',\r\n+      height: '28px',\r\n+    }\r\n+  },\r\n+}));\r\n+\r\n+\r\n+function CreateJournalVoucher() {\r\n+  const [handleBlockedNavigation] =\r\n+    useCallbackPrompt(false)\r\n+  const navigate = useNavigate();\r\n+  const { usdExchangeRate, cadExchangeRate } = useSelector((state) => state.navigationReducer);\r\n+\r\n+  const { register, handleSubmit, formState: { errors }, setValue, reset, getValues } = useForm();\r\n+  const [loading, setLoading] = useState(false);\r\n+\r\n+  const tableHead = ['Sr.No', 'COA Code', 'COA Name', 'Debit (AED)', 'Credit (AED)', 'Description', 'Action']\r\n+\r\n+  // *For Major Categories\r\n+  const [majorCategories, setMajorCategories] = useState([]);\r\n+  const [selectedMajorCategory, setSelectedMajorCategory] = useState(null);\r\n+\r\n+  // *For Sub Categories\r\n+  const [subCategories, setSubCategories] = useState([]);\r\n+  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n+\r\n+  // *For Parent Account\r\n+  const [parentAccounts, setParentAccounts] = useState([]);\r\n+  const [selectedParentAccount, setSelectedParentAccount] = useState(null);\r\n+\r\n+  // *For Accounts\r\n+  const [accounts, setAccounts] = useState([]);\r\n+  const [selectedAccount, setSelectedAccount] = useState(null);\r\n+\r\n+  // *For Journal Voucher List\r\n+  const [journalVoucherList, setJournalVoucherList] = useState([]);\r\n+\r\n+  const [JournalData, setJournalData] = useState()\r\n+\r\n+  const [fromDate, setFromDate] = useState();\r\n+  const [toDate, setToDate] = useState();\r\n+  const [journalNo, setJournalNo] = useState()\r\n+  const [rows, setRows] = useState([])\r\n+  const [subTotal, setSubTotal] = useState()\r\n+\r\n+  // *For Total of Credit & Debit\r\n+  let TotalDebit = 0\r\n+  let TotalCredit = 0\r\n+\r\n+  // *For Get Major Categories\r\n+  const getMajorCategories = async () => {\r\n+    try {\r\n+      const { data } = await FinanceServices.getMajorCategories()\r\n+      setMajorCategories(data?.categories)\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+\r\n+  // *For Get Journal Vouchers List\r\n+  const getJournalVouchers = async () => {\r\n+    try {\r\n+\r\n+      let params = {\r\n+        page: 1,\r\n+        limit: 1,\r\n+      };\r\n+\r\n+      const { data } = await FinanceServices.getJournalVouchers(params);\r\n+      console.log(data);\r\n+      setJournalData(data)\r\n+      setValue('Journal', data?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(data?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n+    } catch (error) {\r\n+      showErrorToast(error);\r\n+    }\r\n+  };\r\n+\r\n+  // *For Get Sub Categories\r\n+  const getSubCategories = async (id) => {\r\n+    try {\r\n+      let params = {\r\n+        category_id: id ?? ''\r\n+      }\r\n+      const { data } = await FinanceServices.getSubCategories(params)\r\n+      if (id) {\r\n+\r\n+        setSubCategories(data?.categories)\r\n+      }\r\n+      else {\r\n+        setSubCategories([])\r\n+      }\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+\r\n+  // *For Get Account By SubCategory\r\n+  const getAccountBySubCategory = async (id) => {\r\n+    try {\r\n+      let params = {\r\n+        sub_category: id,\r\n+      }\r\n+      const { data } = await FinanceServices.getAccountBySubCategory(params)\r\n+      setParentAccounts(data?.accounts?.rows)\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+\r\n+  // *For Get Account\r\n+  const getAccounts = async (search, accountId) => {\r\n+    try {\r\n+      let params = {\r\n+        page: 1,\r\n+        limit: 50,\r\n+        name: search,\r\n+        primary_account_id: accountId ?? selectedParentAccount?.id,\r\n+      }\r\n+      const { data } = await FinanceServices.getAccounts(params)\r\n+      setAccounts(data?.accounts?.rows)\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+\r\n+  // *For Add Single Journal Voucher\r\n+  const addVoucher = async (formData) => {\r\n+    try {\r\n+      const voucherCopy = [...journalVoucherList]\r\n+      let obj = {\r\n+        account_id: accounts.length > 0 ? selectedAccount?.id : selectedParentAccount?.id,\r\n+        coa_code: formData?.accountCode,\r\n+        coa_name: accounts.length > 0 ? formData?.account : formData?.parentAccount,\r\n+        debit: formData?.debit ? formData?.debit : 0,\r\n+        credit: formData?.credit ? formData?.credit : 0,\r\n+        description: formData?.description,\r\n+        currency: selectedAccount?.currency,\r\n+\r\n+      }\r\n+      voucherCopy.push(obj)\r\n+      setJournalVoucherList(voucherCopy)\r\n+      reset()\r\n+      setSelectedMajorCategory(null)\r\n+      setSelectedSubCategory(null)\r\n+      setSelectedParentAccount(null)\r\n+      setSelectedAccount(null)\r\n+      setAccounts()\r\n+      setValue('Journal', JournalData?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(JournalData?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+\r\n+  // *For Delete Journal Voucher\r\n+  const deleteJournalVoucher = async (index) => {\r\n+    setLoading(true)\r\n+    try {\r\n+      const voucherCopy = [...journalVoucherList]\r\n+      voucherCopy.splice(index, 1)\r\n+      setJournalVoucherList(voucherCopy)\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    } finally {\r\n+      setLoading(false)\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  // *For Handle Date\r\n+  const handleFromDate = (newDate) => {\r\n+    try {\r\n+      // eslint-disable-next-line eqeqeq\r\n+      if (newDate == 'Invalid Date') {\r\n+        setFromDate('invalid')\r\n+        return\r\n+      }\r\n+      setFromDate(new Date(newDate))\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    }\r\n+  }\r\n+  // *For Create Journal Voucher\r\n+  const createJournalVoucher = async (formData) => {\r\n+    setLoading(true)\r\n+    try {\r\n+      const entries = journalVoucherList.map((item) => {\r\n+        const debit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.debit * usdExchangeRate : item.debit * cadExchangeRate\r\n+        const credit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.credit * usdExchangeRate : item.credit * cadExchangeRate\r\n+        return {\r\n+          account_id: item.account_id,\r\n+          debit: item.debit,\r\n+          debit_cur: debit_cur ? debit_cur : 0,\r\n+          credit: item.credit,\r\n+          credit_cur: credit_cur ? credit_cur : 0,\r\n+          currency: item.currency,\r\n+          description: item.description,\r\n+\r\n+        }\r\n+      })\r\n+      let obj = {\r\n+        total: TotalDebit,\r\n+        notes: getValues('note'),\r\n+        entries: entries,\r\n+        created_at: getYearMonthDateFormate(fromDate)\r\n+      }\r\n+\r\n+\r\n+      const promise = FinanceServices.createJournalVoucher(obj);\r\n+\r\n+      showPromiseToast(\r\n+        promise,\r\n+        'Saving...',\r\n+        'Added Successfully',\r\n+        'Something Went Wrong'\r\n+      );\r\n+\r\n+      const response = await promise;\r\n+      if (response?.responseCode === 200) {\r\n+        navigate('/journal-voucher-list')\r\n+      }\r\n+\r\n+\r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    } finally {\r\n+      setLoading(false)\r\n+    }\r\n+  }\r\n+\r\n+  const addItem = (data) => {\r\n+    console.log(data);\r\n+\r\n+    // Create a new row with the serviceItem included\r\n+    const newRow = { ...data, service: '' };\r\n+\r\n+    setRows((prevRows) => {\r\n+      const updatedRows = [...prevRows, newRow];\r\n+\r\n+      // Ensure all totals are treated as floats\r\n+      const newSubTotal = updatedRows.reduce((sum, row) => sum + parseFloat(row.total || 0), 0);\r\n+\r\n+      // Optionally round to 2 decimal places\r\n+      setSubTotal(parseFloat(newSubTotal.toFixed(2)));\r\n+\r\n+      return updatedRows;\r\n+    });\r\n+\r\n+    reset();\r\n+\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    getMajorCategories()\r\n+    getSubCategories()\r\n+    setFromDate(new Date())\r\n+    getJournalVouchers()\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <Box sx={{ p: 3, borderRadius: 3 }}>\r\n+\r\n+      <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 4 }}>\r\n+        Create Journal Voucherssss\r\n+      </Typography>\r\n+\r\n+      <Box component=\"form\" onSubmit={handleSubmit(addVoucher)} >\r\n+        <Grid container spacing={2} >\r\n+          <Grid item xs={12} sm={3}>\r\n+            <DatePicker\r\n+              disableFuture={true}\r\n+              size='small'\r\n+              label={'Journal Date'}\r\n+              value={fromDate}\r\n+              onChange={(date) => handleFromDate(date)}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <InputField\r\n+\r\n+              size={'small'}\r\n+              disabled={true}\r\n+              label={' Journal No.'}\r\n+              placeholder={'Journal No.'}\r\n+              register={register(\"Journal\")}\r\n+            />\r\n+          </Grid>\r\n+        </Grid>\r\n+        <Grid container spacing={2} >\r\n+\r\n+          <Grid item xs={12} sm={3}>\r\n+            <SelectField\r\n+              size={'small'}\r\n+              label={'Major Category'}\r\n+              options={majorCategories}\r\n+              selected={selectedMajorCategory}\r\n+              error={errors?.majorCategory?.message}\r\n+              onSelect={(value) => {\r\n+                if (!value) {\r\n+                  setSubCategories([])\r\n+                }\r\n+                setSelectedMajorCategory(value); getSubCategories(value?.id); setSelectedSubCategory(null)\r\n+              }}\r\n+              register={register(\"majorCategory\", {\r\n+                required: 'Please select major category.',\r\n+              })}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <SelectField\r\n+              size={'small'}\r\n+              label={'Sub Category'}\r\n+              options={subCategories}\r\n+              selected={selectedSubCategory}\r\n+              onSelect={(value) => { setSelectedSubCategory(value); getAccountBySubCategory(value?.id) }}\r\n+              error={errors?.subCategory?.message}\r\n+              register={register(\"subCategory\", {\r\n+                required: 'Please select sub category.',\r\n+              })}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <SelectField\r\n+              disabled={selectedSubCategory ? false : true}\r\n+              size={'small'}\r\n+              label={'Account'}\r\n+              options={parentAccounts}\r\n+              selected={selectedParentAccount}\r\n+              onSelect={(value) => { setSelectedParentAccount(value); getAccounts('', value?.id); setValue('accountCode', value?.account_code) }}\r\n+              error={errors?.parentAccount?.message}\r\n+              register={register(\"parentAccount\", {\r\n+                required: 'Please select parent account.',\r\n+              })}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            {accounts?.length > 0 &&\r\n+              <SelectField\r\n+                disabled={selectedParentAccount ? false : true}\r\n+                size={'small'}\r\n+                label={'Child Account'}\r\n+                onSearch={(v) => getAccounts(v)}\r\n+                options={accounts}\r\n+                selected={selectedAccount}\r\n+                onSelect={(value) => { setSelectedAccount(value); setValue('accountCode', value?.account_code) }}\r\n+                error={errors?.description?.message}\r\n+                register={register(\"account\", {\r\n+                  required: accounts?.length > 0 ? 'Please select a account' : false,\r\n+                })}\r\n+              />\r\n+            }\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <InputField\r\n+              disabled={true}\r\n+              size={'small'}\r\n+              label={'Account Code'}\r\n+              placeholder={'Account Code'}\r\n+              register={register(\"accountCode\")}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <InputField\r\n+              size={'small'}\r\n+              label={'Debit  (AED)'}\r\n+              placeholder={'Debit'}\r\n+\r\n+              register={register(\"debit\", {\r\n+                onChange: (e) => {\r\n+                  setValue('credit', 0)\r\n+                  if (getValues('debit') < 0) {\r\n+                    setValue('debit', 0)\r\n+                  }\r\n+                },\r\n+              })}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <InputField\r\n+              size={'small'}\r\n+              label={'Credit  (AED)'}\r\n+              placeholder={'Credit'}\r\n+\r\n+              register={register(\"credit\", {\r\n+                onChange: (e) => {\r\n+                  setValue('debit', 0)\r\n+                  if (getValues('credit') < 0) {\r\n+                    setValue('credit', 0)\r\n+                  }\r\n+                },\r\n+              })}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={3}>\r\n+            <InputField\r\n+              size={'small'}\r\n+              label={'Description'}\r\n+              placeholder={'Description'}\r\n+              register={register(\"description\")}\r\n+            />\r\n+          </Grid>\r\n+          <Grid item xs={12} sm={12} sx={{ mt: 2, textAlign: 'right' }}>\r\n+            <PrimaryButton\r\n+              title=\"Add\"\r\n+              type='submit'\r\n+\r\n+            />\r\n+          </Grid>\r\n+        </Grid>\r\n+      </Box>\r\n+\r\n+      {/* ========== Table ========== */}\r\n+      {journalVoucherList.length > 0 &&\r\n+        <Fragment>\r\n+          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 330px)' }}>\r\n+            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n+              <TableHead>\r\n+                <TableRow>\r\n+                  {tableHead.map((item, index) => (\r\n+                    <Cell key={index}>{item}</Cell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              </TableHead>\r\n+              <TableBody>\r\n+                {journalVoucherList.map((item, index) => {\r\n+                  TotalDebit += parseFloat(item.debit)\r\n+                  TotalCredit += parseFloat(item.credit)\r\n+                  return (\r\n+                    <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n+                      <Cell>\r\n+                        {index + 1}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        {item?.coa_code ?? '-'}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        {item?.coa_name ?? '-'}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        {item?.debit ?? '-'}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        {item?.credit ?? '-'}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        {item?.description ?? '-'}\r\n+                      </Cell>\r\n+                      <Cell>\r\n+                        <Box sx={{ gap: '16px !important' }}>\r\n+                          <Box onClick={() => deleteJournalVoucher(index)}>\r\n+                            <IconButton sx={{\r\n+                              bgcolor: Colors.danger,\r\n+                              \"&:hover\": {\r\n+                                bgcolor: Colors.danger,\r\n+                              },\r\n+                            }}\r\n+                            >\r\n+                              <Delete sx={{ color: Colors.white, height: \"16px !important\" }} />\r\n+                            </IconButton>\r\n+                            <Typography variant=\"body2\">\r\n+                              Delete\r\n+                            </Typography>\r\n+                          </Box>\r\n+                        </Box>\r\n+                      </Cell>\r\n+                    </Row>\r\n+                  )\r\n+                })}\r\n+                <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n+                  <Cell colSpan={3}>\r\n+                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n+                      Total\r\n+                    </Typography>\r\n+                  </Cell>\r\n+                  <Cell>\r\n+                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n+                      {parseFloat(TotalDebit).toFixed(2)}\r\n+                    </Typography>\r\n+                  </Cell>\r\n+                  <Cell>\r\n+                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n+                      {parseFloat(TotalCredit).toFixed(2)}\r\n+                    </Typography>\r\n+                  </Cell>\r\n+                  <Cell>\r\n+                  </Cell>\r\n+                  <Cell>\r\n+                  </Cell>\r\n+                </Row>\r\n+              </TableBody>\r\n+            </Table>\r\n+          </TableContainer>\r\n+          <Grid container spacing={2} >\r\n+            <Grid item xs={12} sm={12}>\r\n+              {TotalCredit !== TotalDebit &&\r\n+                <Typography color=\"error\" sx={{ fontSize: 12, textAlign: \"left\" }}>\r\n+                  Debit and Credit are not equal.\r\n+                </Typography>\r\n+              }\r\n+            </Grid>\r\n+            <Grid item xs={12} sm={4}>\r\n+              <InputField\r\n+                label={'Note'}\r\n+                placeholder={'Note'}\r\n+                register={register(\"note\")}\r\n+              />\r\n+            </Grid>\r\n+          </Grid>\r\n+          <Box sx={{ mt: 2, textAlign: 'right' }}>\r\n+            <PrimaryButton\r\n+              disabled={TotalCredit !== TotalDebit}\r\n+              title=\"Submit\"\r\n+              loading={loading}\r\n+              onClick={() => createJournalVoucher()}\r\n+            />\r\n+          </Box>\r\n+        </Fragment>\r\n+      }\r\n+      <form onSubmit={handleSubmit( addItem )}>\r\n+        <TableContainer component={Paper}>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n+                <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n+                <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+            <TableBody>\r\n+              {<TableRow>\r\n+                <TableCell sx={{ display: \"none\" }}>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={true}\r\n+                    placeholder=\"Item id\"\r\n+                    register={register(\"id\", { required: \"Item id is required\" })}\r\n+                  />\r\n+                  {errors.id && <span>{errors.id.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={true}\r\n+                    placeholder=\"Item code\"\r\n+                    register={register(\"item_code\", { required: \"Item code is required\" })}\r\n+                  />\r\n+                  {errors.id && <span>{errors.id.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <SelectField\r\n+                    size=\"small\"\r\n+                    options={services}\r\n+                    \r\n+                    selected={serviceItem}\r\n+                    onSelect={null}\r\n+                    //  error={errors?.service?.message}\r\n+                    register={register(\"service\", {\r\n+                      required: \"Please select a service.\",\r\n+                    })}\r\n+                  />\r\n+                  {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Quantity\"\r\n+                    type=\"number\"\r\n+                    register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n+                  />\r\n+                  {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Govt fee\"\r\n+\r\n+\r\n+                    register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n+                  />\r\n+                  {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Center Fee\"\r\n+\r\n+\r\n+                    register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n+                  />\r\n+                  {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    disabled={detail?.is_paid}\r\n+                    placeholder=\"Bank Charges\"\r\n+\r\n+                    register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n+\r\n+                  />\r\n+                  {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n+\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\"Transaction Id\"\r\n+\r\n+                    register={register(\"transaction_id\", {\r\n+                      required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n+                    })}\r\n+\r\n+                  />\r\n+                  {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n+\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\"Application Id\"\r\n+\r\n+                    register={register(\"application_id\", {\r\n+                      required: settings?.required_app_id ? 'Application id is required' : false,\r\n+                    })}\r\n+                  />\r\n+                  {errors.application_id && (\r\n+                    <span style={{ color: \"red\" }}>\r\n+                      {errors.application_id.message}\r\n+                    </span>\r\n+                  )}\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    size=\"small\"\r\n+                    placeholder=\" Ref No\"\r\n+\r\n+                    register={register(\"ref_no\", {\r\n+                      required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n+                    })}\r\n+                  />\r\n+                  {errors.ref_no && (\r\n+                    <span style={{ color: \"red\" }}>\r\n+                      {errors.ref_no.message}\r\n+                    </span>\r\n+                  )}\r\n+                </TableCell>\r\n+\r\n+                <TableCell>\r\n+                  <InputField\r\n+                    disabled={true}\r\n+                    style={{ border: \"none\" }}\r\n+                    size=\"small\"\r\n+                    placeholder=\"\"\r\n+                    register={register(\"total\")}\r\n+                  />\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  {<Button\r\n+                    variant=\"contained\"\r\n+                    color=\"primary\"\r\n+                    type=\"submit\"\r\n+                    sx={{\r\n+                      textTransform: 'capitalize',\r\n+                      backgroundColor: \"rgb(189 155 74)\",\r\n+                      fontSize: \"12px\",\r\n+                      \":hover\": {\r\n+                        backgroundColor: \"rgb(189 155 74)\",\r\n+                      },\r\n+                    }}\r\n+                  >\r\n+                    <AddIcon />\r\n+                  </Button>}\r\n+                \r\n+                </TableCell>\r\n+              </TableRow>}\r\n+\r\n+              {rows?.length > 0 && rows?.map((item, index) => (\r\n+                <TableRow key={index}>\r\n+                  <TableCell sx={{ display: \"none\" }}>{item?.id}</TableCell>\r\n+                  <TableCell>{item?.item_code}</TableCell>\r\n+                  <TableCell>{item?.service?.name}</TableCell>\r\n+                  <TableCell>{item?.quantity}</TableCell>\r\n+                  <TableCell>{item?.govt_fee}</TableCell>\r\n+                  <TableCell>{item?.center_fee}</TableCell>\r\n+                  <TableCell>{item?.bank_charge}</TableCell>\r\n+                  <TableCell>{item?.transaction_id}</TableCell>\r\n+                  <TableCell>{item?.application_id}</TableCell>\r\n+                  <TableCell>{item?.ref_no}</TableCell>\r\n+\r\n+                  <TableCell>{item?.total}</TableCell>\r\n+                  <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n+\r\n+                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n+                      setSelectedRow(item); setEditState(true)\r\n+                      console.log(item);\r\n+\r\n+                      setValue(\"id\", item?.id);\r\n+                      setValue(\"item_code\", item?.item_code);\r\n+                      setValue(\"govt_fee\", item?.govt_fee);\r\n+                      setValue(\"center_fee\", item?.center_fee);\r\n+                      setValue(\"bank_charge\", item?.bank_charge);\r\n+                      setValue(\"transaction_id\", item?.transaction_id);\r\n+                      setValue(\"application_id\", item?.application_id);\r\n+                      setValue(\"ref_no\", item?.ref_no);\r\n+                      setValue(\"service\", item?.service);\r\n+               \r\n+                      setValue(\"quantity\", item?.quantity);\r\n+                      console.log(item?.service)\r\n+\r\n+                    }} src={Images.editIcon} width={'35px'}></Box>}\r\n+                    <Box>\r\n+                      {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n+\r\n+                        let selectedID = item?.id\r\n+                        setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n+                        let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n+                        // 👇 Calculate total after updating rows\r\n+                        const total = filteredData.reduce((sum, item) => {\r\n+                          // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n+                          return sum + (parseFloat(item.total) || 0);\r\n+                        }, 0);\r\n+\r\n+                        console.log(\"New total after update:\", total);\r\n+\r\n+                        // You can update a state for total if you have one:\r\n+                        setSubTotal(total); // <-- Make sure to declare this with useState\r\n+                      }} width={'35px'}></Box>}\r\n+\r\n+\r\n+                    </Box>\r\n+\r\n+                  </Box></TableCell>\r\n+                </TableRow>\r\n+              ))}\r\n+\r\n+              <TableRow>\r\n+                <TableCell colSpan={9} align=\"right\">\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{344}</Typography> {/* Display the Sub-total */}\r\n+                </TableCell>\r\n+              </TableRow>\r\n+              <TableRow>\r\n+                <TableCell colSpan={9} align=\"right\">\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n+                </TableCell>\r\n+                <TableCell>\r\n+                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{\r\n+                    rows\r\n+                      ?.reduce((total, item) => {\r\n+                        const fee = parseFloat(item?.center_fee ?? 0);\r\n+                        const qty = parseInt(item?.quantity ?? 1);\r\n+                        return total + fee * qty;\r\n+                      }, 0)\r\n+                      .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n+                </TableCell>\r\n+              </TableRow>\r\n+\r\n+\r\n+            </TableBody>\r\n+          </Table>\r\n+        </TableContainer>\r\n+      </form>\r\n+    </Box>\r\n+  );\r\n+}\r\n+\r\n+export default CreateJournalVoucher;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745323156131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -621,11 +621,11 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <SelectField\r\n                     size=\"small\"\r\n-                    options={services}\r\n+                    options={[]}\r\n                     \r\n-                    selected={serviceItem}\r\n+                    selected={selectedAccount}\r\n                     onSelect={null}\r\n                     //  error={errors?.service?.message}\r\n                     register={register(\"service\", {\r\n                       required: \"Please select a service.\",\r\n@@ -841,850 +841,5 @@\n     </Box>\r\n   );\r\n }\r\n \r\n-export default CreateJournalVoucher;\n-import React, { Fragment, useEffect, useState } from \"react\";\r\n-import { Paper, Box, Grid, TableCell, TableContainer, TableHead, TableRow, TableBody, Table, tableCellClasses, Typography, IconButton, Button } from \"@mui/material\";\r\n-import styled from '@emotion/styled';\r\n-import { useForm } from \"react-hook-form\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import SelectField from \"components/Select\";\r\n-import { PrimaryButton } from \"components/Buttons\";\r\n-import Colors from \"assets/Style/Colors\";\r\n-import { FontFamily, Images } from \"assets\";\r\n-import { SuccessToaster } from \"components/Toaster\";\r\n-import InputField from \"components/Input\";\r\n-import FinanceServices from \"services/Finance\";\r\n-import { Delete } from \"@mui/icons-material\";\r\n-import { useSelector } from \"react-redux\";\r\n-import DatePicker from \"components/DatePicker\";\r\n-import { getYearMonthDateFormate } from \"utils\";\r\n-import { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\n-import { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n-// *For Table Style\r\n-const Row = styled(TableRow)(({ theme }) => ({\r\n-  border: 0,\r\n-\r\n-}));\r\n-\r\n-const Cell = styled(TableCell)(({ theme }) => ({\r\n-  [`&.${tableCellClasses.head}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n-    border: '1px solid #EEEEEE',\r\n-    padding: '15px',\r\n-    textAlign: 'left',\r\n-    whiteSpace: 'nowrap',\r\n-    color: '#434343',\r\n-    paddingRight: '50px',\r\n-    background: 'transparent',\r\n-    fontWeight: 'bold'\r\n-\r\n-  },\r\n-  [`&.${tableCellClasses.body}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n-\r\n-    textWrap: 'nowrap',\r\n-    padding: '5px !important',\r\n-    paddingLeft: '15px !important',\r\n-\r\n-    '.MuiBox-root': {\r\n-      display: 'flex',\r\n-      gap: '6px',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      '.MuiBox-root': {\r\n-        cursor: 'pointer'\r\n-      }\r\n-    },\r\n-    'svg': {\r\n-      width: 'auto',\r\n-      height: '24px',\r\n-    },\r\n-    '.MuiTypography-root': {\r\n-      textTransform: 'capitalize',\r\n-      fontFamily: FontFamily.NunitoRegular,\r\n-      textWrap: 'nowrap',\r\n-    },\r\n-    '.MuiButtonBase-root': {\r\n-      padding: '8px',\r\n-      width: '28px',\r\n-      height: '28px',\r\n-    }\r\n-  },\r\n-}));\r\n-\r\n-\r\n-function CreateJournalVoucher() {\r\n-  const [handleBlockedNavigation] =\r\n-    useCallbackPrompt(false)\r\n-  const navigate = useNavigate();\r\n-  const { usdExchangeRate, cadExchangeRate } = useSelector((state) => state.navigationReducer);\r\n-\r\n-  const { register, handleSubmit, formState: { errors }, setValue, reset, getValues } = useForm();\r\n-  const [loading, setLoading] = useState(false);\r\n-\r\n-  const tableHead = ['Sr.No', 'COA Code', 'COA Name', 'Debit (AED)', 'Credit (AED)', 'Description', 'Action']\r\n-\r\n-  // *For Major Categories\r\n-  const [majorCategories, setMajorCategories] = useState([]);\r\n-  const [selectedMajorCategory, setSelectedMajorCategory] = useState(null);\r\n-\r\n-  // *For Sub Categories\r\n-  const [subCategories, setSubCategories] = useState([]);\r\n-  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n-\r\n-  // *For Parent Account\r\n-  const [parentAccounts, setParentAccounts] = useState([]);\r\n-  const [selectedParentAccount, setSelectedParentAccount] = useState(null);\r\n-\r\n-  // *For Accounts\r\n-  const [accounts, setAccounts] = useState([]);\r\n-  const [selectedAccount, setSelectedAccount] = useState(null);\r\n-\r\n-  // *For Journal Voucher List\r\n-  const [journalVoucherList, setJournalVoucherList] = useState([]);\r\n-\r\n-  const [JournalData, setJournalData] = useState()\r\n-\r\n-  const [fromDate, setFromDate] = useState();\r\n-  const [toDate, setToDate] = useState();\r\n-  const [journalNo, setJournalNo] = useState()\r\n-  const [rows, setRows] = useState([])\r\n-  const [subTotal, setSubTotal] = useState()\r\n-\r\n-  // *For Total of Credit & Debit\r\n-  let TotalDebit = 0\r\n-  let TotalCredit = 0\r\n-\r\n-  // *For Get Major Categories\r\n-  const getMajorCategories = async () => {\r\n-    try {\r\n-      const { data } = await FinanceServices.getMajorCategories()\r\n-      setMajorCategories(data?.categories)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Get Journal Vouchers List\r\n-  const getJournalVouchers = async () => {\r\n-    try {\r\n-\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1,\r\n-      };\r\n-\r\n-      const { data } = await FinanceServices.getJournalVouchers(params);\r\n-      console.log(data);\r\n-      setJournalData(data)\r\n-      setValue('Journal', data?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(data?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n-    } catch (error) {\r\n-      showErrorToast(error);\r\n-    }\r\n-  };\r\n-\r\n-  // *For Get Sub Categories\r\n-  const getSubCategories = async (id) => {\r\n-    try {\r\n-      let params = {\r\n-        category_id: id ?? ''\r\n-      }\r\n-      const { data } = await FinanceServices.getSubCategories(params)\r\n-      if (id) {\r\n-\r\n-        setSubCategories(data?.categories)\r\n-      }\r\n-      else {\r\n-        setSubCategories([])\r\n-      }\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Get Account By SubCategory\r\n-  const getAccountBySubCategory = async (id) => {\r\n-    try {\r\n-      let params = {\r\n-        sub_category: id,\r\n-      }\r\n-      const { data } = await FinanceServices.getAccountBySubCategory(params)\r\n-      setParentAccounts(data?.accounts?.rows)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Get Account\r\n-  const getAccounts = async (search, accountId) => {\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 50,\r\n-        name: search,\r\n-        primary_account_id: accountId ?? selectedParentAccount?.id,\r\n-      }\r\n-      const { data } = await FinanceServices.getAccounts(params)\r\n-      setAccounts(data?.accounts?.rows)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Add Single Journal Voucher\r\n-  const addVoucher = async (formData) => {\r\n-    try {\r\n-      const voucherCopy = [...journalVoucherList]\r\n-      let obj = {\r\n-        account_id: accounts.length > 0 ? selectedAccount?.id : selectedParentAccount?.id,\r\n-        coa_code: formData?.accountCode,\r\n-        coa_name: accounts.length > 0 ? formData?.account : formData?.parentAccount,\r\n-        debit: formData?.debit ? formData?.debit : 0,\r\n-        credit: formData?.credit ? formData?.credit : 0,\r\n-        description: formData?.description,\r\n-        currency: selectedAccount?.currency,\r\n-\r\n-      }\r\n-      voucherCopy.push(obj)\r\n-      setJournalVoucherList(voucherCopy)\r\n-      reset()\r\n-      setSelectedMajorCategory(null)\r\n-      setSelectedSubCategory(null)\r\n-      setSelectedParentAccount(null)\r\n-      setSelectedAccount(null)\r\n-      setAccounts()\r\n-      setValue('Journal', JournalData?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(JournalData?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-\r\n-  // *For Delete Journal Voucher\r\n-  const deleteJournalVoucher = async (index) => {\r\n-    setLoading(true)\r\n-    try {\r\n-      const voucherCopy = [...journalVoucherList]\r\n-      voucherCopy.splice(index, 1)\r\n-      setJournalVoucherList(voucherCopy)\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoading(false)\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  // *For Handle Date\r\n-  const handleFromDate = (newDate) => {\r\n-    try {\r\n-      // eslint-disable-next-line eqeqeq\r\n-      if (newDate == 'Invalid Date') {\r\n-        setFromDate('invalid')\r\n-        return\r\n-      }\r\n-      setFromDate(new Date(newDate))\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    }\r\n-  }\r\n-  // *For Create Journal Voucher\r\n-  const createJournalVoucher = async (formData) => {\r\n-    setLoading(true)\r\n-    try {\r\n-      const entries = journalVoucherList.map((item) => {\r\n-        const debit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.debit * usdExchangeRate : item.debit * cadExchangeRate\r\n-        const credit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.credit * usdExchangeRate : item.credit * cadExchangeRate\r\n-        return {\r\n-          account_id: item.account_id,\r\n-          debit: item.debit,\r\n-          debit_cur: debit_cur ? debit_cur : 0,\r\n-          credit: item.credit,\r\n-          credit_cur: credit_cur ? credit_cur : 0,\r\n-          currency: item.currency,\r\n-          description: item.description,\r\n-\r\n-        }\r\n-      })\r\n-      let obj = {\r\n-        total: TotalDebit,\r\n-        notes: getValues('note'),\r\n-        entries: entries,\r\n-        created_at: getYearMonthDateFormate(fromDate)\r\n-      }\r\n-\r\n-\r\n-      const promise = FinanceServices.createJournalVoucher(obj);\r\n-\r\n-      showPromiseToast(\r\n-        promise,\r\n-        'Saving...',\r\n-        'Added Successfully',\r\n-        'Something Went Wrong'\r\n-      );\r\n-\r\n-      const response = await promise;\r\n-      if (response?.responseCode === 200) {\r\n-        navigate('/journal-voucher-list')\r\n-      }\r\n-\r\n-\r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoading(false)\r\n-    }\r\n-  }\r\n-\r\n-  const addItem = (data) => {\r\n-    console.log(data);\r\n-\r\n-    // Create a new row with the serviceItem included\r\n-    const newRow = { ...data, service: '' };\r\n-\r\n-    setRows((prevRows) => {\r\n-      const updatedRows = [...prevRows, newRow];\r\n-\r\n-      // Ensure all totals are treated as floats\r\n-      const newSubTotal = updatedRows.reduce((sum, row) => sum + parseFloat(row.total || 0), 0);\r\n-\r\n-      // Optionally round to 2 decimal places\r\n-      setSubTotal(parseFloat(newSubTotal.toFixed(2)));\r\n-\r\n-      return updatedRows;\r\n-    });\r\n-\r\n-    reset();\r\n-\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    getMajorCategories()\r\n-    getSubCategories()\r\n-    setFromDate(new Date())\r\n-    getJournalVouchers()\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <Box sx={{ p: 3, borderRadius: 3 }}>\r\n-\r\n-      <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 4 }}>\r\n-        Create Journal Voucherssss\r\n-      </Typography>\r\n-\r\n-      <Box component=\"form\" onSubmit={handleSubmit(addVoucher)} >\r\n-        <Grid container spacing={2} >\r\n-          <Grid item xs={12} sm={3}>\r\n-            <DatePicker\r\n-              disableFuture={true}\r\n-              size='small'\r\n-              label={'Journal Date'}\r\n-              value={fromDate}\r\n-              onChange={(date) => handleFromDate(date)}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <InputField\r\n-\r\n-              size={'small'}\r\n-              disabled={true}\r\n-              label={' Journal No.'}\r\n-              placeholder={'Journal No.'}\r\n-              register={register(\"Journal\")}\r\n-            />\r\n-          </Grid>\r\n-        </Grid>\r\n-        <Grid container spacing={2} >\r\n-\r\n-          <Grid item xs={12} sm={3}>\r\n-            <SelectField\r\n-              size={'small'}\r\n-              label={'Major Category'}\r\n-              options={majorCategories}\r\n-              selected={selectedMajorCategory}\r\n-              error={errors?.majorCategory?.message}\r\n-              onSelect={(value) => {\r\n-                if (!value) {\r\n-                  setSubCategories([])\r\n-                }\r\n-                setSelectedMajorCategory(value); getSubCategories(value?.id); setSelectedSubCategory(null)\r\n-              }}\r\n-              register={register(\"majorCategory\", {\r\n-                required: 'Please select major category.',\r\n-              })}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <SelectField\r\n-              size={'small'}\r\n-              label={'Sub Category'}\r\n-              options={subCategories}\r\n-              selected={selectedSubCategory}\r\n-              onSelect={(value) => { setSelectedSubCategory(value); getAccountBySubCategory(value?.id) }}\r\n-              error={errors?.subCategory?.message}\r\n-              register={register(\"subCategory\", {\r\n-                required: 'Please select sub category.',\r\n-              })}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <SelectField\r\n-              disabled={selectedSubCategory ? false : true}\r\n-              size={'small'}\r\n-              label={'Account'}\r\n-              options={parentAccounts}\r\n-              selected={selectedParentAccount}\r\n-              onSelect={(value) => { setSelectedParentAccount(value); getAccounts('', value?.id); setValue('accountCode', value?.account_code) }}\r\n-              error={errors?.parentAccount?.message}\r\n-              register={register(\"parentAccount\", {\r\n-                required: 'Please select parent account.',\r\n-              })}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            {accounts?.length > 0 &&\r\n-              <SelectField\r\n-                disabled={selectedParentAccount ? false : true}\r\n-                size={'small'}\r\n-                label={'Child Account'}\r\n-                onSearch={(v) => getAccounts(v)}\r\n-                options={accounts}\r\n-                selected={selectedAccount}\r\n-                onSelect={(value) => { setSelectedAccount(value); setValue('accountCode', value?.account_code) }}\r\n-                error={errors?.description?.message}\r\n-                register={register(\"account\", {\r\n-                  required: accounts?.length > 0 ? 'Please select a account' : false,\r\n-                })}\r\n-              />\r\n-            }\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <InputField\r\n-              disabled={true}\r\n-              size={'small'}\r\n-              label={'Account Code'}\r\n-              placeholder={'Account Code'}\r\n-              register={register(\"accountCode\")}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <InputField\r\n-              size={'small'}\r\n-              label={'Debit  (AED)'}\r\n-              placeholder={'Debit'}\r\n-\r\n-              register={register(\"debit\", {\r\n-                onChange: (e) => {\r\n-                  setValue('credit', 0)\r\n-                  if (getValues('debit') < 0) {\r\n-                    setValue('debit', 0)\r\n-                  }\r\n-                },\r\n-              })}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <InputField\r\n-              size={'small'}\r\n-              label={'Credit  (AED)'}\r\n-              placeholder={'Credit'}\r\n-\r\n-              register={register(\"credit\", {\r\n-                onChange: (e) => {\r\n-                  setValue('debit', 0)\r\n-                  if (getValues('credit') < 0) {\r\n-                    setValue('credit', 0)\r\n-                  }\r\n-                },\r\n-              })}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={3}>\r\n-            <InputField\r\n-              size={'small'}\r\n-              label={'Description'}\r\n-              placeholder={'Description'}\r\n-              register={register(\"description\")}\r\n-            />\r\n-          </Grid>\r\n-          <Grid item xs={12} sm={12} sx={{ mt: 2, textAlign: 'right' }}>\r\n-            <PrimaryButton\r\n-              title=\"Add\"\r\n-              type='submit'\r\n-\r\n-            />\r\n-          </Grid>\r\n-        </Grid>\r\n-      </Box>\r\n-\r\n-      {/* ========== Table ========== */}\r\n-      {journalVoucherList.length > 0 &&\r\n-        <Fragment>\r\n-          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 330px)' }}>\r\n-            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n-              <TableHead>\r\n-                <TableRow>\r\n-                  {tableHead.map((item, index) => (\r\n-                    <Cell key={index}>{item}</Cell>\r\n-                  ))}\r\n-                </TableRow>\r\n-              </TableHead>\r\n-              <TableBody>\r\n-                {journalVoucherList.map((item, index) => {\r\n-                  TotalDebit += parseFloat(item.debit)\r\n-                  TotalCredit += parseFloat(item.credit)\r\n-                  return (\r\n-                    <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n-                      <Cell>\r\n-                        {index + 1}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        {item?.coa_code ?? '-'}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        {item?.coa_name ?? '-'}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        {item?.debit ?? '-'}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        {item?.credit ?? '-'}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        {item?.description ?? '-'}\r\n-                      </Cell>\r\n-                      <Cell>\r\n-                        <Box sx={{ gap: '16px !important' }}>\r\n-                          <Box onClick={() => deleteJournalVoucher(index)}>\r\n-                            <IconButton sx={{\r\n-                              bgcolor: Colors.danger,\r\n-                              \"&:hover\": {\r\n-                                bgcolor: Colors.danger,\r\n-                              },\r\n-                            }}\r\n-                            >\r\n-                              <Delete sx={{ color: Colors.white, height: \"16px !important\" }} />\r\n-                            </IconButton>\r\n-                            <Typography variant=\"body2\">\r\n-                              Delete\r\n-                            </Typography>\r\n-                          </Box>\r\n-                        </Box>\r\n-                      </Cell>\r\n-                    </Row>\r\n-                  )\r\n-                })}\r\n-                <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n-                  <Cell colSpan={3}>\r\n-                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n-                      Total\r\n-                    </Typography>\r\n-                  </Cell>\r\n-                  <Cell>\r\n-                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n-                      {parseFloat(TotalDebit).toFixed(2)}\r\n-                    </Typography>\r\n-                  </Cell>\r\n-                  <Cell>\r\n-                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n-                      {parseFloat(TotalCredit).toFixed(2)}\r\n-                    </Typography>\r\n-                  </Cell>\r\n-                  <Cell>\r\n-                  </Cell>\r\n-                  <Cell>\r\n-                  </Cell>\r\n-                </Row>\r\n-              </TableBody>\r\n-            </Table>\r\n-          </TableContainer>\r\n-          <Grid container spacing={2} >\r\n-            <Grid item xs={12} sm={12}>\r\n-              {TotalCredit !== TotalDebit &&\r\n-                <Typography color=\"error\" sx={{ fontSize: 12, textAlign: \"left\" }}>\r\n-                  Debit and Credit are not equal.\r\n-                </Typography>\r\n-              }\r\n-            </Grid>\r\n-            <Grid item xs={12} sm={4}>\r\n-              <InputField\r\n-                label={'Note'}\r\n-                placeholder={'Note'}\r\n-                register={register(\"note\")}\r\n-              />\r\n-            </Grid>\r\n-          </Grid>\r\n-          <Box sx={{ mt: 2, textAlign: 'right' }}>\r\n-            <PrimaryButton\r\n-              disabled={TotalCredit !== TotalDebit}\r\n-              title=\"Submit\"\r\n-              loading={loading}\r\n-              onClick={() => createJournalVoucher()}\r\n-            />\r\n-          </Box>\r\n-        </Fragment>\r\n-      }\r\n-      <form onSubmit={handleSubmit( addItem )}>\r\n-        <TableContainer component={Paper}>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n-                <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n-                <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-            <TableBody>\r\n-              {<TableRow>\r\n-                <TableCell sx={{ display: \"none\" }}>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={true}\r\n-                    placeholder=\"Item id\"\r\n-                    register={register(\"id\", { required: \"Item id is required\" })}\r\n-                  />\r\n-                  {errors.id && <span>{errors.id.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={true}\r\n-                    placeholder=\"Item code\"\r\n-                    register={register(\"item_code\", { required: \"Item code is required\" })}\r\n-                  />\r\n-                  {errors.id && <span>{errors.id.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <SelectField\r\n-                    size=\"small\"\r\n-                    options={services}\r\n-                    disabled={detail?.is_paid || editState}\r\n-                    selected={serviceItem}\r\n-                    onSelect={}\r\n-                    //  error={errors?.service?.message}\r\n-                    register={register(\"service\", {\r\n-                      required: \"Please select a service.\",\r\n-                    })}\r\n-                  />\r\n-                  {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n-                    placeholder=\"Quantity\"\r\n-                    type=\"number\"\r\n-                    register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n-                  />\r\n-                  {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n-                    placeholder=\"Govt fee\"\r\n-\r\n-\r\n-                    register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n-                  />\r\n-                  {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n-                    placeholder=\"Center Fee\"\r\n-\r\n-\r\n-                    register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n-                  />\r\n-                  {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n-                    placeholder=\"Bank Charges\"\r\n-\r\n-                    register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n-\r\n-                  />\r\n-                  {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n-\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\"Transaction Id\"\r\n-\r\n-                    register={register(\"transaction_id\", {\r\n-                      required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n-                    })}\r\n-\r\n-                  />\r\n-                  {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n-\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\"Application Id\"\r\n-\r\n-                    register={register(\"application_id\", {\r\n-                      required: settings?.required_app_id ? 'Application id is required' : false,\r\n-                    })}\r\n-                  />\r\n-                  {errors.application_id && (\r\n-                    <span style={{ color: \"red\" }}>\r\n-                      {errors.application_id.message}\r\n-                    </span>\r\n-                  )}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\" Ref No\"\r\n-\r\n-                    register={register(\"ref_no\", {\r\n-                      required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n-                    })}\r\n-                  />\r\n-                  {errors.ref_no && (\r\n-                    <span style={{ color: \"red\" }}>\r\n-                      {errors.ref_no.message}\r\n-                    </span>\r\n-                  )}\r\n-                </TableCell>\r\n-\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    disabled={true}\r\n-                    style={{ border: \"none\" }}\r\n-                    size=\"small\"\r\n-                    placeholder=\"\"\r\n-                    register={register(\"total\")}\r\n-                  />\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  {<Button\r\n-                    variant=\"contained\"\r\n-                    color=\"primary\"\r\n-                    type=\"submit\"\r\n-                    sx={{\r\n-                      textTransform: 'capitalize',\r\n-                      backgroundColor: \"rgb(189 155 74)\",\r\n-                      fontSize: \"12px\",\r\n-                      \":hover\": {\r\n-                        backgroundColor: \"rgb(189 155 74)\",\r\n-                      },\r\n-                    }}\r\n-                  >\r\n-                    <AddIcon />\r\n-                  </Button>}\r\n-                \r\n-                </TableCell>\r\n-              </TableRow>}\r\n-\r\n-              {rows?.length > 0 && rows?.map((item, index) => (\r\n-                <TableRow key={index}>\r\n-                  <TableCell sx={{ display: \"none\" }}>{item?.id}</TableCell>\r\n-                  <TableCell>{item?.item_code}</TableCell>\r\n-                  <TableCell>{item?.service?.name}</TableCell>\r\n-                  <TableCell>{item?.quantity}</TableCell>\r\n-                  <TableCell>{item?.govt_fee}</TableCell>\r\n-                  <TableCell>{item?.center_fee}</TableCell>\r\n-                  <TableCell>{item?.bank_charge}</TableCell>\r\n-                  <TableCell>{item?.transaction_id}</TableCell>\r\n-                  <TableCell>{item?.application_id}</TableCell>\r\n-                  <TableCell>{item?.ref_no}</TableCell>\r\n-\r\n-                  <TableCell>{item?.total}</TableCell>\r\n-                  <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n-\r\n-                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n-                      setSelectedRow(item); setEditState(true)\r\n-                      console.log(item);\r\n-\r\n-                      setValue(\"id\", item?.id);\r\n-                      setValue(\"item_code\", item?.item_code);\r\n-                      setValue(\"govt_fee\", item?.govt_fee);\r\n-                      setValue(\"center_fee\", item?.center_fee);\r\n-                      setValue(\"bank_charge\", item?.bank_charge);\r\n-                      setValue(\"transaction_id\", item?.transaction_id);\r\n-                      setValue(\"application_id\", item?.application_id);\r\n-                      setValue(\"ref_no\", item?.ref_no);\r\n-                      setValue(\"service\", item?.service);\r\n-               \r\n-                      setValue(\"quantity\", item?.quantity);\r\n-                      console.log(item?.service)\r\n-\r\n-                    }} src={Images.editIcon} width={'35px'}></Box>}\r\n-                    <Box>\r\n-                      {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n-\r\n-                        let selectedID = item?.id\r\n-                        setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n-                        let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n-                        // 👇 Calculate total after updating rows\r\n-                        const total = filteredData.reduce((sum, item) => {\r\n-                          // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n-                          return sum + (parseFloat(item.total) || 0);\r\n-                        }, 0);\r\n-\r\n-                        console.log(\"New total after update:\", total);\r\n-\r\n-                        // You can update a state for total if you have one:\r\n-                        setSubTotal(total); // <-- Make sure to declare this with useState\r\n-                      }} width={'35px'}></Box>}\r\n-\r\n-\r\n-                    </Box>\r\n-\r\n-                  </Box></TableCell>\r\n-                </TableRow>\r\n-              ))}\r\n-\r\n-              <TableRow>\r\n-                <TableCell colSpan={9} align=\"right\">\r\n-                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{344}</Typography> {/* Display the Sub-total */}\r\n-                </TableCell>\r\n-              </TableRow>\r\n-              <TableRow>\r\n-                <TableCell colSpan={9} align=\"right\">\r\n-                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{\r\n-                    rows\r\n-                      ?.reduce((total, item) => {\r\n-                        const fee = parseFloat(item?.center_fee ?? 0);\r\n-                        const qty = parseInt(item?.quantity ?? 1);\r\n-                        return total + fee * qty;\r\n-                      }, 0)\r\n-                      .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n-                </TableCell>\r\n-              </TableRow>\r\n-\r\n-\r\n-            </TableBody>\r\n-          </Table>\r\n-        </TableContainer>\r\n-      </form>\r\n-    </Box>\r\n-  );\r\n-}\r\n-\r\n export default CreateJournalVoucher;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745323169799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -624,9 +624,9 @@\n                     size=\"small\"\r\n                     options={[]}\r\n                     \r\n                     selected={selectedAccount}\r\n-                    onSelect={null}\r\n+                    onSelect={accounts}\r\n                     //  error={errors?.service?.message}\r\n                     register={register(\"service\", {\r\n                       required: \"Please select a service.\",\r\n                     })}\r\n@@ -635,9 +635,9 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n+        \r\n                     placeholder=\"Quantity\"\r\n                     type=\"number\"\r\n                     register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n                   />\r\n"
                },
                {
                    "date": 1745323183776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,9 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n+                  \r\n                     placeholder=\"Govt fee\"\r\n \r\n \r\n                     register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n@@ -656,82 +656,18 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n+            \r\n                     placeholder=\"Center Fee\"\r\n \r\n \r\n                     register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n                   />\r\n                   {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n                 </TableCell>\r\n+               \r\n                 <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    disabled={detail?.is_paid}\r\n-                    placeholder=\"Bank Charges\"\r\n-\r\n-                    register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n-\r\n-                  />\r\n-                  {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n-\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\"Transaction Id\"\r\n-\r\n-                    register={register(\"transaction_id\", {\r\n-                      required: settings?.required_trans_id ? 'Transaction id is required' : false,\r\n-                    })}\r\n-\r\n-                  />\r\n-                  {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n-\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\"Application Id\"\r\n-\r\n-                    register={register(\"application_id\", {\r\n-                      required: settings?.required_app_id ? 'Application id is required' : false,\r\n-                    })}\r\n-                  />\r\n-                  {errors.application_id && (\r\n-                    <span style={{ color: \"red\" }}>\r\n-                      {errors.application_id.message}\r\n-                    </span>\r\n-                  )}\r\n-                </TableCell>\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    size=\"small\"\r\n-                    placeholder=\" Ref No\"\r\n-\r\n-                    register={register(\"ref_no\", {\r\n-                      required: settings?.required_ref_no ? 'Reference no is required' : false,\r\n-                    })}\r\n-                  />\r\n-                  {errors.ref_no && (\r\n-                    <span style={{ color: \"red\" }}>\r\n-                      {errors.ref_no.message}\r\n-                    </span>\r\n-                  )}\r\n-                </TableCell>\r\n-\r\n-                <TableCell>\r\n-                  <InputField\r\n-                    disabled={true}\r\n-                    style={{ border: \"none\" }}\r\n-                    size=\"small\"\r\n-                    placeholder=\"\"\r\n-                    register={register(\"total\")}\r\n-                  />\r\n-                </TableCell>\r\n-                <TableCell>\r\n                   {<Button\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n                     type=\"submit\"\r\n"
                },
                {
                    "date": 1745323203017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n import DatePicker from \"components/DatePicker\";\r\n import { getYearMonthDateFormate } from \"utils\";\r\n import { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\n import { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n-\r\n+import AddIcon from \"@mui/icons-material/Add\";\r\n // *For Table Style\r\n const Row = styled(TableRow)(({ theme }) => ({\r\n   border: 0,\r\n \r\n"
                },
                {
                    "date": 1745324138891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n       let params = {\r\n         page: 1,\r\n         limit: 50,\r\n         name: search,\r\n-      \r\n+\r\n       }\r\n       const { data } = await FinanceServices.getAccounts(params)\r\n       setAccounts(data?.accounts?.rows)\r\n     } catch (error) {\r\n@@ -298,9 +298,9 @@\n   const addItem = (data) => {\r\n     console.log(data);\r\n \r\n     // Create a new row with the serviceItem included\r\n-    const newRow = { ...data, service:selectedAccount };\r\n+    const newRow = { ...data, service: selectedAccount };\r\n \r\n     setRows((prevRows) => {\r\n       const updatedRows = [...prevRows, newRow];\r\n \r\n@@ -308,8 +308,9 @@\n       const newSubTotal = updatedRows.reduce((sum, row) => sum + parseFloat(row.total || 0), 0);\r\n \r\n       // Optionally round to 2 decimal places\r\n       setSubTotal(parseFloat(newSubTotal.toFixed(2)));\r\n+      console.log(updatedRows);\r\n \r\n       return updatedRows;\r\n     });\r\n \r\n@@ -583,9 +584,9 @@\n             />\r\n           </Box>\r\n         </Fragment>\r\n       }\r\n-      <form onSubmit={handleSubmit( addItem )}>\r\n+      <form onSubmit={handleSubmit(addItem)}>\r\n         <TableContainer component={Paper}>\r\n           <Table>\r\n             <TableHead>\r\n               <TableRow>\r\n@@ -593,15 +594,15 @@\n                 <TableCell sx={{ width: \"400px\" }}>Accounts</TableCell>\r\n                 <TableCell sx={{ width: \"150px\" }}>Debit</TableCell>\r\n                 <TableCell sx={{ width: \"150px\" }}>Credit</TableCell>\r\n                 <TableCell sx={{ width: \"150px\" }}>Description</TableCell>\r\n-                \r\n+\r\n                 <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n               </TableRow>\r\n             </TableHead>\r\n             <TableBody>\r\n               {<TableRow>\r\n-              \r\n+\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n                     disabled={true}\r\n@@ -613,15 +614,15 @@\n                 <TableCell>\r\n                   <SelectField\r\n                     size=\"small\"\r\n                     options={accounts}\r\n-                    \r\n+\r\n                     selected={selectedAccount}\r\n-                    onSelect={(value)=> {\r\n+                    onSelect={(value) => {\r\n                       setSelectedAccount(value)\r\n-                    console.log(value);\r\n-                    setValue('AccountCode',value?.account_code)\r\n-                    \r\n+                      console.log(value);\r\n+                      setValue('AccountCode', value?.account_code)\r\n+\r\n                     }}\r\n                     //  error={errors?.service?.message}\r\n                     register={register(\"service\", {\r\n                       required: \"Please select a service.\",\r\n@@ -631,9 +632,9 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-        \r\n+\r\n                     placeholder=\"Debit\"\r\n                     type=\"number\"\r\n                     register={register(\"Debit\", { required: \"Debit is required\" })}\r\n                   />\r\n@@ -641,9 +642,9 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-                  \r\n+\r\n                     placeholder=\"Credit\"\r\n \r\n \r\n                     register={register(\"credit\", { required: \"Credit is required\" })}\r\n@@ -652,17 +653,17 @@\n                 </TableCell>\r\n                 <TableCell>\r\n                   <InputField\r\n                     size=\"small\"\r\n-            \r\n+\r\n                     placeholder=\"Description\"\r\n \r\n \r\n                     register={register(\"desc\", { required: \"Description is required\" })}\r\n                   />\r\n                   {errors.desc && <span style={{ color: \"red\" }}>{errors.desc.message}</span>}\r\n                 </TableCell>\r\n-               \r\n+\r\n                 <TableCell>\r\n                   {<Button\r\n                     variant=\"contained\"\r\n                     color=\"primary\"\r\n@@ -677,9 +678,9 @@\n                     }}\r\n                   >\r\n                     <AddIcon />\r\n                   </Button>}\r\n-                \r\n+\r\n                 </TableCell>\r\n               </TableRow>}\r\n \r\n               {rows?.length > 0 && rows?.map((item, index) => (\r\n@@ -710,9 +711,9 @@\n                       setValue(\"transaction_id\", item?.transaction_id);\r\n                       setValue(\"application_id\", item?.application_id);\r\n                       setValue(\"ref_no\", item?.ref_no);\r\n                       setValue(\"service\", item?.service);\r\n-               \r\n+\r\n                       setValue(\"quantity\", item?.quantity);\r\n                       console.log(item?.service)\r\n \r\n                     }} src={Images.editIcon} width={'35px'}></Box>}\r\n@@ -740,11 +741,11 @@\n                   </Box></TableCell>\r\n                 </TableRow>\r\n               ))}\r\n \r\n-          \r\n \r\n \r\n+\r\n             </TableBody>\r\n           </Table>\r\n         </TableContainer>\r\n       </form>\r\n"
                }
            ],
            "date": 1745322860714,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Paper, Box, Grid, TableCell, TableContainer, TableHead, TableRow, TableBody, Table, tableCellClasses, Typography, IconButton } from \"@mui/material\";\r\nimport styled from '@emotion/styled';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SelectField from \"components/Select\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { FontFamily } from \"assets\";\r\nimport { SuccessToaster } from \"components/Toaster\";\r\nimport InputField from \"components/Input\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport { getYearMonthDateFormate } from \"utils\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\n\r\nfunction CreateJournalVoucher() {\r\n  const [handleBlockedNavigation] =\r\n  useCallbackPrompt(false)\r\n  const navigate = useNavigate();\r\n  const { usdExchangeRate, cadExchangeRate } = useSelector((state) => state.navigationReducer);\r\n\r\n  const { register, handleSubmit, formState: { errors }, setValue, reset, getValues } = useForm();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const tableHead = ['Sr.No', 'COA Code', 'COA Name', 'Debit (AED)', 'Credit (AED)', 'Description', 'Action']\r\n\r\n  // *For Major Categories\r\n  const [majorCategories, setMajorCategories] = useState([]);\r\n  const [selectedMajorCategory, setSelectedMajorCategory] = useState(null);\r\n\r\n  // *For Sub Categories\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n\r\n  // *For Parent Account\r\n  const [parentAccounts, setParentAccounts] = useState([]);\r\n  const [selectedParentAccount, setSelectedParentAccount] = useState(null);\r\n\r\n  // *For Accounts\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedAccount, setSelectedAccount] = useState(null);\r\n\r\n  // *For Journal Voucher List\r\n  const [journalVoucherList, setJournalVoucherList] = useState([]);\r\n\r\n  const [JournalData, setJournalData] = useState()\r\n\r\n  const [fromDate, setFromDate] = useState();\r\n  const [toDate, setToDate] = useState();\r\n  const [journalNo, setJournalNo] = useState()\r\n\r\n  // *For Total of Credit & Debit\r\n  let TotalDebit = 0\r\n  let TotalCredit = 0\r\n\r\n  // *For Get Major Categories\r\n  const getMajorCategories = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getMajorCategories()\r\n      setMajorCategories(data?.categories)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Journal Vouchers List\r\n  const getJournalVouchers = async () => {\r\n    try {\r\n\r\n      let params = {\r\n        page: 1,\r\n        limit: 1,\r\n      };\r\n\r\n      const { data } = await FinanceServices.getJournalVouchers(params);\r\n      console.log(data);\r\n      setJournalData(data)\r\n      setValue('Journal', data?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(data?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n  // *For Get Sub Categories\r\n  const getSubCategories = async (id) => {\r\n    try {\r\n      let params = {\r\n        category_id: id ?? ''\r\n      }\r\n      const { data } = await FinanceServices.getSubCategories(params)\r\n      if(id){\r\n\r\n        setSubCategories(data?.categories)\r\n      }\r\n      else{\r\n        setSubCategories([])\r\n      }\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account By SubCategory\r\n  const getAccountBySubCategory = async (id) => {\r\n    try {\r\n      let params = {\r\n        sub_category: id,\r\n      }\r\n      const { data } = await FinanceServices.getAccountBySubCategory(params)\r\n      setParentAccounts(data?.accounts?.rows)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account\r\n  const getAccounts = async (search, accountId) => {\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 50,\r\n        name: search,\r\n        primary_account_id: accountId ?? selectedParentAccount?.id,\r\n      }\r\n      const { data } = await FinanceServices.getAccounts(params)\r\n      setAccounts(data?.accounts?.rows)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Add Single Journal Voucher\r\n  const addVoucher = async (formData) => {\r\n    try {\r\n      const voucherCopy = [...journalVoucherList]\r\n      let obj = {\r\n        account_id: accounts.length > 0 ? selectedAccount?.id : selectedParentAccount?.id,\r\n        coa_code: formData?.accountCode,\r\n        coa_name: accounts.length > 0 ? formData?.account : formData?.parentAccount,\r\n        debit: formData?.debit ? formData?.debit : 0,\r\n        credit: formData?.credit ? formData?.credit : 0,\r\n        description: formData?.description,\r\n        currency: selectedAccount?.currency,\r\n\r\n      }\r\n      voucherCopy.push(obj)\r\n      setJournalVoucherList(voucherCopy)\r\n      reset()\r\n      setSelectedMajorCategory(null)\r\n      setSelectedSubCategory(null)\r\n      setSelectedParentAccount(null)\r\n      setSelectedAccount(null)\r\n      setAccounts()\r\n      setValue('Journal', JournalData?.vouchers?.rows.length > 0 ? \"JV-\" + (parseFloat(JournalData?.vouchers?.rows[0].id) + 1) : \"JV-\" + 1)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Delete Journal Voucher\r\n  const deleteJournalVoucher = async (index) => {\r\n    setLoading(true)\r\n    try {\r\n      const voucherCopy = [...journalVoucherList]\r\n      voucherCopy.splice(index, 1)\r\n      setJournalVoucherList(voucherCopy)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n\r\n  // *For Handle Date\r\n  const handleFromDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setFromDate('invalid')\r\n        return\r\n      }\r\n      setFromDate(new Date(newDate))\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n  // *For Create Journal Voucher\r\n  const createJournalVoucher = async (formData) => {\r\n    setLoading(true)\r\n    try {\r\n      const entries = journalVoucherList.map((item) => {\r\n        const debit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.debit * usdExchangeRate : item.debit * cadExchangeRate\r\n        const credit_cur = item.currency === 'aed' ? '' : item.currency === 'usd' ? item.credit * usdExchangeRate : item.credit * cadExchangeRate\r\n        return {\r\n          account_id: item.account_id,\r\n          debit: item.debit,\r\n          debit_cur: debit_cur ? debit_cur : 0,\r\n          credit: item.credit,\r\n          credit_cur: credit_cur ? credit_cur : 0,\r\n          currency: item.currency,\r\n          description: item.description,\r\n\r\n        }\r\n      })\r\n      let obj = {\r\n        total: TotalDebit,\r\n        notes: getValues('note'),\r\n        entries: entries,\r\n        created_at: getYearMonthDateFormate(fromDate)\r\n      }\r\n\r\n\r\n      const promise = FinanceServices.createJournalVoucher(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving...',\r\n        'Added Successfully',\r\n        'Something Went Wrong'\r\n      );\r\n\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate('/journal-voucher-list')\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMajorCategories()\r\n    getSubCategories()\r\n    setFromDate(new Date())\r\n    getJournalVouchers()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3, borderRadius: 3 }}>\r\n\r\n      <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 4 }}>\r\n        Create Journal Voucherssss\r\n      </Typography>\r\n\r\n      <Box component=\"form\" onSubmit={handleSubmit(addVoucher)} >\r\n        <Grid container spacing={2} >\r\n          <Grid item xs={12} sm={3}>\r\n            <DatePicker\r\n              disableFuture={true}\r\n              size='small'\r\n              label={'Journal Date'}\r\n              value={fromDate}\r\n              onChange={(date) => handleFromDate(date)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n\r\n              size={'small'}\r\n              disabled={true}\r\n              label={' Journal No.'}\r\n              placeholder={'Journal No.'}\r\n              register={register(\"Journal\")}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={2} >\r\n\r\n          <Grid item xs={12} sm={3}>\r\n            <SelectField\r\n              size={'small'}\r\n              label={'Major Category'}\r\n              options={majorCategories}\r\n              selected={selectedMajorCategory}\r\n              error={errors?.majorCategory?.message}\r\n              onSelect={(value) => {\r\n                if (!value) {\r\n                  setSubCategories([])\r\n                }\r\n                setSelectedMajorCategory(value); getSubCategories(value?.id); setSelectedSubCategory(null)\r\n              }}\r\n              register={register(\"majorCategory\", {\r\n                required: 'Please select major category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <SelectField\r\n              size={'small'}\r\n              label={'Sub Category'}\r\n              options={subCategories}\r\n              selected={selectedSubCategory}\r\n              onSelect={(value) => { setSelectedSubCategory(value); getAccountBySubCategory(value?.id) }}\r\n              error={errors?.subCategory?.message}\r\n              register={register(\"subCategory\", {\r\n                required: 'Please select sub category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <SelectField\r\n              disabled={selectedSubCategory ? false : true}\r\n              size={'small'}\r\n              label={'Account'}\r\n              options={parentAccounts}\r\n              selected={selectedParentAccount}\r\n              onSelect={(value) => { setSelectedParentAccount(value); getAccounts('', value?.id); setValue('accountCode', value?.account_code) }}\r\n              error={errors?.parentAccount?.message}\r\n              register={register(\"parentAccount\", {\r\n                required: 'Please select parent account.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            {accounts?.length > 0 &&\r\n              <SelectField\r\n                disabled={selectedParentAccount ? false : true}\r\n                size={'small'}\r\n                label={'Child Account'}\r\n                onSearch={(v) => getAccounts(v)}\r\n                options={accounts}\r\n                selected={selectedAccount}\r\n                onSelect={(value) => { setSelectedAccount(value); setValue('accountCode', value?.account_code) }}\r\n                error={errors?.description?.message}\r\n                register={register(\"account\", {\r\n                  required: accounts?.length > 0 ? 'Please select a account' : false,\r\n                })}\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n              disabled={true}\r\n              size={'small'}\r\n              label={'Account Code'}\r\n              placeholder={'Account Code'}\r\n              register={register(\"accountCode\")}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n              size={'small'}\r\n              label={'Debit  (AED)'}\r\n              placeholder={'Debit'}\r\n\r\n              register={register(\"debit\", {\r\n                onChange: (e) => {\r\n                  setValue('credit', 0)\r\n                  if (getValues('debit') < 0) {\r\n                    setValue('debit', 0)\r\n                  }\r\n                },\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n              size={'small'}\r\n              label={'Credit  (AED)'}\r\n              placeholder={'Credit'}\r\n\r\n              register={register(\"credit\", {\r\n                onChange: (e) => {\r\n                  setValue('debit', 0)\r\n                  if (getValues('credit') < 0) {\r\n                    setValue('credit', 0)\r\n                  }\r\n                },\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n              size={'small'}\r\n              label={'Description'}\r\n              placeholder={'Description'}\r\n              register={register(\"description\")}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} sx={{ mt: 2, textAlign: 'right' }}>\r\n            <PrimaryButton\r\n              title=\"Add\"\r\n              type='submit'\r\n\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* ========== Table ========== */}\r\n      {journalVoucherList.length > 0 &&\r\n        <Fragment>\r\n          <TableContainer component={Paper} sx={{ mt: 2, boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 330px)' }}>\r\n            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {tableHead.map((item, index) => (\r\n                    <Cell key={index}>{item}</Cell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {journalVoucherList.map((item, index) => {\r\n                  TotalDebit += parseFloat(item.debit)\r\n                  TotalCredit += parseFloat(item.credit)\r\n                  return (\r\n                    <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n                      <Cell>\r\n                        {index + 1}\r\n                      </Cell>\r\n                      <Cell>\r\n                        {item?.coa_code ?? '-'}\r\n                      </Cell>\r\n                      <Cell>\r\n                        {item?.coa_name ?? '-'}\r\n                      </Cell>\r\n                      <Cell>\r\n                        {item?.debit ?? '-'}\r\n                      </Cell>\r\n                      <Cell>\r\n                        {item?.credit ?? '-'}\r\n                      </Cell>\r\n                      <Cell>\r\n                        {item?.description ?? '-'}\r\n                      </Cell>\r\n                      <Cell>\r\n                        <Box sx={{ gap: '16px !important' }}>\r\n                          <Box onClick={() => deleteJournalVoucher(index)}>\r\n                            <IconButton sx={{\r\n                              bgcolor: Colors.danger,\r\n                              \"&:hover\": {\r\n                                bgcolor: Colors.danger,\r\n                              },\r\n                            }}\r\n                            >\r\n                              <Delete sx={{ color: Colors.white, height: \"16px !important\" }} />\r\n                            </IconButton>\r\n                            <Typography variant=\"body2\">\r\n                              Delete\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                      </Cell>\r\n                    </Row>\r\n                  )\r\n                })}\r\n                <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                  <Cell colSpan={3}>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n                      Total\r\n                    </Typography>\r\n                  </Cell>\r\n                  <Cell>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n                      {parseFloat(TotalDebit).toFixed(2)}\r\n                    </Typography>\r\n                  </Cell>\r\n                  <Cell>\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 700, }}>\r\n                      {parseFloat(TotalCredit).toFixed(2)}\r\n                    </Typography>\r\n                  </Cell>\r\n                  <Cell>\r\n                  </Cell>\r\n                  <Cell>\r\n                  </Cell>\r\n                </Row>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Grid container spacing={2} >\r\n            <Grid item xs={12} sm={12}>\r\n              {TotalCredit !== TotalDebit &&\r\n                <Typography color=\"error\" sx={{ fontSize: 12, textAlign: \"left\" }}>\r\n                  Debit and Credit are not equal.\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n              <InputField\r\n                label={'Note'}\r\n                placeholder={'Note'}\r\n                register={register(\"note\")}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Box sx={{ mt: 2, textAlign: 'right' }}>\r\n            <PrimaryButton\r\n              disabled={TotalCredit !== TotalDebit}\r\n              title=\"Submit\"\r\n              loading={loading}\r\n              onClick={() => createJournalVoucher()}\r\n            />\r\n          </Box>\r\n        </Fragment>\r\n      }\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CreateJournalVoucher;"
        }
    ]
}