{
    "sourceFile": "src/pages/Dashboard/Accounts/CreateAccount.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821940,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Box, FormControl, FormControlLabel, Grid, Radio, RadioGroup, Typography } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SelectField from \"components/Select\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { FontFamily } from \"assets\";\r\nimport {  SuccessToaster } from \"components/Toaster\";\r\nimport InputField from \"components/Input\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport { showErrorToast } from \"components/NewToaster\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n\r\nfunction CreateAccount() {\r\n  const [handleBlockedNavigation] =\r\n  useCallbackPrompt(false)\r\n  const navigate = useNavigate();\r\n\r\n  const { register, handleSubmit, formState: { errors }, setValue, resetField } = useForm();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Unit\r\n  const [units, setUnits] = useState([]);\r\n  const [selectedUnit, setSelectedUnit] = useState();\r\n\r\n  // *For Account Nature\r\n  const [accountNature, setAccountNature] = useState('primary');\r\n\r\n\r\n  // *For Major Categories\r\n  const [majorCategories, setMajorCategories] = useState([]);\r\n  const [selectedMajorCategory, setSelectedMajorCategory] = useState();\r\n\r\n\r\n\r\n  // *For Currency\r\n  const [currencies, setCurrencies] = useState([]);\r\n  const [selectedCurrency, setSelectedCurrency] = useState(null);\r\n  const [paymentType, setPaymentType] = useState(\"debit\");\r\n\r\n  //for Nature\r\n  const [selectedNature, setSelectedNature] = useState(null)\r\n\r\n  // *For Sub Categories\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n\r\n  // *For Parent Account\r\n  const [parentAccounts, setParentAccounts] = useState([]);\r\n  const [selectedParentAccount, setSelectedParentAccount] = useState();\r\n\r\n  // *For Account PreRequisite  \r\n  const [headId, setHeadId] = useState();\r\n  const [subHeadId, setSubHeadId] = useState();\r\n  const [typeCode, setTypeCode] = useState();\r\n  const [typeSeries, setTypeSeries] = useState();\r\n  const [primarySeries, setPrimarySeries] = useState();\r\n\r\n  const [balanceDate, setBalanceDate] = useState();\r\n\r\n  // *For Handle Date\r\n  const handleBalanceDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setBalanceDate('invalid')\r\n        return\r\n      }\r\n      setBalanceDate(new Date(newDate))\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Units\r\n  const getUnits = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getUnits()\r\n      const unitsArray = []\r\n      data?.units.forEach(element => {\r\n        let obj = {\r\n          id: element,\r\n          name: element\r\n        }\r\n        unitsArray.push(obj)\r\n      });\r\n      setUnits(unitsArray)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Major Categories\r\n  const getMajorCategories = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getMajorCategories()\r\n      setMajorCategories(data?.categories)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Currencies\r\n  const getCurrencies = async (defaultId) => {\r\n    try {\r\n      let params = {\r\n        detailed: true\r\n      }\r\n      const { data } = await SystemServices.getCurrencies(params)\r\n      const currenciesArray = []\r\n      data?.currencies?.forEach(element => {\r\n        let obj = {\r\n          id: element?.currency,\r\n          name: element?.currency.toUpperCase(),\r\n          rate: element?.conversion_rate\r\n        }\r\n        currenciesArray.push(obj)\r\n      });\r\n\r\n      setCurrencies(currenciesArray)\r\n      if (defaultId) {\r\n        setSelectedCurrency(currenciesArray.find(e => e?.id === defaultId))\r\n      }\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Sub Categories\r\n  const getSubCategories = async (id) => {\r\n    try {\r\n      let params = {\r\n        category_id: id\r\n      }\r\n      const { data } = await FinanceServices.getSubCategories(params)\r\n      setSubCategories(data?.categories)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For handle Accounts PreRequisite\r\n  const handleSelectSubCat = (item) => {\r\n    setSelectedSubCategory(item)\r\n    const { type } = subCategories.find(e => e.id === item?.id)\r\n    setHeadId(type?.head_id)\r\n    setSubHeadId(type?.id)\r\n    setTypeCode(type?.type_code + type?.type_number)\r\n    setTypeSeries(type?.series)\r\n  }\r\n\r\n  // *For Get Account Code\r\n  const getAccountCode = async (code, series, primarySeries) => {\r\n    try {\r\n      let params = {\r\n        type_code: code,\r\n        type_series: series,\r\n      }\r\n      if (accountNature === 'subAccount') {\r\n        params.primary_series = primarySeries\r\n      }\r\n      const { data } = await FinanceServices.getAccountCode(params)\r\n      setValue('accountCode', data?.code?.account_code)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account By SubCategory\r\n  const getAccountBySubCategory = async (id) => {\r\n    try {\r\n      let params = {\r\n        sub_category: id,\r\n      }\r\n      const { data } = await FinanceServices.getAccountBySubCategory(params)\r\n      setParentAccounts(data?.accounts?.rows)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For handle Parent Accounts PreRequisite\r\n  const handleParentAccount = (item) => {\r\n    setSelectedParentAccount(item)\r\n    const data = parentAccounts.find(e => e.id === item?.id)\r\n    setPrimarySeries(data?.primary_series)\r\n    getAccountCode(typeCode, typeSeries, data?.primary_series)\r\n  }\r\n\r\n  // *For Create Account\r\n  const createAccount = async (formData) => {\r\n    setLoading(true)\r\n    console.log(paymentType);\r\n    console.log(selectedNature);\r\n    try {\r\n      let obj = {\r\n        name: formData?.accountName,\r\n        head_id: headId,\r\n        sub_head: subHeadId,\r\n        category: selectedMajorCategory?.id,\r\n        sub_category: selectedSubCategory?.id,\r\n        type_code: typeCode,\r\n        type_series: typeSeries,\r\n        unit: selectedUnit?.id,\r\n        opening_balance: parseInt(formData?.openingBalance),\r\n        balance_date: balanceDate,\r\n        nature: selectedNature?.id,\r\n        currency: selectedCurrency?.id,\r\n        comments: formData?.comments\r\n      }\r\n      if (accountNature === 'subAccount') {\r\n        obj.primary_series = primarySeries\r\n        obj.primary_account_id = selectedParentAccount?.id\r\n      }\r\n      const { message } = await FinanceServices.createAccount(obj)\r\n      SuccessToaster(message)\r\n      navigate('/account-list')\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n  \r\n    getMajorCategories()\r\n    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (accountNature === 'subAccount' && selectedSubCategory?.id) {\r\n      getAccountBySubCategory(selectedSubCategory?.id)\r\n      setSelectedParentAccount('')\r\n      resetField('accountCode')\r\n    } else if (accountNature === 'primary' && selectedSubCategory?.id) {\r\n      getAccountCode(typeCode, typeSeries)\r\n    }\r\n  }, [selectedSubCategory, accountNature]);\r\n\r\n  return (\r\n    <Box sx={{  p: 3, borderRadius: 3}}>\r\n\r\n      \r\n      <Box component=\"form\" onSubmit={handleSubmit(createAccount)} >\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Create Account</Typography>\r\n        <Box sx={{ display: 'flex', gap: '5px' }} >\r\n\r\n          <PrimaryButton\r\n           bgcolor={'#bd9b4a'}\r\n            title=\"Save\"\r\n            type={'submit'}\r\n\r\n          />\r\n\r\n\r\n        </Box>\r\n\r\n      </Box>\r\n        <Grid container spacing={2} >\r\n        \r\n          <Grid item xs={12} sm={12}>\r\n            <Typography variant=\"subtitle1\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular }}>\r\n              Nature\r\n            </Typography>\r\n            <FormControl>\r\n              <RadioGroup row value={accountNature} onChange={(e) => setAccountNature(e.target.value)}>\r\n                <FormControlLabel value=\"primary\" control={<Radio />} label=\"Primary\" />\r\n                <FormControlLabel value=\"subAccount\" control={<Radio />} label=\"Sub Account\" />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <SelectField\r\n              label={'Major Category'}\r\n              size={'small'}\r\n              options={majorCategories}\r\n              selected={selectedMajorCategory}\r\n              onSelect={(value) => { setSelectedMajorCategory(value); getSubCategories(value?.id); setSelectedSubCategory(null) }}\r\n              error={errors?.majorCategory?.message}\r\n              register={register(\"majorCategory\", {\r\n                required: 'Please select major category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <SelectField\r\n              disabled={selectedMajorCategory ? false : true}\r\n              label={'Sub Category'}\r\n              size={'small'}\r\n              options={subCategories}\r\n              selected={selectedSubCategory}\r\n              onSelect={(value) => handleSelectSubCat(value)}\r\n              error={errors?.subCategory?.message}\r\n              register={register(\"subCategory\", {\r\n                required: 'Please select sub category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            {accountNature === 'subAccount' &&\r\n              <SelectField\r\n                disabled={selectedSubCategory ? false : true}\r\n                label={'Parent Account'}\r\n                size={'small'}\r\n                options={parentAccounts}\r\n                selected={selectedParentAccount}\r\n                onSelect={(value) => {\r\n                  handleParentAccount(value)\r\n                  console.log(value);\r\n                  setValue('currency', value?.currency ? value?.currency?.toUpperCase() : 'USD')\r\n                  setValue('nature', value?.nature ? value?.nature?.toUpperCase() : 'Debit')\r\n                  setSelectedNature({ id: value?.nature ? value?.nature : 'debit', name: value?.nature ? value?.nature?.toUpperCase() : 'Debit' })\r\n                  setSelectedCurrency({ id: value?.currency ? value?.currency : 'usd', name: value?.currency ? value?.currency?.toUpperCase() : 'USD' })\r\n                }\r\n\r\n                }\r\n\r\n                error={errors?.parentAccount?.message}\r\n                register={register(\"parentAccount\", {\r\n                  required: accountNature === 'subAccount' ? 'Please select parent account.' : false,\r\n                })}\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              disabled={true}\r\n              label={'Account Code'}\r\n              size={'small'}\r\n              placeholder={'Account Code'}\r\n              register={register(\"accountCode\")}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Account Name'}\r\n              placeholder={'Account Name'}\r\n              size={'small'}\r\n              error={errors?.accountName?.message}\r\n              register={register(\"accountName\", {\r\n                required: 'Please enter account name.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Opening Balance (AED)'}\r\n              placeholder={'Opening Balance (AED)'}\r\n              size={'small'}\r\n              error={errors?.openingBalance?.message}\r\n              register={register(\"openingBalance\", {\r\n                required: 'Please enter opening balance.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <DatePicker\r\n              label={'Balance Date'}\r\n              size={'small'}\r\n              value={balanceDate}\r\n              onChange={(date) => handleBalanceDate(date)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            {console.log(accountNature)}\r\n            <SelectField\r\n              label={'Nature'}\r\n              size={'small'}\r\n              disabled={accountNature == \"subAccount\" ? true : false}\r\n              options={[{ id: 'debit', name: 'Debit' }, { id: 'credit', name: 'Credit' }]}\r\n              selected={selectedNature}\r\n              onSelect={(value) => setSelectedNature(value)}\r\n              error={errors?.currency?.message}\r\n              register={register(\"nature\", {\r\n                required: 'Please select nature.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Comments'}\r\n              size={'small'}\r\n              placeholder={'Comments'}\r\n              error={errors?.comments?.message}\r\n              register={register(\"comments\", {\r\n                required: 'Please enter comments.',\r\n              })}\r\n            />\r\n          </Grid>\r\n         \r\n        </Grid>\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;"
        }
    ]
}