{
    "sourceFile": "src/pages/Dashboard/Accounts/JournalVoucherList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821942,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\nimport DatePicker from 'components/DatePicker';\r\nimport VisaServices from 'services/Visa';\r\nimport FinanceServices from 'services/Finance';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction JournalVoucherList() {\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [paymentDialog, setPaymentDialog] = useState(false)\r\n    const [status, setStatus] = useState(null)\r\n    const [payment, setPayment] = useState(null)\r\n    const [selectedVisa, setSelectedVisa] = useState()\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n\r\n    const tableHead = [{ name: 'Date', key: '' }, { name: 'JV#', key: 'name' }, { name: 'Entry No', key: 'created_at' }, { name: 'Amount', key: 'commission_visa' }, { name: 'Note', key: 'commission_monthly' }, { name: 'User', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n\r\n\r\n    // *For Customer Queue\r\n    const [vouchers, setVouchers] = useState([]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                id: selectedVisa?.id,\r\n                status: status.id,\r\n\r\n            };\r\n\r\n            const promise = CustomerServices.UpdateAddOnservice(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getVouchers();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const HandleDelete = async () => {\r\n        try {\r\n            let obj = {\r\n                id: selectedVisa?.id,\r\n         \r\n\r\n            };\r\n\r\n            const promise = CustomerServices.DeleteVoucher(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setConfirmationDialog(false);\r\n                getVouchers()\r\n           \r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const UpdatePaymentStatus = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                id: selectedVisa?.id,\r\n                payment_status: payment?.id,\r\n\r\n\r\n            };\r\n\r\n            const promise = CustomerServices.UpdateAddOnservice(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                getVouchers();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getVouchers = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await FinanceServices.getJournalVouchers(params)\r\n            setVouchers(data?.vouchers?.rows)\r\n            setTotalCount(data?.vouchers?.count)\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            console.log(formatPermissionData(data?.permissions));\r\n\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getVouchers(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getVouchers(1, '', data));\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getVouchers()\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"Are you sure?\"}\r\n                action={() => {\r\n                    setConfirmationDialog(false);\r\n                    HandleDelete()\r\n                }}\r\n            />\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={'Change Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Status :'}\r\n\r\n                                options={[{ id: 'pending', name: 'Pending' }, { id: 'inprogress', name: 'InProgress' }, { id: 'completed', name: 'Completed' }]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setStatusDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={'Change Payment Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdatePaymentStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Status :'}\r\n\r\n                                options={[{ id: 'paid', name: 'Paid' }, { id: 'unpaid', name: 'Unpaid' }]}\r\n                                selected={payment}\r\n                                onSelect={(value) => {\r\n                                    setPayment(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setStatusDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Journal Vouchers</Typography>\r\n\r\n\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n                <Grid container spacing={2} mb={4}>\r\n                    <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'} register={register(\"search\")} />\r\n                    </Grid>\r\n                    {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n                    <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                        <PrimaryButton\r\n                            bgcolor={Colors.white}\r\n                            textcolor={Colors.primary}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => { getVouchers(); setValue('search', '') }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {vouchers ? (\r\n                        <Fragment>\r\n                            <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5}\r\n                                fileName=\"Journal Vouchers\"\r\n                            >\r\n                                <Box className='pdf-show' sx={{ display: 'none' }}>\r\n                                    <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                        <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 2 }}>\r\n                                            Booked Container\r\n                                        </Typography>\r\n                                        <Box sx={{ fontWeight: 400, fontSize: \"12px\", mt: 1.5, color: Colors.charcoalGrey, }}><span>Date: &nbsp;&nbsp;</span>{moment().format('MM-DD-YYYY')}</Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                {/* ========== Table ========== */}\r\n                                <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 190px)' }} className=\"table-box\">\r\n                                    <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                {tableHead.map((item, index) => (\r\n                                                    <Cell className='pdf-table' key={index}>{item?.name}</Cell>\r\n                                                ))}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {!loader ? (\r\n                                                vouchers?.length > 0 ? (\r\n                                                    <Fragment>\r\n                                                        {vouchers.map((item, index) => (\r\n                                                            <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n                                                                <Cell className='pdf-table' >\r\n                                                                    {moment(item?.created_at).format(\r\n                                                                        \"MM-DD-YYYY\"\r\n                                                                    )}\r\n                                                                </Cell >\r\n                                                                <Cell className='pdf-table'>\r\n                                                                    JV-{item?.id ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                    {item?.entry_no ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                    {item?.total_amount ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                    <Tooltip\r\n                                                                        className='pdf-hide'\r\n                                                                        title={item?.notes ?? \"-\"}\r\n                                                                        arrow\r\n                                                                        placement=\"top\"\r\n                                                                        slotProps={{\r\n                                                                            popper: {\r\n                                                                                modifiers: [\r\n                                                                                    {\r\n                                                                                        name: \"offset\",\r\n                                                                                        options: {\r\n                                                                                            offset: [10, -2],\r\n                                                                                        },\r\n                                                                                    },\r\n                                                                                ],\r\n                                                                            },\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            item?.notes?.length > 12\r\n                                                                                ? item?.notes?.slice(0, 8) + \"...\" : item?.notes\r\n                                                                        }\r\n                                                                    </Tooltip>\r\n                                                                    <Box\r\n                                                                        component={\"div\"}\r\n                                                                        className='pdf-show'\r\n                                                                        sx={{ display: \"none !important\" }}\r\n                                                                    >\r\n                                                                        {item?.notes ?? \"-\"}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                    <Tooltip\r\n                                                                        className='pdf-hide'\r\n                                                                        title={item?.creator?.name ?? \"-\"}\r\n                                                                        arrow\r\n                                                                        placement=\"top\"\r\n                                                                        slotProps={{\r\n                                                                            popper: {\r\n                                                                                modifiers: [\r\n                                                                                    {\r\n                                                                                        name: \"offset\",\r\n                                                                                        options: {\r\n                                                                                            offset: [10, -2],\r\n                                                                                        },\r\n                                                                                    },\r\n                                                                                ],\r\n                                                                            },\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            item?.creator?.name?.length > 12\r\n                                                                                ? item?.creator?.name?.slice(0, 8) + \"...\" : item?.creator?.name\r\n                                                                        }\r\n                                                                        <Box\r\n                                                                            component={\"div\"}\r\n                                                                            className='pdf-show'\r\n                                                                            sx={{ display: \"none !important\" }}\r\n                                                                        >\r\n                                                                            {item?.creator?.name ?? \"-\"}\r\n                                                                        </Box>\r\n                                                                    </Tooltip>\r\n                                                                </Cell>\r\n                                                                <Cell >\r\n                                                                    {permissions?.details && <Box component={'div'} className='pdf-hide' sx={{ display: 'flex', gap: '20px' ,justifyContent:'space-between'}}>\r\n                                                                        <Box\r\n                                                                            onClick={() =>\r\n                                                                                navigate(\r\n                                                                                    `/journal-voucher-detail/${item?.id}`\r\n                                                                                )\r\n                                                                            }\r\n                                                                        >\r\n                                                                            <IconButton\r\n                                                                                sx={{\r\n                                                                                    bgcolor: Colors.primary,\r\n                                                                                    \"&:hover\": {\r\n                                                                                        bgcolor:\r\n                                                                                            Colors.primary,\r\n                                                                                    },\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <Box component={'img'} src={Images.detailIcon} onClick={() => navigate(`/journal-voucher-detail/${item?.id}`)} width={'35px'}></Box>\r\n                                                                            </IconButton>\r\n                                                                        </Box>\r\n                                                                        <Box>\r\n                                                                        <IconButton\r\n                                                                            sx={{\r\n                                                                                bgcolor: Colors.primary,\r\n                                                                                \"&:hover\": {\r\n                                                                                    bgcolor:\r\n                                                                                        Colors.primary,\r\n                                                                                },\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <Box component={'img'} src={Images.deleteIcon} onClick={() => {setConfirmationDialog(true); setSelectedVisa(item)}} width={'35px'}></Box>\r\n                                                                        </IconButton>\r\n                                                                        </Box>\r\n                                                                    </Box>}\r\n                                                                </Cell>\r\n                                                            </Row>\r\n                                                        ))}\r\n                                                    </Fragment>\r\n                                                ) : (\r\n                                                    <Row>\r\n                                                        <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                                                            No Data Found\r\n                                                        </Cell>\r\n                                                    </Row>\r\n                                                )) : (\r\n                                                <Row>\r\n                                                    <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                                                        <Box className={classes.loaderWrap}>\r\n                                                            <CircularProgress />\r\n                                                        </Box>\r\n                                                    </Cell>\r\n                                                </Row>\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </PDFExport>\r\n                            {/* ========== Pagination ========== */}\r\n                            <Pagination\r\n                                currentPage={currentPage}\r\n                                pageSize={pageLimit}\r\n                                onPageSizeChange={(size) => getVouchers(1, size.target.value)}\r\n                                tableCount={vouchers?.length}\r\n                                totalCount={totalCount}\r\n                                onPageChange={(page) => getVouchers(page, '')}\r\n                            />\r\n\r\n                        </Fragment>\r\n                    ) : (\r\n                        <CircleLoading />\r\n                    )}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default JournalVoucherList;"
        }
    ]
}