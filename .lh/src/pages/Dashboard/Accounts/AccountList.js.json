{
    "sourceFile": "src/pages/Dashboard/Accounts/AccountList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821644,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Grid, InputAdornment } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport { FontFamily, SearchIcon } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport { Edit } from '@mui/icons-material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Debounce, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport SelectField from 'components/Select';\r\nimport FinanceServices from 'services/Finance';\r\nimport { PrimaryButton, SwitchButton } from 'components/Buttons';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport { useDispatch } from \"react-redux\";\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport toast from 'react-hot-toast';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\n\r\n// *For Table Style\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n      fontSize: 14,\r\n      fontFamily: 'Public Sans',\r\n      border: '1px solid #EEEEEE',\r\n      padding: '15px',\r\n      textAlign: 'left',\r\n      whiteSpace: 'nowrap',\r\n      color: '#434343',\r\n      paddingRight: '50px',\r\n      background: 'transparent',\r\n      fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n      fontSize: 14,\r\n      fontFamily: 'Public Sans',\r\n\r\n      textWrap: 'nowrap',\r\n      padding: '5px !important',\r\n      paddingLeft: '15px !important',\r\n\r\n      '.MuiBox-root': {\r\n          display: 'flex',\r\n          gap: '6px',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          '.MuiBox-root': {\r\n              cursor: 'pointer'\r\n          }\r\n      },\r\n      'svg': {\r\n          width: 'auto',\r\n          height: '24px',\r\n      },\r\n      '.MuiTypography-root': {\r\n          textTransform: 'capitalize',\r\n          fontFamily: FontFamily.NunitoRegular,\r\n          textWrap: 'nowrap',\r\n      },\r\n      '.MuiButtonBase-root': {\r\n          padding: '8px',\r\n          width: '28px',\r\n          height: '28px',\r\n      }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction AccountList() {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef()\r\n\r\n  const { register } = useForm();\r\n\r\n  const tableHead = ['COA Code', 'COA Name',  'Nature', 'Major Category', 'Sub Category', 'Status', 'Actions']\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  // *For Accounts List\r\n  const [accounts, setAccounts] = useState();\r\n\r\n  // *For Pagination\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Major Categories\r\n  const [majorCategories, setMajorCategories] = useState([]);\r\n  const [selectedMajorCategory, setSelectedMajorCategory] = useState(null);\r\n\r\n  // *For Sub Categories\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n\r\n  // *For Get Major Categories\r\n  const getMajorCategories = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getMajorCategories()\r\n      setMajorCategories(data?.categories)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Sub Categories\r\n  const getSubCategories = async (id) => {\r\n    try {\r\n      let params = {\r\n        category_id: id ?? ''\r\n      }\r\n      const { data } = await FinanceServices.getSubCategories(params)\r\n      setSubCategories(data?.categories)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account\r\n  const getAccounts = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = { ...filters, ...filter }\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit\r\n      }\r\n      params = { ...params, ...Filter }\r\n      const { data } = await FinanceServices.getAccounts(params)\r\n      setAccounts(data?.accounts?.rows)\r\n      setTotalCount(data?.accounts?.count)\r\n      console.log(formatPermissionData(data?.permissions));\r\n      \r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      data?.permissions.forEach((e) => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  }\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = (data) => {\r\n    Debounce(() => getAccounts(1, '', data));\r\n  }\r\n  const sortData = (e, type, item) => {\r\n    e.preventDefault();\r\n\r\n\r\n\r\n    if (type === \"ascending\" && item == \"COA Code\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n\r\n        return a.account_code.localeCompare(b.account_code);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n\r\n    if (type === \"descending\" && item == \"COA Code\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n        return b.account_code.localeCompare(a.account_code);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"ascending\" && item == \"COA Name\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"descending\" && item == \"COA Name\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n        return b.name.localeCompare(a.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"ascending\" && item == \"Unit\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n\r\n        return a.unit.localeCompare(b.unit);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"descending\" && item == \"Unit\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n        return b.unit.localeCompare(a.unit);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"ascending\" && item == \"Major Category\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n\r\n        return a.cat?.name.localeCompare(b.cat?.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"descending\" && item == \"Major Category\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n        return b.cat?.name.localeCompare(a.cat?.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n    if (type === \"ascending\" && item == \"Sub Category\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n\r\n        return a.sub_cat?.name.localeCompare(b.sub_cat?.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n\r\n    if (type === \"descending\" && item == \"Sub Category\") {\r\n      const sortedData = [...accounts].sort((a, b) => {\r\n        // Use the localeCompare method for string comparison\r\n        return b.sub_cat?.name.localeCompare(a.sub_cat?.name);\r\n      });\r\n\r\n      setAccounts(sortedData);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  // *For Update Account Status\r\n  const updateAccountStatus = async (id, status) => {\r\n    const shallowCopy = [...accounts];\r\n    let accountIndex = shallowCopy.findIndex(item => item.id == id);\r\n\r\n    if (accountIndex != -1) {\r\n      shallowCopy[accountIndex].is_active = status;\r\n    }\r\n\r\n    setAccounts(shallowCopy)\r\n\r\n\r\n    try {\r\n      let obj = {\r\n        id: id,\r\n        is_active: status\r\n      }\r\n      const { message } = await FinanceServices.updateAccount(obj)\r\n    \r\n      const promise = FinanceServices.updateAccount(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n\r\n      // getAccounts()\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  const downloadExcel = () => {\r\n    // Define headers and data separately\r\n    const headers = tableHead.filter((item) => item !== \"Status\" && item !== \"Actions\");\r\n    const data = accounts;\r\n    // Extract values from objects and create an array for each row\r\n    const rows = data.map((item, index) => [\r\n      item?.account_code ?? '-',\r\n      item?.name ?? '-',\r\n      item?.unit ?? '-',\r\n      item?.primary_account_id ? 'Sub Account' : 'Primary',\r\n      item?.cat?.name ?? '-',\r\n      item?.sub_cat?.name ?? '-'\r\n    ]);\r\n\r\n    // Create a workbook with a worksheet\r\n    const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n    // Convert the workbook to an array buffer\r\n    const buf = XLSX.write(wb, {\r\n      bookType: \"xlsx\",\r\n      type: \"array\",\r\n      mimeType:\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    });\r\n\r\n    // Save the file using FileSaver.js\r\n    saveAs(new Blob([buf]), \"data.xlsx\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAccounts()\r\n    getMajorCategories()\r\n    getSubCategories()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ m: 4, mb: 2 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Account List</Typography>\r\n                <Box sx={{ display: 'flex', gap: '5px' }} >\r\n\r\n                    {permissions?.create && <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Create Account\"\r\n                        onClick={() => navigate('/create-account')}\r\n                     \r\n                    />}\r\n                    \r\n\r\n                </Box>\r\n\r\n            </Box>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          mr: 4,\r\n          my: 4,\r\n        }}\r\n      >\r\n       \r\n        {/* {accounts?.length > 0 && (\r\n          <Box sx={{\r\n            textAlign: \"right\", p: 4, display: \"flex\", gap: 2\r\n\r\n          }}>\r\n            <PrimaryButton\r\n              title=\"Download PDF\"\r\n              type=\"button\"\r\n              style={{ backgroundColor: Colors.bluishCyan }}\r\n              onClick={() => handleExportWithComponent(contentRef)}\r\n            />\r\n            <PrimaryButton\r\n              title={\"Download Excel\"}\r\n              onClick={() => downloadExcel()}\r\n            />\r\n          </Box>\r\n        )} */}\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} sm={3}>\r\n          <InputField\r\n            size={'small'}\r\n           \r\n            label={'Code'}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment>,\r\n            }}\r\n            placeholder={'Search Code'}\r\n            register={register('code', {\r\n              onChange: (e) => handleFilter({ code: e.target.value })\r\n            })}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <InputField\r\n            size={'small'}\r\n\r\n          \r\n            label={'Name'}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment>,\r\n            }}\r\n            placeholder={'Search Name'}\r\n            register={register('name', {\r\n              onChange: (e) => handleFilter({ name: e.target.value })\r\n            })}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <SelectField\r\n            size={'small'}\r\n            label={'Major Category'}\r\n            options={majorCategories}\r\n            selected={selectedMajorCategory}\r\n            onSelect={(value) => { setSelectedMajorCategory(value); handleFilter({ category: value?.id, sub_category: '' }); getSubCategories(value?.id); setSelectedSubCategory(null) }}\r\n            register={register(\"majorCategory\")}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <SelectField\r\n            size={'small'}\r\n            label={'Sub Category'}\r\n            options={subCategories}\r\n            selected={selectedSubCategory}\r\n            onSelect={(value) => { setSelectedSubCategory(value); handleFilter({ sub_category: value?.id }) }}\r\n            register={register(\"subCategory\")}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {accounts ? (\r\n        <Fragment>\r\n          <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5}\r\n            fileName=\"Chart Of Accounts Status\"\r\n          >\r\n            <Box className='pdf-show' sx={{ display: 'none' }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 2 }}>\r\n                  Chart Of Accounts Status\r\n                </Typography>\r\n                <Box sx={{ fontWeight: 400, fontSize: \"12px\", mt: 1.5, color: Colors.charcoalGrey, }}><span>Date: &nbsp;&nbsp;</span>{moment().format('MM-DD-YYYY')}</Box>\r\n              </Box>\r\n            </Box>\r\n            {/* ========== Table ========== */}\r\n            <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 330px)' }} className='table-box'>\r\n              <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {tableHead.map((item, index) => (\r\n                      <Cell className='pdf-table' key={index}>{item} {tableHead[index] == \"Status\" || tableHead[index] == \"Actions\" || tableHead[index] == \"Nature\" ? '' : <> <span className='pdf-hide'><ArrowUpwardIcon sx={{ color: 'white', fontSize: '15px', cursor: 'pointer' }} onClick={(e) => sortData(e, \"ascending\", tableHead[index])} /> </span>  <span className='pdf-hide'><ArrowDownwardIcon sx={{ color: 'white', fontSize: '15px', cursor: 'pointer' }} onClick={(e) => sortData(e, \"descending\", tableHead[index])} /> </span> </>}</Cell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {!loader ? (\r\n                    accounts?.length > 0 ? (\r\n                      <Fragment>\r\n                        {accounts.map((item, index) => (\r\n                          <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n                            <Cell className='pdf-table'>\r\n                              {item?.account_code ?? '-'}\r\n                            </Cell>\r\n                            <Cell className='pdf-table'>\r\n                              {item?.name ?? '-'}\r\n                            </Cell>\r\n                           \r\n                            <Cell className='pdf-table'>\r\n                              {item?.primary_account_id ? 'Sub Account' : 'Primary'}\r\n                            </Cell>\r\n                            <Cell className='pdf-table'>\r\n                              {item?.cat?.name ?? '-'}\r\n                            </Cell>\r\n                            <Cell className='pdf-table'>\r\n                              {item?.sub_cat?.name ?? '-'}\r\n                            </Cell>\r\n                            <Cell className='pdf-table'>\r\n                              <Box component={'div'} className='pdf-hide'>\r\n                                <SwitchButton\r\n\r\n                                  isChecked={item?.is_active}\r\n                                  setIsChecked={() =>  updateAccountStatus(item.id, !item?.is_active)}\r\n                                />\r\n\r\n                              </Box>\r\n                              <Box component={'div'} className='pdf-show' sx={{ display: 'none !important' }} >\r\n                                {item?.is_active ? 'Enable' : \"Disabled\"}\r\n                              </Box>\r\n                            </Cell>\r\n                            <Cell>\r\n                              <Box component={'div'} className='pdf-hide' sx={{ gap: '16px !important' }}>\r\n                                {permissions?.update &&\r\n                                  <Box onClick={() => navigate('/update-account', { state: item })}>\r\n                                    <IconButton sx={{ bgcolor: Colors.bluishCyan, '&:hover': { bgcolor: Colors.bluishCyan } }}>\r\n                                      <Edit sx={{ color: Colors.white, height: '16px !important' }} />\r\n                                    </IconButton>\r\n                                    <Typography variant=\"body2\">\r\n                                      Edit\r\n                                    </Typography>\r\n                                  </Box>\r\n                                }\r\n                              </Box>\r\n                            </Cell>\r\n                          </Row>\r\n                        ))}\r\n                      </Fragment>\r\n                    ) : (\r\n                      <Row>\r\n                        <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                          No Data Found\r\n                        </Cell>\r\n                      </Row>\r\n                    )) : (\r\n                    <Row>\r\n                      <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                        <Box className={classes.loaderWrap}>\r\n                          <CircularProgress />\r\n                        </Box>\r\n                      </Cell>\r\n                    </Row>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </PDFExport>\r\n          {/* ========== Pagination ========== */}\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            pageSize={pageLimit}\r\n            onPageSizeChange={(size) => getAccounts(1, size.target.value)}\r\n            tableCount={accounts?.length}\r\n            totalCount={totalCount}\r\n            onPageChange={(page) => getAccounts(page, '')}\r\n          />\r\n\r\n        </Fragment>\r\n      ) : (\r\n        <CircleLoading />\r\n      )}\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AccountList;"
        }
    ]
}