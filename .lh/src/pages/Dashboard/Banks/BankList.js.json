{
    "sourceFile": "src/pages/Dashboard/Banks/BankList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1744614508851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744614518754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,17 +173,9 @@\n       const { data } = await CustomerServices.getCategoryList(params)\r\n       setData(data?.categories);\r\n      \r\n      \r\n-      setPermissions(formatPermissionData(data?.permissions))\r\n-      console.log(formatPermissionData(data?.permissions));\r\n-\r\n-      setPermissions(formatPermissionData(data?.permissions))\r\n-      data?.permissions.forEach(e => {\r\n-        if (e?.route && e?.identifier && e?.permitted) {\r\n-          dispatch(addPermission(e?.route));\r\n-        }\r\n-      })\r\n+      \r\n     } catch (error) {\r\n       showErrorToast(error)\r\n     } finally {\r\n       setLoader(false)\r\n"
                },
                {
                    "date": 1744614524130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n       \r\n \r\n       }\r\n       params = { ...params, ...Filter }\r\n-      const { data } = await CustomerServices.getCategoryList(params)\r\n+      const { data } = await CustomerServices.getBanks(params)\r\n       setData(data?.categories);\r\n      \r\n      \r\n       \r\n"
                },
                {
                    "date": 1744614529791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,14 +156,9 @@\n   const getCustomerQueue = async (page, limit, filter) => {\r\n     setLoader(true)\r\n \r\n     try {\r\n-      const Page = page ? page : currentPage\r\n-      const Limit = limit ? limit : pageLimit\r\n-      const Filter = filter ? { ...filters, ...filter } : null;\r\n-      setCurrentPage(Page)\r\n-      setPageLimit(Limit)\r\n-      setFilters(Filter)\r\n+  \r\n       let params = {\r\n         page: 1,\r\n         limit: 1000,\r\n       \r\n"
                },
                {
                    "date": 1744614536290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         limit: 1000,\r\n       \r\n \r\n       }\r\n-      params = { ...params, ...Filter }\r\n+    \r\n       const { data } = await CustomerServices.getBanks(params)\r\n       setData(data?.categories);\r\n      \r\n      \r\n"
                },
                {
                    "date": 1744614713063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,9 +380,9 @@\n       </SimpleDialog>\r\n \r\n \r\n       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Service Category List</Typography>\r\n+        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n           title=\"Create\"\r\n           onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n"
                },
                {
                    "date": 1744614735563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n \r\n       }\r\n     \r\n       const { data } = await CustomerServices.getBanks(params)\r\n-      setData(data?.categories);\r\n+      setData(data?.banks);\r\n      \r\n      \r\n       \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1744614758418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n \r\n \r\n     },\r\n     {\r\n-      header: \"Customer\",\r\n+      header: \"Name\",\r\n       accessorKey: \"name\",\r\n \r\n \r\n     },\r\n"
                },
                {
                    "date": 1744614766614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,10 +259,10 @@\n \r\n \r\n     },\r\n     {\r\n-        header: \"Arabic Name\",\r\n-        accessorKey: \"name_ar\",\r\n+        header: \"Title\",\r\n+        accessorKey: \"title\",\r\n   \r\n   \r\n       },\r\n   \r\n"
                },
                {
                    "date": 1744614772428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,19 +271,9 @@\n       accessorKey: \"cost_center\",\r\n \r\n \r\n     },\r\n-    {\r\n-      id: \"created_at\",\r\n-      header: \"Registration Date\",\r\n-      // Remove accessorKey and fix accessorFn to use row directly\r\n-      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n-      cell: ({ row }) => (\r\n-        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n-          {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n-        </Box>\r\n-      ),\r\n-    },\r\n+   \r\n \r\n     \r\n     {\r\n       header: \"Actions\",\r\n"
                },
                {
                    "date": 1744614801110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,10 +266,10 @@\n   \r\n       },\r\n   \r\n     {\r\n-      header: \"Cost Center\",\r\n-      accessorKey: \"cost_center\",\r\n+      header: \"Account Number\",\r\n+      accessorKey: \"account_number\",\r\n \r\n \r\n     },\r\n    \r\n"
                },
                {
                    "date": 1744614814683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,14 @@\n \r\n \r\n     },\r\n    \r\n-\r\n+    {\r\n+        header: \"INB Number\",\r\n+        accessorKey: \"account_number\",\r\n+  \r\n+  \r\n+      },\r\n     \r\n     {\r\n       header: \"Actions\",\r\n       cell: ({ row }) => (\r\n"
                },
                {
                    "date": 1744614829086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,10 +273,10 @@\n \r\n     },\r\n    \r\n     {\r\n-        header: \"INB Number\",\r\n-        accessorKey: \"account_number\",\r\n+        header: \"IBN Number\",\r\n+        accessorKey: \"account_ibn\",\r\n   \r\n   \r\n       },\r\n     \r\n"
                },
                {
                    "date": 1744614858492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,15 +258,10 @@\n       accessorKey: \"name\",\r\n \r\n \r\n     },\r\n-    {\r\n-        header: \"Title\",\r\n-        accessorKey: \"title\",\r\n+    \r\n   \r\n-  \r\n-      },\r\n-  \r\n     {\r\n       header: \"Account Number\",\r\n       accessorKey: \"account_number\",\r\n \r\n"
                },
                {
                    "date": 1744614891093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,10 @@\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+          {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n+         \r\n           {/* <Box>\r\n             {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n           \r\n"
                },
                {
                    "date": 1744614905844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n     try {\r\n         let params = { customer_id: selectedData?.id }\r\n \r\n \r\n-        const { message } = await CustomerServices.DeleteCategory(params)\r\n+        const { message } = await CustomerServices.DeleteBank(params)\r\n \r\n         SuccessToaster(message);\r\n         getCustomerQueue()\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1744615012477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,10 +281,10 @@\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n-          {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n          \r\n+         \r\n           {/* <Box>\r\n             {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n           \r\n"
                },
                {
                    "date": 1744615041770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,8 +273,22 @@\n         accessorKey: \"account_ibn\",\r\n   \r\n   \r\n       },\r\n+      {\r\n+            header: \"Status\",\r\n+            cell: ({ row }) => (\r\n+      \r\n+              <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n+                if (permissions?.status_update) {\r\n+                  setStatusDialog(true)\r\n+                }\r\n+              }}>\r\n+                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Enabled' : 'Disabled'} />\r\n+      \r\n+              </Box>\r\n+            ),\r\n+          },\r\n     \r\n     {\r\n       header: \"Actions\",\r\n       cell: ({ row }) => (\r\n"
                },
                {
                    "date": 1744615047781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,11 +278,11 @@\n             header: \"Status\",\r\n             cell: ({ row }) => (\r\n       \r\n               <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n-                if (permissions?.status_update) {\r\n+              \r\n                   setStatusDialog(true)\r\n-                }\r\n+                \r\n               }}>\r\n                 <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Enabled' : 'Disabled'} />\r\n       \r\n               </Box>\r\n"
                },
                {
                    "date": 1744615066117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n               \r\n                   setStatusDialog(true)\r\n                 \r\n               }}>\r\n-                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Enabled' : 'Disabled'} />\r\n+                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Disabled'} />\r\n       \r\n               </Box>\r\n             ),\r\n           },\r\n"
                },
                {
                    "date": 1744615072904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n               \r\n                   setStatusDialog(true)\r\n                 \r\n               }}>\r\n-                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Disabled'} />\r\n+                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Inactive'} />\r\n       \r\n               </Box>\r\n             ),\r\n           },\r\n"
                },
                {
                    "date": 1744615095260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n         customer_id: selectedData?.id,\r\n         is_active: status?.id,\r\n       };\r\n \r\n-      const promise = CustomerServices.CustomerStatus(obj);\r\n+      const promise = CustomerServices.UpdateBank(obj);\r\n       console.log(promise);\r\n \r\n       showPromiseToast(\r\n         promise,\r\n"
                },
                {
                    "date": 1744615178144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,9 +220,9 @@\n }\r\n   const UpdateStatus = async () => {\r\n     try {\r\n       let obj = {\r\n-        customer_id: selectedData?.id,\r\n+        id: selectedData?.id,\r\n         is_active: status?.id,\r\n       };\r\n \r\n       const promise = CustomerServices.UpdateBank(obj);\r\n"
                },
                {
                    "date": 1744615243070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,9 +340,8 @@\n               <SelectField\r\n                 size={\"small\"}\r\n                 label={\"Select Status :\"}\r\n                 options={\r\n-\r\n                   [\r\n                     { id: false, name: \"Disabled\" },\r\n                     { id: true, name: \"Enabled\" },\r\n \r\n"
                },
                {
                    "date": 1744615366799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,9 +383,28 @@\n           </Grid>\r\n         </Box>\r\n       </SimpleDialog>\r\n \r\n+      <Grid item xs={12} sm={12}>\r\n+              <SelectField\r\n+                size={\"small\"}\r\n+                label={\"Select Status :\"}\r\n+                options={\r\n+                  [\r\n+                    { id: false, name: \"Disabled\" },\r\n+                    { id: true, name: \"Enabled\" },\r\n \r\n+                  ]}\r\n+                selected={status}\r\n+                onSelect={(value) => {\r\n+                  setStatus(value);\r\n+                }}\r\n+                error={errors?.status?.message}\r\n+                register={register(\"status\", {\r\n+                  required: \"Please select status.\",\r\n+                })}\r\n+              />\r\n+            </Grid>\r\n       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n         <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n"
                },
                {
                    "date": 1744615788997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,8 +340,9 @@\n               <SelectField\r\n                 size={\"small\"}\r\n                 label={\"Select Status :\"}\r\n                 options={\r\n+\r\n                   [\r\n                     { id: false, name: \"Disabled\" },\r\n                     { id: true, name: \"Enabled\" },\r\n \r\n@@ -383,28 +384,9 @@\n           </Grid>\r\n         </Box>\r\n       </SimpleDialog>\r\n \r\n-      <Grid item xs={12} sm={12}>\r\n-              <SelectField\r\n-                size={\"small\"}\r\n-                label={\"Select Status :\"}\r\n-                options={\r\n-                  [\r\n-                    { id: false, name: \"Disabled\" },\r\n-                    { id: true, name: \"Enabled\" },\r\n \r\n-                  ]}\r\n-                selected={status}\r\n-                onSelect={(value) => {\r\n-                  setStatus(value);\r\n-                }}\r\n-                error={errors?.status?.message}\r\n-                register={register(\"status\", {\r\n-                  required: \"Please select status.\",\r\n-                })}\r\n-              />\r\n-            </Grid>\r\n       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n         <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n"
                },
                {
                    "date": 1744615919484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,8 +350,15 @@\n                 selected={status}\r\n                 onSelect={(value) => {\r\n                   setStatus(value);\r\n                 }}\r\n+                MenuProps={{\r\n+                    PaperProps: {\r\n+                      sx: {\r\n+                        zIndex: 1500, // or higher than the modal's zIndex\r\n+                      },\r\n+                    },\r\n+                  }}\r\n                 error={errors?.status?.message}\r\n                 register={register(\"status\", {\r\n                   required: \"Please select status.\",\r\n                 })}\r\n"
                },
                {
                    "date": 1744615938252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,15 +350,9 @@\n                 selected={status}\r\n                 onSelect={(value) => {\r\n                   setStatus(value);\r\n                 }}\r\n-                MenuProps={{\r\n-                    PaperProps: {\r\n-                      sx: {\r\n-                        zIndex: 1500, // or higher than the modal's zIndex\r\n-                      },\r\n-                    },\r\n-                  }}\r\n+                \r\n                 error={errors?.status?.message}\r\n                 register={register(\"status\", {\r\n                   required: \"Please select status.\",\r\n                 })}\r\n"
                },
                {
                    "date": 1744618583010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import React, { Fragment, useEffect, useRef, useState } from 'react';\r\n+import {\r\n+  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n+  FormControl,\r\n+  Select,\r\n+  MenuItem,\r\n+  ListItemText,\r\n+  Tooltip,\r\n+  Checkbox,\r\n+  InputAdornment,\r\n+} from '@mui/material';\r\n+import { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\n+import styled from '@emotion/styled';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import Colors from 'assets/Style/Colors';\r\n+import { CircleLoading } from 'components/Loaders';\r\n+import { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\n+import FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\n+import AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\n+import AllocateDialog from 'components/Dialog/AllocateDialog';\r\n+import CustomerServices from 'services/Customer';\r\n+import { makeStyles } from '@mui/styles';\r\n+import Pagination from 'components/Pagination';\r\n+import { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\n+import InputField from 'components/Input';\r\n+import { useForm } from 'react-hook-form';\r\n+import { useDispatch } from 'react-redux';\r\n+import { addPermission } from 'redux/slices/navigationDataSlice';\r\n+import SimpleDialog from 'components/Dialog/SimpleDialog';\r\n+import { PrimaryButton } from 'components/Buttons';\r\n+import SelectField from 'components/Select';\r\n+import { Visibility, VisibilityOff } from '@mui/icons-material';\r\n+import SearchIcon from '@mui/icons-material/Search';\r\n+import * as XLSX from \"xlsx\";\r\n+import { saveAs } from \"file-saver\";\r\n+import { PDFExport } from '@progress/kendo-react-pdf';\r\n+import moment from 'moment';\r\n+import LabelCustomInput from 'components/Input/LabelCustomInput';\r\n+import { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\n+import { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\n+import DataTable from 'components/DataTable';\r\n+import ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n+\r\n+// *For Table Style\r\n+const Row = styled(TableRow)(({ theme }) => ({\r\n+  border: 0,\r\n+\r\n+}));\r\n+\r\n+const Cell = styled(TableCell)(({ theme }) => ({\r\n+  [`&.${tableCellClasses.head}`]: {\r\n+    fontSize: 14,\r\n+    fontFamily: 'Public Sans',\r\n+    border: '1px solid #EEEEEE',\r\n+    padding: '15px',\r\n+    textAlign: 'left',\r\n+    whiteSpace: 'nowrap',\r\n+    color: '#434343',\r\n+    paddingRight: '50px',\r\n+    background: 'transparent',\r\n+    fontWeight: 'bold'\r\n+\r\n+  },\r\n+  [`&.${tableCellClasses.body}`]: {\r\n+    fontSize: 14,\r\n+    fontFamily: 'Public Sans',\r\n+\r\n+    textWrap: 'nowrap',\r\n+    padding: '5px !important',\r\n+    paddingLeft: '15px !important',\r\n+\r\n+    '.MuiBox-root': {\r\n+      display: 'flex',\r\n+      gap: '6px',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      '.MuiBox-root': {\r\n+        cursor: 'pointer'\r\n+      }\r\n+    },\r\n+    'svg': {\r\n+      width: 'auto',\r\n+      height: '24px',\r\n+    },\r\n+    '.MuiTypography-root': {\r\n+      textTransform: 'capitalize',\r\n+      fontFamily: FontFamily.NunitoRegular,\r\n+      textWrap: 'nowrap',\r\n+    },\r\n+    '.MuiButtonBase-root': {\r\n+      padding: '8px',\r\n+      width: '28px',\r\n+      height: '28px',\r\n+    }\r\n+  },\r\n+}));\r\n+\r\n+const useStyles = makeStyles({\r\n+  loaderWrap: {\r\n+    display: 'flex',\r\n+    height: 100,\r\n+    '& svg': {\r\n+      width: '40px !important',\r\n+      height: '40px !important'\r\n+    }\r\n+  }\r\n+})\r\n+\r\n+function BankList() {\r\n+\r\n+  const navigate = useNavigate();\r\n+  const classes = useStyles();\r\n+  const dispatch = useDispatch();\r\n+  const contentRef = useRef(null);\r\n+  const [status, setStatus] = useState(null)\r\n+  const [statusDialog, setStatusDialog] = useState(false)\r\n+  const [selectedData, setSelectedData] = useState(null)\r\n+  const [tableLoader, setTableLoader] = useState(false)\r\n+  const {\r\n+    register,\r\n+    handleSubmit,\r\n+    formState: { errors },\r\n+    setValue,\r\n+    getValues,\r\n+    reset,\r\n+  } = useForm();\r\n+\r\n+  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n+\r\n+\r\n+  const [loader, setLoader] = useState(false);\r\n+\r\n+  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n+\r\n+  // *For Customer Queue\r\n+  const [customerQueue, setCustomerQueue] = useState([]);\r\n+const [data, setData] = useState([])\r\n+\r\n+\r\n+  const [totalCount, setTotalCount] = useState(0);\r\n+  const [pageLimit, setPageLimit] = useState(50);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+\r\n+\r\n+\r\n+  // *For Filters\r\n+  const [filters, setFilters] = useState({});\r\n+\r\n+  // *For Permissions\r\n+  const [permissions, setPermissions] = useState();\r\n+\r\n+  const [loading, setLoading] = useState(false)\r\n+  const [sort, setSort] = useState('desc')\r\n+\r\n+  // *For Get Customer Queue\r\n+  const getCustomerQueue = async (page, limit, filter) => {\r\n+    setLoader(true)\r\n+\r\n+    try {\r\n+  \r\n+      let params = {\r\n+        page: 1,\r\n+        limit: 1000,\r\n+      \r\n+\r\n+      }\r\n+    \r\n+      const { data } = await CustomerServices.getBanks(params)\r\n+      setData(data?.banks);\r\n+     \r\n+     \r\n+      \r\n+    } catch (error) {\r\n+      showErrorToast(error)\r\n+    } finally {\r\n+      setLoader(false)\r\n+    }\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const handleSort = (key) => {\r\n+    let data = {\r\n+      sort_by: key,\r\n+      sort_order: sort\r\n+    }\r\n+    Debounce(() => getCustomerQueue(1, '', data));\r\n+  }\r\n+\r\n+\r\n+\r\n+  // *For Handle Filter\r\n+\r\n+  const handleFilter = () => {\r\n+    let data = {\r\n+      search: getValues('search')\r\n+    }\r\n+    Debounce(() => getCustomerQueue(1, '', data));\r\n+  }\r\n+  const handleDelete = async (item) => {\r\n+ \r\n+\r\n+    try {\r\n+        let params = { customer_id: selectedData?.id }\r\n+\r\n+\r\n+        const { message } = await CustomerServices.DeleteBank(params)\r\n+\r\n+        SuccessToaster(message);\r\n+        getCustomerQueue()\r\n+    } catch (error) {\r\n+        showErrorToast(error)\r\n+    } finally {\r\n+        // setLoader(false)\r\n+    }\r\n+}\r\n+  const UpdateStatus = async () => {\r\n+    try {\r\n+      let obj = {\r\n+        id: selectedData?.id,\r\n+        is_active: status?.id,\r\n+      };\r\n+\r\n+      const promise = CustomerServices.UpdateBank(obj);\r\n+      console.log(promise);\r\n+\r\n+      showPromiseToast(\r\n+        promise,\r\n+        \"Saving...\",\r\n+        \"Added Successfully\",\r\n+        \"Something Went Wrong\"\r\n+      );\r\n+\r\n+      // Await the promise and then check its response\r\n+      const response = await promise;\r\n+      if (response?.responseCode === 200) {\r\n+        setStatusDialog(false);\r\n+        setStatus(null)\r\n+        getCustomerQueue();\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error);\r\n+    }\r\n+  };\r\n+  const columns = [\r\n+    {\r\n+      header: \"SR No.\",\r\n+      accessorKey: \"id\",\r\n+\r\n+\r\n+    },\r\n+    {\r\n+      header: \"Name\",\r\n+      accessorKey: \"name\",\r\n+\r\n+\r\n+    },\r\n+    \r\n+  \r\n+    {\r\n+      header: \"Account Number\",\r\n+      accessorKey: \"account_number\",\r\n+\r\n+\r\n+    },\r\n+   \r\n+    {\r\n+        header: \"IBN Number\",\r\n+        accessorKey: \"account_ibn\",\r\n+  \r\n+  \r\n+      },\r\n+      {\r\n+            header: \"Status\",\r\n+            cell: ({ row }) => (\r\n+      \r\n+              <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n+                setSelectedData(row?.original)\r\n+                  setStatusDialog(true)\r\n+                \r\n+              }}>\r\n+                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Inactive'} />\r\n+      \r\n+              </Box>\r\n+            ),\r\n+          },\r\n+    \r\n+    {\r\n+      header: \"Actions\",\r\n+      cell: ({ row }) => (\r\n+\r\n+        <Box sx={{display:'flex',gap:1}}>\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+         \r\n+         \r\n+          {/* <Box>\r\n+            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n+\r\n+          \r\n+          </Box> */}\r\n+\r\n+        </Box>\r\n+      ),\r\n+    },\r\n+\r\n+  ]\r\n+\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    getCustomerQueue()\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <Box sx={{ p: 3 }}>\r\n+\r\n+      <ConfirmationDialog\r\n+        open={confirmationDialog}\r\n+        onClose={() => setConfirmationDialog(false)}\r\n+        message={\"Are You Sure?\"}\r\n+        action={() => {\r\n+          setConfirmationDialog(false);\r\n+          handleDelete()\r\n+\r\n+        }}\r\n+      />\r\n+      <SimpleDialog\r\n+        open={statusDialog}\r\n+        onClose={() => setStatusDialog(false)}\r\n+        title={\"Change Status?\"}\r\n+      >\r\n+        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n+          <Grid container spacing={2}>\r\n+            <Grid item xs={12} sm={12}>\r\n+              <SelectField\r\n+                size={\"small\"}\r\n+                label={\"Select Status :\"}\r\n+                options={\r\n+\r\n+                  [\r\n+                    { id: false, name: \"Disabled\" },\r\n+                    { id: true, name: \"Enabled\" },\r\n+\r\n+                  ]}\r\n+                selected={status}\r\n+                onSelect={(value) => {\r\n+                  setStatus(value);\r\n+                }}\r\n+                \r\n+                error={errors?.status?.message}\r\n+                register={register(\"status\", {\r\n+                  required: \"Please select status.\",\r\n+                })}\r\n+              />\r\n+            </Grid>\r\n+            <Grid container sx={{ justifyContent: \"center\" }}>\r\n+              <Grid\r\n+                item\r\n+                xs={6}\r\n+                sm={6}\r\n+                sx={{\r\n+                  mt: 2,\r\n+                  display: \"flex\",\r\n+                  justifyContent: \"space-between\",\r\n+                  gap: \"25px\",\r\n+                }}\r\n+              >\r\n+                <PrimaryButton\r\n+                  bgcolor={Colors.primary}\r\n+                  title=\"Yes,Confirm\"\r\n+                  type=\"submit\"\r\n+                />\r\n+                <PrimaryButton\r\n+                  onClick={() => setStatusDialog(false)}\r\n+                  bgcolor={\"#FF1F25\"}\r\n+                  title=\"No,Cancel\"\r\n+                />\r\n+              </Grid>\r\n+            </Grid>\r\n+          </Grid>\r\n+        </Box>\r\n+      </SimpleDialog>\r\n+\r\n+\r\n+      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n+        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n+        {true && <PrimaryButton\r\n+         bgcolor={'#bd9b4a'}\r\n+          title=\"Create\"\r\n+          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n+          loading={loading}\r\n+        />}\r\n+\r\n+\r\n+      </Box>\r\n+\r\n+      {/* Filters */}\r\n+      <Box >\r\n+\r\n+\r\n+        {<DataTable loading={loader} data={data} columns={columns} />}\r\n+      </Box>\r\n+\r\n+    </Box>\r\n+  );\r\n+}\r\n+\r\n+export default BankList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744618846943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n       cell: ({ row }) => (\r\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-bank/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n          \r\n          \r\n           {/* <Box>\r\n             {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n@@ -409,418 +409,5 @@\n     </Box>\r\n   );\r\n }\r\n \r\n-export default BankList;\n-import React, { Fragment, useEffect, useRef, useState } from 'react';\r\n-import {\r\n-  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n-  FormControl,\r\n-  Select,\r\n-  MenuItem,\r\n-  ListItemText,\r\n-  Tooltip,\r\n-  Checkbox,\r\n-  InputAdornment,\r\n-} from '@mui/material';\r\n-import { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\n-import styled from '@emotion/styled';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import Colors from 'assets/Style/Colors';\r\n-import { CircleLoading } from 'components/Loaders';\r\n-import { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\n-import FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\n-import AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\n-import AllocateDialog from 'components/Dialog/AllocateDialog';\r\n-import CustomerServices from 'services/Customer';\r\n-import { makeStyles } from '@mui/styles';\r\n-import Pagination from 'components/Pagination';\r\n-import { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\n-import InputField from 'components/Input';\r\n-import { useForm } from 'react-hook-form';\r\n-import { useDispatch } from 'react-redux';\r\n-import { addPermission } from 'redux/slices/navigationDataSlice';\r\n-import SimpleDialog from 'components/Dialog/SimpleDialog';\r\n-import { PrimaryButton } from 'components/Buttons';\r\n-import SelectField from 'components/Select';\r\n-import { Visibility, VisibilityOff } from '@mui/icons-material';\r\n-import SearchIcon from '@mui/icons-material/Search';\r\n-import * as XLSX from \"xlsx\";\r\n-import { saveAs } from \"file-saver\";\r\n-import { PDFExport } from '@progress/kendo-react-pdf';\r\n-import moment from 'moment';\r\n-import LabelCustomInput from 'components/Input/LabelCustomInput';\r\n-import { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\n-import { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\n-import DataTable from 'components/DataTable';\r\n-import ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n-\r\n-// *For Table Style\r\n-const Row = styled(TableRow)(({ theme }) => ({\r\n-  border: 0,\r\n-\r\n-}));\r\n-\r\n-const Cell = styled(TableCell)(({ theme }) => ({\r\n-  [`&.${tableCellClasses.head}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n-    border: '1px solid #EEEEEE',\r\n-    padding: '15px',\r\n-    textAlign: 'left',\r\n-    whiteSpace: 'nowrap',\r\n-    color: '#434343',\r\n-    paddingRight: '50px',\r\n-    background: 'transparent',\r\n-    fontWeight: 'bold'\r\n-\r\n-  },\r\n-  [`&.${tableCellClasses.body}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n-\r\n-    textWrap: 'nowrap',\r\n-    padding: '5px !important',\r\n-    paddingLeft: '15px !important',\r\n-\r\n-    '.MuiBox-root': {\r\n-      display: 'flex',\r\n-      gap: '6px',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      '.MuiBox-root': {\r\n-        cursor: 'pointer'\r\n-      }\r\n-    },\r\n-    'svg': {\r\n-      width: 'auto',\r\n-      height: '24px',\r\n-    },\r\n-    '.MuiTypography-root': {\r\n-      textTransform: 'capitalize',\r\n-      fontFamily: FontFamily.NunitoRegular,\r\n-      textWrap: 'nowrap',\r\n-    },\r\n-    '.MuiButtonBase-root': {\r\n-      padding: '8px',\r\n-      width: '28px',\r\n-      height: '28px',\r\n-    }\r\n-  },\r\n-}));\r\n-\r\n-const useStyles = makeStyles({\r\n-  loaderWrap: {\r\n-    display: 'flex',\r\n-    height: 100,\r\n-    '& svg': {\r\n-      width: '40px !important',\r\n-      height: '40px !important'\r\n-    }\r\n-  }\r\n-})\r\n-\r\n-function BankList() {\r\n-\r\n-  const navigate = useNavigate();\r\n-  const classes = useStyles();\r\n-  const dispatch = useDispatch();\r\n-  const contentRef = useRef(null);\r\n-  const [status, setStatus] = useState(null)\r\n-  const [statusDialog, setStatusDialog] = useState(false)\r\n-  const [selectedData, setSelectedData] = useState(null)\r\n-  const [tableLoader, setTableLoader] = useState(false)\r\n-  const {\r\n-    register,\r\n-    handleSubmit,\r\n-    formState: { errors },\r\n-    setValue,\r\n-    getValues,\r\n-    reset,\r\n-  } = useForm();\r\n-\r\n-  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n-\r\n-\r\n-  const [loader, setLoader] = useState(false);\r\n-\r\n-  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n-\r\n-  // *For Customer Queue\r\n-  const [customerQueue, setCustomerQueue] = useState([]);\r\n-const [data, setData] = useState([])\r\n-\r\n-\r\n-  const [totalCount, setTotalCount] = useState(0);\r\n-  const [pageLimit, setPageLimit] = useState(50);\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-\r\n-\r\n-\r\n-  // *For Filters\r\n-  const [filters, setFilters] = useState({});\r\n-\r\n-  // *For Permissions\r\n-  const [permissions, setPermissions] = useState();\r\n-\r\n-  const [loading, setLoading] = useState(false)\r\n-  const [sort, setSort] = useState('desc')\r\n-\r\n-  // *For Get Customer Queue\r\n-  const getCustomerQueue = async (page, limit, filter) => {\r\n-    setLoader(true)\r\n-\r\n-    try {\r\n-  \r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      \r\n-\r\n-      }\r\n-    \r\n-      const { data } = await CustomerServices.getBanks(params)\r\n-      setData(data?.banks);\r\n-     \r\n-     \r\n-      \r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoader(false)\r\n-    }\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-  const handleSort = (key) => {\r\n-    let data = {\r\n-      sort_by: key,\r\n-      sort_order: sort\r\n-    }\r\n-    Debounce(() => getCustomerQueue(1, '', data));\r\n-  }\r\n-\r\n-\r\n-\r\n-  // *For Handle Filter\r\n-\r\n-  const handleFilter = () => {\r\n-    let data = {\r\n-      search: getValues('search')\r\n-    }\r\n-    Debounce(() => getCustomerQueue(1, '', data));\r\n-  }\r\n-  const handleDelete = async (item) => {\r\n- \r\n-\r\n-    try {\r\n-        let params = { customer_id: selectedData?.id }\r\n-\r\n-\r\n-        const { message } = await CustomerServices.DeleteBank(params)\r\n-\r\n-        SuccessToaster(message);\r\n-        getCustomerQueue()\r\n-    } catch (error) {\r\n-        showErrorToast(error)\r\n-    } finally {\r\n-        // setLoader(false)\r\n-    }\r\n-}\r\n-  const UpdateStatus = async () => {\r\n-    try {\r\n-      let obj = {\r\n-        id: selectedData?.id,\r\n-        is_active: status?.id,\r\n-      };\r\n-\r\n-      const promise = CustomerServices.UpdateBank(obj);\r\n-      console.log(promise);\r\n-\r\n-      showPromiseToast(\r\n-        promise,\r\n-        \"Saving...\",\r\n-        \"Added Successfully\",\r\n-        \"Something Went Wrong\"\r\n-      );\r\n-\r\n-      // Await the promise and then check its response\r\n-      const response = await promise;\r\n-      if (response?.responseCode === 200) {\r\n-        setStatusDialog(false);\r\n-        setStatus(null)\r\n-        getCustomerQueue();\r\n-      }\r\n-    } catch (error) {\r\n-      console.log(error);\r\n-    }\r\n-  };\r\n-  const columns = [\r\n-    {\r\n-      header: \"SR No.\",\r\n-      accessorKey: \"id\",\r\n-\r\n-\r\n-    },\r\n-    {\r\n-      header: \"Name\",\r\n-      accessorKey: \"name\",\r\n-\r\n-\r\n-    },\r\n-    \r\n-  \r\n-    {\r\n-      header: \"Account Number\",\r\n-      accessorKey: \"account_number\",\r\n-\r\n-\r\n-    },\r\n-   \r\n-    {\r\n-        header: \"IBN Number\",\r\n-        accessorKey: \"account_ibn\",\r\n-  \r\n-  \r\n-      },\r\n-      {\r\n-            header: \"Status\",\r\n-            cell: ({ row }) => (\r\n-      \r\n-              <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n-              \r\n-                  setStatusDialog(true)\r\n-                \r\n-              }}>\r\n-                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Inactive'} />\r\n-      \r\n-              </Box>\r\n-            ),\r\n-          },\r\n-    \r\n-    {\r\n-      header: \"Actions\",\r\n-      cell: ({ row }) => (\r\n-\r\n-        <Box sx={{display:'flex',gap:1}}>\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n-         \r\n-         \r\n-          {/* <Box>\r\n-            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n-\r\n-          \r\n-          </Box> */}\r\n-\r\n-        </Box>\r\n-      ),\r\n-    },\r\n-\r\n-  ]\r\n-\r\n-\r\n-\r\n-  useEffect(() => {\r\n-    getCustomerQueue()\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <Box sx={{ p: 3 }}>\r\n-\r\n-      <ConfirmationDialog\r\n-        open={confirmationDialog}\r\n-        onClose={() => setConfirmationDialog(false)}\r\n-        message={\"Are You Sure?\"}\r\n-        action={() => {\r\n-          setConfirmationDialog(false);\r\n-          handleDelete()\r\n-\r\n-        }}\r\n-      />\r\n-      <SimpleDialog\r\n-        open={statusDialog}\r\n-        onClose={() => setStatusDialog(false)}\r\n-        title={\"Change Status?\"}\r\n-      >\r\n-        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n-          <Grid container spacing={2}>\r\n-            <Grid item xs={12} sm={12}>\r\n-              <SelectField\r\n-                size={\"small\"}\r\n-                label={\"Select Status :\"}\r\n-                options={\r\n-\r\n-                  [\r\n-                    { id: false, name: \"Disabled\" },\r\n-                    { id: true, name: \"Enabled\" },\r\n-\r\n-                  ]}\r\n-                selected={status}\r\n-                onSelect={(value) => {\r\n-                  setStatus(value);\r\n-                }}\r\n-                \r\n-                error={errors?.status?.message}\r\n-                register={register(\"status\", {\r\n-                  required: \"Please select status.\",\r\n-                })}\r\n-              />\r\n-            </Grid>\r\n-            <Grid container sx={{ justifyContent: \"center\" }}>\r\n-              <Grid\r\n-                item\r\n-                xs={6}\r\n-                sm={6}\r\n-                sx={{\r\n-                  mt: 2,\r\n-                  display: \"flex\",\r\n-                  justifyContent: \"space-between\",\r\n-                  gap: \"25px\",\r\n-                }}\r\n-              >\r\n-                <PrimaryButton\r\n-                  bgcolor={Colors.primary}\r\n-                  title=\"Yes,Confirm\"\r\n-                  type=\"submit\"\r\n-                />\r\n-                <PrimaryButton\r\n-                  onClick={() => setStatusDialog(false)}\r\n-                  bgcolor={\"#FF1F25\"}\r\n-                  title=\"No,Cancel\"\r\n-                />\r\n-              </Grid>\r\n-            </Grid>\r\n-          </Grid>\r\n-        </Box>\r\n-      </SimpleDialog>\r\n-\r\n-\r\n-      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n-        {true && <PrimaryButton\r\n-         bgcolor={'#bd9b4a'}\r\n-          title=\"Create\"\r\n-          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n-          loading={loading}\r\n-        />}\r\n-\r\n-\r\n-      </Box>\r\n-\r\n-      {/* Filters */}\r\n-      <Box >\r\n-\r\n-\r\n-        {<DataTable loading={loader} data={data} columns={columns} />}\r\n-      </Box>\r\n-\r\n-    </Box>\r\n-  );\r\n-}\r\n-\r\n export default BankList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744619415302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n       header: \"Actions\",\r\n       cell: ({ row }) => (\r\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/bank-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-bank/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n          \r\n          \r\n           {/* <Box>\r\n@@ -391,9 +391,9 @@\n         <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n           title=\"Create\"\r\n-          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n+          onClick={() => { navigate('/create-bank'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n           loading={loading}\r\n         />}\r\n \r\n \r\n"
                }
            ],
            "date": 1744614508851,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport DataTable from 'components/DataTable';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction BankList() {\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [status, setStatus] = useState(null)\r\n  const [statusDialog, setStatusDialog] = useState(false)\r\n  const [selectedData, setSelectedData] = useState(null)\r\n  const [tableLoader, setTableLoader] = useState(false)\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n    getValues,\r\n    reset,\r\n  } = useForm();\r\n\r\n  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\nconst [data, setData] = useState([])\r\n\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [sort, setSort] = useState('desc')\r\n\r\n  // *For Get Customer Queue\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    setLoader(true)\r\n\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = filter ? { ...filters, ...filter } : null;\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      \r\n\r\n      }\r\n      params = { ...params, ...Filter }\r\n      const { data } = await CustomerServices.getCategoryList(params)\r\n      setData(data?.categories);\r\n     \r\n     \r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      console.log(formatPermissionData(data?.permissions));\r\n\r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      data?.permissions.forEach(e => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      })\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoader(false)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n\r\n\r\n\r\n  // *For Handle Filter\r\n\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues('search')\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n  const handleDelete = async (item) => {\r\n \r\n\r\n    try {\r\n        let params = { customer_id: selectedData?.id }\r\n\r\n\r\n        const { message } = await CustomerServices.DeleteCategory(params)\r\n\r\n        SuccessToaster(message);\r\n        getCustomerQueue()\r\n    } catch (error) {\r\n        showErrorToast(error)\r\n    } finally {\r\n        // setLoader(false)\r\n    }\r\n}\r\n  const UpdateStatus = async () => {\r\n    try {\r\n      let obj = {\r\n        customer_id: selectedData?.id,\r\n        is_active: status?.id,\r\n      };\r\n\r\n      const promise = CustomerServices.CustomerStatus(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setStatusDialog(false);\r\n        setStatus(null)\r\n        getCustomerQueue();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const columns = [\r\n    {\r\n      header: \"SR No.\",\r\n      accessorKey: \"id\",\r\n\r\n\r\n    },\r\n    {\r\n      header: \"Customer\",\r\n      accessorKey: \"name\",\r\n\r\n\r\n    },\r\n    {\r\n        header: \"Arabic Name\",\r\n        accessorKey: \"name_ar\",\r\n  \r\n  \r\n      },\r\n  \r\n    {\r\n      header: \"Cost Center\",\r\n      accessorKey: \"cost_center\",\r\n\r\n\r\n    },\r\n    {\r\n      id: \"created_at\",\r\n      header: \"Registration Date\",\r\n      // Remove accessorKey and fix accessorFn to use row directly\r\n      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n      cell: ({ row }) => (\r\n        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n          {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n    \r\n    {\r\n      header: \"Actions\",\r\n      cell: ({ row }) => (\r\n\r\n        <Box sx={{display:'flex',gap:1}}>\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n          {/* <Box>\r\n            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n\r\n          \r\n          </Box> */}\r\n\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n  ]\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCustomerQueue()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n\r\n      <ConfirmationDialog\r\n        open={confirmationDialog}\r\n        onClose={() => setConfirmationDialog(false)}\r\n        message={\"Are You Sure?\"}\r\n        action={() => {\r\n          setConfirmationDialog(false);\r\n          handleDelete()\r\n\r\n        }}\r\n      />\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={\r\n\r\n                  [\r\n                    { id: false, name: \"Disabled\" },\r\n                    { id: true, name: \"Enabled\" },\r\n\r\n                  ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Service Category List</Typography>\r\n        {true && <PrimaryButton\r\n         bgcolor={'#bd9b4a'}\r\n          title=\"Create\"\r\n          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n          loading={loading}\r\n        />}\r\n\r\n\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box >\r\n\r\n\r\n        {<DataTable loading={loader} data={data} columns={columns} />}\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default BankList;"
        }
    ]
}