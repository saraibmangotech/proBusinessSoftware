{
    "sourceFile": "src/pages/Dashboard/PurchaseReceipt/CreatePurchaseReceipt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1744669229371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744669379791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,9 +410,9 @@\n                   alignItems: \"flex-end\",\r\n                 }}\r\n               >\r\n                 <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n-                  Sales Receipt\r\n+                  Purchase Receipt\r\n                 </Typography>\r\n               </Box>\r\n \r\n               <Box sx={{ p: 3 }}>\r\n"
                },
                {
                    "date": 1744669441231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,10 +482,10 @@\n \r\n                       <Grid item xs={5.7} >\r\n                         <SelectField\r\n                           size={'small'}\r\n-                          label={'Customer *:'}\r\n-                          disabled={true}\r\n+                          label={'Vendors *:'}\r\n+                         \r\n                           options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                           selected={selectedCustomer}\r\n                           onSelect={(value) => {\r\n                             setSelectedCustomer(value)\r\n"
                },
                {
                    "date": 1744669486157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -480,24 +480,27 @@\n                           }\r\n                         /></Grid>\r\n \r\n                       <Grid item xs={5.7} >\r\n-                        <SelectField\r\n-                          size={'small'}\r\n-                          label={'Vendors *:'}\r\n-                         \r\n-                          options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n-                          selected={selectedCustomer}\r\n-                          onSelect={(value) => {\r\n-                            setSelectedCustomer(value)\r\n+                      <SelectField\r\n+  size={'small'}\r\n+  label={'Vendors *:'}\r\n+  options={[\r\n+    { id: \"walkin\", name: \"Walk-in Customer\" },\r\n+    { id: \"amazon\", name: \"Amazon\" },\r\n+    { id: \"ebay\", name: \"eBay\" },\r\n+    { id: \"alibaba\", name: \"Alibaba\" }\r\n+  ]}\r\n+  selected={selectedCustomer}\r\n+  onSelect={(value) => {\r\n+    setSelectedCustomer(value);\r\n+  }}\r\n+  error={errors1?.customer?.message}\r\n+  register={register1(\"customer\", {\r\n+    required: false,\r\n+  })}\r\n+/>\r\n \r\n-\r\n-                          }}\r\n-                          error={errors1?.customer?.message}\r\n-                          register={register1(\"customer\", {\r\n-                            required: false,\r\n-                          })}\r\n-                        />\r\n                       </Grid>\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1744669491971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,26 @@\n import React, { useEffect, useRef, useState } from \"react\";\r\n import {\r\n-  Avatar,\r\n-  Box,\r\n-  Checkbox,\r\n-  Container,\r\n-  FormControlLabel,\r\n-  FormLabel,\r\n-  Grid,\r\n-  IconButton,\r\n-  InputLabel,\r\n-  Radio,\r\n-  RadioGroup,\r\n-  Table,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableRow,\r\n-  Typography,\r\n-  TableBody,\r\n-  TableHead,\r\n-  TextField,\r\n-  Paper,\r\n+    Avatar,\r\n+    Box,\r\n+    Checkbox,\r\n+    Container,\r\n+    FormControlLabel,\r\n+    FormLabel,\r\n+    Grid,\r\n+    IconButton,\r\n+    InputLabel,\r\n+    Radio,\r\n+    RadioGroup,\r\n+    Table,\r\n+    TableCell,\r\n+    TableContainer,\r\n+    TableRow,\r\n+    Typography,\r\n+    TableBody,\r\n+    TableHead,\r\n+    TextField,\r\n+    Paper,\r\n } from \"@mui/material\";\r\n import RegisterContainer from \"container/Register\";\r\n import { useTheme } from \"@mui/material/styles\";\r\n import MobileStepper from \"@mui/material/MobileStepper\";\r\n@@ -38,13 +38,13 @@\n import { FormControl } from \"@mui/base\";\r\n import LabelCustomInput from \"components/Input/LabelCustomInput\";\r\n import SelectField from \"components/Select\";\r\n import {\r\n-  CleanTypes,\r\n-  Debounce,\r\n-  Debounce2,\r\n-  getFileSize,\r\n-  handleDownload,\r\n+    CleanTypes,\r\n+    Debounce,\r\n+    Debounce2,\r\n+    getFileSize,\r\n+    handleDownload,\r\n } from \"utils\";\r\n import instance from \"config/axios\";\r\n import routes from \"services/System/routes\";\r\n import CustomerServices from \"services/Customer\";\r\n@@ -65,499 +65,499 @@\n import SearchIcon from \"@mui/icons-material/Search\";\r\n // import { TableBody, TableHead } from \"mui-datatables\";\r\n \r\n function CreatePurchaseReceipt() {\r\n-  const theme = useTheme();\r\n-  const { user } = useAuth();\r\n-  const navigate = useNavigate();\r\n-  const [formChange, setFormChange] = useState(false);\r\n-  const [submit, setSubmit] = useState(false);\r\n-  const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n-  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n-  const [total, setTotal] = useState(0);\r\n-  const [subTotal, setSubTotal] = useState(0);\r\n-  const [rows, setRows] = useState([]);\r\n+    const theme = useTheme();\r\n+    const { user } = useAuth();\r\n+    const navigate = useNavigate();\r\n+    const [formChange, setFormChange] = useState(false);\r\n+    const [submit, setSubmit] = useState(false);\r\n+    const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n+    const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n+    const [total, setTotal] = useState(0);\r\n+    const [subTotal, setSubTotal] = useState(0);\r\n+    const [rows, setRows] = useState([]);\r\n \r\n \r\n-  console.log(rows, \"data\")\r\n-  const [items, setItems] = useState([\r\n-    {\r\n-      itemCode: \"\",\r\n-      itemDescription: \"TASHEEL AUTO 19\",\r\n-      totalCharge: 17.1,\r\n-      mbNo: \"\",\r\n-      applicationId: \"\",\r\n-      total: 17.1,\r\n-    },\r\n-  ]);\r\n+    console.log(rows, \"data\")\r\n+    const [items, setItems] = useState([\r\n+        {\r\n+            itemCode: \"\",\r\n+            itemDescription: \"TASHEEL AUTO 19\",\r\n+            totalCharge: 17.1,\r\n+            mbNo: \"\",\r\n+            applicationId: \"\",\r\n+            total: 17.1,\r\n+        },\r\n+    ]);\r\n \r\n-  // const addItem = () => {\r\n-  //   const newItem = {\r\n-  //     itemCode: \"\",\r\n-  //     itemDescription: \"\",\r\n-  //     totalCharge: 0,\r\n-  //     mbNo: \"\",\r\n-  //     applicationId: \"\",\r\n-  //     total: 0,\r\n-  //   };\r\n-  //   setItems([...items, newItem]);\r\n-  // };\r\n+    // const addItem = () => {\r\n+    //   const newItem = {\r\n+    //     itemCode: \"\",\r\n+    //     itemDescription: \"\",\r\n+    //     totalCharge: 0,\r\n+    //     mbNo: \"\",\r\n+    //     applicationId: \"\",\r\n+    //     total: 0,\r\n+    //   };\r\n+    //   setItems([...items, newItem]);\r\n+    // };\r\n \r\n-  const {\r\n-    register,\r\n-    handleSubmit,\r\n-    getValues,\r\n-    setValue,\r\n-    watch,\r\n-    reset,\r\n-    formState: { errors },\r\n-  } = useForm();\r\n-  const {\r\n-    register: register1,\r\n-    handleSubmit: handleSubmit1,\r\n-    setValue: setValue1,\r\n-    getValues: getValues1,\r\n-    control,\r\n-    watch: watch1,\r\n-    formState: { errors: errors1 },\r\n-  } = useForm();\r\n+    const {\r\n+        register,\r\n+        handleSubmit,\r\n+        getValues,\r\n+        setValue,\r\n+        watch,\r\n+        reset,\r\n+        formState: { errors },\r\n+    } = useForm();\r\n+    const {\r\n+        register: register1,\r\n+        handleSubmit: handleSubmit1,\r\n+        setValue: setValue1,\r\n+        getValues: getValues1,\r\n+        control,\r\n+        watch: watch1,\r\n+        formState: { errors: errors1 },\r\n+    } = useForm();\r\n \r\n-  // Watch all form data\r\n+    // Watch all form data\r\n \r\n-  // Watch for changes in the fee-related fields\r\n-  const govtFee = watch('govt_fee', 0);\r\n-  const centerFee = watch('center_fee', 0);\r\n-  const bankCharges = watch('bank_charges', 0);\r\n-  const qty = watch('qty', 1);\r\n-  useEffect(() => {\r\n-    const feesTotal = (parseFloat(govtFee) || 0) + (parseFloat(centerFee) || 0) + (parseFloat(bankCharges) || 0);\r\n-    const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n-    setValue(\"total\", finalTotal);\r\n-  }, [govtFee, centerFee, bankCharges, qty]);\r\n+    // Watch for changes in the fee-related fields\r\n+    const govtFee = watch('govt_fee', 0);\r\n+    const centerFee = watch('center_fee', 0);\r\n+    const bankCharges = watch('bank_charges', 0);\r\n+    const qty = watch('qty', 1);\r\n+    useEffect(() => {\r\n+        const feesTotal = (parseFloat(govtFee) || 0) + (parseFloat(centerFee) || 0) + (parseFloat(bankCharges) || 0);\r\n+        const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n+        setValue(\"total\", finalTotal);\r\n+    }, [govtFee, centerFee, bankCharges, qty]);\r\n \r\n-  const addItem = (data) => {\r\n-    const total = data.total;\r\n-    setRows((prevRows) => {\r\n-      const updatedRows = [...prevRows, data];\r\n-      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n-      setSubTotal(newSubTotal);\r\n-      return updatedRows;\r\n-    });\r\n-    reset();\r\n-    setServiceItem(\"\")\r\n-  };\r\n-  const isFormDataEmpty = (data) => {\r\n-    // Check if all form fields are empty\r\n-    return Object.values(data).every((value) => {\r\n-      // If the value is an object (like companyLogo), check if it's empty\r\n-      if (typeof value === \"object\" && value !== null) {\r\n-        return Object.keys(value).length === 0;\r\n-      }\r\n-      // Otherwise, check if the value is an empty string\r\n-      return value === \"\";\r\n-    });\r\n-  };\r\n+    const addItem = (data) => {\r\n+        const total = data.total;\r\n+        setRows((prevRows) => {\r\n+            const updatedRows = [...prevRows, data];\r\n+            const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n+            setSubTotal(newSubTotal);\r\n+            return updatedRows;\r\n+        });\r\n+        reset();\r\n+        setServiceItem(\"\")\r\n+    };\r\n+    const isFormDataEmpty = (data) => {\r\n+        // Check if all form fields are empty\r\n+        return Object.values(data).every((value) => {\r\n+            // If the value is an object (like companyLogo), check if it's empty\r\n+            if (typeof value === \"object\" && value !== null) {\r\n+                return Object.keys(value).length === 0;\r\n+            }\r\n+            // Otherwise, check if the value is an empty string\r\n+            return value === \"\";\r\n+        });\r\n+    };\r\n \r\n-  const allowFilesType = [\r\n-    \"image/png\",\r\n-    \"image/jpg\",\r\n-    \"image/jpeg\",\r\n-    \"application/pdf\",\r\n-    \"application/vnd.ms-excel\",\r\n-    \"application/msword\",\r\n-    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n-  ];\r\n-  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n-  const [guarantors, setGuarantors] = useState([]);\r\n-  const [activeStep, setActiveStep] = React.useState(1);\r\n+    const allowFilesType = [\r\n+        \"image/png\",\r\n+        \"image/jpg\",\r\n+        \"image/jpeg\",\r\n+        \"application/pdf\",\r\n+        \"application/vnd.ms-excel\",\r\n+        \"application/msword\",\r\n+        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n+    ];\r\n+    const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n+    const [guarantors, setGuarantors] = useState([]);\r\n+    const [activeStep, setActiveStep] = React.useState(1);\r\n \r\n-  // *For Deposit Slip\r\n-  const [progress, setProgress] = useState(0);\r\n-  const [uploadedSize, setUploadedSize] = useState(0);\r\n-  const [slipDetail, setSlipDetail] = useState([]);\r\n+    // *For Deposit Slip\r\n+    const [progress, setProgress] = useState(0);\r\n+    const [uploadedSize, setUploadedSize] = useState(0);\r\n+    const [slipDetail, setSlipDetail] = useState([]);\r\n \r\n-  const [selectedDue, setSelectedDue] = useState({\r\n-    id: \"Instant\",\r\n-    name: \"Instant\",\r\n-  });\r\n-  const [passport, setPassport] = useState();\r\n-  const [allocation, setAllocation] = useState(false);\r\n-  const [depositError, setDepositError] = useState(false);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [emailVerify, setEmailVerify] = useState(false);\r\n-  const [isUploading, setIsUploading] = useState(false);\r\n-  const [loader, setLoader] = useState(false);\r\n-  const [fieldsDisabled, setFieldsDisabled] = useState({\r\n-    monthlyVisaServiceCharges: false,\r\n-    vipMedical: false,\r\n-    extraTyping: true,\r\n-  });\r\n+    const [selectedDue, setSelectedDue] = useState({\r\n+        id: \"Instant\",\r\n+        name: \"Instant\",\r\n+    });\r\n+    const [passport, setPassport] = useState();\r\n+    const [allocation, setAllocation] = useState(false);\r\n+    const [depositError, setDepositError] = useState(false);\r\n+    const [loading, setLoading] = useState(false);\r\n+    const [emailVerify, setEmailVerify] = useState(false);\r\n+    const [isUploading, setIsUploading] = useState(false);\r\n+    const [loader, setLoader] = useState(false);\r\n+    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n+        monthlyVisaServiceCharges: false,\r\n+        vipMedical: false,\r\n+        extraTyping: true,\r\n+    });\r\n \r\n-  const [center, setCenter] = useState(null);\r\n-  const [status, setStatus] = useState(null);\r\n+    const [center, setCenter] = useState(null);\r\n+    const [status, setStatus] = useState(null);\r\n \r\n-  // *For Stepper Forms Data\r\n-  const [stepFormData, setStepFormData] = useState();\r\n-  const [step1FormData, setStep1FormData] = useState();\r\n-  const [selectedType, setSelectedType] = useState(null);\r\n-  const [date, setDate] = useState(null);\r\n-  const [balanceType, setBalanceType] = useState(null);\r\n-  const [imageURL, setImageURL] = useState(null);\r\n-  const fileInputRef = useRef(null);\r\n-  const [hovered, setHovered] = useState(false);\r\n-  const [accounts, setAccounts] = useState([]);\r\n-  const [salesAccount, setSalesAccount] = useState(null);\r\n-  const [inventoryAccount, setInventoryAccount] = useState(null);\r\n-  const [cogsAccount, setCogsAccount] = useState(null);\r\n-  const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n-  const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n-  const [itemType, setItemType] = useState(null);\r\n-  const [unit, setUnit] = useState(null);\r\n-  const [taxes, setTaxes] = useState([]);\r\n-  const [tax, setTax] = useState(null);\r\n-  const [category, setCategory] = useState(null);\r\n-  const [categories, setCategories] = useState(null);\r\n-  const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n-  const [description, setDescription] = useState(null);\r\n-  const [ownGovBank, setOwnGovBank] = useState(null);\r\n-  const [services, setServices] = useState(null);\r\n-  const [serviceItem, setServiceItem] = useState(null);\r\n-  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n-  const [detail, setDetail] = useState(null)\r\n-  //documents array\r\n+    // *For Stepper Forms Data\r\n+    const [stepFormData, setStepFormData] = useState();\r\n+    const [step1FormData, setStep1FormData] = useState();\r\n+    const [selectedType, setSelectedType] = useState(null);\r\n+    const [date, setDate] = useState(null);\r\n+    const [balanceType, setBalanceType] = useState(null);\r\n+    const [imageURL, setImageURL] = useState(null);\r\n+    const fileInputRef = useRef(null);\r\n+    const [hovered, setHovered] = useState(false);\r\n+    const [accounts, setAccounts] = useState([]);\r\n+    const [salesAccount, setSalesAccount] = useState(null);\r\n+    const [inventoryAccount, setInventoryAccount] = useState(null);\r\n+    const [cogsAccount, setCogsAccount] = useState(null);\r\n+    const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n+    const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n+    const [itemType, setItemType] = useState(null);\r\n+    const [unit, setUnit] = useState(null);\r\n+    const [taxes, setTaxes] = useState([]);\r\n+    const [tax, setTax] = useState(null);\r\n+    const [category, setCategory] = useState(null);\r\n+    const [categories, setCategories] = useState(null);\r\n+    const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n+    const [description, setDescription] = useState(null);\r\n+    const [ownGovBank, setOwnGovBank] = useState(null);\r\n+    const [services, setServices] = useState(null);\r\n+    const [serviceItem, setServiceItem] = useState(null);\r\n+    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n+    const [detail, setDetail] = useState(null)\r\n+    //documents array\r\n \r\n-  const handleNext = () => {\r\n-    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n-  };\r\n+    const handleNext = () => {\r\n+        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n+    };\r\n \r\n-  const submitForm1 = async (formData) => {\r\n-    console.log(formData);\r\n-    try {\r\n-      let obj = {\r\n-        token_number: formData?.token,\r\n-        token_date: date,\r\n-        invoice_prefix: \"AAD\",\r\n-        cost_center:formData?.cost_center,\r\n-        customer_name: formData?.display_customer,\r\n-        reception_id: detail?.id,\r\n-        customer_mobile: formData?.mobile,\r\n-        customer_email: formData?.email,\r\n-        ref: formData?.ref,\r\n-        total_amount: subTotal,\r\n+    const submitForm1 = async (formData) => {\r\n+        console.log(formData);\r\n+        try {\r\n+            let obj = {\r\n+                token_number: formData?.token,\r\n+                token_date: date,\r\n+                invoice_prefix: \"AAD\",\r\n+                cost_center: formData?.cost_center,\r\n+                customer_name: formData?.display_customer,\r\n+                reception_id: detail?.id,\r\n+                customer_mobile: formData?.mobile,\r\n+                customer_email: formData?.email,\r\n+                ref: formData?.ref,\r\n+                total_amount: subTotal,\r\n \r\n-        items: rows\r\n-      };\r\n-      console.log(formData, \"formData\");\r\n-      const promise = CustomerServices.CreateSaleReceipt(obj);\r\n+                items: rows\r\n+            };\r\n+            console.log(formData, \"formData\");\r\n+            const promise = CustomerServices.CreateSaleReceipt(obj);\r\n \r\n-      showPromiseToast(\r\n-        promise,\r\n-        \"Saving...\",\r\n-        \"Added Successfully\",\r\n-        \"Something Went Wrong\"\r\n-      );\r\n-      const response = await promise;\r\n-      if (response?.responseCode === 200) {\r\n-        navigate(\"/pre-sales\");\r\n-      }\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    }\r\n-  };\r\n+            showPromiseToast(\r\n+                promise,\r\n+                \"Saving...\",\r\n+                \"Added Successfully\",\r\n+                \"Something Went Wrong\"\r\n+            );\r\n+            const response = await promise;\r\n+            if (response?.responseCode === 200) {\r\n+                navigate(\"/pre-sales\");\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        }\r\n+    };\r\n \r\n-  // *For Get Account\r\n-  const getReceptionDetail = async () => {\r\n-    try {\r\n-      let params = {\r\n-        token_number: getValues1(\"token\"),\r\n-      };\r\n-      const { data } = await CustomerServices.getReceptionDetail(params);\r\n-      console.log(data, \"dataaa\");\r\n-      setDetail(data?.token)\r\n-      setValue1(\"customer\", data?.token?.customer_name);\r\n-      setValue1(\"invoice_date\", moment().toDate());\r\n-      setValue1(\"mobile\", data?.token?.mobile);\r\n-      setValue1(\"ref\", data?.token?.reference);\r\n-      setValue1(\"display_customer\", data?.token?.customer_name);\r\n-      setValue1(\"email\", data?.token?.email);\r\n-      setValue1(\"address\", data?.token?.address);\r\n-      setValue1(\"trn\", data?.token?.trn);\r\n-      setValue1(\"cost_center\", data?.token?.cost_center);\r\n+    // *For Get Account\r\n+    const getReceptionDetail = async () => {\r\n+        try {\r\n+            let params = {\r\n+                token_number: getValues1(\"token\"),\r\n+            };\r\n+            const { data } = await CustomerServices.getReceptionDetail(params);\r\n+            console.log(data, \"dataaa\");\r\n+            setDetail(data?.token)\r\n+            setValue1(\"customer\", data?.token?.customer_name);\r\n+            setValue1(\"invoice_date\", moment().toDate());\r\n+            setValue1(\"mobile\", data?.token?.mobile);\r\n+            setValue1(\"ref\", data?.token?.reference);\r\n+            setValue1(\"display_customer\", data?.token?.customer_name);\r\n+            setValue1(\"email\", data?.token?.email);\r\n+            setValue1(\"address\", data?.token?.address);\r\n+            setValue1(\"trn\", data?.token?.trn);\r\n+            setValue1(\"cost_center\", data?.token?.cost_center);\r\n \r\n-      setAccounts(data?.accounts?.rows);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            setAccounts(data?.accounts?.rows);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  const getServiceItem = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+    const getServiceItem = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.getServiceItem(params);\r\n+            const { data } = await CustomerServices.getServiceItem(params);\r\n \r\n-      setServices(data?.rows);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n-  const handleServiceSelect = async (value) => {\r\n-    console.log(value, \"idididid\");\r\n-    setServiceItem(value);\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        service_id: value?.id,\r\n-      };\r\n+            setServices(data?.rows);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n+    const handleServiceSelect = async (value) => {\r\n+        console.log(value, \"idididid\");\r\n+        setServiceItem(value);\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                service_id: value?.id,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.DetailServiceItem(params);\r\n-      setValue(\"item_code\", data?.service?.id);\r\n-      setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n-      setValue(\"center_fee\", data?.service?.center_fee);\r\n-      setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n+            const { data } = await CustomerServices.DetailServiceItem(params);\r\n+            setValue(\"item_code\", data?.service?.id);\r\n+            setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n+            setValue(\"center_fee\", data?.service?.center_fee);\r\n+            setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n \r\n-      setValue(\"qty\", 1);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            setValue(\"qty\", 1);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  const getAccounts = async (page, limit, filter) => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+    const getAccounts = async (page, limit, filter) => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await FinanceServices.getAccounts(params);\r\n-      console.log(data?.accounts?.rows);\r\n+            const { data } = await FinanceServices.getAccounts(params);\r\n+            console.log(data?.accounts?.rows);\r\n \r\n-      setAccounts(data?.accounts?.rows);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n-  const getTax = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+            setAccounts(data?.accounts?.rows);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n+    const getTax = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await FinanceServices.getTax(params);\r\n-      console.log(data?.accounts?.rows);\r\n+            const { data } = await FinanceServices.getTax(params);\r\n+            console.log(data?.accounts?.rows);\r\n \r\n-      setTaxes(data?.tax);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n-  const getCategories = async () => {\r\n-    // setLoader(true)\r\n-    try {\r\n-      let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-      };\r\n+            setTaxes(data?.tax);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n+    const getCategories = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+            };\r\n \r\n-      const { data } = await CustomerServices.getCategoryList(params);\r\n+            const { data } = await CustomerServices.getCategoryList(params);\r\n \r\n-      setCategories(data?.categories);\r\n-    } catch (error) {\r\n-      ErrorToaster(error);\r\n-    } finally {\r\n-      // setLoader(false)\r\n-    }\r\n-  };\r\n+            setCategories(data?.categories);\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    };\r\n \r\n-  useEffect(() => {\r\n-    getAccounts();\r\n-    getTax();\r\n-    getCategories();\r\n-    getServiceItem();\r\n-    setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" })\r\n-    setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" })\r\n-  }, []);\r\n+    useEffect(() => {\r\n+        getAccounts();\r\n+        getTax();\r\n+        getCategories();\r\n+        getServiceItem();\r\n+        setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" })\r\n+        setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" })\r\n+    }, []);\r\n \r\n-  return (\r\n-    <>\r\n-      <Box sx={{ width: \"100%\" }}></Box>\r\n-      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n-        {\r\n-          <>\r\n-            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n-              <Box\r\n-                sx={{\r\n-                  display: \"flex\",\r\n-                  justifyContent: \"space-between\",\r\n-                  gap: \"10px\",\r\n-                  p: 3,\r\n-                  alignItems: \"flex-end\",\r\n-                }}\r\n-              >\r\n-                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n-                  Purchase Receipt\r\n-                </Typography>\r\n-              </Box>\r\n+    return (\r\n+        <>\r\n+            <Box sx={{ width: \"100%\" }}></Box>\r\n+            <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n+                {\r\n+                    <>\r\n+                        <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n+                            <Box\r\n+                                sx={{\r\n+                                    display: \"flex\",\r\n+                                    justifyContent: \"space-between\",\r\n+                                    gap: \"10px\",\r\n+                                    p: 3,\r\n+                                    alignItems: \"flex-end\",\r\n+                                }}\r\n+                            >\r\n+                                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n+                                    Purchase Receipt\r\n+                                </Typography>\r\n+                            </Box>\r\n \r\n-              <Box sx={{ p: 3 }}>\r\n-                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                  <Grid item xs={12}>\r\n-                    <Grid container>\r\n-                      <Grid item md={3} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Token\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Enter Token\"\r\n-                          register={register1(\"token\")}\r\n-                          InputProps={{\r\n-                            endAdornment: (\r\n-                              <IconButton onClick={getReceptionDetail}>\r\n-                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n-                              </IconButton>\r\n-                            ),\r\n-                          }}\r\n-                        />\r\n-                      </Grid>\r\n-                    </Grid>\r\n-                  </Grid>\r\n+                            <Box sx={{ p: 3 }}>\r\n+                                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                    <Grid item xs={12}>\r\n+                                        <Grid container>\r\n+                                            <Grid item md={3} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Token\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Enter Token\"\r\n+                                                    register={register1(\"token\")}\r\n+                                                    InputProps={{\r\n+                                                        endAdornment: (\r\n+                                                            <IconButton onClick={getReceptionDetail}>\r\n+                                                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n+                                                            </IconButton>\r\n+                                                        ),\r\n+                                                    }}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n \r\n-                  <Grid\r\n-                    item\r\n-                    md={5.5}\r\n-                    sm={12}\r\n-                    xs={12}\r\n-                    sx={{\r\n-                      border: \"2px solid black\",\r\n-                      p: 2,\r\n-                      borderRadius: \"15px\",\r\n-                    }}\r\n-                  >\r\n-                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Invoice No\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"TSL/83540\"\r\n-                          register={register1(\"invoice_no\")}\r\n-                        />\r\n-                      </Grid>\r\n-                      <Grid item xs={5.7}>\r\n-                        <DatePicker\r\n-                          label={\"Invoice Date :*\"}\r\n-                          value={date}\r\n-                          size={'small'}\r\n+                                    <Grid\r\n+                                        item\r\n+                                        md={5.5}\r\n+                                        sm={12}\r\n+                                        xs={12}\r\n+                                        sx={{\r\n+                                            border: \"2px solid black\",\r\n+                                            p: 2,\r\n+                                            borderRadius: \"15px\",\r\n+                                        }}\r\n+                                    >\r\n+                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Invoice No\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"TSL/83540\"\r\n+                                                    register={register1(\"invoice_no\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            <Grid item xs={5.7}>\r\n+                                                <DatePicker\r\n+                                                    label={\"Invoice Date :*\"}\r\n+                                                    value={date}\r\n+                                                    size={'small'}\r\n \r\n-                          error={errors1?.date?.message}\r\n-                          register={register1(\"date\", {\r\n-                            required:\r\n-                              date ? false :\r\n-                                \"please enter  date.\"\r\n+                                                    error={errors1?.date?.message}\r\n+                                                    register={register1(\"date\", {\r\n+                                                        required:\r\n+                                                            date ? false :\r\n+                                                                \"please enter  date.\"\r\n \r\n-                          })}\r\n-                          onChange={(date) => {\r\n+                                                    })}\r\n+                                                    onChange={(date) => {\r\n \r\n-                            setValue1('date', date)\r\n-                            setDate(new Date(date));\r\n+                                                        setValue1('date', date)\r\n+                                                        setDate(new Date(date));\r\n \r\n-                          }\r\n+                                                    }\r\n \r\n-                          }\r\n-                        /></Grid>\r\n+                                                    }\r\n+                                                /></Grid>\r\n \r\n-                      <Grid item xs={5.7} >\r\n-                      <SelectField\r\n-  size={'small'}\r\n-  label={'Vendors *:'}\r\n-  options={[\r\n-    { id: \"walkin\", name: \"Walk-in Customer\" },\r\n-    { id: \"amazon\", name: \"Amazon\" },\r\n-    { id: \"ebay\", name: \"eBay\" },\r\n-    { id: \"alibaba\", name: \"Alibaba\" }\r\n-  ]}\r\n-  selected={selectedCustomer}\r\n-  onSelect={(value) => {\r\n-    setSelectedCustomer(value);\r\n-  }}\r\n-  error={errors1?.customer?.message}\r\n-  register={register1(\"customer\", {\r\n-    required: false,\r\n-  })}\r\n-/>\r\n+                                            <Grid item xs={5.7} >\r\n+                                                <SelectField\r\n+                                                    size={'small'}\r\n+                                                    label={'Vendors *:'}\r\n+                                                    options={[\r\n+                                                     \r\n+                                                        { id: \"amazon\", name: \"Amazon\" },\r\n+                                                        { id: \"ebay\", name: \"eBay\" },\r\n+                                                        { id: \"alibaba\", name: \"Alibaba\" }\r\n+                                                    ]}\r\n+                                                    selected={selectedCustomer}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setSelectedCustomer(value);\r\n+                                                    }}\r\n+                                                    error={errors1?.customer?.message}\r\n+                                                    register={register1(\"customer\", {\r\n+                                                        required: false,\r\n+                                                    })}\r\n+                                                />\r\n \r\n-                      </Grid>\r\n+                                            </Grid>\r\n \r\n \r\n \r\n-                    </Grid>\r\n-                  </Grid>\r\n-                  <Grid\r\n-                    item\r\n-                    md={5.5}\r\n-                    sm={12}\r\n-                    xs={12}\r\n-                    sx={{\r\n-                      border: \"2px solid black\",\r\n-                      p: 2,\r\n-                      borderRadius: \"15px\",\r\n-                      mt: { md: 0, sm: 2, xs: 2 },\r\n-                    }}\r\n-                  >\r\n-                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Display Customer\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Walk-in Customer\"\r\n-                          register={register1(\"display_customer\", {\r\n-                            required: 'please enter display name.'\r\n-                          })}\r\n-                          error={errors1?.display_customer?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n+                                    <Grid\r\n+                                        item\r\n+                                        md={5.5}\r\n+                                        sm={12}\r\n+                                        xs={12}\r\n+                                        sx={{\r\n+                                            border: \"2px solid black\",\r\n+                                            p: 2,\r\n+                                            borderRadius: \"15px\",\r\n+                                            mt: { md: 0, sm: 2, xs: 2 },\r\n+                                        }}\r\n+                                    >\r\n+                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Display Customer\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Walk-in Customer\"\r\n+                                                    register={register1(\"display_customer\", {\r\n+                                                        required: 'please enter display name.'\r\n+                                                    })}\r\n+                                                    error={errors1?.display_customer?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Mobile\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Mobile No\"\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Mobile\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Mobile No\"\r\n \r\n-                          register={register1(\"mobile\", {\r\n-                            required: 'please enter mobile .'\r\n-                          })}\r\n-                          error={errors1?.display_customer?.message}\r\n-                        />\r\n-                      </Grid>\r\n+                                                    register={register1(\"mobile\", {\r\n+                                                        required: 'please enter mobile .'\r\n+                                                    })}\r\n+                                                    error={errors1?.display_customer?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Email\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Email\"\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Email\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Email\"\r\n \r\n-                          register={register1(\"email\", {\r\n-                            required: 'please enter email .'\r\n-                          })}\r\n-                          error={errors1?.email?.message}\r\n-                        />\r\n-                      </Grid>\r\n-{/* \r\n+                                                    register={register1(\"email\", {\r\n+                                                        required: 'please enter email .'\r\n+                                                    })}\r\n+                                                    error={errors1?.email?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                            {/* \r\n                       <Grid item md={5.7} sm={12} xs={12}>\r\n                         <InputField\r\n                           label=\"TRN\"\r\n                           size=\"small\"\r\n@@ -570,18 +570,18 @@\n                           error={errors1?.trn?.message}\r\n                         />\r\n                       </Grid> */}\r\n \r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Ref\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Reference\"\r\n-                          register={register1(\"ref\")}\r\n-                        />\r\n-                      </Grid>\r\n-                     \r\n-                      {/* <Grid item md={5.7} sm={12} xs={12}>\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Ref\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Reference\"\r\n+                                                    register={register1(\"ref\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            {/* <Grid item md={5.7} sm={12} xs={12}>\r\n                         <SelectField\r\n                           label=\"Cost Center\"\r\n                           size=\"small\"\r\n                           options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n@@ -593,194 +593,194 @@\n                           })}\r\n                           error={errors1?.cost_center?.message}\r\n                         />\r\n                       </Grid> */}\r\n-                      <Grid item md={5.7} sm={12} xs={12}>\r\n-                        <InputField\r\n-                          label=\"Address\"\r\n-                          size=\"small\"\r\n-                          placeholder=\"Address\"\r\n-                          multiline\r\n-                          rows={2}\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Address\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Address\"\r\n+                                                    multiline\r\n+                                                    rows={2}\r\n \r\n-                          register={register1(\"address\", {\r\n-                            required: 'please enter address .'\r\n-                          })}\r\n-                          error={errors1?.address?.message}\r\n-                        />\r\n-                      </Grid>\r\n-                    </Grid>\r\n-                  </Grid>\r\n+                                                    register={register1(\"address\", {\r\n+                                                        required: 'please enter address .'\r\n+                                                    })}\r\n+                                                    error={errors1?.address?.message}\r\n+                                                />\r\n+                                            </Grid>\r\n+                                        </Grid>\r\n+                                    </Grid>\r\n \r\n-                  {/* </Grid> */}\r\n-                  <Grid item xs={12} display={'flex'} justifyContent={'flex-end'}>\r\n-                    <Button\r\n-                      type=\"submit\"\r\n-                      disabled={rows?.length == 0}\r\n-                      variant=\"contained\"\r\n-                      sx={{\r\n-                        textTransform: 'capitalize',\r\n-                        backgroundColor: \"#bd9b4a\",\r\n-                        \":hover\": {\r\n-                          backgroundColor: \"rgb(189 155 74)\",\r\n-                        },\r\n-                      }}\r\n-                    >\r\n-                      Create\r\n-                    </Button>\r\n-                  </Grid>\r\n-                </Grid>\r\n-              </Box>\r\n-            </Box>\r\n+                                    {/* </Grid> */}\r\n+                                    <Grid item xs={12} display={'flex'} justifyContent={'flex-end'}>\r\n+                                        <Button\r\n+                                            type=\"submit\"\r\n+                                            disabled={rows?.length == 0}\r\n+                                            variant=\"contained\"\r\n+                                            sx={{\r\n+                                                textTransform: 'capitalize',\r\n+                                                backgroundColor: \"#bd9b4a\",\r\n+                                                \":hover\": {\r\n+                                                    backgroundColor: \"rgb(189 155 74)\",\r\n+                                                },\r\n+                                            }}\r\n+                                        >\r\n+                                            Create\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            </Box>\r\n+                        </Box>\r\n \r\n \r\n-            <form onSubmit={handleSubmit(addItem)}>\r\n-              <TableContainer component={Paper}>\r\n-                <Table>\r\n-                  <TableHead>\r\n-                    <TableRow>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n-                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                        <form onSubmit={handleSubmit(addItem)}>\r\n+                            <TableContainer component={Paper}>\r\n+                                <Table>\r\n+                                    <TableHead>\r\n+                                        <TableRow>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n+                                            <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n \r\n-                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n-                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n-                    </TableRow>\r\n-                  </TableHead>\r\n-                  <TableBody>\r\n-                    <TableRow>\r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          size=\"small\"\r\n-                          disabled={true}\r\n-                          placeholder=\"Item code\"\r\n-                          register={register(\"item_code\", { required: \"Item code is required\" })}\r\n-                        />\r\n-                        {errors.item_code && <span>{errors.item_code.message}</span>}\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <SelectField\r\n-                          size=\"small\"\r\n-                          options={services}\r\n-                          selected={serviceItem}\r\n-                          onSelect={handleServiceSelect}\r\n-                          //  error={errors?.service?.message}\r\n-                          register={register(\"service\", {\r\n-                            required: \"Please select a service.\",\r\n-                          })}\r\n-                        />\r\n-                        {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          size=\"small\"\r\n-                          placeholder=\"Quantity\"\r\n-                          type=\"number\"\r\n-                          register={register(\"qty\", { required: \"Quantity is required\" })}\r\n-                        />\r\n-                        {errors.qty && <span style={{ color: \"red\" }}>{errors.qty.message}</span>}\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          size=\"small\"\r\n-                          placeholder=\"Govt fee\"\r\n-                          type=\"number\"\r\n-                          register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n-                        />\r\n-                        {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          size=\"small\"\r\n-                          placeholder=\"Center Fee\"\r\n-                          type=\"number\"\r\n-                          register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n-                        />\r\n-                        {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          size=\"small\"\r\n-                          placeholder=\"Bank Charges\"\r\n-                          type=\"number\"\r\n-                          register={register(\"bank_charges\", { required: \"Bank charges are required\" })}\r\n-                          disabled\r\n-                        />\r\n-                        {errors.bank_charges && <span style={{ color: \"red\" }}>{errors.bank_charges.message}</span>}\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n+                                        </TableRow>\r\n+                                    </TableHead>\r\n+                                    <TableBody>\r\n+                                        <TableRow>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    disabled={true}\r\n+                                                    placeholder=\"Item code\"\r\n+                                                    register={register(\"item_code\", { required: \"Item code is required\" })}\r\n+                                                />\r\n+                                                {errors.item_code && <span>{errors.item_code.message}</span>}\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <SelectField\r\n+                                                    size=\"small\"\r\n+                                                    options={services}\r\n+                                                    selected={serviceItem}\r\n+                                                    onSelect={handleServiceSelect}\r\n+                                                    //  error={errors?.service?.message}\r\n+                                                    register={register(\"service\", {\r\n+                                                        required: \"Please select a service.\",\r\n+                                                    })}\r\n+                                                />\r\n+                                                {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Quantity\"\r\n+                                                    type=\"number\"\r\n+                                                    register={register(\"qty\", { required: \"Quantity is required\" })}\r\n+                                                />\r\n+                                                {errors.qty && <span style={{ color: \"red\" }}>{errors.qty.message}</span>}\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Govt fee\"\r\n+                                                    type=\"number\"\r\n+                                                    register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n+                                                />\r\n+                                                {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Center Fee\"\r\n+                                                    type=\"number\"\r\n+                                                    register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n+                                                />\r\n+                                                {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Bank Charges\"\r\n+                                                    type=\"number\"\r\n+                                                    register={register(\"bank_charges\", { required: \"Bank charges are required\" })}\r\n+                                                    disabled\r\n+                                                />\r\n+                                                {errors.bank_charges && <span style={{ color: \"red\" }}>{errors.bank_charges.message}</span>}\r\n \r\n-                      </TableCell>\r\n+                                            </TableCell>\r\n \r\n-                      <TableCell>\r\n-                        <InputField\r\n-                          disabled={true}\r\n-                          style={{ border: \"none\" }}\r\n-                          size=\"small\"\r\n-                          placeholder=\"Narration\"\r\n-                          register={register(\"total\")}\r\n-                        />\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Button\r\n-                          variant=\"contained\"\r\n-                          color=\"primary\"\r\n-                          type=\"submit\"\r\n-                          sx={{\r\n-                            textTransform: 'capitalize',\r\n-                            backgroundColor: \"rgb(189 155 74)\",\r\n-                            fontSize: \"12px\",\r\n-                            \":hover\": {\r\n-                              backgroundColor: \"rgb(189 155 74)\",\r\n-                            },\r\n-                          }}\r\n-                        >\r\n-                          Add Item\r\n-                        </Button>\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    disabled={true}\r\n+                                                    style={{ border: \"none\" }}\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Narration\"\r\n+                                                    register={register(\"total\")}\r\n+                                                />\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <Button\r\n+                                                    variant=\"contained\"\r\n+                                                    color=\"primary\"\r\n+                                                    type=\"submit\"\r\n+                                                    sx={{\r\n+                                                        textTransform: 'capitalize',\r\n+                                                        backgroundColor: \"rgb(189 155 74)\",\r\n+                                                        fontSize: \"12px\",\r\n+                                                        \":hover\": {\r\n+                                                            backgroundColor: \"rgb(189 155 74)\",\r\n+                                                        },\r\n+                                                    }}\r\n+                                                >\r\n+                                                    Add Item\r\n+                                                </Button>\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n \r\n-                    {rows.map((item, index) => (\r\n-                      <TableRow key={index}>\r\n-                        <TableCell>{item?.item_code}</TableCell>\r\n-                        <TableCell>{item?.service}</TableCell>\r\n-                        <TableCell>{item?.qty}</TableCell>\r\n-                        <TableCell>{item?.govt_fee}</TableCell>\r\n-                        <TableCell>{item?.center_fee}</TableCell>\r\n-                        <TableCell>{item?.bank_charges}</TableCell>\r\n+                                        {rows.map((item, index) => (\r\n+                                            <TableRow key={index}>\r\n+                                                <TableCell>{item?.item_code}</TableCell>\r\n+                                                <TableCell>{item?.service}</TableCell>\r\n+                                                <TableCell>{item?.qty}</TableCell>\r\n+                                                <TableCell>{item?.govt_fee}</TableCell>\r\n+                                                <TableCell>{item?.center_fee}</TableCell>\r\n+                                                <TableCell>{item?.bank_charges}</TableCell>\r\n \r\n-                        <TableCell>{item?.total}</TableCell>\r\n+                                                <TableCell>{item?.total}</TableCell>\r\n \r\n-                      </TableRow>\r\n-                    ))}\r\n+                                            </TableRow>\r\n+                                        ))}\r\n \r\n-                    <TableRow>\r\n-                      <TableCell colSpan={7} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={7} align=\"right\">\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n \r\n-                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n-                    <TableRow>\r\n-                      <TableCell colSpan={7} align=\"right\">\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n-                      </TableCell>\r\n-                      <TableCell>\r\n-                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n-                      </TableCell>\r\n-                    </TableRow>\r\n-                  </TableBody>\r\n-                </Table>\r\n-              </TableContainer>\r\n-            </form>\r\n-          </>\r\n-        }\r\n-      </Box>\r\n-    </>\r\n-  );\r\n+                                        {/* Amount Total Row (optional, if needed for the final sum) */}\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={7} align=\"right\">\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n+                                    </TableBody>\r\n+                                </Table>\r\n+                            </TableContainer>\r\n+                        </form>\r\n+                    </>\r\n+                }\r\n+            </Box>\r\n+        </>\r\n+    );\r\n }\r\n \r\n export default CreatePurchaseReceipt;\r\n"
                },
                {
                    "date": 1744670389189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,12 +128,14 @@\n     const centerFee = watch('center_fee', 0);\r\n     const bankCharges = watch('bank_charges', 0);\r\n     const qty = watch('qty', 1);\r\n     useEffect(() => {\r\n+        const discount = watch('discount') || 0;\r\n         const feesTotal = (parseFloat(govtFee) || 0) + (parseFloat(centerFee) || 0) + (parseFloat(bankCharges) || 0);\r\n-        const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n-        setValue(\"total\", finalTotal);\r\n-    }, [govtFee, centerFee, bankCharges, qty]);\r\n+        const discountedTotal = feesTotal - parseFloat(discount);\r\n+        const finalTotal = discountedTotal * (parseFloat(qty) || 1);\r\n+        setValue(\"total\", finalTotal > 0 ? finalTotal : 0);\r\n+    }, [govtFee, centerFee, bankCharges, qty, watch('discount')]);\r\n \r\n     const addItem = (data) => {\r\n         const total = data.total;\r\n         setRows((prevRows) => {\r\n@@ -242,9 +244,13 @@\n                 customer_mobile: formData?.mobile,\r\n                 customer_email: formData?.email,\r\n                 ref: formData?.ref,\r\n                 total_amount: subTotal,\r\n-\r\n+                due_date: formData?.due_date,\r\n+                payment_method: formData?.payment_method?.id,\r\n+                po_number: formData?.po_number,\r\n+                payment_status: formData?.payment_status?.id,\r\n+                notes: formData?.notes,\r\n                 items: rows\r\n             };\r\n             console.log(formData, \"formData\");\r\n             const promise = CustomerServices.CreateSaleReceipt(obj);\r\n@@ -478,15 +484,43 @@\n                                                     }\r\n \r\n                                                     }\r\n                                                 /></Grid>\r\n+                                            <Grid item xs={5.7}>\r\n+                                                <DatePicker\r\n+                                                    label={\"Due Date :\"}\r\n+                                                    size={'small'}\r\n+                                                    register={register1(\"due_date\")}\r\n+                                                    onChange={(date) => {\r\n+                                                        setValue1('due_date', date)\r\n+                                                    }}\r\n+                                                />\r\n+                                            </Grid>\r\n \r\n+                                            <Grid item xs={5.7}>\r\n+                                                <SelectField\r\n+                                                    size={'small'}\r\n+                                                    label={'Payment Method:'}\r\n+                                                    options={[\r\n+                                                        { id: \"cash\", name: \"Cash\" },\r\n+                                                        { id: \"bank_transfer\", name: \"Bank Transfer\" },\r\n+                                                        { id: \"credit_card\", name: \"Credit Card\" },\r\n+                                                        { id: \"check\", name: \"Check\" }\r\n+                                                    ]}\r\n+                                                    selected={watch1(\"payment_method\")}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setValue1(\"payment_method\", value);\r\n+                                                    }}\r\n+                                                    register={register1(\"payment_method\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n                                             <Grid item xs={5.7} >\r\n                                                 <SelectField\r\n                                                     size={'small'}\r\n                                                     label={'Vendors *:'}\r\n                                                     options={[\r\n-                                                     \r\n+\r\n                                                         { id: \"amazon\", name: \"Amazon\" },\r\n                                                         { id: \"ebay\", name: \"eBay\" },\r\n                                                         { id: \"alibaba\", name: \"Alibaba\" }\r\n                                                     ]}\r\n@@ -607,8 +641,33 @@\n                                                     })}\r\n                                                     error={errors1?.address?.message}\r\n                                                 />\r\n                                             </Grid>\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <InputField\r\n+                                                    label=\"Purchase Order #\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"PO Number\"\r\n+                                                    register={register1(\"po_number\")}\r\n+                                                />\r\n+                                            </Grid>\r\n+\r\n+                                            <Grid item md={5.7} sm={12} xs={12}>\r\n+                                                <SelectField\r\n+                                                    size={'small'}\r\n+                                                    label={'Payment Status:'}\r\n+                                                    options={[\r\n+                                                        { id: \"paid\", name: \"Paid\" },\r\n+                                                        { id: \"unpaid\", name: \"Unpaid\" },\r\n+                                                        { id: \"partial\", name: \"Partially Paid\" }\r\n+                                                    ]}\r\n+                                                    selected={watch1(\"payment_status\")}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setValue1(\"payment_status\", value);\r\n+                                                    }}\r\n+                                                    register={register1(\"payment_status\")}\r\n+                                                />\r\n+                                            </Grid>\r\n                                         </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* </Grid> */}\r\n@@ -643,8 +702,10 @@\n                                             <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                                             <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                                             <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                                             <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Discount</TableCell>\r\n+                                            <TableCell sx={{ width: \"150px\" }}>Tax</TableCell>\r\n \r\n                                             <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                                             <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                                         </TableRow>\r\n@@ -710,8 +771,28 @@\n                                                 />\r\n                                                 {errors.bank_charges && <span style={{ color: \"red\" }}>{errors.bank_charges.message}</span>}\r\n \r\n                                             </TableCell>\r\n+                                            <TableCell>\r\n+                                                <InputField\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Discount\"\r\n+                                                    type=\"number\"\r\n+                                                    register={register(\"discount\")}\r\n+                                                />\r\n+                                            </TableCell>\r\n+                                            <TableCell>\r\n+                                                <SelectField\r\n+                                                    size=\"small\"\r\n+                                                    options={taxes || []}\r\n+                                                    selected={tax}\r\n+                                                    onSelect={(value) => {\r\n+                                                        setTax(value);\r\n+                                                        setValue(\"tax\", value?.id);\r\n+                                                    }}\r\n+                                                    register={register(\"tax\")}\r\n+                                                />\r\n+                                            </TableCell>\r\n \r\n                                             <TableCell>\r\n                                                 <InputField\r\n                                                     disabled={true}\r\n@@ -747,16 +828,30 @@\n                                                 <TableCell>{item?.qty}</TableCell>\r\n                                                 <TableCell>{item?.govt_fee}</TableCell>\r\n                                                 <TableCell>{item?.center_fee}</TableCell>\r\n                                                 <TableCell>{item?.bank_charges}</TableCell>\r\n+                                                <TableCell>{item?.discount}</TableCell>\r\n+                                                <TableCell>{item?.tax}</TableCell>\r\n \r\n                                                 <TableCell>{item?.total}</TableCell>\r\n \r\n                                             </TableRow>\r\n                                         ))}\r\n+                                        <TableRow>\r\n+                                            <TableCell colSpan={8} align=\"left\">\r\n+                                                <InputField\r\n+                                                    label=\"Notes\"\r\n+                                                    size=\"small\"\r\n+                                                    placeholder=\"Add notes about this purchase\"\r\n+                                                    multiline\r\n+                                                    rows={2}\r\n+                                                    register={register1(\"notes\")}\r\n+                                                />\r\n+                                            </TableCell>\r\n+                                        </TableRow>\r\n \r\n                                         <TableRow>\r\n-                                            <TableCell colSpan={7} align=\"right\">\r\n+                                            <TableCell colSpan={9} align=\"right\">\r\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n                                             </TableCell>\r\n                                             <TableCell>\r\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n@@ -764,9 +859,9 @@\n                                         </TableRow>\r\n \r\n                                         {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                                         <TableRow>\r\n-                                            <TableCell colSpan={7} align=\"right\">\r\n+                                            <TableCell colSpan={9} align=\"right\">\r\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n                                             </TableCell>\r\n                                             <TableCell>\r\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n"
                },
                {
                    "date": 1744670431632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,10 +395,9 @@\n         getAccounts();\r\n         getTax();\r\n         getCategories();\r\n         getServiceItem();\r\n-        setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" })\r\n-        setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" })\r\n+    \r\n     }, []);\r\n \r\n     return (\r\n         <>\r\n"
                },
                {
                    "date": 1744670533115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -421,27 +421,9 @@\n                             </Box>\r\n \r\n                             <Box sx={{ p: 3 }}>\r\n                                 <Grid container sx={{ gap: \"5px 25px\" }}>\r\n-                                    <Grid item xs={12}>\r\n-                                        <Grid container>\r\n-                                            <Grid item md={3} sm={12} xs={12}>\r\n-                                                <InputField\r\n-                                                    label=\"Token\"\r\n-                                                    size=\"small\"\r\n-                                                    placeholder=\"Enter Token\"\r\n-                                                    register={register1(\"token\")}\r\n-                                                    InputProps={{\r\n-                                                        endAdornment: (\r\n-                                                            <IconButton onClick={getReceptionDetail}>\r\n-                                                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n-                                                            </IconButton>\r\n-                                                        ),\r\n-                                                    }}\r\n-                                                />\r\n-                                            </Grid>\r\n-                                        </Grid>\r\n-                                    </Grid>\r\n+                                    \r\n \r\n                                     <Grid\r\n                                         item\r\n                                         md={5.5}\r\n"
                },
                {
                    "date": 1744670591981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -664,9 +664,9 @@\n                                                     backgroundColor: \"rgb(189 155 74)\",\r\n                                                 },\r\n                                             }}\r\n                                         >\r\n-                                            Create\r\n+                                            Place Purcahse\r\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Box>\r\n"
                },
                {
                    "date": 1744670601367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,24 +651,9 @@\n                                         </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* </Grid> */}\r\n-                                    <Grid item xs={12} display={'flex'} justifyContent={'flex-end'}>\r\n-                                        <Button\r\n-                                            type=\"submit\"\r\n-                                            disabled={rows?.length == 0}\r\n-                                            variant=\"contained\"\r\n-                                            sx={{\r\n-                                                textTransform: 'capitalize',\r\n-                                                backgroundColor: \"#bd9b4a\",\r\n-                                                \":hover\": {\r\n-                                                    backgroundColor: \"rgb(189 155 74)\",\r\n-                                                },\r\n-                                            }}\r\n-                                        >\r\n-                                            Place Purcahse\r\n-                                        </Button>\r\n-                                    </Grid>\r\n+                                    \r\n                                 </Grid>\r\n                             </Box>\r\n                         </Box>\r\n \r\n"
                },
                {
                    "date": 1744670649025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -832,8 +832,44 @@\n                                             <TableCell>\r\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n                                             </TableCell>\r\n                                         </TableRow>\r\n+                                           <TableRow>\r\n+                                                                                    <TableCell colSpan={8} align=\"center\"> {/* adjust colSpan to match total columns */}\r\n+                                                                                        <Box sx={{display:'flex',gap:2,justifyContent:'center'}}>\r\n+                                                                                        <Button\r\n+                                                                                            type=\"submit\"\r\n+                                                                                            disabled={rows?.length === 0}\r\n+                                                                                            variant=\"contained\"\r\n+                                                                                            sx={{\r\n+                                                                                                width:'350px',\r\n+                                                                                                textTransform: 'capitalize',\r\n+                                                                                                backgroundColor: \"#bd9b4a\",\r\n+                                                                                                \":hover\": {\r\n+                                                                                                    backgroundColor: \"rgb(189 155 74)\",\r\n+                                                                                                },\r\n+                                                                                            }}\r\n+                                                                                        >\r\n+                                                                                            Place Purchase\r\n+                                                                                        </Button>\r\n+                                                                                        <Button\r\n+                                                                                           onClick={()=> navigate('/aldeed-list')}\r\n+                                                                                            \r\n+                                                                                            variant=\"contained\"\r\n+                                                                                            sx={{\r\n+                                                                                                width:'350px',\r\n+                                                                                                textTransform: 'capitalize',\r\n+                                                                                                backgroundColor: \"#bd9b4a\",\r\n+                                                                                                \":hover\": {\r\n+                                                                                                    backgroundColor: \"rgb(189 155 74)\",\r\n+                                                                                                },\r\n+                                                                                            }}\r\n+                                                                                        >\r\n+                                                                                            Cancel\r\n+                                                                                        </Button>\r\n+                                                                                        </Box>\r\n+                                                                                    </TableCell>\r\n+                                                                                </TableRow>\r\n                                     </TableBody>\r\n                                 </Table>\r\n                             </TableContainer>\r\n                         </form>\r\n"
                },
                {
                    "date": 1744670680856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -833,9 +833,9 @@\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n                                             </TableCell>\r\n                                         </TableRow>\r\n                                            <TableRow>\r\n-                                                                                    <TableCell colSpan={8} align=\"center\"> {/* adjust colSpan to match total columns */}\r\n+                                                                                    <TableCell colSpan={9} align=\"center\"> {/* adjust colSpan to match total columns */}\r\n                                                                                         <Box sx={{display:'flex',gap:2,justifyContent:'center'}}>\r\n                                                                                         <Button\r\n                                                                                             type=\"submit\"\r\n                                                                                             disabled={rows?.length === 0}\r\n"
                },
                {
                    "date": 1744670702857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -833,9 +833,9 @@\n                                                 <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n                                             </TableCell>\r\n                                         </TableRow>\r\n                                            <TableRow>\r\n-                                                                                    <TableCell colSpan={9} align=\"center\"> {/* adjust colSpan to match total columns */}\r\n+                                                                                    <TableCell colSpan={10} align=\"center\"> {/* adjust colSpan to match total columns */}\r\n                                                                                         <Box sx={{display:'flex',gap:2,justifyContent:'center'}}>\r\n                                                                                         <Button\r\n                                                                                             type=\"submit\"\r\n                                                                                             disabled={rows?.length === 0}\r\n"
                }
            ],
            "date": 1744669229371,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Checkbox,\r\n  Container,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  Radio,\r\n  RadioGroup,\r\n  Table,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Typography,\r\n  TableBody,\r\n  TableHead,\r\n  TextField,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport RegisterContainer from \"container/Register\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport MobileStepper from \"@mui/material/MobileStepper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport InputField from \"components/Input\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport { ErrorToaster } from \"components/Toaster\";\r\nimport { FormControl } from \"@mui/base\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport SelectField from \"components/Select\";\r\nimport {\r\n  CleanTypes,\r\n  Debounce,\r\n  Debounce2,\r\n  getFileSize,\r\n  handleDownload,\r\n} from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport CustomerService from \"../DashboardPages/CustomerService\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport moment from \"moment\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { Images } from \"assets\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\nimport { addMonths } from \"date-fns\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport DoDisturbIcon from \"@mui/icons-material/DoDisturb\";\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n// import { TableBody, TableHead } from \"mui-datatables\";\r\n\r\nfunction CreatePurchaseReceipt() {\r\n  const theme = useTheme();\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [formChange, setFormChange] = useState(false);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n  const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n  const [total, setTotal] = useState(0);\r\n  const [subTotal, setSubTotal] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n\r\n\r\n  console.log(rows, \"data\")\r\n  const [items, setItems] = useState([\r\n    {\r\n      itemCode: \"\",\r\n      itemDescription: \"TASHEEL AUTO 19\",\r\n      totalCharge: 17.1,\r\n      mbNo: \"\",\r\n      applicationId: \"\",\r\n      total: 17.1,\r\n    },\r\n  ]);\r\n\r\n  // const addItem = () => {\r\n  //   const newItem = {\r\n  //     itemCode: \"\",\r\n  //     itemDescription: \"\",\r\n  //     totalCharge: 0,\r\n  //     mbNo: \"\",\r\n  //     applicationId: \"\",\r\n  //     total: 0,\r\n  //   };\r\n  //   setItems([...items, newItem]);\r\n  // };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    watch,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    control,\r\n    watch: watch1,\r\n    formState: { errors: errors1 },\r\n  } = useForm();\r\n\r\n  // Watch all form data\r\n\r\n  // Watch for changes in the fee-related fields\r\n  const govtFee = watch('govt_fee', 0);\r\n  const centerFee = watch('center_fee', 0);\r\n  const bankCharges = watch('bank_charges', 0);\r\n  const qty = watch('qty', 1);\r\n  useEffect(() => {\r\n    const feesTotal = (parseFloat(govtFee) || 0) + (parseFloat(centerFee) || 0) + (parseFloat(bankCharges) || 0);\r\n    const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n    setValue(\"total\", finalTotal);\r\n  }, [govtFee, centerFee, bankCharges, qty]);\r\n\r\n  const addItem = (data) => {\r\n    const total = data.total;\r\n    setRows((prevRows) => {\r\n      const updatedRows = [...prevRows, data];\r\n      const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n      setSubTotal(newSubTotal);\r\n      return updatedRows;\r\n    });\r\n    reset();\r\n    setServiceItem(\"\")\r\n  };\r\n  const isFormDataEmpty = (data) => {\r\n    // Check if all form fields are empty\r\n    return Object.values(data).every((value) => {\r\n      // If the value is an object (like companyLogo), check if it's empty\r\n      if (typeof value === \"object\" && value !== null) {\r\n        return Object.keys(value).length === 0;\r\n      }\r\n      // Otherwise, check if the value is an empty string\r\n      return value === \"\";\r\n    });\r\n  };\r\n\r\n  const allowFilesType = [\r\n    \"image/png\",\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"application/pdf\",\r\n    \"application/vnd.ms-excel\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ];\r\n  const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n  const [guarantors, setGuarantors] = useState([]);\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n  const [selectedDue, setSelectedDue] = useState({\r\n    id: \"Instant\",\r\n    name: \"Instant\",\r\n  });\r\n  const [passport, setPassport] = useState();\r\n  const [allocation, setAllocation] = useState(false);\r\n  const [depositError, setDepositError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [emailVerify, setEmailVerify] = useState(false);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [loader, setLoader] = useState(false);\r\n  const [fieldsDisabled, setFieldsDisabled] = useState({\r\n    monthlyVisaServiceCharges: false,\r\n    vipMedical: false,\r\n    extraTyping: true,\r\n  });\r\n\r\n  const [center, setCenter] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState();\r\n  const [step1FormData, setStep1FormData] = useState();\r\n  const [selectedType, setSelectedType] = useState(null);\r\n  const [date, setDate] = useState(null);\r\n  const [balanceType, setBalanceType] = useState(null);\r\n  const [imageURL, setImageURL] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n  const [hovered, setHovered] = useState(false);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [salesAccount, setSalesAccount] = useState(null);\r\n  const [inventoryAccount, setInventoryAccount] = useState(null);\r\n  const [cogsAccount, setCogsAccount] = useState(null);\r\n  const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n  const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n  const [itemType, setItemType] = useState(null);\r\n  const [unit, setUnit] = useState(null);\r\n  const [taxes, setTaxes] = useState([]);\r\n  const [tax, setTax] = useState(null);\r\n  const [category, setCategory] = useState(null);\r\n  const [categories, setCategories] = useState(null);\r\n  const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n  const [description, setDescription] = useState(null);\r\n  const [ownGovBank, setOwnGovBank] = useState(null);\r\n  const [services, setServices] = useState(null);\r\n  const [serviceItem, setServiceItem] = useState(null);\r\n  const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n  const [detail, setDetail] = useState(null)\r\n  //documents array\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const submitForm1 = async (formData) => {\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        token_number: formData?.token,\r\n        token_date: date,\r\n        invoice_prefix: \"AAD\",\r\n        cost_center:formData?.cost_center,\r\n        customer_name: formData?.display_customer,\r\n        reception_id: detail?.id,\r\n        customer_mobile: formData?.mobile,\r\n        customer_email: formData?.email,\r\n        ref: formData?.ref,\r\n        total_amount: subTotal,\r\n\r\n        items: rows\r\n      };\r\n      console.log(formData, \"formData\");\r\n      const promise = CustomerServices.CreateSaleReceipt(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate(\"/pre-sales\");\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n  // *For Get Account\r\n  const getReceptionDetail = async () => {\r\n    try {\r\n      let params = {\r\n        token_number: getValues1(\"token\"),\r\n      };\r\n      const { data } = await CustomerServices.getReceptionDetail(params);\r\n      console.log(data, \"dataaa\");\r\n      setDetail(data?.token)\r\n      setValue1(\"customer\", data?.token?.customer_name);\r\n      setValue1(\"invoice_date\", moment().toDate());\r\n      setValue1(\"mobile\", data?.token?.mobile);\r\n      setValue1(\"ref\", data?.token?.reference);\r\n      setValue1(\"display_customer\", data?.token?.customer_name);\r\n      setValue1(\"email\", data?.token?.email);\r\n      setValue1(\"address\", data?.token?.address);\r\n      setValue1(\"trn\", data?.token?.trn);\r\n      setValue1(\"cost_center\", data?.token?.cost_center);\r\n\r\n      setAccounts(data?.accounts?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const getServiceItem = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getServiceItem(params);\r\n\r\n      setServices(data?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  const handleServiceSelect = async (value) => {\r\n    console.log(value, \"idididid\");\r\n    setServiceItem(value);\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        service_id: value?.id,\r\n      };\r\n\r\n      const { data } = await CustomerServices.DetailServiceItem(params);\r\n      setValue(\"item_code\", data?.service?.id);\r\n      setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n      setValue(\"center_fee\", data?.service?.center_fee);\r\n      setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n\r\n      setValue(\"qty\", 1);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  const getAccounts = async (page, limit, filter) => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await FinanceServices.getAccounts(params);\r\n      console.log(data?.accounts?.rows);\r\n\r\n      setAccounts(data?.accounts?.rows);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  const getTax = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await FinanceServices.getTax(params);\r\n      console.log(data?.accounts?.rows);\r\n\r\n      setTaxes(data?.tax);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n  const getCategories = async () => {\r\n    // setLoader(true)\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      };\r\n\r\n      const { data } = await CustomerServices.getCategoryList(params);\r\n\r\n      setCategories(data?.categories);\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    } finally {\r\n      // setLoader(false)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAccounts();\r\n    getTax();\r\n    getCategories();\r\n    getServiceItem();\r\n    setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" })\r\n    setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" })\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}></Box>\r\n      <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n        {\r\n          <>\r\n            <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"10px\",\r\n                  p: 3,\r\n                  alignItems: \"flex-end\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n                  Sales Receipt\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box sx={{ p: 3 }}>\r\n                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                  <Grid item xs={12}>\r\n                    <Grid container>\r\n                      <Grid item md={3} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Token\"\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Token\"\r\n                          register={register1(\"token\")}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <IconButton onClick={getReceptionDetail}>\r\n                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n                              </IconButton>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid\r\n                    item\r\n                    md={5.5}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{\r\n                      border: \"2px solid black\",\r\n                      p: 2,\r\n                      borderRadius: \"15px\",\r\n                    }}\r\n                  >\r\n                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Invoice No\"\r\n                          size=\"small\"\r\n                          placeholder=\"TSL/83540\"\r\n                          register={register1(\"invoice_no\")}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={5.7}>\r\n                        <DatePicker\r\n                          label={\"Invoice Date :*\"}\r\n                          value={date}\r\n                          size={'small'}\r\n\r\n                          error={errors1?.date?.message}\r\n                          register={register1(\"date\", {\r\n                            required:\r\n                              date ? false :\r\n                                \"please enter  date.\"\r\n\r\n                          })}\r\n                          onChange={(date) => {\r\n\r\n                            setValue1('date', date)\r\n                            setDate(new Date(date));\r\n\r\n                          }\r\n\r\n                          }\r\n                        /></Grid>\r\n\r\n                      <Grid item xs={5.7} >\r\n                        <SelectField\r\n                          size={'small'}\r\n                          label={'Customer *:'}\r\n                          disabled={true}\r\n                          options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                          selected={selectedCustomer}\r\n                          onSelect={(value) => {\r\n                            setSelectedCustomer(value)\r\n\r\n\r\n                          }}\r\n                          error={errors1?.customer?.message}\r\n                          register={register1(\"customer\", {\r\n                            required: false,\r\n                          })}\r\n                        />\r\n                      </Grid>\r\n\r\n\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    md={5.5}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{\r\n                      border: \"2px solid black\",\r\n                      p: 2,\r\n                      borderRadius: \"15px\",\r\n                      mt: { md: 0, sm: 2, xs: 2 },\r\n                    }}\r\n                  >\r\n                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Display Customer\"\r\n                          size=\"small\"\r\n                          placeholder=\"Walk-in Customer\"\r\n                          register={register1(\"display_customer\", {\r\n                            required: 'please enter display name.'\r\n                          })}\r\n                          error={errors1?.display_customer?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Mobile\"\r\n                          size=\"small\"\r\n                          placeholder=\"Mobile No\"\r\n\r\n                          register={register1(\"mobile\", {\r\n                            required: 'please enter mobile .'\r\n                          })}\r\n                          error={errors1?.display_customer?.message}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Email\"\r\n                          size=\"small\"\r\n                          placeholder=\"Email\"\r\n\r\n                          register={register1(\"email\", {\r\n                            required: 'please enter email .'\r\n                          })}\r\n                          error={errors1?.email?.message}\r\n                        />\r\n                      </Grid>\r\n{/* \r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"TRN\"\r\n                          size=\"small\"\r\n                          placeholder=\"TRN\"\r\n\r\n\r\n                          register={register1(\"trn\", {\r\n                            required: 'please enter trn .'\r\n                          })}\r\n                          error={errors1?.trn?.message}\r\n                        />\r\n                      </Grid> */}\r\n\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Ref\"\r\n                          size=\"small\"\r\n                          placeholder=\"Reference\"\r\n                          register={register1(\"ref\")}\r\n                        />\r\n                      </Grid>\r\n                     \r\n                      {/* <Grid item md={5.7} sm={12} xs={12}>\r\n                        <SelectField\r\n                          label=\"Cost Center\"\r\n                          size=\"small\"\r\n                          options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n                          selected={watch1(\"cost_center\")}\r\n                          onSelect={(value) => setValue1(\"cost_center\", value)}\r\n\r\n                          register={register1(\"cost_center\", {\r\n                            required: 'please enter cost center .'\r\n                          })}\r\n                          error={errors1?.cost_center?.message}\r\n                        />\r\n                      </Grid> */}\r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"Address\"\r\n                          size=\"small\"\r\n                          placeholder=\"Address\"\r\n                          multiline\r\n                          rows={2}\r\n\r\n                          register={register1(\"address\", {\r\n                            required: 'please enter address .'\r\n                          })}\r\n                          error={errors1?.address?.message}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* </Grid> */}\r\n                  <Grid item xs={12} display={'flex'} justifyContent={'flex-end'}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={rows?.length == 0}\r\n                      variant=\"contained\"\r\n                      sx={{\r\n                        textTransform: 'capitalize',\r\n                        backgroundColor: \"#bd9b4a\",\r\n                        \":hover\": {\r\n                          backgroundColor: \"rgb(189 155 74)\",\r\n                        },\r\n                      }}\r\n                    >\r\n                      Create\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Box>\r\n\r\n\r\n            <form onSubmit={handleSubmit(addItem)}>\r\n              <TableContainer component={Paper}>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n                      <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n\r\n                      <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                      <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        <InputField\r\n                          size=\"small\"\r\n                          disabled={true}\r\n                          placeholder=\"Item code\"\r\n                          register={register(\"item_code\", { required: \"Item code is required\" })}\r\n                        />\r\n                        {errors.item_code && <span>{errors.item_code.message}</span>}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <SelectField\r\n                          size=\"small\"\r\n                          options={services}\r\n                          selected={serviceItem}\r\n                          onSelect={handleServiceSelect}\r\n                          //  error={errors?.service?.message}\r\n                          register={register(\"service\", {\r\n                            required: \"Please select a service.\",\r\n                          })}\r\n                        />\r\n                        {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <InputField\r\n                          size=\"small\"\r\n                          placeholder=\"Quantity\"\r\n                          type=\"number\"\r\n                          register={register(\"qty\", { required: \"Quantity is required\" })}\r\n                        />\r\n                        {errors.qty && <span style={{ color: \"red\" }}>{errors.qty.message}</span>}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <InputField\r\n                          size=\"small\"\r\n                          placeholder=\"Govt fee\"\r\n                          type=\"number\"\r\n                          register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n                        />\r\n                        {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <InputField\r\n                          size=\"small\"\r\n                          placeholder=\"Center Fee\"\r\n                          type=\"number\"\r\n                          register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n                        />\r\n                        {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <InputField\r\n                          size=\"small\"\r\n                          placeholder=\"Bank Charges\"\r\n                          type=\"number\"\r\n                          register={register(\"bank_charges\", { required: \"Bank charges are required\" })}\r\n                          disabled\r\n                        />\r\n                        {errors.bank_charges && <span style={{ color: \"red\" }}>{errors.bank_charges.message}</span>}\r\n\r\n                      </TableCell>\r\n\r\n                      <TableCell>\r\n                        <InputField\r\n                          disabled={true}\r\n                          style={{ border: \"none\" }}\r\n                          size=\"small\"\r\n                          placeholder=\"Narration\"\r\n                          register={register(\"total\")}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          type=\"submit\"\r\n                          sx={{\r\n                            textTransform: 'capitalize',\r\n                            backgroundColor: \"rgb(189 155 74)\",\r\n                            fontSize: \"12px\",\r\n                            \":hover\": {\r\n                              backgroundColor: \"rgb(189 155 74)\",\r\n                            },\r\n                          }}\r\n                        >\r\n                          Add Item\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    {rows.map((item, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell>{item?.item_code}</TableCell>\r\n                        <TableCell>{item?.service}</TableCell>\r\n                        <TableCell>{item?.qty}</TableCell>\r\n                        <TableCell>{item?.govt_fee}</TableCell>\r\n                        <TableCell>{item?.center_fee}</TableCell>\r\n                        <TableCell>{item?.bank_charges}</TableCell>\r\n\r\n                        <TableCell>{item?.total}</TableCell>\r\n\r\n                      </TableRow>\r\n                    ))}\r\n\r\n                    <TableRow>\r\n                      <TableCell colSpan={7} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n\r\n                    {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                    <TableRow>\r\n                      <TableCell colSpan={7} align=\"right\">\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* This can be the same as Sub-total */}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </form>\r\n          </>\r\n        }\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreatePurchaseReceipt;\r\n"
        }
    ]
}