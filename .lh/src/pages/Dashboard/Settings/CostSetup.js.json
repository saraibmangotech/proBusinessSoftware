{
    "sourceFile": "src/pages/Dashboard/Settings/CostSetup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744546821347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744546821347,
            "name": "Commit-0",
            "content": "import styled from '@emotion/styled';\r\nimport { Box, Grid, InputAdornment, Paper, Table, TableBody, TableCell, tableCellClasses, TableContainer, TableHead, TableRow, TextField, Typography } from '@mui/material'\r\nimport { FontFamily, Images } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport InputField from 'components/Input'\r\nimport CustomTextField from 'components/Input/CustomInput';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SystemServices from 'services/System';\r\nimport { formatPermissionData } from 'utils';\r\nconst StyledInputAdornment = styled(InputAdornment)(({ theme }) => ({\r\n    backgroundColor: '#000', // Adjust the color to match your image\r\n    color: '#fff', // Text color\r\n    padding: '0 10px', // Adjust padding as needed\r\n    borderRadius: '4px 0 0 4px', // Match the rounded corners from the image\r\n}));\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n        border: \"1px solid #EEEEEE\",\r\n        padding: \"15px\",\r\n        textAlign: \"left\",\r\n        whiteSpace: \"nowrap\",\r\n        color: \"#434343\",\r\n        paddingRight: \"50px\",\r\n        background: \"transparent\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n\r\n        textWrap: \"nowrap\",\r\n        padding: \"5px !important\",\r\n\r\n        \".MuiBox-root\": {\r\n            display: \"flex\",\r\n            gap: \"6px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            \".MuiBox-root\": {\r\n                cursor: \"pointer\",\r\n            },\r\n        },\r\n        svg: {\r\n            width: \"auto\",\r\n            height: \"24px\",\r\n        },\r\n        \".MuiTypography-root\": {\r\n            textTransform: \"capitalize\",\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: \"nowrap\",\r\n        },\r\n        \".MuiButtonBase-root\": {\r\n            padding: \"8px\",\r\n            width: \"28px\",\r\n            height: \"28px\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst CostSetup = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [charges, setCharges] = useState({})\r\n    const [statuses, setStatuses] = useState([])\r\n    const [statuses2, setStatuses2] = useState([])\r\n    const dispatch = useDispatch()\r\n    const handleRejectionChange = (e, index, item) => {\r\n        console.log(e.target.value);\r\n        console.log(item);\r\n        // Find the item in the `statuses` array and update its `rejection` property\r\n\r\n        const updatedStatuses = statuses.map((status) =>\r\n            status.id === item.id\r\n                ? { ...status, rejection: e.target.value }\r\n                : status\r\n        );\r\n        setStatuses(updatedStatuses)\r\n\r\n    }\r\n    const handleTypingChange = (e, index, item) => {\r\n        console.log(e.target.value);\r\n        console.log(item);\r\n        // Find the item in the `statuses` array and update its `rejection` property\r\n        const updatedStatuses = statuses.map((status) =>\r\n            status.id === item.id\r\n                ? { ...status, typing: e.target.value }\r\n                : status\r\n        );\r\n        setStatuses(updatedStatuses)\r\n    }\r\n\r\n    const handleRejectionChange2 = (e, index, item) => {\r\n        console.log(e.target.value);\r\n        console.log(item);\r\n        // Find the item in the `statuses` array and update its `rejection` property\r\n\r\n        const updatedStatuses = statuses2.map((status) =>\r\n            status.id === item.id\r\n                ? { ...status, rejection: e.target.value }\r\n                : status\r\n        );\r\n        setStatuses2(updatedStatuses)\r\n\r\n    }\r\n    const handleTypingChange2 = (e, index, item) => {\r\n        console.log(e.target.value);\r\n        console.log(item);\r\n        // Find the item in the `statuses` array and update its `rejection` property\r\n        const updatedStatuses = statuses2.map((status) =>\r\n            status.id === item.id\r\n                ? { ...status, typing: e.target.value }\r\n                : status\r\n        );\r\n        setStatuses2(updatedStatuses)\r\n    }\r\n    const tableHead1 = [\r\n        { name: \"Stage\", key: \"\" },\r\n\r\n        { name: \"Rejection Cost\", key: \"visa_eligibility\" },\r\n        { name: \"Typing Fee\", key: \"deposit_total\" },\r\n\r\n    ];\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const [permissions, setPermissions] = useState([])\r\n    const getData = async (formData) => {\r\n        setLoading(true)\r\n        console.log(formData);\r\n        try {\r\n            let params = {\r\n                charges_type: 'cost'\r\n\r\n            }\r\n\r\n            const { data } = await SystemServices.getRates(params);\r\n            console.log(data);\r\n            let details = data?.charges\r\n            setCharges(details)\r\n            setValue('1yearInsideRate', details?.one_year_inside)\r\n            setValue('1yearOutsideRate', details?.one_year_outside)\r\n            setValue('1yearRenewalRates', details?.one_year_renewal)\r\n            setValue('2yearInsideRate', details?.two_year_inside)\r\n            setValue('2yearOutsideRate', details?.two_year_outside)\r\n            setValue('2yearRenewalRates', details?.two_year_renewal)\r\n            setValue('oneyear', details?.one_year_commission)\r\n            setValue('twoyear', details?.two_year_commission)\r\n            setValue('oneyearoutside', details?.one_year_commission_out)\r\n            setValue('twoyearoutside', details?.two_year_commission_out)\r\n            setValue('monthlyVisaServiceCharges', details?.monthly_visa_service_below)\r\n            setValue('monthlyVisaServiceChargesabove', details?.monthly_visa_service_above)\r\n            setValue('vipMedical', details?.medical_extra)\r\n            setValue('insideCancellationRates', details?.cancellation)\r\n            setValue('outsideCancellationRates', details?.outside_cancellation)\r\n            setValue('cancellationInprogress', details?.cancellation_cost_inprogress)\r\n            setValue('rejectionCost', details?.rejection)\r\n            setValue('extraTyping', details?.typing_fee)\r\n            setValue('overstayCost', details?.overstay)\r\n            setValue('absconderFee', details?.absconder_fee)\r\n            setStatuses(\r\n                [\r\n                    { id: \"In Progress\", name: \"In Progress\", rejection: details?.rejection_inprogress, typing: details?.typing_inprogress },\r\n\r\n\r\n                    { id: \"Change Status\", name: \"Change Status\", rejection: details?.rejection_changestatus, typing: details?.typing_changestatus },\r\n                    { id: \"Medical\", name: \"Medical\", rejection: details?.rejection_medical, typing: details?.typing_medical },\r\n                    { id: \"Emirates Id\", name: \"Emirates Id\", rejection: details?.rejection_emirateid, typing: details?.typing_emirateid },\r\n\r\n                ]\r\n            )\r\n            setStatuses2(\r\n                [\r\n                    { id: \"In Progress\", name: \"In Progress\", rejection: details?.rejection_inprogress_out, typing: details?.typing_inprogress_out },\r\n                    { id: \"Entry Permit\", name: \"Entry Permit\", rejection: details?.rejection_entrypermit_out, typing: details?.typing_entrypermit_out },\r\n\r\n\r\n                    { id: \"Medical\", name: \"Medical\", rejection: details?.rejection_medical_out, typing: details?.typing_medical_out },\r\n                    { id: \"Emirates Id\", name: \"Emirates Id\", rejection: details?.rejection_emirateid_out, typing: details?.typing_emirateid_out },\r\n\r\n                ]\r\n            )\r\n            console.log(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const UpdateCost = async (formData) => {\r\n        setLoading(true)\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                charges_type: \"cost\",\r\n                one_year_inside: Number(formData?.['1yearInsideRate']),\r\n                one_year_outside: Number(formData?.['1yearOutsideRate']),\r\n                one_year_renewal: Number(formData?.['1yearRenewalRates']),\r\n                two_year_inside: Number(formData?.['2yearInsideRate']),\r\n                two_year_outside: Number(formData?.['2yearOutsideRate']),\r\n                two_year_renewal: Number(formData?.['2yearRenewalRates']),\r\n                one_year_commission: Number(formData?.['oneyear']),\r\n                two_year_commission: Number(formData?.['twoyear']),\r\n                one_year_commission_out: Number(formData?.['oneyearoutside']),\r\n                two_year_commission_out: Number(formData?.['twoyearoutside']),\r\n \r\n                monthly_visa_service_below: Number(formData?.['monthlyVisaServiceCharges']),\r\n                monthly_visa_service_above: Number(formData?.['monthlyVisaServiceChargesabove']),\r\n                overstay: Number(formData?.['overstayCost']),\r\n                medical_extra: Number(formData?.['vipMedical']),\r\n                typing_fee: Number(formData?.['extraTyping']),\r\n                cancellation: Number(formData?.['insideCancellationRates']),\r\n                outside_cancellation: Number(formData?.['outsideCancellationRates']),\r\n                cancellation_cost_inprogress: Number(formData?.['cancellationInprogress']),\r\n                rejection: Number(formData?.['rejectionCost']),\r\n                absconder_fee: Number(formData?.['absconderFee']),\r\n                rejection_changestatus: \"10.00\",\r\n                rejection_emirateid: \"10.00\",\r\n                rejection_entrypermit: \"10.00\",\r\n                rejection_inprogress: \"10.00\",\r\n                rejection_medical: \"10.00\",\r\n                typing_changestatus: \"10.00\",\r\n                typing_emirateid: \"10.00\",\r\n                typing_entrypermit: \"10.00\",\r\n               \r\n                typing_inprogress: \"10.00\",\r\n                typing_medical: \"10.00\",\r\n\r\n\r\n\r\n            }\r\n\r\n            for (let i = 0; i < statuses.length; i++) {\r\n                const status = statuses[i];\r\n\r\n                if (status.id == \"In Progress\") {\r\n                    obj.rejection_inprogress = status.rejection;\r\n                    obj.typing_inprogress = status.typing\r\n                }\r\n                else if (status.id == \"Entry Permit\") {\r\n                    obj.rejection_entrypermit = status.rejection;\r\n                    obj.typing_entrypermit = status.typing\r\n                }\r\n                else if (status.id == \"Change Status\") {\r\n                    obj.rejection_changestatus = status.rejection;\r\n                    obj.typing_changestatus = status.typing\r\n                }\r\n                else if (status.id == \"Medical\") {\r\n                    obj.rejection_medical = status.rejection;\r\n                    obj.typing_medical = status.typing\r\n                }\r\n                else if (status.id == \"Emirates Id\") {\r\n                    obj.rejection_emirateid = status.rejection;\r\n                    obj.typing_emirateid = status.typing\r\n                }\r\n            }\r\n            for (let i = 0; i < statuses2.length; i++) {\r\n                const status = statuses2[i];\r\n\r\n                if (status.id == \"In Progress\") {\r\n                    obj.rejection_inprogress_out = status.rejection;\r\n                    obj.typing_inprogress_out = status.typing\r\n                }\r\n                else if (status.id == \"Entry Permit\") {\r\n                    obj.rejection_entrypermit_out = status.rejection;\r\n                    obj.typing_entrypermit_out = status.typing\r\n                }\r\n                else if (status.id == \"Change Status\") {\r\n                    obj.rejection_changestatus_out = status.rejection;\r\n                    obj.typing_changestatus_out = status.typing\r\n                }\r\n                else if (status.id == \"Medical\") {\r\n                    obj.rejection_medical_out = status.rejection;\r\n                    obj.typing_medical_out = status.typing\r\n                }\r\n                else if (status.id == \"Emirates Id\") {\r\n                    obj.rejection_emirateid_out = status.rejection;\r\n                    obj.typing_emirateid_out = status.typing\r\n                }\r\n            }\r\n            console.log(obj);\r\n            const promise = SystemServices.UpdateCost(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving ...',\r\n                'Success',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            const result = await promise\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{ p: 3 }}>\r\n                <Box component={'form'} onSubmit={handleSubmit(UpdateCost)}>\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                        <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >COST MANAGEMENT</Typography>\r\n                        <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                            {permissions?.save && <PrimaryButton\r\n                               bgcolor={'#bd9b4a'}\r\n                                title=\"Save\"\r\n                                type={'submit'}\r\n\r\n\r\n                            />}\r\n\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ p: 3 }}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 2 }}>Visa Rates : </Typography>\r\n                        <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2 }}>1 Year Rates : </Typography>\r\n\r\n                        <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Year Inside Rates : '} StartLabel={'AED'} register={register(\"1yearInsideRate\", { required: \"Enter year inside rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Year Outside Rates : '} StartLabel={'AED'} register={register(\"1yearOutsideRate\", { required: \"Enter year outside rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Renewal Rates : '} StartLabel={'AED'} register={register(\"1yearRenewalRates\", { required: \"Enter renewal rate\" })} />\r\n                            </Grid>\r\n\r\n\r\n\r\n                        </Grid>\r\n                        <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 3 }}>2 Year Rates : </Typography>\r\n\r\n                        <Grid container sx={{ gap: '20px 25px' }}>\r\n\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Year Inside Rates : '} StartLabel={'AED'} register={register(\"2yearInsideRate\", { required: \"Enter year inside rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Year Outside Rates : '} StartLabel={'AED'} register={register(\"2yearOutsideRate\", { required: \"Enter year outside rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Renewal Rates : '} StartLabel={'AED'} register={register(\"2yearRenewalRates\", { required: \"Enter renewal rate\" })} />\r\n                            </Grid>\r\n\r\n\r\n\r\n                        </Grid>\r\n                        <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 3 }}>Visa Commission : </Typography>\r\n\r\n                        <Grid container sx={{ gap: '20px 25px' }}>\r\n                          \r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'1 Year Inside : '} StartLabel={'AED'} register={register(\"oneyear\", { required: \"enter 1 year inside Charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'2 Years Inside : '} StartLabel={'AED'} register={register(\"twoyear\", { required: \"enter 2 year inside Charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'1 Year Outside :  '} StartLabel={'AED'} register={register(\"oneyearoutside\", { required: \"enter 1 year outside Charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'2 Years Outside : '} StartLabel={'AED'} register={register(\"twoyearoutside\", { required: \"enter 2 year outside Charges\" })} />\r\n                            </Grid>\r\n                            \r\n\r\n\r\n\r\n\r\n                        </Grid>\r\n                        <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 3 }}>Extra Costing : </Typography>\r\n\r\n                        <Grid container sx={{ gap: '20px 25px' }}>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Monthly Visa Service Charges Below 2000 : '} max={2000} StartLabel={'AED'} register={register(\"monthlyVisaServiceCharges\", { required: \"Enter Monthly Visa Service Charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Monthly Visa Service Charges Above 2000 : '} StartLabel={'AED'} register={register(\"monthlyVisaServiceChargesabove\", { required: \"Enter Monthly Visa Service Charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'VIP Medical  Charges : '} StartLabel={'AED'} register={register(\"vipMedical\", { required: \"Enter medical extra charges\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Overstay Cost : '} StartLabel={'AED'} register={register(\"overstayCost\", { required: \"Enter year overstay rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Inside Cancellation Rates : '} StartLabel={'AED'} register={register(\"insideCancellationRates\", { required: \"Enter cancellation rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Outside Cancellation Rates : '} StartLabel={'AED'} register={register(\"outsideCancellationRates\", { required: \"Enter cancellation rate\" })} />\r\n                            </Grid>\r\n                           \r\n\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Absconder Fee : '} StartLabel={'AED'} register={register(\"absconderFee\", { required: \"Enter absconder fee\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={'Typing Fee : '} StartLabel={'AED'} register={register(\"extraTyping\", { required: \"Enter typing fee\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={5} >\r\n                                <LabelCustomInput label={' Cancellation Cost In Progress : '} StartLabel={'AED'} register={register(\"cancellationInprogress\", { required: \"Enter cancellation rate\" })} />\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 3 }}>Rejection Costings (In) : </Typography>\r\n                            </Grid>\r\n                            <TableContainer\r\n                                component={Paper}\r\n                                sx={{\r\n                                    maxHeight: \"calc(100vh - 200px)\",\r\n                                    backgroundColor: \"transparent\",\r\n                                    boxShadow: \"none !important\",\r\n                                    borderRadius: \"0px !important\",\r\n                                }}\r\n                            >\r\n                                <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                    <TableHead>\r\n                                        <Row>\r\n                                            {tableHead1.map((cell, index) => (\r\n                                                <Cell\r\n                                                    style={{\r\n                                                        textAlign:\r\n                                                            cell?.name == \"SR No.\"\r\n                                                                ? \"center\"\r\n                                                                : \"left\",\r\n                                                        paddingRight:\r\n                                                            cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                                    }}\r\n                                                    className=\"pdf-table\"\r\n                                                    key={index}\r\n                                                >\r\n                                                    <Box\r\n                                                        sx={{\r\n                                                            display: \"flex\",\r\n                                                            alignItems: \"flex-end\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {cell?.name}\r\n                                                    </Box>\r\n                                                </Cell>\r\n                                            ))}\r\n                                        </Row>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {statuses?.map((item, index) => {\r\n                                            console.log(item?.statuses);\r\n                                            let sorteddata = item?.statuses?.sort(\r\n                                                (a, b) => a.id - b.id\r\n                                            );\r\n                                            console.log(sorteddata);\r\n\r\n                                            return (\r\n                                                <Row\r\n                                                    key={index}\r\n                                                    sx={{\r\n                                                        border: \"1px solid #EEEEEE !important\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Cell\r\n                                                        style={{ textAlign: \"left\" }}\r\n                                                        className=\"pdf-table\"\r\n                                                    >\r\n                                                        {item?.name}\r\n                                                    </Cell>\r\n                                                    <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                        <TextField\r\n                                                            size='small'\r\n                                                            defaultValue={item?.rejection || \"\"}\r\n                                                            onChange={(e) => handleRejectionChange(e, index, item)}\r\n                                                        />\r\n                                                    </Cell>\r\n                                                    <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                        <TextField\r\n                                                            size='small'\r\n                                                            defaultValue={item?.typing || \"\"}\r\n                                                            onChange={(e) => handleTypingChange(e, index, item)}\r\n                                                        />\r\n                                                    </Cell>\r\n\r\n\r\n\r\n                                                </Row>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <Grid item xs={12} >\r\n                                <Typography sx={{ fontSize: '20px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 3 }}>Rejection Costings (Out) : </Typography>\r\n                            </Grid>\r\n                            <TableContainer\r\n                                component={Paper}\r\n                                sx={{\r\n                                    maxHeight: \"calc(100vh - 200px)\",\r\n                                    backgroundColor: \"transparent\",\r\n                                    boxShadow: \"none !important\",\r\n                                    borderRadius: \"0px !important\",\r\n                                }}\r\n                            >\r\n                                <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                    <TableHead>\r\n                                        <Row>\r\n                                            {tableHead1.map((cell, index) => (\r\n                                                <Cell\r\n                                                    style={{\r\n                                                        textAlign:\r\n                                                            cell?.name == \"SR No.\"\r\n                                                                ? \"center\"\r\n                                                                : \"left\",\r\n                                                        paddingRight:\r\n                                                            cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                                    }}\r\n                                                    className=\"pdf-table\"\r\n                                                    key={index}\r\n                                                >\r\n                                                    <Box\r\n                                                        sx={{\r\n                                                            display: \"flex\",\r\n                                                            alignItems: \"flex-end\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {cell?.name}\r\n                                                    </Box>\r\n                                                </Cell>\r\n                                            ))}\r\n                                        </Row>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {statuses2?.map((item, index) => {\r\n                                            console.log(item?.statuses);\r\n                                            let sorteddata = item?.statuses?.sort(\r\n                                                (a, b) => a.id - b.id\r\n                                            );\r\n                                            console.log(sorteddata);\r\n\r\n                                            return (\r\n                                                <Row\r\n                                                    key={index}\r\n                                                    sx={{\r\n                                                        border: \"1px solid #EEEEEE !important\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Cell\r\n                                                        style={{ textAlign: \"left\" }}\r\n                                                        className=\"pdf-table\"\r\n                                                    >\r\n                                                        {item?.name}\r\n                                                    </Cell>\r\n                                                    <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                        <TextField\r\n                                                            size='small'\r\n                                                            defaultValue={item?.rejection || \"\"}\r\n                                                            onChange={(e) => handleRejectionChange2(e, index, item)}\r\n                                                        />\r\n                                                    </Cell>\r\n                                                    <Cell style={{ textAlign: \"left\" }} className=\"pdf-table\">\r\n                                                        <TextField\r\n                                                            size='small'\r\n                                                            defaultValue={item?.typing || \"\"}\r\n                                                            onChange={(e) => handleTypingChange2(e, index, item)}\r\n                                                        />\r\n                                                    </Cell>\r\n\r\n\r\n\r\n                                                </Row>\r\n                                            );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n\r\n                    </Box>\r\n                </Box>\r\n\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CostSetup\r\n"
        }
    ]
}