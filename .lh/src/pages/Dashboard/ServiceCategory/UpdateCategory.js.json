{
    "sourceFile": "src/pages/Dashboard/ServiceCategory/UpdateCategory.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1744496715294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744496764432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,9 +362,47 @@\n             }\r\n         }\r\n     };\r\n \r\n+    const getData = async () => {\r\n+      try {\r\n+        let params = {\r\n+          customer_id: id\r\n+        };\r\n+    \r\n+        const { data } = await CustomerServices.getCustomerDetail(params);\r\n+        let detail = data?.customer\r\n+        console.log(detail);\r\n+    \r\n+        setValue1('name', detail?.name)\r\n+        setValue1('email', detail?.email)\r\n+        setValue1('mobile', detail?.mobile)\r\n+        setValue1('address', detail?.address)\r\n+        setValue1('trn', detail?.trn)\r\n+        setValue1('eid', detail?.eid)\r\n+        setValue1('trade', detail?.trade_license_no)\r\n+        setValue1('paymentType',{ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+        setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+        setValue1('status',{ id: detail?.credit_status, name: detail?.credit_status })\r\n+        setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n+        setValue1('center',{ id: detail?.cost_center, name: detail?.cost_center })\r\n+        setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n+        setValue1('type',{ id: detail?.type, name: detail?.type })\r\n+        setBalanceType({ id: detail?.type, name: detail?.type })\r\n+        setDate(new Date(detail?.opening_balance_date))\r\n+        setValue1('balance', detail?.opening_balance)\r\n+        setValue1('credit', detail?.credit_limit)\r\n+        setValue1('notes', detail?.general_notes)\r\n+    \r\n+      } catch (error) {\r\n+        console.error(\"Error fetching location:\", error);\r\n+      }\r\n+    };\r\n     useEffect(() => {\r\n+      getData()\r\n+    }, [])\r\n+\r\n+    useEffect(() => {\r\n         getAccounts()\r\n         getTax()\r\n     }, [])\r\n \r\n"
                },
                {
                    "date": 1744496772356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n         let params = {\r\n           customer_id: id\r\n         };\r\n     \r\n-        const { data } = await CustomerServices.getCustomerDetail(params);\r\n+        const { data } = await CustomerServices.getCategoryDetail(params);\r\n         let detail = data?.customer\r\n         console.log(detail);\r\n     \r\n         setValue1('name', detail?.name)\r\n"
                },
                {
                    "date": 1744496792911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,770 @@\n+import React, { useEffect, useRef, useState } from 'react';\r\n+import { Avatar, Box, Checkbox, Container, FormControlLabel, FormLabel, Grid, IconButton, InputLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\n+import RegisterContainer from 'container/Register'\r\n+import { useTheme } from '@mui/material/styles';\r\n+import MobileStepper from '@mui/material/MobileStepper';\r\n+import Button from '@mui/material/Button';\r\n+import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\n+import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n+import { PrimaryButton } from 'components/Buttons';\r\n+import Colors from 'assets/Style/Colors';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+import { Controller, useForm } from 'react-hook-form';\r\n+import UploadFile from 'components/UploadFile';\r\n+import InputField from 'components/Input';\r\n+import DatePicker from 'components/DatePicker';\r\n+import { ErrorToaster } from 'components/Toaster';\r\n+import { FormControl } from '@mui/base';\r\n+import LabelCustomInput from 'components/Input/LabelCustomInput';\r\n+import SelectField from 'components/Select';\r\n+import { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\n+import instance from 'config/axios';\r\n+import routes from 'services/System/routes';\r\n+import CustomerServices from 'services/Customer';\r\n+import CustomerService from '../DashboardPages/CustomerService';\r\n+import { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\n+import moment from 'moment';\r\n+import { Link, useNavigate, useParams } from 'react-router-dom';\r\n+import SystemServices from 'services/System';\r\n+import UploadFileSingle from 'components/UploadFileSingle';\r\n+import { Images } from 'assets';\r\n+import { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\n+import { addMonths } from 'date-fns';\r\n+import { useAuth } from 'context/UseContext';\r\n+import DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n+import axios from 'axios';\r\n+import UploadIcon from \"@mui/icons-material/Upload\";\r\n+import FinanceServices from 'services/Finance';\r\n+\r\n+\r\n+function UpdateCategory() {\r\n+    const theme = useTheme();\r\n+    const { user } = useAuth()\r\n+    const navigate = useNavigate()\r\n+    const [formChange, setFormChange] = useState(false)\r\n+    const [submit, setSubmit] = useState(false)\r\n+    const [excludeFromSales, setExcludeFromSales] = useState('no');\r\n+    const [excludeFromPurchase, setExcludeFromPurchase] = useState('no');\r\n+    const { id } = useParams()\r\n+    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n+    const {\r\n+        register: register1,\r\n+        handleSubmit: handleSubmit1,\r\n+        setValue: setValue1,\r\n+        getValues: getValues1,\r\n+        control,\r\n+        watch,\r\n+        formState: { errors: errors1 },\r\n+\r\n+    } = useForm();\r\n+\r\n+    // Watch all form data\r\n+    console.log(watch());\r\n+\r\n+\r\n+    const isFormDataEmpty = (data) => {\r\n+        // Check if all form fields are empty\r\n+        return Object.values(data).every((value) => {\r\n+            // If the value is an object (like companyLogo), check if it's empty\r\n+            if (typeof value === 'object' && value !== null) {\r\n+                return Object.keys(value).length === 0;\r\n+            }\r\n+            // Otherwise, check if the value is an empty string\r\n+            return value === \"\";\r\n+        });\r\n+    };\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    const allowFilesType = [\r\n+        'image/png',\r\n+        'image/jpg',\r\n+        'image/jpeg',\r\n+        'application/pdf',\r\n+        'application/vnd.ms-excel',\r\n+        'application/msword',\r\n+        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n+    ];\r\n+    const allowFilesType2 = [\r\n+        'image/png',\r\n+        'image/jpg',\r\n+        'image/jpeg',\r\n+\r\n+    ];\r\n+    const [guarantors, setGuarantors] = useState([])\r\n+    const [activeStep, setActiveStep] = React.useState(1);\r\n+\r\n+    // *For Deposit Slip\r\n+    const [progress, setProgress] = useState(0);\r\n+    const [uploadedSize, setUploadedSize] = useState(0);\r\n+    const [slipDetail, setSlipDetail] = useState([]);\r\n+\r\n+\r\n+    const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n+    const [passport, setPassport] = useState()\r\n+    const [allocation, setAllocation] = useState(false)\r\n+    const [depositError, setDepositError] = useState(false)\r\n+    const [loading, setLoading] = useState(false)\r\n+    const [emailVerify, setEmailVerify] = useState(false)\r\n+    const [isUploading, setIsUploading] = useState(false);\r\n+    const [loader, setLoader] = useState(false)\r\n+    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n+        monthlyVisaServiceCharges: false,\r\n+        vipMedical: false,\r\n+        extraTyping: true,\r\n+    });\r\n+\r\n+    const [center, setCenter] = useState(null)\r\n+    const [status, setStatus] = useState(null)\r\n+\r\n+    // *For Stepper Forms Data\r\n+    const [stepFormData, setStepFormData] = useState()\r\n+    const [step1FormData, setStep1FormData] = useState();\r\n+    const [selectedType, setSelectedType] = useState(null)\r\n+    const [date, setDate] = useState(null)\r\n+    const [balanceType, setBalanceType] = useState(null)\r\n+    const [imageURL, setImageURL] = useState(null)\r\n+    const fileInputRef = useRef(null);\r\n+    const [hovered, setHovered] = useState(false);\r\n+    const [accounts, setAccounts] = useState([])\r\n+    const [salesAccount, setSalesAccount] = useState(null)\r\n+    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n+    const [cogsAccount, setCogsAccount] = useState(null)\r\n+    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n+    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n+    const [itemType, setItemType] = useState(null)\r\n+    const [unit, setUnit] = useState(null)\r\n+    const [taxes, setTaxes] = useState([])\r\n+    const [tax, setTax] = useState(null)\r\n+    //documents array\r\n+\r\n+\r\n+    const handleImageClick = () => {\r\n+        fileInputRef.current.click();\r\n+    };\r\n+\r\n+\r\n+\r\n+\r\n+    const handleNext = () => {\r\n+        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n+    };\r\n+\r\n+\r\n+\r\n+\r\n+    const handleUpload = async (file, docs) => {\r\n+        setProgress(0);\r\n+        try {\r\n+            const formData = new FormData();\r\n+            formData.append(\"document\", file);\r\n+            console.log(file.size);\r\n+            console.log(getFileSize(file.size))\r\n+            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n+                onUploadProgress: (progressEvent) => {\r\n+                    const uploadedBytes = progressEvent.loaded;\r\n+                    const percentCompleted = Math.round(\r\n+                        (uploadedBytes * 100) / progressEvent.total\r\n+                    );\r\n+\r\n+                    setProgress(percentCompleted);\r\n+                    console.log(getFileSize(uploadedBytes));\r\n+                    setUploadedSize(getFileSize(uploadedBytes));\r\n+                },\r\n+            });\r\n+            if (data) {\r\n+                docs[0].isUpload = true;\r\n+                docs[0].file = data?.data?.nations;\r\n+                setSlipDetail(docs);\r\n+                console.log(data, 'asddasasd');\r\n+                return data?.data?.path\r\n+\r\n+            }\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        }\r\n+    };\r\n+    const submitForm = async (formData) => {\r\n+        console.log(formData);\r\n+        try {\r\n+            let obj = {\r\n+                name: formData?.companyName,\r\n+\r\n+                phone: formData?.mobile,\r\n+                email: formData?.email,\r\n+                address: formData?.businessAddress,\r\n+                website: formData?.businessWebsite,\r\n+                cp_name: formData?.personName,\r\n+                cp_mobile: formData?.phone,\r\n+\r\n+            };\r\n+\r\n+            setStepFormData(obj);\r\n+            handleNext()\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        }\r\n+    };\r\n+\r\n+\r\n+\r\n+    console.log(watch());\r\n+\r\n+\r\n+    const submitForm1 = async (formData) => {\r\n+        console.log(formData);\r\n+        try {\r\n+            let obj = {\r\n+                name: formData?.name,\r\n+                name_ar: formData?.arabic,\r\n+                logo: imageURL,\r\n+                item_tax_type: tax?.id,\r\n+                item_type: itemType?.id,\r\n+                unit_of_measure: unit?.id,\r\n+                exclude_from_sales: excludeFromSales,\r\n+                exclude_from_purchase: excludeFromPurchase,\r\n+                sales_account_id: salesAccount?.id,\r\n+                inventory_account_id: inventoryAccount?.id,\r\n+                cogs_account_id: cogsAccount?.id,\r\n+                inventory_adjustment_account_id: adjustmentAccount?.id,\r\n+                item_assembly_costs_account_id: assemblyAccount?.id,\r\n+                cost_center: center?.id\r\n+\r\n+\r\n+            };\r\n+            const promise = CustomerServices.UpdateCategory(obj);\r\n+\r\n+            showPromiseToast(\r\n+                promise,\r\n+                'Saving...',\r\n+                'Added Successfully',\r\n+                'Something Went Wrong'\r\n+            );\r\n+            const response = await promise;\r\n+            if (response?.responseCode === 200) {\r\n+                navigate(\"/category-list\");\r\n+            }\r\n+\r\n+\r\n+        } catch (error) {\r\n+            ErrorToaster(error);\r\n+        }\r\n+    };\r\n+    const handleFileChange = async (e) => {\r\n+        try {\r\n+            const file = e.target.files[0];\r\n+            if (file) {\r\n+                setValue1(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+            }\r\n+            const formData = new FormData();\r\n+            formData.append(\"document\", e.target.files[0]);\r\n+\r\n+            const response = await axios.post(\r\n+                `${process.env.REACT_APP_BASE_URL}/system/uploadDocuments`,\r\n+                formData,\r\n+                {\r\n+                    headers: {\r\n+                        'Content-Type': 'multipart/form-data'\r\n+                    }\r\n+                }\r\n+            );\r\n+\r\n+            console.log(response?.data?.data?.path);\r\n+\r\n+            setImageURL(response?.data?.data?.path);\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+\r\n+        }\r\n+    };\r\n+\r\n+\r\n+    // *For Get Account\r\n+    const getAccounts = async (page, limit, filter) => {\r\n+        // setLoader(true)\r\n+        try {\r\n+\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+\r\n+            }\r\n+\r\n+            const { data } = await FinanceServices.getAccounts(params)\r\n+            console.log(data?.accounts?.rows);\r\n+\r\n+            setAccounts(data?.accounts?.rows)\r\n+\r\n+\r\n+\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+    const getTax = async () => {\r\n+        // setLoader(true)\r\n+        try {\r\n+\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 1000,\r\n+\r\n+\r\n+            }\r\n+\r\n+            const { data } = await FinanceServices.getTax(params)\r\n+            console.log(data?.accounts?.rows);\r\n+\r\n+            setTaxes(data?.tax)\r\n+\r\n+\r\n+\r\n+        } catch (error) {\r\n+            ErrorToaster(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n+    }\r\n+\r\n+    const verifyEmail = async (value) => {\r\n+        let Myemail = getValues1('email')\r\n+        if (Myemail) {\r\n+\r\n+            try {\r\n+                let obj = {\r\n+                    email: Myemail.toLowerCase(),\r\n+                    validate: true\r\n+\r\n+\r\n+                };\r\n+\r\n+                console.log(obj);\r\n+\r\n+                const { status } = await CustomerServices.addCustomer(obj);\r\n+\r\n+                console.log(status);\r\n+                if (status) {\r\n+                    setEmailVerify(true)\r\n+                }\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+                setEmailVerify(false)\r\n+                showErrorToast(error)\r\n+            }\r\n+        }\r\n+    };\r\n+\r\n+    const getData = async () => {\r\n+        try {\r\n+            let params = {\r\n+                customer_id: id\r\n+            };\r\n+\r\n+            const { data } = await CustomerServices.getCategoryDetail(params);\r\n+            let detail = data?.customer\r\n+            console.log(detail);\r\n+\r\n+            setValue1('name', detail?.name)\r\n+            setValue1('email', detail?.email)\r\n+            setValue1('mobile', detail?.mobile)\r\n+            setValue1('address', detail?.address)\r\n+            setValue1('trn', detail?.trn)\r\n+            setValue1('eid', detail?.eid)\r\n+            setValue1('trade', detail?.trade_license_no)\r\n+            setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+            setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+            setValue1('status', { id: detail?.credit_status, name: detail?.credit_status })\r\n+            setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n+            setValue1('center', { id: detail?.cost_center, name: detail?.cost_center })\r\n+            setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n+            setValue1('type', { id: detail?.type, name: detail?.type })\r\n+            setBalanceType({ id: detail?.type, name: detail?.type })\r\n+            setDate(new Date(detail?.opening_balance_date))\r\n+            setValue1('balance', detail?.opening_balance)\r\n+            setValue1('credit', detail?.credit_limit)\r\n+            setValue1('notes', detail?.general_notes)\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    useEffect(() => {\r\n+        getData()\r\n+    }, [])\r\n+\r\n+    useEffect(() => {\r\n+        getAccounts()\r\n+        getTax()\r\n+    }, [])\r\n+\r\n+\r\n+\r\n+    return (\r\n+        <>\r\n+            <Box sx={{ width: \"100%\" }}>\r\n+\r\n+\r\n+            </Box>\r\n+            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n+                {<>\r\n+\r\n+                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n+                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n+                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Service Category</Typography>\r\n+\r\n+                        </Box>\r\n+\r\n+                        <Box sx={{ p: 3 }}>\r\n+\r\n+                            <Grid item xs={10} mb={2}>\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Logo :*\r\n+                                </InputLabel>\r\n+\r\n+                                <Controller\r\n+                                    name=\"image\"\r\n+                                    control={control}\r\n+                                    rules={{ required: \" picture is required\" }}\r\n+                                    render={() => (\r\n+                                        <Box\r\n+                                            component={\"div\"}\r\n+                                            onMouseEnter={() => setHovered(true)}\r\n+                                            onMouseLeave={() => setHovered(false)}\r\n+                                            sx={{\r\n+                                                position: \"relative\",\r\n+                                                width: 75,\r\n+                                                height: 75,\r\n+                                                mt: 2,\r\n+                                            }}\r\n+                                        >\r\n+                                            <Avatar\r\n+                                                src={'https://pro.mangotech-api.com' + imageURL}\r\n+                                                alt=\"L\"\r\n+                                                sx={{\r\n+                                                    position: \"relative\",\r\n+                                                    width: \"100%\",\r\n+                                                    height: \"100%\",\r\n+                                                    borderRadius: \"50%\",\r\n+                                                    fontSize: 24,\r\n+                                                    backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n+                                                    color: \"white\",\r\n+                                                    cursor: \"pointer\",\r\n+                                                    objectFit: \"cover\",\r\n+                                                    textTransform: \"capitalize\",\r\n+                                                }}\r\n+                                                onClick={handleImageClick}\r\n+                                            />\r\n+\r\n+                                            {hovered && <IconButton\r\n+                                                sx={{\r\n+                                                    position: \"absolute\",\r\n+                                                    top: \"0\",\r\n+                                                    left: \"0\",\r\n+                                                    width: \"100%\",\r\n+                                                    padding: \"9px 15px\",\r\n+                                                    color: \"white\",\r\n+                                                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+                                                    borderRadius: \"50%\",\r\n+                                                    display: \"block\",\r\n+                                                    \"&:hover\": {\r\n+                                                        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n+                                                    },\r\n+                                                }}\r\n+                                                onClick={handleImageClick}\r\n+                                            >\r\n+                                                <UploadIcon />\r\n+                                                <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n+                                            </IconButton>}\r\n+\r\n+                                            <input\r\n+                                                type=\"file\"\r\n+                                                ref={fileInputRef}\r\n+                                                style={{ display: \"none\" }}\r\n+                                                onChange={handleFileChange}\r\n+                                                accept=\"image/*\"\r\n+                                            />\r\n+                                        </Box>\r\n+                                    )}\r\n+                                />\r\n+\r\n+                                {(errors1.image && !imageURL) && (\r\n+                                    <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n+                                        {errors1.image.message}\r\n+                                    </Typography>\r\n+                                )}\r\n+                            </Grid>\r\n+                            <Grid container sx={{ gap: '5px 25px' }}>\r\n+                                <Grid item xs={2.8}>\r\n+                                    <InputField\r\n+                                        label={\" Name :*\"}\r\n+                                        size={'small'}\r\n+                                        placeholder={\" Name\"}\r\n+                                        error={errors1?.name?.message}\r\n+                                        register={register1(\"name\", {\r\n+                                            required:\r\n+                                                \"Please enter your name.\"\r\n+\r\n+                                        })}\r\n+                                    /></Grid>\r\n+\r\n+\r\n+                                <Grid item xs={2.8}>\r\n+                                    <InputField\r\n+                                        label={\"Arabic Name :*\"}\r\n+                                        size={\"small\"}\r\n+                                        placeholder={\"Arabic Name\"}\r\n+                                        error={errors1?.arabic?.message}\r\n+                                        register={register1(\"arabic\", {\r\n+                                            required: \"Please enter your arabic.\",\r\n+                                            onChange: (e) => {\r\n+                                                console.log('asdas');\r\n+\r\n+\r\n+\r\n+                                            },\r\n+\r\n+\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8}>\r\n+                                    <FormControl component=\"fieldset\">\r\n+                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n+\r\n+\r\n+                                            Exclude from Sales\r\n+                                        </InputLabel>\r\n+                                        <RadioGroup\r\n+                                            row\r\n+                                            value={excludeFromSales}\r\n+                                            onChange={(e) => setExcludeFromSales(e.target.value)}\r\n+                                        >\r\n+                                            <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n+                                            <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n+                                        </RadioGroup>\r\n+                                    </FormControl>\r\n+                                </Grid>\r\n+\r\n+                                {/* Radio Button: Exclude from Purchase */}\r\n+                                <Grid item xs={2.8}>\r\n+                                    <FormControl component=\"fieldset\">\r\n+                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n+\r\n+\r\n+                                            Exclude from Purchase\r\n+                                        </InputLabel>\r\n+                                        <RadioGroup\r\n+                                            row\r\n+                                            value={excludeFromPurchase}\r\n+                                            onChange={(e) => setExcludeFromPurchase(e.target.value)}\r\n+                                        >\r\n+                                            <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n+                                            <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n+                                        </RadioGroup>\r\n+                                    </FormControl>\r\n+                                </Grid>\r\n+\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Tax Type *:'}\r\n+\r\n+                                        options={taxes}\r\n+                                        selected={tax}\r\n+                                        onSelect={(value) => {\r\n+                                            setTax(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.tax?.message}\r\n+                                        register={register1(\"tax\", {\r\n+                                            required: 'Please select tax .',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+\r\n+\r\n+\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Sales Account *:'}\r\n+\r\n+                                        options={accounts}\r\n+                                        selected={salesAccount}\r\n+                                        onSelect={(value) => {\r\n+                                            setSalesAccount(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.sales?.message}\r\n+                                        register={register1(\"sales\", {\r\n+                                            required: 'Please select sales account.',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Inventory Account *:'}\r\n+\r\n+                                        options={accounts}\r\n+                                        selected={inventoryAccount}\r\n+                                        onSelect={(value) => {\r\n+                                            setInventoryAccount(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.inventory?.message}\r\n+                                        register={register1(\"inventory\", {\r\n+                                            required: 'Please select inventory account.',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Cogs Account *:'}\r\n+\r\n+                                        options={accounts}\r\n+                                        selected={cogsAccount}\r\n+                                        onSelect={(value) => {\r\n+                                            setCogsAccount(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.cogs?.message}\r\n+                                        register={register1(\"cogs\", {\r\n+                                            required: 'Please select cogs account.',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Inventory Adjustment Account *:'}\r\n+\r\n+                                        options={accounts}\r\n+                                        selected={adjustmentAccount}\r\n+                                        onSelect={(value) => {\r\n+                                            setAdjustmentAccount(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.adjustment?.message}\r\n+                                        register={register1(\"adjustment\", {\r\n+                                            required: 'Please select adjustment account.',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Item Assembly Cost Account *:'}\r\n+\r\n+                                        options={accounts}\r\n+                                        selected={assemblyAccount}\r\n+                                        onSelect={(value) => {\r\n+                                            setAssemblyAccount(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.assembly?.message}\r\n+                                        register={register1(\"assembly\", {\r\n+                                            required: 'Please select assembly account.',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Cost Center *:'}\r\n+\r\n+                                        options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n+                                        selected={center}\r\n+                                        onSelect={(value) => {\r\n+                                            setCenter(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.center?.message}\r\n+                                        register={register1(\"center\", {\r\n+                                            required: 'Please select center .',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Item Type *:'}\r\n+\r\n+                                        options={[{ id: 'Manufactured', name: 'Manufactured' }, { id: 'Service/Consumable', name: 'Service/Consumable' }, { id: 'Purchased', name: 'Purchased' }]}\r\n+                                        selected={itemType}\r\n+                                        onSelect={(value) => {\r\n+                                            setItemType(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.type?.message}\r\n+                                        register={register1(\"type\", {\r\n+                                            required: 'Please select type .',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+                                <Grid item xs={2.8} >\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        label={'Unit *:'}\r\n+\r\n+                                        options={[{ id: 'Each', name: 'Each' }, { id: 'Hours', name: 'Hours' }]}\r\n+                                        selected={unit}\r\n+                                        onSelect={(value) => {\r\n+                                            setUnit(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors1?.unit?.message}\r\n+                                        register={register1(\"unit\", {\r\n+                                            required: 'Please select unit .',\r\n+                                        })}\r\n+                                    />\r\n+                                </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                <Grid container justifyContent={'flex-end'}>\r\n+                                    <PrimaryButton\r\n+                                        bgcolor={Colors.buttonBg}\r\n+                                        title=\"Submit\"\r\n+                                        type={'submit'}\r\n+\r\n+\r\n+                                    />\r\n+                                </Grid>\r\n+                            </Grid>\r\n+                        </Box>\r\n+                    </Box></>}\r\n+\r\n+            </Box>\r\n+        </>\r\n+    );\r\n+}\r\n+\r\n+export default UpdateCategory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744496864917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,9 +365,9 @@\n \r\n     const getData = async () => {\r\n         try {\r\n             let params = {\r\n-                customer_id: id\r\n+                category_id: id\r\n             };\r\n \r\n             const { data } = await CustomerServices.getCategoryDetail(params);\r\n             let detail = data?.customer\r\n@@ -766,775 +766,5 @@\n         </>\r\n     );\r\n }\r\n \r\n-export default UpdateCategory;\n-import React, { useEffect, useRef, useState } from 'react';\r\n-import { Avatar, Box, Checkbox, Container, FormControlLabel, FormLabel, Grid, IconButton, InputLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\n-import RegisterContainer from 'container/Register'\r\n-import { useTheme } from '@mui/material/styles';\r\n-import MobileStepper from '@mui/material/MobileStepper';\r\n-import Button from '@mui/material/Button';\r\n-import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\n-import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\n-import { PrimaryButton } from 'components/Buttons';\r\n-import Colors from 'assets/Style/Colors';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-import { Controller, useForm } from 'react-hook-form';\r\n-import UploadFile from 'components/UploadFile';\r\n-import InputField from 'components/Input';\r\n-import DatePicker from 'components/DatePicker';\r\n-import { ErrorToaster } from 'components/Toaster';\r\n-import { FormControl } from '@mui/base';\r\n-import LabelCustomInput from 'components/Input/LabelCustomInput';\r\n-import SelectField from 'components/Select';\r\n-import { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\n-import instance from 'config/axios';\r\n-import routes from 'services/System/routes';\r\n-import CustomerServices from 'services/Customer';\r\n-import CustomerService from '../DashboardPages/CustomerService';\r\n-import { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\n-import moment from 'moment';\r\n-import { Link, useNavigate } from 'react-router-dom';\r\n-import SystemServices from 'services/System';\r\n-import UploadFileSingle from 'components/UploadFileSingle';\r\n-import { Images } from 'assets';\r\n-import { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\n-import { addMonths } from 'date-fns';\r\n-import { useAuth } from 'context/UseContext';\r\n-import DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n-import axios from 'axios';\r\n-import UploadIcon from \"@mui/icons-material/Upload\";\r\n-import FinanceServices from 'services/Finance';\r\n-\r\n-\r\n-function UpdateCategory() {\r\n-    const theme = useTheme();\r\n-    const { user } = useAuth()\r\n-    const navigate = useNavigate()\r\n-    const [formChange, setFormChange] = useState(false)\r\n-    const [submit, setSubmit] = useState(false)\r\n-    const [excludeFromSales, setExcludeFromSales] = useState('no');\r\n-    const [excludeFromPurchase, setExcludeFromPurchase] = useState('no');\r\n-\r\n-    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n-    const {\r\n-        register: register1,\r\n-        handleSubmit: handleSubmit1,\r\n-        setValue: setValue1,\r\n-        getValues: getValues1,\r\n-        control,\r\n-        watch,\r\n-        formState: { errors: errors1 },\r\n-\r\n-    } = useForm();\r\n-\r\n-    // Watch all form data\r\n-    console.log(watch());\r\n-\r\n-\r\n-    const isFormDataEmpty = (data) => {\r\n-        // Check if all form fields are empty\r\n-        return Object.values(data).every((value) => {\r\n-            // If the value is an object (like companyLogo), check if it's empty\r\n-            if (typeof value === 'object' && value !== null) {\r\n-                return Object.keys(value).length === 0;\r\n-            }\r\n-            // Otherwise, check if the value is an empty string\r\n-            return value === \"\";\r\n-        });\r\n-    };\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-    const allowFilesType = [\r\n-        'image/png',\r\n-        'image/jpg',\r\n-        'image/jpeg',\r\n-        'application/pdf',\r\n-        'application/vnd.ms-excel',\r\n-        'application/msword',\r\n-        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n-    ];\r\n-    const allowFilesType2 = [\r\n-        'image/png',\r\n-        'image/jpg',\r\n-        'image/jpeg',\r\n-\r\n-    ];\r\n-    const [guarantors, setGuarantors] = useState([])\r\n-    const [activeStep, setActiveStep] = React.useState(1);\r\n-\r\n-    // *For Deposit Slip\r\n-    const [progress, setProgress] = useState(0);\r\n-    const [uploadedSize, setUploadedSize] = useState(0);\r\n-    const [slipDetail, setSlipDetail] = useState([]);\r\n-\r\n-\r\n-    const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n-    const [passport, setPassport] = useState()\r\n-    const [allocation, setAllocation] = useState(false)\r\n-    const [depositError, setDepositError] = useState(false)\r\n-    const [loading, setLoading] = useState(false)\r\n-    const [emailVerify, setEmailVerify] = useState(false)\r\n-    const [isUploading, setIsUploading] = useState(false);\r\n-    const [loader, setLoader] = useState(false)\r\n-    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n-        monthlyVisaServiceCharges: false,\r\n-        vipMedical: false,\r\n-        extraTyping: true,\r\n-    });\r\n-\r\n-    const [center, setCenter] = useState(null)\r\n-    const [status, setStatus] = useState(null)\r\n-\r\n-    // *For Stepper Forms Data\r\n-    const [stepFormData, setStepFormData] = useState()\r\n-    const [step1FormData, setStep1FormData] = useState();\r\n-    const [selectedType, setSelectedType] = useState(null)\r\n-    const [date, setDate] = useState(null)\r\n-    const [balanceType, setBalanceType] = useState(null)\r\n-    const [imageURL, setImageURL] = useState(null)\r\n-    const fileInputRef = useRef(null);\r\n-    const [hovered, setHovered] = useState(false);\r\n-    const [accounts, setAccounts] = useState([])\r\n-    const [salesAccount, setSalesAccount] = useState(null)\r\n-    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n-    const [cogsAccount, setCogsAccount] = useState(null)\r\n-    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n-    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n-    const [itemType, setItemType] = useState(null)\r\n-    const [unit, setUnit] = useState(null)\r\n-    const [taxes, setTaxes] = useState([])\r\n-    const [tax, setTax] = useState(null)\r\n-    //documents array\r\n-\r\n-\r\n-    const handleImageClick = () => {\r\n-        fileInputRef.current.click();\r\n-    };\r\n-\r\n-\r\n-\r\n-\r\n-    const handleNext = () => {\r\n-        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n-    };\r\n-\r\n-\r\n-\r\n-\r\n-    const handleUpload = async (file, docs) => {\r\n-        setProgress(0);\r\n-        try {\r\n-            const formData = new FormData();\r\n-            formData.append(\"document\", file);\r\n-            console.log(file.size);\r\n-            console.log(getFileSize(file.size))\r\n-            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n-                onUploadProgress: (progressEvent) => {\r\n-                    const uploadedBytes = progressEvent.loaded;\r\n-                    const percentCompleted = Math.round(\r\n-                        (uploadedBytes * 100) / progressEvent.total\r\n-                    );\r\n-\r\n-                    setProgress(percentCompleted);\r\n-                    console.log(getFileSize(uploadedBytes));\r\n-                    setUploadedSize(getFileSize(uploadedBytes));\r\n-                },\r\n-            });\r\n-            if (data) {\r\n-                docs[0].isUpload = true;\r\n-                docs[0].file = data?.data?.nations;\r\n-                setSlipDetail(docs);\r\n-                console.log(data, 'asddasasd');\r\n-                return data?.data?.path\r\n-\r\n-            }\r\n-        } catch (error) {\r\n-            ErrorToaster(error);\r\n-        }\r\n-    };\r\n-    const submitForm = async (formData) => {\r\n-        console.log(formData);\r\n-        try {\r\n-            let obj = {\r\n-                name: formData?.companyName,\r\n-\r\n-                phone: formData?.mobile,\r\n-                email: formData?.email,\r\n-                address: formData?.businessAddress,\r\n-                website: formData?.businessWebsite,\r\n-                cp_name: formData?.personName,\r\n-                cp_mobile: formData?.phone,\r\n-\r\n-            };\r\n-\r\n-            setStepFormData(obj);\r\n-            handleNext()\r\n-        } catch (error) {\r\n-            ErrorToaster(error);\r\n-        }\r\n-    };\r\n-\r\n-\r\n-\r\n-    console.log(watch());\r\n-\r\n-\r\n-    const submitForm1 = async (formData) => {\r\n-        console.log(formData);\r\n-        try {\r\n-            let obj = {\r\n-                name: formData?.name,\r\n-                name_ar: formData?.arabic,\r\n-                logo: imageURL,\r\n-                item_tax_type: tax?.id,\r\n-                item_type: itemType?.id,\r\n-                unit_of_measure: unit?.id,\r\n-                exclude_from_sales: excludeFromSales,\r\n-                exclude_from_purchase: excludeFromPurchase,\r\n-                sales_account_id: salesAccount?.id,\r\n-                inventory_account_id: inventoryAccount?.id,\r\n-                cogs_account_id: cogsAccount?.id,\r\n-                inventory_adjustment_account_id: adjustmentAccount?.id,\r\n-                item_assembly_costs_account_id: assemblyAccount?.id,\r\n-                cost_center: center?.id\r\n-\r\n-\r\n-            };\r\n-            const promise = CustomerServices.UpdateCategory(obj);\r\n-\r\n-            showPromiseToast(\r\n-                promise,\r\n-                'Saving...',\r\n-                'Added Successfully',\r\n-                'Something Went Wrong'\r\n-            );\r\n-            const response = await promise;\r\n-            if (response?.responseCode === 200) {\r\n-                navigate(\"/category-list\");\r\n-            }\r\n-\r\n-\r\n-        } catch (error) {\r\n-            ErrorToaster(error);\r\n-        }\r\n-    };\r\n-    const handleFileChange = async (e) => {\r\n-        try {\r\n-            const file = e.target.files[0];\r\n-            if (file) {\r\n-                setValue1(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-            }\r\n-            const formData = new FormData();\r\n-            formData.append(\"document\", e.target.files[0]);\r\n-\r\n-            const response = await axios.post(\r\n-                `${process.env.REACT_APP_BASE_URL}/system/uploadDocuments`,\r\n-                formData,\r\n-                {\r\n-                    headers: {\r\n-                        'Content-Type': 'multipart/form-data'\r\n-                    }\r\n-                }\r\n-            );\r\n-\r\n-            console.log(response?.data?.data?.path);\r\n-\r\n-            setImageURL(response?.data?.data?.path);\r\n-\r\n-\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    // *For Get Account\r\n-    const getAccounts = async (page, limit, filter) => {\r\n-        // setLoader(true)\r\n-        try {\r\n-\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 1000,\r\n-\r\n-            }\r\n-\r\n-            const { data } = await FinanceServices.getAccounts(params)\r\n-            console.log(data?.accounts?.rows);\r\n-\r\n-            setAccounts(data?.accounts?.rows)\r\n-\r\n-\r\n-\r\n-        } catch (error) {\r\n-            ErrorToaster(error)\r\n-        } finally {\r\n-            // setLoader(false)\r\n-        }\r\n-    }\r\n-    const getTax = async () => {\r\n-        // setLoader(true)\r\n-        try {\r\n-\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 1000,\r\n-\r\n-\r\n-            }\r\n-\r\n-            const { data } = await FinanceServices.getTax(params)\r\n-            console.log(data?.accounts?.rows);\r\n-\r\n-            setTaxes(data?.tax)\r\n-\r\n-\r\n-\r\n-        } catch (error) {\r\n-            ErrorToaster(error)\r\n-        } finally {\r\n-            // setLoader(false)\r\n-        }\r\n-    }\r\n-\r\n-    const verifyEmail = async (value) => {\r\n-        let Myemail = getValues1('email')\r\n-        if (Myemail) {\r\n-\r\n-            try {\r\n-                let obj = {\r\n-                    email: Myemail.toLowerCase(),\r\n-                    validate: true\r\n-\r\n-\r\n-                };\r\n-\r\n-                console.log(obj);\r\n-\r\n-                const { status } = await CustomerServices.addCustomer(obj);\r\n-\r\n-                console.log(status);\r\n-                if (status) {\r\n-                    setEmailVerify(true)\r\n-                }\r\n-\r\n-\r\n-            } catch (error) {\r\n-                console.log(error);\r\n-                setEmailVerify(false)\r\n-                showErrorToast(error)\r\n-            }\r\n-        }\r\n-    };\r\n-\r\n-    const getData = async () => {\r\n-      try {\r\n-        let params = {\r\n-          customer_id: id\r\n-        };\r\n-    \r\n-        const { data } = await CustomerServices.getCategoryDetail(params);\r\n-        let detail = data?.customer\r\n-        console.log(detail);\r\n-    \r\n-        setValue1('name', detail?.name)\r\n-        setValue1('email', detail?.email)\r\n-        setValue1('mobile', detail?.mobile)\r\n-        setValue1('address', detail?.address)\r\n-        setValue1('trn', detail?.trn)\r\n-        setValue1('eid', detail?.eid)\r\n-        setValue1('trade', detail?.trade_license_no)\r\n-        setValue1('paymentType',{ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n-        setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n-        setValue1('status',{ id: detail?.credit_status, name: detail?.credit_status })\r\n-        setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n-        setValue1('center',{ id: detail?.cost_center, name: detail?.cost_center })\r\n-        setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n-        setValue1('type',{ id: detail?.type, name: detail?.type })\r\n-        setBalanceType({ id: detail?.type, name: detail?.type })\r\n-        setDate(new Date(detail?.opening_balance_date))\r\n-        setValue1('balance', detail?.opening_balance)\r\n-        setValue1('credit', detail?.credit_limit)\r\n-        setValue1('notes', detail?.general_notes)\r\n-    \r\n-      } catch (error) {\r\n-        console.error(\"Error fetching location:\", error);\r\n-      }\r\n-    };\r\n-    useEffect(() => {\r\n-      getData()\r\n-    }, [])\r\n-\r\n-    useEffect(() => {\r\n-        getAccounts()\r\n-        getTax()\r\n-    }, [])\r\n-\r\n-\r\n-\r\n-    return (\r\n-        <>\r\n-            <Box sx={{ width: \"100%\" }}>\r\n-\r\n-\r\n-            </Box>\r\n-            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n-                {<>\r\n-\r\n-                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n-                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n-                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Service Category</Typography>\r\n-\r\n-                        </Box>\r\n-\r\n-                        <Box sx={{ p: 3 }}>\r\n-\r\n-                            <Grid item xs={10} mb={2}>\r\n-                                <InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Logo :*\r\n-                                </InputLabel>\r\n-\r\n-                                <Controller\r\n-                                    name=\"image\"\r\n-                                    control={control}\r\n-                                    rules={{ required: \" picture is required\" }}\r\n-                                    render={() => (\r\n-                                        <Box\r\n-                                            component={\"div\"}\r\n-                                            onMouseEnter={() => setHovered(true)}\r\n-                                            onMouseLeave={() => setHovered(false)}\r\n-                                            sx={{\r\n-                                                position: \"relative\",\r\n-                                                width: 75,\r\n-                                                height: 75,\r\n-                                                mt: 2,\r\n-                                            }}\r\n-                                        >\r\n-                                            <Avatar\r\n-                                                src={'https://pro.mangotech-api.com' + imageURL}\r\n-                                                alt=\"L\"\r\n-                                                sx={{\r\n-                                                    position: \"relative\",\r\n-                                                    width: \"100%\",\r\n-                                                    height: \"100%\",\r\n-                                                    borderRadius: \"50%\",\r\n-                                                    fontSize: 24,\r\n-                                                    backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n-                                                    color: \"white\",\r\n-                                                    cursor: \"pointer\",\r\n-                                                    objectFit: \"cover\",\r\n-                                                    textTransform: \"capitalize\",\r\n-                                                }}\r\n-                                                onClick={handleImageClick}\r\n-                                            />\r\n-\r\n-                                            {hovered && <IconButton\r\n-                                                sx={{\r\n-                                                    position: \"absolute\",\r\n-                                                    top: \"0\",\r\n-                                                    left: \"0\",\r\n-                                                    width: \"100%\",\r\n-                                                    padding: \"9px 15px\",\r\n-                                                    color: \"white\",\r\n-                                                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-                                                    borderRadius: \"50%\",\r\n-                                                    display: \"block\",\r\n-                                                    \"&:hover\": {\r\n-                                                        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n-                                                    },\r\n-                                                }}\r\n-                                                onClick={handleImageClick}\r\n-                                            >\r\n-                                                <UploadIcon />\r\n-                                                <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n-                                            </IconButton>}\r\n-\r\n-                                            <input\r\n-                                                type=\"file\"\r\n-                                                ref={fileInputRef}\r\n-                                                style={{ display: \"none\" }}\r\n-                                                onChange={handleFileChange}\r\n-                                                accept=\"image/*\"\r\n-                                            />\r\n-                                        </Box>\r\n-                                    )}\r\n-                                />\r\n-\r\n-                                {(errors1.image && !imageURL) && (\r\n-                                    <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n-                                        {errors1.image.message}\r\n-                                    </Typography>\r\n-                                )}\r\n-                            </Grid>\r\n-                            <Grid container sx={{ gap: '5px 25px' }}>\r\n-                                <Grid item xs={2.8}>\r\n-                                    <InputField\r\n-                                        label={\" Name :*\"}\r\n-                                        size={'small'}\r\n-                                        placeholder={\" Name\"}\r\n-                                        error={errors1?.name?.message}\r\n-                                        register={register1(\"name\", {\r\n-                                            required:\r\n-                                                \"Please enter your name.\"\r\n-\r\n-                                        })}\r\n-                                    /></Grid>\r\n-\r\n-\r\n-                                <Grid item xs={2.8}>\r\n-                                    <InputField\r\n-                                        label={\"Arabic Name :*\"}\r\n-                                        size={\"small\"}\r\n-                                        placeholder={\"Arabic Name\"}\r\n-                                        error={errors1?.arabic?.message}\r\n-                                        register={register1(\"arabic\", {\r\n-                                            required: \"Please enter your arabic.\",\r\n-                                            onChange: (e) => {\r\n-                                                console.log('asdas');\r\n-\r\n-\r\n-\r\n-                                            },\r\n-\r\n-\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8}>\r\n-                                    <FormControl component=\"fieldset\">\r\n-                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n-\r\n-\r\n-                                            Exclude from Sales\r\n-                                        </InputLabel>\r\n-                                        <RadioGroup\r\n-                                            row\r\n-                                            value={excludeFromSales}\r\n-                                            onChange={(e) => setExcludeFromSales(e.target.value)}\r\n-                                        >\r\n-                                            <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n-                                            <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n-                                        </RadioGroup>\r\n-                                    </FormControl>\r\n-                                </Grid>\r\n-\r\n-                                {/* Radio Button: Exclude from Purchase */}\r\n-                                <Grid item xs={2.8}>\r\n-                                    <FormControl component=\"fieldset\">\r\n-                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n-\r\n-\r\n-                                            Exclude from Purchase\r\n-                                        </InputLabel>\r\n-                                        <RadioGroup\r\n-                                            row\r\n-                                            value={excludeFromPurchase}\r\n-                                            onChange={(e) => setExcludeFromPurchase(e.target.value)}\r\n-                                        >\r\n-                                               <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n-                                               <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n-                                        </RadioGroup>\r\n-                                    </FormControl>\r\n-                                </Grid>\r\n-\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Tax Type *:'}\r\n-\r\n-                                        options={taxes}\r\n-                                        selected={tax}\r\n-                                        onSelect={(value) => {\r\n-                                            setTax(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.tax?.message}\r\n-                                        register={register1(\"tax\", {\r\n-                                            required: 'Please select tax .',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-\r\n-\r\n-\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Sales Account *:'}\r\n-\r\n-                                        options={accounts}\r\n-                                        selected={salesAccount}\r\n-                                        onSelect={(value) => {\r\n-                                            setSalesAccount(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.sales?.message}\r\n-                                        register={register1(\"sales\", {\r\n-                                            required: 'Please select sales account.',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Inventory Account *:'}\r\n-\r\n-                                        options={accounts}\r\n-                                        selected={inventoryAccount}\r\n-                                        onSelect={(value) => {\r\n-                                            setInventoryAccount(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.inventory?.message}\r\n-                                        register={register1(\"inventory\", {\r\n-                                            required: 'Please select inventory account.',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Cogs Account *:'}\r\n-\r\n-                                        options={accounts}\r\n-                                        selected={cogsAccount}\r\n-                                        onSelect={(value) => {\r\n-                                            setCogsAccount(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.cogs?.message}\r\n-                                        register={register1(\"cogs\", {\r\n-                                            required: 'Please select cogs account.',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Inventory Adjustment Account *:'}\r\n-\r\n-                                        options={accounts}\r\n-                                        selected={adjustmentAccount}\r\n-                                        onSelect={(value) => {\r\n-                                            setAdjustmentAccount(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.adjustment?.message}\r\n-                                        register={register1(\"adjustment\", {\r\n-                                            required: 'Please select adjustment account.',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Item Assembly Cost Account *:'}\r\n-\r\n-                                        options={accounts}\r\n-                                        selected={assemblyAccount}\r\n-                                        onSelect={(value) => {\r\n-                                            setAssemblyAccount(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.assembly?.message}\r\n-                                        register={register1(\"assembly\", {\r\n-                                            required: 'Please select assembly account.',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Cost Center *:'}\r\n-\r\n-                                        options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n-                                        selected={center}\r\n-                                        onSelect={(value) => {\r\n-                                            setCenter(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.center?.message}\r\n-                                        register={register1(\"center\", {\r\n-                                            required: 'Please select center .',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Item Type *:'}\r\n-\r\n-                                        options={[{ id: 'Manufactured', name: 'Manufactured' }, { id: 'Service/Consumable', name: 'Service/Consumable' }, { id: 'Purchased', name: 'Purchased' }]}\r\n-                                        selected={itemType}\r\n-                                        onSelect={(value) => {\r\n-                                            setItemType(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.type?.message}\r\n-                                        register={register1(\"type\", {\r\n-                                            required: 'Please select type .',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-                                <Grid item xs={2.8} >\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        label={'Unit *:'}\r\n-\r\n-                                        options={[{ id: 'Each', name: 'Each' }, { id: 'Hours', name: 'Hours' }]}\r\n-                                        selected={unit}\r\n-                                        onSelect={(value) => {\r\n-                                            setUnit(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors1?.unit?.message}\r\n-                                        register={register1(\"unit\", {\r\n-                                            required: 'Please select unit .',\r\n-                                        })}\r\n-                                    />\r\n-                                </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                <Grid container justifyContent={'flex-end'}>\r\n-                                    <PrimaryButton\r\n-                                        bgcolor={Colors.buttonBg}\r\n-                                        title=\"Submit\"\r\n-                                        type={'submit'}\r\n-\r\n-\r\n-                                    />\r\n-                                </Grid>\r\n-                            </Grid>\r\n-                        </Box>\r\n-                    </Box></>}\r\n-\r\n-            </Box>\r\n-        </>\r\n-    );\r\n-}\r\n-\r\n export default UpdateCategory;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744496985520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n                 category_id: id\r\n             };\r\n \r\n             const { data } = await CustomerServices.getCategoryDetail(params);\r\n-            let detail = data?.customer\r\n+            let detail = data?.category\r\n             console.log(detail);\r\n \r\n             setValue1('name', detail?.name)\r\n             setValue1('email', detail?.email)\r\n"
                },
                {
                    "date": 1744496998269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,13 +374,9 @@\n             console.log(detail);\r\n \r\n             setValue1('name', detail?.name)\r\n             setValue1('email', detail?.email)\r\n-            setValue1('mobile', detail?.mobile)\r\n-            setValue1('address', detail?.address)\r\n-            setValue1('trn', detail?.trn)\r\n-            setValue1('eid', detail?.eid)\r\n-            setValue1('trade', detail?.trade_license_no)\r\n+            \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setValue1('status', { id: detail?.credit_status, name: detail?.credit_status })\r\n             setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n"
                },
                {
                    "date": 1744497005031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,12 +383,9 @@\n             setValue1('center', { id: detail?.cost_center, name: detail?.cost_center })\r\n             setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n             setValue1('type', { id: detail?.type, name: detail?.type })\r\n             setBalanceType({ id: detail?.type, name: detail?.type })\r\n-            setDate(new Date(detail?.opening_balance_date))\r\n-            setValue1('balance', detail?.opening_balance)\r\n-            setValue1('credit', detail?.credit_limit)\r\n-            setValue1('notes', detail?.general_notes)\r\n+      \r\n \r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n"
                },
                {
                    "date": 1744497011892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,14 +377,9 @@\n             setValue1('email', detail?.email)\r\n             \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n-            setValue1('status', { id: detail?.credit_status, name: detail?.credit_status })\r\n-            setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n-            setValue1('center', { id: detail?.cost_center, name: detail?.cost_center })\r\n-            setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n-            setValue1('type', { id: detail?.type, name: detail?.type })\r\n-            setBalanceType({ id: detail?.type, name: detail?.type })\r\n+            \r\n       \r\n \r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n"
                },
                {
                    "date": 1744497031189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n             let detail = data?.category\r\n             console.log(detail);\r\n \r\n             setValue1('name', detail?.name)\r\n-            setValue1('email', detail?.email)\r\n+            setValue1('arabic', detail?.name_ar)\r\n             \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n"
                },
                {
                    "date": 1744497068571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,8 +374,9 @@\n             console.log(detail);\r\n \r\n             setValue1('name', detail?.name)\r\n             setValue1('arabic', detail?.name_ar)\r\n+            setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n             \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n"
                },
                {
                    "date": 1744497080818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,8 +375,9 @@\n \r\n             setValue1('name', detail?.name)\r\n             setValue1('arabic', detail?.name_ar)\r\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n+            setExcludeFromSale(detail?.exclude_from_purchase)\r\n             \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n"
                },
                {
                    "date": 1744497092438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,9 +375,9 @@\n \r\n             setValue1('name', detail?.name)\r\n             setValue1('arabic', detail?.name_ar)\r\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n-            setExcludeFromSale(detail?.exclude_from_purchase)\r\n+            setExcludeFromSales(detail?.exclude_from_sales)\r\n             \r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n"
                },
                {
                    "date": 1744497142218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n             setValue1('name', detail?.name)\r\n             setValue1('arabic', detail?.name_ar)\r\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n             setExcludeFromSales(detail?.exclude_from_sales)\r\n-            \r\n+            setSalesAccount(detail?.sales_account)\r\n             setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n       \r\n"
                },
                {
                    "date": 1744497149131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,9 +377,9 @@\n             setValue1('arabic', detail?.name_ar)\r\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n             setExcludeFromSales(detail?.exclude_from_sales)\r\n             setSalesAccount(detail?.sales_account)\r\n-            setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+            setValue1('sales', )\r\n             setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n             \r\n       \r\n \r\n"
                },
                {
                    "date": 1744497204961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,10 @@\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n             setExcludeFromSales(detail?.exclude_from_sales)\r\n             setSalesAccount(detail?.sales_account)\r\n             setValue1('sales', detail?.sales_account)\r\n-            setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n+            setSalesAccount(detail?.item_assembly_costs_account)\r\n+            setValue1('sales', detail?.item_assembly_costs_account)\r\n             \r\n       \r\n \r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1744497211265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,9 +378,9 @@\n             setExcludeFromPurchase(detail?.exclude_from_purchase)\r\n             setExcludeFromSales(detail?.exclude_from_sales)\r\n             setSalesAccount(detail?.sales_account)\r\n             setValue1('sales', detail?.sales_account)\r\n-            setSalesAccount(detail?.item_assembly_costs_account)\r\n+            setAssemblyAccount(detail?.item_assembly_costs_account)\r\n             setValue1('sales', detail?.item_assembly_costs_account)\r\n             \r\n       \r\n \r\n"
                }
            ],
            "date": 1744496715294,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, Box, Checkbox, Container, FormControlLabel, FormLabel, Grid, IconButton, InputLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\nimport axios from 'axios';\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from 'services/Finance';\r\n\r\n\r\nfunction UpdateCategory() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth()\r\n    const navigate = useNavigate()\r\n    const [formChange, setFormChange] = useState(false)\r\n    const [submit, setSubmit] = useState(false)\r\n    const [excludeFromSales, setExcludeFromSales] = useState('no');\r\n    const [excludeFromPurchase, setExcludeFromPurchase] = useState('no');\r\n\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n    console.log(watch());\r\n\r\n\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === 'object' && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n\r\n    ];\r\n    const [guarantors, setGuarantors] = useState([])\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n    const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n    const [passport, setPassport] = useState()\r\n    const [allocation, setAllocation] = useState(false)\r\n    const [depositError, setDepositError] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [emailVerify, setEmailVerify] = useState(false)\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false)\r\n    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n        monthlyVisaServiceCharges: false,\r\n        vipMedical: false,\r\n        extraTyping: true,\r\n    });\r\n\r\n    const [center, setCenter] = useState(null)\r\n    const [status, setStatus] = useState(null)\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState()\r\n    const [step1FormData, setStep1FormData] = useState();\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [date, setDate] = useState(null)\r\n    const [balanceType, setBalanceType] = useState(null)\r\n    const [imageURL, setImageURL] = useState(null)\r\n    const fileInputRef = useRef(null);\r\n    const [hovered, setHovered] = useState(false);\r\n    const [accounts, setAccounts] = useState([])\r\n    const [salesAccount, setSalesAccount] = useState(null)\r\n    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n    const [cogsAccount, setCogsAccount] = useState(null)\r\n    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n    const [itemType, setItemType] = useState(null)\r\n    const [unit, setUnit] = useState(null)\r\n    const [taxes, setTaxes] = useState([])\r\n    const [tax, setTax] = useState(null)\r\n    //documents array\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file.size);\r\n            console.log(getFileSize(file.size))\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                setSlipDetail(docs);\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const submitForm = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.companyName,\r\n\r\n                phone: formData?.mobile,\r\n                email: formData?.email,\r\n                address: formData?.businessAddress,\r\n                website: formData?.businessWebsite,\r\n                cp_name: formData?.personName,\r\n                cp_mobile: formData?.phone,\r\n\r\n            };\r\n\r\n            setStepFormData(obj);\r\n            handleNext()\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    console.log(watch());\r\n\r\n\r\n    const submitForm1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.name,\r\n                name_ar: formData?.arabic,\r\n                logo: imageURL,\r\n                item_tax_type: tax?.id,\r\n                item_type: itemType?.id,\r\n                unit_of_measure: unit?.id,\r\n                exclude_from_sales: excludeFromSales,\r\n                exclude_from_purchase: excludeFromPurchase,\r\n                sales_account_id: salesAccount?.id,\r\n                inventory_account_id: inventoryAccount?.id,\r\n                cogs_account_id: cogsAccount?.id,\r\n                inventory_adjustment_account_id: adjustmentAccount?.id,\r\n                item_assembly_costs_account_id: assemblyAccount?.id,\r\n                cost_center: center?.id\r\n\r\n\r\n            };\r\n            const promise = CustomerServices.UpdateCategory(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/category-list\");\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleFileChange = async (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue1(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                `${process.env.REACT_APP_BASE_URL}/system/uploadDocuments`,\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL(response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    // *For Get Account\r\n    const getAccounts = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getAccounts(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setAccounts(data?.accounts?.rows)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getTax = async () => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n\r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getTax(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setTaxes(data?.tax)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const verifyEmail = async (value) => {\r\n        let Myemail = getValues1('email')\r\n        if (Myemail) {\r\n\r\n            try {\r\n                let obj = {\r\n                    email: Myemail.toLowerCase(),\r\n                    validate: true\r\n\r\n\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n                console.log(status);\r\n                if (status) {\r\n                    setEmailVerify(true)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setEmailVerify(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAccounts()\r\n        getTax()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n            </Box>\r\n            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n                {<>\r\n\r\n                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Service Category</Typography>\r\n\r\n                        </Box>\r\n\r\n                        <Box sx={{ p: 3 }}>\r\n\r\n                            <Grid item xs={10} mb={2}>\r\n                                <InputLabel sx={{\r\n                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                    fontSize: \"14px\",\r\n                                    color: \"#333\",\r\n                                    marginBottom: \"4px\",\r\n                                }}>\r\n\r\n                                    Logo :*\r\n                                </InputLabel>\r\n\r\n                                <Controller\r\n                                    name=\"image\"\r\n                                    control={control}\r\n                                    rules={{ required: \" picture is required\" }}\r\n                                    render={() => (\r\n                                        <Box\r\n                                            component={\"div\"}\r\n                                            onMouseEnter={() => setHovered(true)}\r\n                                            onMouseLeave={() => setHovered(false)}\r\n                                            sx={{\r\n                                                position: \"relative\",\r\n                                                width: 75,\r\n                                                height: 75,\r\n                                                mt: 2,\r\n                                            }}\r\n                                        >\r\n                                            <Avatar\r\n                                                src={'https://pro.mangotech-api.com' + imageURL}\r\n                                                alt=\"L\"\r\n                                                sx={{\r\n                                                    position: \"relative\",\r\n                                                    width: \"100%\",\r\n                                                    height: \"100%\",\r\n                                                    borderRadius: \"50%\",\r\n                                                    fontSize: 24,\r\n                                                    backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n                                                    color: \"white\",\r\n                                                    cursor: \"pointer\",\r\n                                                    objectFit: \"cover\",\r\n                                                    textTransform: \"capitalize\",\r\n                                                }}\r\n                                                onClick={handleImageClick}\r\n                                            />\r\n\r\n                                            {hovered && <IconButton\r\n                                                sx={{\r\n                                                    position: \"absolute\",\r\n                                                    top: \"0\",\r\n                                                    left: \"0\",\r\n                                                    width: \"100%\",\r\n                                                    padding: \"9px 15px\",\r\n                                                    color: \"white\",\r\n                                                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                                                    borderRadius: \"50%\",\r\n                                                    display: \"block\",\r\n                                                    \"&:hover\": {\r\n                                                        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n                                                    },\r\n                                                }}\r\n                                                onClick={handleImageClick}\r\n                                            >\r\n                                                <UploadIcon />\r\n                                                <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n                                            </IconButton>}\r\n\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={fileInputRef}\r\n                                                style={{ display: \"none\" }}\r\n                                                onChange={handleFileChange}\r\n                                                accept=\"image/*\"\r\n                                            />\r\n                                        </Box>\r\n                                    )}\r\n                                />\r\n\r\n                                {(errors1.image && !imageURL) && (\r\n                                    <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n                                        {errors1.image.message}\r\n                                    </Typography>\r\n                                )}\r\n                            </Grid>\r\n                            <Grid container sx={{ gap: '5px 25px' }}>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\" Name :*\"}\r\n                                        size={'small'}\r\n                                        placeholder={\" Name\"}\r\n                                        error={errors1?.name?.message}\r\n                                        register={register1(\"name\", {\r\n                                            required:\r\n                                                \"Please enter your name.\"\r\n\r\n                                        })}\r\n                                    /></Grid>\r\n\r\n\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Arabic Name :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Arabic Name\"}\r\n                                        error={errors1?.arabic?.message}\r\n                                        register={register1(\"arabic\", {\r\n                                            required: \"Please enter your arabic.\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n\r\n\r\n                                            Exclude from Sales\r\n                                        </InputLabel>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            value={excludeFromSales}\r\n                                            onChange={(e) => setExcludeFromSales(e.target.value)}\r\n                                        >\r\n                                            <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n                                            <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                {/* Radio Button: Exclude from Purchase */}\r\n                                <Grid item xs={2.8}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, color: Colors.gray }}>\r\n\r\n\r\n                                            Exclude from Purchase\r\n                                        </InputLabel>\r\n                                        <RadioGroup\r\n                                            row\r\n                                            value={excludeFromPurchase}\r\n                                            onChange={(e) => setExcludeFromPurchase(e.target.value)}\r\n                                        >\r\n                                               <FormControlLabel value={true} control={<Radio />} label=\"Yes\" />\r\n                                               <FormControlLabel value={false} control={<Radio />} label=\"No\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Tax Type *:'}\r\n\r\n                                        options={taxes}\r\n                                        selected={tax}\r\n                                        onSelect={(value) => {\r\n                                            setTax(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.tax?.message}\r\n                                        register={register1(\"tax\", {\r\n                                            required: 'Please select tax .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Sales Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={salesAccount}\r\n                                        onSelect={(value) => {\r\n                                            setSalesAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.sales?.message}\r\n                                        register={register1(\"sales\", {\r\n                                            required: 'Please select sales account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Inventory Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={inventoryAccount}\r\n                                        onSelect={(value) => {\r\n                                            setInventoryAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.inventory?.message}\r\n                                        register={register1(\"inventory\", {\r\n                                            required: 'Please select inventory account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Cogs Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={cogsAccount}\r\n                                        onSelect={(value) => {\r\n                                            setCogsAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.cogs?.message}\r\n                                        register={register1(\"cogs\", {\r\n                                            required: 'Please select cogs account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Inventory Adjustment Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={adjustmentAccount}\r\n                                        onSelect={(value) => {\r\n                                            setAdjustmentAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.adjustment?.message}\r\n                                        register={register1(\"adjustment\", {\r\n                                            required: 'Please select adjustment account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Item Assembly Cost Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={assemblyAccount}\r\n                                        onSelect={(value) => {\r\n                                            setAssemblyAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.assembly?.message}\r\n                                        register={register1(\"assembly\", {\r\n                                            required: 'Please select assembly account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Cost Center *:'}\r\n\r\n                                        options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n                                        selected={center}\r\n                                        onSelect={(value) => {\r\n                                            setCenter(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.center?.message}\r\n                                        register={register1(\"center\", {\r\n                                            required: 'Please select center .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Item Type *:'}\r\n\r\n                                        options={[{ id: 'Manufactured', name: 'Manufactured' }, { id: 'Service/Consumable', name: 'Service/Consumable' }, { id: 'Purchased', name: 'Purchased' }]}\r\n                                        selected={itemType}\r\n                                        onSelect={(value) => {\r\n                                            setItemType(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.type?.message}\r\n                                        register={register1(\"type\", {\r\n                                            required: 'Please select type .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Unit *:'}\r\n\r\n                                        options={[{ id: 'Each', name: 'Each' }, { id: 'Hours', name: 'Hours' }]}\r\n                                        selected={unit}\r\n                                        onSelect={(value) => {\r\n                                            setUnit(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors1?.unit?.message}\r\n                                        register={register1(\"unit\", {\r\n                                            required: 'Please select unit .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <Grid container justifyContent={'flex-end'}>\r\n                                    <PrimaryButton\r\n                                        bgcolor={Colors.buttonBg}\r\n                                        title=\"Submit\"\r\n                                        type={'submit'}\r\n\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box></>}\r\n\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdateCategory;"
        }
    ]
}