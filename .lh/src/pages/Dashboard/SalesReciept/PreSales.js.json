{
    "sourceFile": "src/pages/Dashboard/SalesReciept/PreSales.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1744624118444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744624128221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     }\r\n   }\r\n })\r\n \r\n-function CategoryList() {\r\n+function PreSalesList() {\r\n \r\n   const navigate = useNavigate();\r\n   const classes = useStyles();\r\n   const dispatch = useDispatch();\r\n@@ -415,5 +415,5 @@\n     </Box>\r\n   );\r\n }\r\n \r\n-export default CategoryList;\n\\ No newline at end of file\n+export default PreSalesList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744624431008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,9 @@\n       </SimpleDialog>\r\n \r\n \r\n       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Service Category List</Typography>\r\n+        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Pre Sales List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n           title=\"Create\"\r\n           onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n"
                },
                {
                    "date": 1744624477435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,34 +156,21 @@\n   const getCustomerQueue = async (page, limit, filter) => {\r\n     setLoader(true)\r\n \r\n     try {\r\n-      const Page = page ? page : currentPage\r\n-      const Limit = limit ? limit : pageLimit\r\n-      const Filter = filter ? { ...filters, ...filter } : null;\r\n-      setCurrentPage(Page)\r\n-      setPageLimit(Limit)\r\n-      setFilters(Filter)\r\n+ \r\n       let params = {\r\n         page: 1,\r\n         limit: 1000,\r\n       \r\n \r\n       }\r\n-      params = { ...params, ...Filter }\r\n+  \r\n       const { data } = await CustomerServices.getCategoryList(params)\r\n       setData(data?.categories);\r\n      \r\n      \r\n-      setPermissions(formatPermissionData(data?.permissions))\r\n-      console.log(formatPermissionData(data?.permissions));\r\n-\r\n-      setPermissions(formatPermissionData(data?.permissions))\r\n-      data?.permissions.forEach(e => {\r\n-        if (e?.route && e?.identifier && e?.permitted) {\r\n-          dispatch(addPermission(e?.route));\r\n-        }\r\n-      })\r\n+     \r\n     } catch (error) {\r\n       showErrorToast(error)\r\n     } finally {\r\n       setLoader(false)\r\n"
                },
                {
                    "date": 1744624533136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,10 +164,10 @@\n       \r\n \r\n       }\r\n   \r\n-      const { data } = await CustomerServices.getCategoryList(params)\r\n-      setData(data?.categories);\r\n+      const { data } = await CustomerServices.getPreSales(params)\r\n+      setData([]);\r\n      \r\n      \r\n      \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1744624553856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,8 +160,9 @@\n  \r\n       let params = {\r\n         page: 1,\r\n         limit: 1000,\r\n+        is_presale\r\n       \r\n \r\n       }\r\n   \r\n"
                },
                {
                    "date": 1744624614357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,11 +158,10 @@\n \r\n     try {\r\n  \r\n       let params = {\r\n-        page: 1,\r\n-        limit: 1000,\r\n-        is_presale\r\n+        \r\n+        is_presale:true\r\n       \r\n \r\n       }\r\n   \r\n"
                },
                {
                    "date": 1744624723686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n \r\n       }\r\n   \r\n       const { data } = await CustomerServices.getPreSales(params)\r\n-      setData([]);\r\n+      setData(data?.rows);\r\n      \r\n      \r\n      \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1744624917457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -384,9 +384,9 @@\n         <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Pre Sales List</Typography>\r\n         {true && <PrimaryButton\r\n          bgcolor={'#bd9b4a'}\r\n           title=\"Create\"\r\n-          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n+          onClick={() => { navigate('/sales-receipt'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n           loading={loading}\r\n         />}\r\n \r\n \r\n"
                },
                {
                    "date": 1744625284776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n \r\n     },\r\n     {\r\n       header: \"Customer\",\r\n-      accessorKey: \"name\",\r\n+      accessorKey: \"customer_name\",\r\n \r\n \r\n     },\r\n     {\r\n"
                },
                {
                    "date": 1744625304813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,10 +259,10 @@\n \r\n \r\n     },\r\n     {\r\n-        header: \"Arabic Name\",\r\n-        accessorKey: \"name_ar\",\r\n+        header: \"token_number\",\r\n+        accessorKey: \"token_number\",\r\n   \r\n   \r\n       },\r\n   \r\n"
                },
                {
                    "date": 1744625339123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,17 +259,17 @@\n \r\n \r\n     },\r\n     {\r\n-        header: \"token_number\",\r\n+        header: \"Token Number\",\r\n         accessorKey: \"token_number\",\r\n   \r\n   \r\n       },\r\n   \r\n     {\r\n-      header: \"Cost Center\",\r\n-      accessorKey: \"cost_center\",\r\n+      header: \"Created By\",\r\n+      accessorKey: \"creator\",\r\n \r\n \r\n     },\r\n     {\r\n"
                },
                {
                    "date": 1744625363868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,10 +268,14 @@\n   \r\n     {\r\n       header: \"Created By\",\r\n       accessorKey: \"creator\",\r\n+      cell: ({ row }) => (\r\n+        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n+          {row?.original?.name}\r\n+        </Box>\r\n+      ),\r\n \r\n-\r\n     },\r\n     {\r\n       id: \"created_at\",\r\n       header: \"Registration Date\",\r\n"
                },
                {
                    "date": 1744625370101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n       header: \"Created By\",\r\n       accessorKey: \"creator\",\r\n       cell: ({ row }) => (\r\n         <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n-          {row?.original?.name}\r\n+          {row?.original?.creator?.name}\r\n         </Box>\r\n       ),\r\n \r\n     },\r\n"
                },
                {
                    "date": 1744625380047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,8 +268,9 @@\n   \r\n     {\r\n       header: \"Created By\",\r\n       accessorKey: \"creator\",\r\n+      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n       cell: ({ row }) => (\r\n         <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n           {row?.original?.creator?.name}\r\n         </Box>\r\n"
                },
                {
                    "date": 1744625386657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n   \r\n     {\r\n       header: \"Created By\",\r\n       accessorKey: \"creator\",\r\n-      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n+      accessorFn: (row) => row?.creator,\r\n       cell: ({ row }) => (\r\n         <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n           {row?.original?.creator?.name}\r\n         </Box>\r\n"
                },
                {
                    "date": 1744625414869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,15 @@\n         accessorKey: \"token_number\",\r\n   \r\n   \r\n       },\r\n+      {\r\n+        header: \"Total Amount\",\r\n+        accessorKey: \"token_number\",\r\n   \r\n+  \r\n+      },\r\n+  \r\n     {\r\n       header: \"Created By\",\r\n       accessorKey: \"creator\",\r\n       accessorFn: (row) => row?.creator,\r\n"
                },
                {
                    "date": 1744625453736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n   \r\n       },\r\n       {\r\n         header: \"Total Amount\",\r\n-        accessorKey: \"token_number\",\r\n+        accessorKey: \"total_amount\",\r\n   \r\n   \r\n       },\r\n   \r\n@@ -284,9 +284,9 @@\n \r\n     },\r\n     {\r\n       id: \"created_at\",\r\n-      header: \"Registration Date\",\r\n+      header: \"Created At\",\r\n       // Remove accessorKey and fix accessorFn to use row directly\r\n       accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n       cell: ({ row }) => (\r\n         <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n"
                },
                {
                    "date": 1744625593799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,9 +301,9 @@\n       cell: ({ row }) => (\r\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`//update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n           {/* <Box>\r\n             {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n           \r\n"
                },
                {
                    "date": 1744625833437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,14 +301,14 @@\n       cell: ({ row }) => (\r\n \r\n         <Box sx={{display:'flex',gap:1}}>\r\n           {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`//update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n-          {/* <Box>\r\n+          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+          <Box>\r\n             {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n           \r\n-          </Box> */}\r\n+          </Box>\r\n \r\n         </Box>\r\n       ),\r\n     },\r\n"
                },
                {
                    "date": 1744625857598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n     try {\r\n         let params = { customer_id: selectedData?.id }\r\n \r\n \r\n-        const { message } = await CustomerServices.DeleteCategory(params)\r\n+        const { message } = await CustomerServices.DeletePreSale(params)\r\n \r\n         SuccessToaster(message);\r\n         getCustomerQueue()\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1744625876917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import React, { Fragment, useEffect, useRef, useState } from 'react';\r\n import {\r\n-  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n-  FormControl,\r\n-  Select,\r\n-  MenuItem,\r\n-  ListItemText,\r\n-  Tooltip,\r\n-  Checkbox,\r\n-  InputAdornment,\r\n+    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n+    FormControl,\r\n+    Select,\r\n+    MenuItem,\r\n+    ListItemText,\r\n+    Tooltip,\r\n+    Checkbox,\r\n+    InputAdornment,\r\n } from '@mui/material';\r\n import { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\n import styled from '@emotion/styled';\r\n import { useNavigate } from 'react-router-dom';\r\n@@ -42,376 +42,380 @@\n import ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n \r\n // *For Table Style\r\n const Row = styled(TableRow)(({ theme }) => ({\r\n-  border: 0,\r\n+    border: 0,\r\n \r\n }));\r\n \r\n const Cell = styled(TableCell)(({ theme }) => ({\r\n-  [`&.${tableCellClasses.head}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n-    border: '1px solid #EEEEEE',\r\n-    padding: '15px',\r\n-    textAlign: 'left',\r\n-    whiteSpace: 'nowrap',\r\n-    color: '#434343',\r\n-    paddingRight: '50px',\r\n-    background: 'transparent',\r\n-    fontWeight: 'bold'\r\n+    [`&.${tableCellClasses.head}`]: {\r\n+        fontSize: 14,\r\n+        fontFamily: 'Public Sans',\r\n+        border: '1px solid #EEEEEE',\r\n+        padding: '15px',\r\n+        textAlign: 'left',\r\n+        whiteSpace: 'nowrap',\r\n+        color: '#434343',\r\n+        paddingRight: '50px',\r\n+        background: 'transparent',\r\n+        fontWeight: 'bold'\r\n \r\n-  },\r\n-  [`&.${tableCellClasses.body}`]: {\r\n-    fontSize: 14,\r\n-    fontFamily: 'Public Sans',\r\n+    },\r\n+    [`&.${tableCellClasses.body}`]: {\r\n+        fontSize: 14,\r\n+        fontFamily: 'Public Sans',\r\n \r\n-    textWrap: 'nowrap',\r\n-    padding: '5px !important',\r\n-    paddingLeft: '15px !important',\r\n+        textWrap: 'nowrap',\r\n+        padding: '5px !important',\r\n+        paddingLeft: '15px !important',\r\n \r\n-    '.MuiBox-root': {\r\n-      display: 'flex',\r\n-      gap: '6px',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      '.MuiBox-root': {\r\n-        cursor: 'pointer'\r\n-      }\r\n+        '.MuiBox-root': {\r\n+            display: 'flex',\r\n+            gap: '6px',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            '.MuiBox-root': {\r\n+                cursor: 'pointer'\r\n+            }\r\n+        },\r\n+        'svg': {\r\n+            width: 'auto',\r\n+            height: '24px',\r\n+        },\r\n+        '.MuiTypography-root': {\r\n+            textTransform: 'capitalize',\r\n+            fontFamily: FontFamily.NunitoRegular,\r\n+            textWrap: 'nowrap',\r\n+        },\r\n+        '.MuiButtonBase-root': {\r\n+            padding: '8px',\r\n+            width: '28px',\r\n+            height: '28px',\r\n+        }\r\n     },\r\n-    'svg': {\r\n-      width: 'auto',\r\n-      height: '24px',\r\n-    },\r\n-    '.MuiTypography-root': {\r\n-      textTransform: 'capitalize',\r\n-      fontFamily: FontFamily.NunitoRegular,\r\n-      textWrap: 'nowrap',\r\n-    },\r\n-    '.MuiButtonBase-root': {\r\n-      padding: '8px',\r\n-      width: '28px',\r\n-      height: '28px',\r\n-    }\r\n-  },\r\n }));\r\n \r\n const useStyles = makeStyles({\r\n-  loaderWrap: {\r\n-    display: 'flex',\r\n-    height: 100,\r\n-    '& svg': {\r\n-      width: '40px !important',\r\n-      height: '40px !important'\r\n+    loaderWrap: {\r\n+        display: 'flex',\r\n+        height: 100,\r\n+        '& svg': {\r\n+            width: '40px !important',\r\n+            height: '40px !important'\r\n+        }\r\n     }\r\n-  }\r\n })\r\n \r\n function PreSalesList() {\r\n \r\n-  const navigate = useNavigate();\r\n-  const classes = useStyles();\r\n-  const dispatch = useDispatch();\r\n-  const contentRef = useRef(null);\r\n-  const [status, setStatus] = useState(null)\r\n-  const [statusDialog, setStatusDialog] = useState(false)\r\n-  const [selectedData, setSelectedData] = useState(null)\r\n-  const [tableLoader, setTableLoader] = useState(false)\r\n-  const {\r\n-    register,\r\n-    handleSubmit,\r\n-    formState: { errors },\r\n-    setValue,\r\n-    getValues,\r\n-    reset,\r\n-  } = useForm();\r\n+    const navigate = useNavigate();\r\n+    const classes = useStyles();\r\n+    const dispatch = useDispatch();\r\n+    const contentRef = useRef(null);\r\n+    const [status, setStatus] = useState(null)\r\n+    const [statusDialog, setStatusDialog] = useState(false)\r\n+    const [selectedData, setSelectedData] = useState(null)\r\n+    const [tableLoader, setTableLoader] = useState(false)\r\n+    const {\r\n+        register,\r\n+        handleSubmit,\r\n+        formState: { errors },\r\n+        setValue,\r\n+        getValues,\r\n+        reset,\r\n+    } = useForm();\r\n \r\n-  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n+    const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n \r\n \r\n-  const [loader, setLoader] = useState(false);\r\n+    const [loader, setLoader] = useState(false);\r\n \r\n-  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n+    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n \r\n-  // *For Customer Queue\r\n-  const [customerQueue, setCustomerQueue] = useState([]);\r\n-const [data, setData] = useState([])\r\n+    // *For Customer Queue\r\n+    const [customerQueue, setCustomerQueue] = useState([]);\r\n+    const [data, setData] = useState([])\r\n \r\n \r\n-  const [totalCount, setTotalCount] = useState(0);\r\n-  const [pageLimit, setPageLimit] = useState(50);\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n+    const [totalCount, setTotalCount] = useState(0);\r\n+    const [pageLimit, setPageLimit] = useState(50);\r\n+    const [currentPage, setCurrentPage] = useState(1);\r\n \r\n \r\n \r\n-  // *For Filters\r\n-  const [filters, setFilters] = useState({});\r\n+    // *For Filters\r\n+    const [filters, setFilters] = useState({});\r\n \r\n-  // *For Permissions\r\n-  const [permissions, setPermissions] = useState();\r\n+    // *For Permissions\r\n+    const [permissions, setPermissions] = useState();\r\n \r\n-  const [loading, setLoading] = useState(false)\r\n-  const [sort, setSort] = useState('desc')\r\n+    const [loading, setLoading] = useState(false)\r\n+    const [sort, setSort] = useState('desc')\r\n \r\n-  // *For Get Customer Queue\r\n-  const getCustomerQueue = async (page, limit, filter) => {\r\n-    setLoader(true)\r\n+    // *For Get Customer Queue\r\n+    const getCustomerQueue = async (page, limit, filter) => {\r\n+        setLoader(true)\r\n \r\n-    try {\r\n- \r\n-      let params = {\r\n-        \r\n-        is_presale:true\r\n-      \r\n+        try {\r\n \r\n-      }\r\n-  \r\n-      const { data } = await CustomerServices.getPreSales(params)\r\n-      setData(data?.rows);\r\n-     \r\n-     \r\n-     \r\n-    } catch (error) {\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoader(false)\r\n-    }\r\n-  }\r\n+            let params = {\r\n \r\n+                is_presale: true\r\n \r\n \r\n+            }\r\n \r\n+            const { data } = await CustomerServices.getPreSales(params)\r\n+            setData(data?.rows);\r\n \r\n \r\n \r\n-  const handleSort = (key) => {\r\n-    let data = {\r\n-      sort_by: key,\r\n-      sort_order: sort\r\n+        } catch (error) {\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+            setLoader(false)\r\n+        }\r\n     }\r\n-    Debounce(() => getCustomerQueue(1, '', data));\r\n-  }\r\n \r\n \r\n \r\n-  // *For Handle Filter\r\n \r\n-  const handleFilter = () => {\r\n-    let data = {\r\n-      search: getValues('search')\r\n+\r\n+\r\n+\r\n+    const handleSort = (key) => {\r\n+        let data = {\r\n+            sort_by: key,\r\n+            sort_order: sort\r\n+        }\r\n+        Debounce(() => getCustomerQueue(1, '', data));\r\n     }\r\n-    Debounce(() => getCustomerQueue(1, '', data));\r\n-  }\r\n-  const handleDelete = async (item) => {\r\n- \r\n \r\n-    try {\r\n-        let params = { customer_id: selectedData?.id }\r\n \r\n \r\n-        const { message } = await CustomerServices.DeletePreSale(params)\r\n+    // *For Handle Filter\r\n \r\n-        SuccessToaster(message);\r\n-        getCustomerQueue()\r\n-    } catch (error) {\r\n-        showErrorToast(error)\r\n-    } finally {\r\n-        // setLoader(false)\r\n+    const handleFilter = () => {\r\n+        let data = {\r\n+            search: getValues('search')\r\n+        }\r\n+        Debounce(() => getCustomerQueue(1, '', data));\r\n     }\r\n-}\r\n-  const UpdateStatus = async () => {\r\n-    try {\r\n-      let obj = {\r\n-        customer_id: selectedData?.id,\r\n-        is_active: status?.id,\r\n-      };\r\n+    const handleDelete = async (item) => {\r\n \r\n-      const promise = CustomerServices.CustomerStatus(obj);\r\n-      console.log(promise);\r\n \r\n-      showPromiseToast(\r\n-        promise,\r\n-        \"Saving...\",\r\n-        \"Added Successfully\",\r\n-        \"Something Went Wrong\"\r\n-      );\r\n+        try {\r\n+            let params = {\r\n+                id: selectedData?.id,\r\n+                is_deleted:true\r\n \r\n-      // Await the promise and then check its response\r\n-      const response = await promise;\r\n-      if (response?.responseCode === 200) {\r\n-        setStatusDialog(false);\r\n-        setStatus(null)\r\n-        getCustomerQueue();\r\n-      }\r\n-    } catch (error) {\r\n-      console.log(error);\r\n+            }\r\n+\r\n+\r\n+            const { message } = await CustomerServices.DeletePreSale(params)\r\n+\r\n+            SuccessToaster(message);\r\n+            getCustomerQueue()\r\n+        } catch (error) {\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+            // setLoader(false)\r\n+        }\r\n     }\r\n-  };\r\n-  const columns = [\r\n-    {\r\n-      header: \"SR No.\",\r\n-      accessorKey: \"id\",\r\n+    const UpdateStatus = async () => {\r\n+        try {\r\n+            let obj = {\r\n+                customer_id: selectedData?.id,\r\n+                is_active: status?.id,\r\n+            };\r\n \r\n+            const promise = CustomerServices.CustomerStatus(obj);\r\n+            console.log(promise);\r\n \r\n-    },\r\n-    {\r\n-      header: \"Customer\",\r\n-      accessorKey: \"customer_name\",\r\n+            showPromiseToast(\r\n+                promise,\r\n+                \"Saving...\",\r\n+                \"Added Successfully\",\r\n+                \"Something Went Wrong\"\r\n+            );\r\n \r\n+            // Await the promise and then check its response\r\n+            const response = await promise;\r\n+            if (response?.responseCode === 200) {\r\n+                setStatusDialog(false);\r\n+                setStatus(null)\r\n+                getCustomerQueue();\r\n+            }\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+        }\r\n+    };\r\n+    const columns = [\r\n+        {\r\n+            header: \"SR No.\",\r\n+            accessorKey: \"id\",\r\n \r\n-    },\r\n-    {\r\n-        header: \"Token Number\",\r\n-        accessorKey: \"token_number\",\r\n-  \r\n-  \r\n-      },\r\n-      {\r\n-        header: \"Total Amount\",\r\n-        accessorKey: \"total_amount\",\r\n-  \r\n-  \r\n-      },\r\n-  \r\n-    {\r\n-      header: \"Created By\",\r\n-      accessorKey: \"creator\",\r\n-      accessorFn: (row) => row?.creator,\r\n-      cell: ({ row }) => (\r\n-        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n-          {row?.original?.creator?.name}\r\n-        </Box>\r\n-      ),\r\n \r\n-    },\r\n-    {\r\n-      id: \"created_at\",\r\n-      header: \"Created At\",\r\n-      // Remove accessorKey and fix accessorFn to use row directly\r\n-      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n-      cell: ({ row }) => (\r\n-        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n-          {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n-        </Box>\r\n-      ),\r\n-    },\r\n+        },\r\n+        {\r\n+            header: \"Customer\",\r\n+            accessorKey: \"customer_name\",\r\n \r\n-    \r\n-    {\r\n-      header: \"Actions\",\r\n-      cell: ({ row }) => (\r\n \r\n-        <Box sx={{display:'flex',gap:1}}>\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n-          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n-          <Box>\r\n-            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n+        },\r\n+        {\r\n+            header: \"Token Number\",\r\n+            accessorKey: \"token_number\",\r\n \r\n-          \r\n-          </Box>\r\n \r\n-        </Box>\r\n-      ),\r\n-    },\r\n+        },\r\n+        {\r\n+            header: \"Total Amount\",\r\n+            accessorKey: \"total_amount\",\r\n \r\n-  ]\r\n \r\n+        },\r\n \r\n+        {\r\n+            header: \"Created By\",\r\n+            accessorKey: \"creator\",\r\n+            accessorFn: (row) => row?.creator,\r\n+            cell: ({ row }) => (\r\n+                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n+                    {row?.original?.creator?.name}\r\n+                </Box>\r\n+            ),\r\n \r\n-  useEffect(() => {\r\n-    getCustomerQueue()\r\n-  }, []);\r\n+        },\r\n+        {\r\n+            id: \"created_at\",\r\n+            header: \"Created At\",\r\n+            // Remove accessorKey and fix accessorFn to use row directly\r\n+            accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n+            cell: ({ row }) => (\r\n+                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n+                    {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n+                </Box>\r\n+            ),\r\n+        },\r\n \r\n-  return (\r\n-    <Box sx={{ p: 3 }}>\r\n \r\n-      <ConfirmationDialog\r\n-        open={confirmationDialog}\r\n-        onClose={() => setConfirmationDialog(false)}\r\n-        message={\"Are You Sure?\"}\r\n-        action={() => {\r\n-          setConfirmationDialog(false);\r\n-          handleDelete()\r\n+        {\r\n+            header: \"Actions\",\r\n+            cell: ({ row }) => (\r\n \r\n-        }}\r\n-      />\r\n-      <SimpleDialog\r\n-        open={statusDialog}\r\n-        onClose={() => setStatusDialog(false)}\r\n-        title={\"Change Status?\"}\r\n-      >\r\n-        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n-          <Grid container spacing={2}>\r\n-            <Grid item xs={12} sm={12}>\r\n-              <SelectField\r\n-                size={\"small\"}\r\n-                label={\"Select Status :\"}\r\n-                options={\r\n+                <Box sx={{ display: 'flex', gap: 1 }}>\r\n+                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n+                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n+                    <Box>\r\n+                        {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n-                  [\r\n-                    { id: false, name: \"Disabled\" },\r\n-                    { id: true, name: \"Enabled\" },\r\n \r\n-                  ]}\r\n-                selected={status}\r\n-                onSelect={(value) => {\r\n-                  setStatus(value);\r\n+                    </Box>\r\n+\r\n+                </Box>\r\n+            ),\r\n+        },\r\n+\r\n+    ]\r\n+\r\n+\r\n+\r\n+    useEffect(() => {\r\n+        getCustomerQueue()\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <Box sx={{ p: 3 }}>\r\n+\r\n+            <ConfirmationDialog\r\n+                open={confirmationDialog}\r\n+                onClose={() => setConfirmationDialog(false)}\r\n+                message={\"Are You Sure?\"}\r\n+                action={() => {\r\n+                    setConfirmationDialog(false);\r\n+                    handleDelete()\r\n+\r\n                 }}\r\n-                error={errors?.status?.message}\r\n-                register={register(\"status\", {\r\n-                  required: \"Please select status.\",\r\n-                })}\r\n-              />\r\n-            </Grid>\r\n-            <Grid container sx={{ justifyContent: \"center\" }}>\r\n-              <Grid\r\n-                item\r\n-                xs={6}\r\n-                sm={6}\r\n-                sx={{\r\n-                  mt: 2,\r\n-                  display: \"flex\",\r\n-                  justifyContent: \"space-between\",\r\n-                  gap: \"25px\",\r\n-                }}\r\n-              >\r\n-                <PrimaryButton\r\n-                  bgcolor={Colors.primary}\r\n-                  title=\"Yes,Confirm\"\r\n-                  type=\"submit\"\r\n-                />\r\n-                <PrimaryButton\r\n-                  onClick={() => setStatusDialog(false)}\r\n-                  bgcolor={\"#FF1F25\"}\r\n-                  title=\"No,Cancel\"\r\n-                />\r\n-              </Grid>\r\n-            </Grid>\r\n-          </Grid>\r\n-        </Box>\r\n-      </SimpleDialog>\r\n+            />\r\n+            <SimpleDialog\r\n+                open={statusDialog}\r\n+                onClose={() => setStatusDialog(false)}\r\n+                title={\"Change Status?\"}\r\n+            >\r\n+                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n+                    <Grid container spacing={2}>\r\n+                        <Grid item xs={12} sm={12}>\r\n+                            <SelectField\r\n+                                size={\"small\"}\r\n+                                label={\"Select Status :\"}\r\n+                                options={\r\n \r\n+                                    [\r\n+                                        { id: false, name: \"Disabled\" },\r\n+                                        { id: true, name: \"Enabled\" },\r\n \r\n-      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n-        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Pre Sales List</Typography>\r\n-        {true && <PrimaryButton\r\n-         bgcolor={'#bd9b4a'}\r\n-          title=\"Create\"\r\n-          onClick={() => { navigate('/sales-receipt'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n-          loading={loading}\r\n-        />}\r\n+                                    ]}\r\n+                                selected={status}\r\n+                                onSelect={(value) => {\r\n+                                    setStatus(value);\r\n+                                }}\r\n+                                error={errors?.status?.message}\r\n+                                register={register(\"status\", {\r\n+                                    required: \"Please select status.\",\r\n+                                })}\r\n+                            />\r\n+                        </Grid>\r\n+                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n+                            <Grid\r\n+                                item\r\n+                                xs={6}\r\n+                                sm={6}\r\n+                                sx={{\r\n+                                    mt: 2,\r\n+                                    display: \"flex\",\r\n+                                    justifyContent: \"space-between\",\r\n+                                    gap: \"25px\",\r\n+                                }}\r\n+                            >\r\n+                                <PrimaryButton\r\n+                                    bgcolor={Colors.primary}\r\n+                                    title=\"Yes,Confirm\"\r\n+                                    type=\"submit\"\r\n+                                />\r\n+                                <PrimaryButton\r\n+                                    onClick={() => setStatusDialog(false)}\r\n+                                    bgcolor={\"#FF1F25\"}\r\n+                                    title=\"No,Cancel\"\r\n+                                />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </Box>\r\n+            </SimpleDialog>\r\n \r\n \r\n-      </Box>\r\n+            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n+                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Pre Sales List</Typography>\r\n+                {true && <PrimaryButton\r\n+                    bgcolor={'#bd9b4a'}\r\n+                    title=\"Create\"\r\n+                    onClick={() => { navigate('/sales-receipt'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n+                    loading={loading}\r\n+                />}\r\n \r\n-      {/* Filters */}\r\n-      <Box >\r\n \r\n+            </Box>\r\n \r\n-        {<DataTable loading={loader} data={data} columns={columns} />}\r\n-      </Box>\r\n+            {/* Filters */}\r\n+            <Box >\r\n \r\n-    </Box>\r\n-  );\r\n+\r\n+                {<DataTable loading={loader} data={data} columns={columns} />}\r\n+            </Box>\r\n+\r\n+        </Box>\r\n+    );\r\n }\r\n \r\n export default PreSalesList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744625932987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n \r\n \r\n         try {\r\n             let params = {\r\n-                id: selectedData?.id,\r\n+                reception_id: selectedData?.id,\r\n                 is_deleted:true\r\n \r\n             }\r\n \r\n"
                },
                {
                    "date": 1744626354161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n \r\n \r\n         try {\r\n             let params = {\r\n-                reception_id: selectedData?.id,\r\n+                id: selectedData?.id,\r\n                 is_deleted:true\r\n \r\n             }\r\n \r\n"
                },
                {
                    "date": 1744635654435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n \r\n         try {\r\n             let params = {\r\n                 id: selectedData?.id,\r\n-                is_deleted:true\r\n+                \r\n \r\n             }\r\n \r\n \r\n@@ -304,9 +304,9 @@\n             header: \"Actions\",\r\n             cell: ({ row }) => (\r\n \r\n                 <Box sx={{ display: 'flex', gap: 1 }}>\r\n-                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n+              \r\n                     {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-presale/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n                     <Box>\r\n                         {true && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n \r\n"
                }
            ],
            "date": 1744624118444,
            "name": "Commit-0",
            "content": "import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport DataTable from 'components/DataTable';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction CategoryList() {\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [status, setStatus] = useState(null)\r\n  const [statusDialog, setStatusDialog] = useState(false)\r\n  const [selectedData, setSelectedData] = useState(null)\r\n  const [tableLoader, setTableLoader] = useState(false)\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n    getValues,\r\n    reset,\r\n  } = useForm();\r\n\r\n  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\nconst [data, setData] = useState([])\r\n\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [sort, setSort] = useState('desc')\r\n\r\n  // *For Get Customer Queue\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    setLoader(true)\r\n\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = filter ? { ...filters, ...filter } : null;\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      \r\n\r\n      }\r\n      params = { ...params, ...Filter }\r\n      const { data } = await CustomerServices.getCategoryList(params)\r\n      setData(data?.categories);\r\n     \r\n     \r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      console.log(formatPermissionData(data?.permissions));\r\n\r\n      setPermissions(formatPermissionData(data?.permissions))\r\n      data?.permissions.forEach(e => {\r\n        if (e?.route && e?.identifier && e?.permitted) {\r\n          dispatch(addPermission(e?.route));\r\n        }\r\n      })\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoader(false)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n\r\n\r\n\r\n  // *For Handle Filter\r\n\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues('search')\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n  const handleDelete = async (item) => {\r\n \r\n\r\n    try {\r\n        let params = { customer_id: selectedData?.id }\r\n\r\n\r\n        const { message } = await CustomerServices.DeleteCategory(params)\r\n\r\n        SuccessToaster(message);\r\n        getCustomerQueue()\r\n    } catch (error) {\r\n        showErrorToast(error)\r\n    } finally {\r\n        // setLoader(false)\r\n    }\r\n}\r\n  const UpdateStatus = async () => {\r\n    try {\r\n      let obj = {\r\n        customer_id: selectedData?.id,\r\n        is_active: status?.id,\r\n      };\r\n\r\n      const promise = CustomerServices.CustomerStatus(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setStatusDialog(false);\r\n        setStatus(null)\r\n        getCustomerQueue();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const columns = [\r\n    {\r\n      header: \"SR No.\",\r\n      accessorKey: \"id\",\r\n\r\n\r\n    },\r\n    {\r\n      header: \"Customer\",\r\n      accessorKey: \"name\",\r\n\r\n\r\n    },\r\n    {\r\n        header: \"Arabic Name\",\r\n        accessorKey: \"name_ar\",\r\n  \r\n  \r\n      },\r\n  \r\n    {\r\n      header: \"Cost Center\",\r\n      accessorKey: \"cost_center\",\r\n\r\n\r\n    },\r\n    {\r\n      id: \"created_at\",\r\n      header: \"Registration Date\",\r\n      // Remove accessorKey and fix accessorFn to use row directly\r\n      accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n      cell: ({ row }) => (\r\n        <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n          {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n    \r\n    {\r\n      header: \"Actions\",\r\n      cell: ({ row }) => (\r\n\r\n        <Box sx={{display:'flex',gap:1}}>\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/service-category-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-service-category/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n          {/* <Box>\r\n            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n\r\n          \r\n          </Box> */}\r\n\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n  ]\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCustomerQueue()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n\r\n      <ConfirmationDialog\r\n        open={confirmationDialog}\r\n        onClose={() => setConfirmationDialog(false)}\r\n        message={\"Are You Sure?\"}\r\n        action={() => {\r\n          setConfirmationDialog(false);\r\n          handleDelete()\r\n\r\n        }}\r\n      />\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={\r\n\r\n                  [\r\n                    { id: false, name: \"Disabled\" },\r\n                    { id: true, name: \"Enabled\" },\r\n\r\n                  ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Service Category List</Typography>\r\n        {true && <PrimaryButton\r\n         bgcolor={'#bd9b4a'}\r\n          title=\"Create\"\r\n          onClick={() => { navigate('/create-service-category'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n          loading={loading}\r\n        />}\r\n\r\n\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box >\r\n\r\n\r\n        {<DataTable loading={loader} data={data} columns={columns} />}\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CategoryList;"
        }
    ]
}