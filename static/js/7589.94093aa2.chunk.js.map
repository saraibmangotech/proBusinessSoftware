{"version":3,"file":"static/js/7589.94093aa2.chunk.js","mappings":"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","sources":["pages/Dashboard/Payments/UpdateReceipt.js","../node_modules/@mui/icons-material/Search.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Checkbox,\r\n    Container,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Grid,\r\n    IconButton,\r\n    InputLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Table,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n    TableBody,\r\n    TableHead,\r\n    TextField,\r\n    Paper,\r\n} from \"@mui/material\";\r\nimport RegisterContainer from \"container/Register\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport MobileStepper from \"@mui/material/MobileStepper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport InputField from \"components/Input\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport { ErrorToaster } from \"components/Toaster\";\r\nimport { FormControl } from \"@mui/base\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport SelectField from \"components/Select\";\r\nimport {\r\n    CleanTypes,\r\n    Debounce,\r\n    Debounce2,\r\n    getFileSize,\r\n    handleDownload,\r\n} from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport CustomerService from \"../DashboardPages/CustomerService\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport moment from \"moment\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { Images } from \"assets\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\nimport { addMonths } from \"date-fns\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport DoDisturbIcon from \"@mui/icons-material/DoDisturb\";\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n// import { TableBody, TableHead } from \"mui-datatables\";\r\n\r\nfunction UpdatePaidReceipt() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth();\r\n    const navigate = useNavigate();\r\n    const [formChange, setFormChange] = useState(false);\r\n    const [submit, setSubmit] = useState(false);\r\n    const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n    const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n    const [total, setTotal] = useState(0);\r\n    const [subTotal, setSubTotal] = useState(0);\r\n    const [payButton, setPayButton] = useState(false);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    console.log(rows, \"data\");\r\n    const [items, setItems] = useState([\r\n        {\r\n            itemCode: \"\",\r\n            itemDescription: \"TASHEEL AUTO 19\",\r\n            totalCharge: 17.1,\r\n            mbNo: \"\",\r\n            applicationId: \"\",\r\n            total: 17.1,\r\n        },\r\n    ]);\r\n\r\n    // const addItem = () => {\r\n    //   const newItem = {\r\n    //     itemCode: \"\",\r\n    //     itemDescription: \"\",\r\n    //     totalCharge: 0,\r\n    //     mbNo: \"\",\r\n    //     applicationId: \"\",\r\n    //     total: 0,\r\n    //   };\r\n    //   setItems([...items, newItem]);\r\n    // };\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        setValue,\r\n        watch,\r\n        reset,\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch: watch1,\r\n        formState: { errors: errors1 },\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n\r\n    // Watch for changes in the fee-related fields\r\n    const govtFee = watch(\"govt_fee\", 0);\r\n    const centerFee = watch(\"center_fee\", 0);\r\n    const bankCharges = watch(\"bank_charges\", 0);\r\n    const qty = watch(\"qty\", 1);\r\n    useEffect(() => {\r\n        const feesTotal =\r\n            (parseFloat(govtFee) || 0) +\r\n            (parseFloat(centerFee) || 0) +\r\n            (parseFloat(bankCharges) || 0);\r\n        const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n        setValue(\"total\", finalTotal);\r\n    }, [govtFee, centerFee, bankCharges, qty]);\r\n\r\n    const addItem = (data) => {\r\n        const total = data.total;\r\n        setRows((prevRows) => {\r\n            const updatedRows = [...prevRows, data];\r\n            const newSubTotal = updatedRows.reduce((sum, row) => sum + row.total, 0);\r\n            setSubTotal(newSubTotal);\r\n            return updatedRows;\r\n        });\r\n        reset();\r\n        setServiceItem(\"\");\r\n    };\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === \"object\" && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n    const allowFilesType = [\r\n        \"image/png\",\r\n        \"image/jpg\",\r\n        \"image/jpeg\",\r\n        \"application/pdf\",\r\n        \"application/vnd.ms-excel\",\r\n        \"application/msword\",\r\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    ];\r\n    const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n    const [guarantors, setGuarantors] = useState([]);\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n    const [selectedDue, setSelectedDue] = useState({\r\n        id: \"Instant\",\r\n        name: \"Instant\",\r\n    });\r\n    const [passport, setPassport] = useState();\r\n    const [allocation, setAllocation] = useState(false);\r\n    const [depositError, setDepositError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [emailVerify, setEmailVerify] = useState(false);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [center, setCenter] = useState(null);\r\n    const [status, setStatus] = useState(null);\r\n    const [fieldsDisabled, setFieldsDisabled] = useState(false);\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState();\r\n    const [step1FormData, setStep1FormData] = useState();\r\n    const [selectedType, setSelectedType] = useState(null);\r\n    const [date, setDate] = useState(null);\r\n    const [balanceType, setBalanceType] = useState(null);\r\n    const [imageURL, setImageURL] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n    const [hovered, setHovered] = useState(false);\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [salesAccount, setSalesAccount] = useState(null);\r\n    const [inventoryAccount, setInventoryAccount] = useState(null);\r\n    const [cogsAccount, setCogsAccount] = useState(null);\r\n    const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n    const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n    const [itemType, setItemType] = useState(null);\r\n    const [unit, setUnit] = useState(null);\r\n    const [taxes, setTaxes] = useState([]);\r\n    const [tax, setTax] = useState(null);\r\n    const [category, setCategory] = useState(null);\r\n    const [categories, setCategories] = useState(null);\r\n    const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n    const [description, setDescription] = useState(null);\r\n    const [ownGovBank, setOwnGovBank] = useState(null);\r\n    const [services, setServices] = useState(null);\r\n    const [serviceItem, setServiceItem] = useState(null);\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\r\n    const [detail, setDetail] = useState(null);\r\n    const [banks, setBanks] = useState([]);\r\n    const [selectedMode, setSelectedMode] = useState(null);\r\n    const { id } = useParams()\r\n    //documents array\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n    console.log(\"object\", getValues1(\"bank\")?.id);\r\n\r\n    const submitForm1 = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                id: getValues1(\"invoicenumber\"),\r\n                total_amount: formData?.total,\r\n                // paid_amount: formData?.paid,\r\n                paid_amount: formData?.total,\r\n                payment_status: \"Paid\",\r\n                payment_mode: selectedMode?.id, // Cash, Bank, Card\r\n                account_id:\r\n                    selectedMode?.id == \"Cash\"\r\n                        ? 700117\r\n                        : selectedMode?.id == \"Bank\"\r\n                            ? getValues1(\"bank\")?.id\r\n                            : null, // By default 700117 for Cash\r\n                ref_id:\r\n                    selectedMode?.id == \"Bank\" || selectedMode?.id == \"Bank\" ? \"2\" : null, //bank or card id null for cash\r\n                remarks: formData?.remarks,\r\n                narration: formData?.narration,\r\n            };\r\n\r\n\r\n            if (detail?.is_paid == true) {\r\n                ErrorToaster(\"Already paid\");\r\n            } else {\r\n              \r\n                const promise = CustomerServices.UpdateReceipt(obj);\r\n                showPromiseToast(\r\n                    promise,\r\n                    \"Saving...\",\r\n                    \"Added Successfully\",\r\n                    \"Something Went Wrong\"\r\n                );\r\n                const response = await promise;\r\n                \r\n                if (response?.responseCode === 200) {\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getBanks = async (page, limit, filter) => {\r\n        setLoader(true);\r\n\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await CustomerServices.getBanks(params);\r\n            setBanks(data?.banks);\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    // *For Get Account\r\n    const getReceptionDetail = async (state) => {\r\n        setFieldsDisabled(true);\r\n        try {\r\n            let params = {\r\n                token_number: getValues1(\"token\"),\r\n            };\r\n            if (state) {\r\n                params = {\r\n                    invoice_number: getValues1(\"invoicenumber\"),\r\n                };\r\n            }\r\n            const { data } = await CustomerServices.getReceiptDetail(params);\r\n            console.log(data?.receipt, \"dataaa\");\r\n            if (data?.receipt) {\r\n                setRows(data?.receipt?.sale_receipt_items);\r\n                setDetail(data?.receipt);\r\n\r\n                setValue1(\"paid\", 0);\r\n                setValue1(\"customer\", data?.receipt?.customer_name);\r\n                setValue1(\"invoice_date\", moment().toDate());\r\n                setDate(new Date(data?.receipt?.invoice_date));\r\n                setValue1(\"mobile\", data?.receipt?.customer_mobile);\r\n                setValue1(\"ref\", data?.receipt?.ref);\r\n                setValue1(\"display_customer\", data?.receipt?.customer_name);\r\n                setValue1(\"email\", data?.receipt?.customer_email);\r\n                setValue1(\"address\", data?.receipt?.address);\r\n                setValue1(\"trn\", data?.receipt?.trn);\r\n                setValue1(\"cost_center\", data?.receipt?.cost_center);\r\n                setValue1(\"caseno\", data?.receipt?.case_no);\r\n                setSubTotal(data?.receipt?.total_amount);\r\n                setValue1(\"total\", data?.receipt?.total_amount);\r\n                setValue1(\"balance\", data?.receipt?.total_amount);\r\n                setAccounts(data?.accounts?.rows);\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const getServiceItem = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await CustomerServices.getServiceItem(params);\r\n\r\n            setServices(data?.rows);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const handleServiceSelect = async (value) => {\r\n        console.log(value, \"idididid\");\r\n        setServiceItem(value);\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                service_id: value?.id,\r\n            };\r\n\r\n            const { data } = await CustomerServices.DetailServiceItem(params);\r\n            setValue(\"item_code\", data?.service?.id);\r\n            setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n            setValue(\"center_fee\", data?.service?.center_fee);\r\n            setValue(\"bank_charges\", data?.service?.bank_service_charge);\r\n\r\n            setValue(\"qty\", 1);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const getAccounts = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await FinanceServices.getAccounts(params);\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setAccounts(data?.accounts?.rows);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (index, field, value) => {\r\n        const updatedRows = [...rows];\r\n        updatedRows[index] = {\r\n            ...updatedRows[index],\r\n            [field]: value,\r\n        };\r\n        setRows(updatedRows);\r\n    };\r\n    console.log(rows);\r\n\r\n    const getTax = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await FinanceServices.getTax(params);\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setTaxes(data?.tax);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const getCategories = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await CustomerServices.getCategoryList(params);\r\n\r\n            setCategories(data?.categories);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const getData = async () => {\r\n        try {\r\n            let params = {\r\n                id: id\r\n            };\r\n\r\n            const { data } = await CustomerServices.getPreSaleDetail(params);\r\n            console.log(data?.receipt?.sale_receipt_items);\r\n            setValue1('token', data?.receipt?.token_number)\r\n            setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n            setRows(data?.receipt?.sale_receipt_items)\r\n            setSubTotal(data?.receipt?.total_amount)\r\n            setDate(new Date(data?.receipt?.invoice_date))\r\n            setValue1('invoicenumber', data?.receipt?.id)\r\n            getReceptionDetail(true)\r\n            setValue1('display_customer', data?.receipt?.customer_name)\r\n            setValue1('mobile', data?.receipt?.customer_mobile)\r\n            setValue1('email', data?.receipt?.customer_email)\r\n            setValue1('ref', data?.receipt?.ref)\r\n            setValue1('address', data?.receipt?.address)\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        getBanks();\r\n        getAccounts();\r\n        getTax();\r\n        getCategories();\r\n        getServiceItem();\r\n        setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" });\r\n        setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}></Box>\r\n            <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n                {\r\n                    <>\r\n                        <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n                            <Box\r\n                                sx={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"10px\",\r\n                                    p: 3,\r\n                                    alignItems: \"flex-end\",\r\n                                }}\r\n                            >\r\n                                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n                                    Update Pay Receipt\r\n                                </Typography>\r\n                            </Box>\r\n\r\n                            <Box sx={{ p: 3 }}>\r\n                                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                                    <Grid item xs={12}>\r\n                                        <Grid container gap={2} alignItems={\"center\"}>\r\n                                            <Grid item xs={3}>\r\n                                                <DatePicker\r\n                                                    label={\"Invoice Date :*\"}\r\n                                                    value={date}\r\n                                                    size={\"small\"}\r\n                                                    disabled={true}\r\n                                                    error={errors1?.date?.message}\r\n                                                    register={register1(\"date\")}\r\n                                                    onChange={(date) => {\r\n                                                        setValue1(\"date\", date);\r\n                                                        setDate(new Date(date));\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item md={3} sm={12} xs={12} mt={1}>\r\n                                                <InputField\r\n                                                    label=\"Invoice Number\"\r\n                                                    size=\"small\"\r\n                                                    disabled={fieldsDisabled}\r\n                                                    placeholder=\"Invoice Number\"\r\n                                                    register={register1(\"invoicenumber\")}\r\n                                                    InputProps={{\r\n                                                        endAdornment: (\r\n                                                            <IconButton\r\n                                                                onClick={() => getReceptionDetail(true)}\r\n                                                            >\r\n                                                                <SearchIcon sx={{ color: \"#bd9b4a\" }} />\r\n                                                            </IconButton>\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={3} sm={12} xs={12} mt={2.5}>\r\n                                                <PrimaryButton\r\n                                                    bgcolor={\"#bd9b4a\"}\r\n                                                    title=\"Clear\"\r\n                                                    onClick={() => {\r\n                                                        setFieldsDisabled(false);\r\n                                                        setValue1(\"token\", \"\");\r\n                                                        setValue1(\"invoicenumber\", \"\");\r\n                                                        setValue1(\"customer\", \"\");\r\n                                                        setValue1(\"invoice_date\", \"\");\r\n                                                        setValue1(\"mobile\", \"\");\r\n                                                        setValue1(\"ref\", \"\");\r\n                                                        setValue1(\"display_customer\", \"\");\r\n                                                        setValue1(\"email\", \"\");\r\n                                                        setValue1(\"address\", \"\");\r\n                                                        setValue1(\"trn\", \"\");\r\n                                                        setValue1(\"cost_center\", \"\");\r\n                                                    }}\r\n                                                    loading={loading}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    {/* <Grid\r\n                                        item\r\n                                        md={5.5}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n\r\n\r\n\r\n                                            <Grid item xs={5.7} >\r\n                                                <SelectField\r\n                                                    size={'small'}\r\n                                                    label={'Customer *:'}\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                                                    selected={selectedCustomer}\r\n                                                    onSelect={(value) => {\r\n                                                        setSelectedCustomer(value)\r\n\r\n\r\n                                                    }}\r\n                                                    error={errors1?.customer?.message}\r\n                                                    register={register1(\"customer\")}\r\n                                                />\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                        </Grid>\r\n                                    </Grid> */}\r\n                                    <Grid\r\n                                        item\r\n                                        md={12}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                            mt: { md: 0, sm: 2, xs: 2 },\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <SelectField\r\n                                                    size={\"small\"}\r\n                                                    label={\"Customer *:\"}\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                                                    selected={selectedCustomer}\r\n                                                    onSelect={(value) => {\r\n                                                        setSelectedCustomer(value);\r\n                                                    }}\r\n                                                    error={errors1?.customer?.message}\r\n                                                    register={register1(\"customer\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Display Customer\"\r\n                                                    size=\"small\"\r\n                                                    disabled={true}\r\n                                                    placeholder=\"Walk-in Customer\"\r\n                                                    register={register1(\"display_customer\")}\r\n                                                    error={errors1?.display_customer?.message}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Mobile\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Mobile No\"\r\n                                                    disabled={true}\r\n                                                    register={register1(\"mobile\",{\r\n                                                        pattern: {\r\n                                                            value: /^05[0-9]{8}$/,\r\n                                                            message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                                          },\r\n                                                    })}\r\n                                                    error={errors1?.display_customer?.message}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Email\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Email\"\r\n                                                    disabled={true}\r\n                                                    register={register1(\"email\")}\r\n                                                    error={errors1?.email?.message}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"TRN\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"TRN\"\r\n                                                    disabled={true}\r\n                                                    register={register1(\"trn\")}\r\n                                                    error={errors1?.trn?.message}\r\n                                                />\r\n                                            </Grid>\r\n                                            {/* <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Case No\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Case No\"\r\n                                                    disabled={true}\r\n                                                    register={register1(\"caseno\")}\r\n                                                    error={errors1?.caseno?.message}\r\n                                                />\r\n                                            </Grid> */}\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Ref\"\r\n                                                    disabled={true}\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Reference\"\r\n                                                    register={register1(\"ref\")}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <SelectField\r\n                                                    label=\"Cost Center\"\r\n                                                    size=\"small\"\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"Al-ADHEED\", name: \"Al-ADHEED\" }]}\r\n                                                    selected={watch1(\"cost_center\")}\r\n                                                    onSelect={(value) => setValue1(\"cost_center\", value)}\r\n                                                    register={register1(\"cost_center\")}\r\n                                                    error={errors1?.cost_center?.message}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item md={3.8} sm={5.5} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Address\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Address\"\r\n                                                    multiline\r\n                                                    disabled={true}\r\n                                                    rows={2}\r\n                                                    register={register1(\"address\")}\r\n                                                    error={errors1?.address?.message}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n                                            <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Trans Id</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>App Id</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Ref Id</TableCell>\r\n\r\n                                            <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rows?.map((item, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell>{item?.id}</TableCell>\r\n                                                <TableCell>{item?.service?.name}</TableCell>\r\n                                                <TableCell>{item?.quantity}</TableCell>\r\n                                                <TableCell>{item?.govt_fee}</TableCell>\r\n                                                <TableCell>{item?.center_fee}</TableCell>\r\n                                                <TableCell>{item?.bank_charge}</TableCell>\r\n                                                <TableCell>{item?.total}</TableCell>\r\n\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        size=\"small\"\r\n                                                        placeholder=\"Transaction Id\"\r\n                                                        type=\"number\"\r\n                                                        value={item.transaction_id || \"\"}\r\n                                                        onChange={(e) => handleInputChange(index, \"transaction_id\", e.target.value)}\r\n                                                    />\r\n                                                </TableCell>\r\n\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        size=\"small\"\r\n                                                        placeholder=\"Application Id\"\r\n                                                        type=\"number\"\r\n                                                        value={item.application_id || \"\"}\r\n                                                        onChange={(e) => handleInputChange(index, \"application_id\", e.target.value)}\r\n                                                    />\r\n                                                </TableCell>\r\n\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        size=\"small\"\r\n                                                        placeholder=\"Ref No\"\r\n                                                        type=\"number\"\r\n                                                        value={item.ref_no || \"\"}\r\n                                                        onChange={(e) => handleInputChange(index, \"ref_no\", e.target.value)}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n\r\n\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={10} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                                                    Sub-total:\r\n                                                </Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                                                    {subTotal}\r\n                                                </Typography>{\" \"}\r\n                                                {/* Display the Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n\r\n                                        {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={10} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                                                    Amount Total:\r\n                                                </Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>\r\n                                                    {subTotal}\r\n                                                </Typography>{\" \"}\r\n                                                {/* This can be the same as Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        {/* </Grid> */}\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={10} align=\"center\">\r\n                                                {\" \"}\r\n                                                {/* adjust colSpan to match total columns */}\r\n                                                <Box\r\n                                                    sx={{\r\n                                                        display: \"flex\",\r\n                                                        gap: 2,\r\n                                                        justifyContent: \"center\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Button\r\n                                                        type=\"submit\"\r\n                                                        variant=\"contained\"\r\n                                                        sx={{\r\n                                                            width: \"350px\",\r\n                                                            textTransform: \"capitalize\",\r\n                                                            backgroundColor: \"#bd9b4a\",\r\n                                                            \":hover\": {\r\n                                                                backgroundColor: \"rgb(189 155 74)\",\r\n                                                            },\r\n                                                        }}\r\n                                                    >\r\n                                                        Update\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        onClick={() => setPayButton(false)}\r\n                                                        variant=\"contained\"\r\n                                                        sx={{\r\n                                                            width: \"350px\",\r\n                                                            textTransform: \"capitalize\",\r\n                                                            backgroundColor: \"#bd9b4a\",\r\n                                                            \":hover\": {\r\n                                                                backgroundColor: \"rgb(189 155 74)\",\r\n                                                            },\r\n                                                        }}\r\n                                                    >\r\n                                                        Cancel\r\n                                                    </Button>\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            {/* {payButton && (\r\n                <Grid container mt={2} spacing={2}>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Total Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Total Amount\"\r\n                      register={register1(\"total\", {\r\n                        required: \"please enter total .\",\r\n                      })}\r\n                      error={errors1?.total?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Paid Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Paid Amount\"\r\n                      register={register1(\"paid\", {\r\n                        required: \"please enter paid .\",\r\n                      })}\r\n                      error={errors1?.paid?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Balance Amount\"\r\n                      size=\"small\"\r\n                      disabled={true}\r\n                      placeholder=\"Balance Amount\"\r\n                      register={register1(\"balance\", {\r\n                        required: \"please enter balance .\",\r\n                      })}\r\n                      error={errors1?.balance?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <SelectField\r\n                      label=\"Payment Mode\"\r\n                      size=\"small\"\r\n                      options={[\r\n                        { id: \"Cash\", name: \"Cash\" },\r\n                        { id: \"Bank\", name: \"Bank\" },\r\n                        { id: \"Card\", name: \"Card\" },\r\n                      ]}\r\n                      selected={watch1(\"payment\")}\r\n                      onSelect={(value) => {\r\n                        setValue1(\"payment\", value);\r\n                        setSelectedMode(value);\r\n                      }}\r\n                      register={register1(\"payment\", {\r\n                        required: \"please enter payment .\",\r\n                      })}\r\n                      error={errors1?.payment?.message}\r\n                    />\r\n                  </Grid>\r\n                  {selectedMode?.id == \"Bank\" && (\r\n                    <Grid item md={3} sm={12} xs={12}>\r\n                      <SelectField\r\n                        label=\"Banks\"\r\n                        size=\"small\"\r\n                        options={banks}\r\n                        selected={watch1(\"bank\")}\r\n                        onSelect={(value) => setValue1(\"bank\", value)}\r\n                        register={register1(\"bank\", {\r\n                          required: \"please enter bank .\",\r\n                        })}\r\n                        error={errors1?.bank?.message}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Remarks\"\r\n                      size=\"small\"\r\n                      placeholder=\"Remarks\"\r\n                      register={register1(\"remarks\")}\r\n                      error={errors1?.remarks?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item md={3} sm={12} xs={12}>\r\n                    <InputField\r\n                      label=\"Narration\"\r\n                      size=\"small\"\r\n                      placeholder=\"Narration\"\r\n                      register={register1(\"narration\")}\r\n                      error={errors1?.narration?.message}\r\n                    />\r\n                  </Grid>\r\n                  <Grid container justifyContent={\"flex-end\"}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={rows?.length == 0}\r\n                      variant=\"contained\"\r\n                      sx={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: \"#bd9b4a\",\r\n                        \":hover\": {\r\n                          backgroundColor: \"rgb(189 155 74)\",\r\n                        },\r\n                      }}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              )} */}\r\n                        </Box>\r\n                    </>\r\n                }\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdatePaidReceipt;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["_getValues","_errors1$date","_errors1$customer","_errors1$display_cust","_errors1$display_cust2","_errors1$email","_errors1$trn","_errors1$cost_center","_errors1$address","useTheme","user","useAuth","formChange","setFormChange","useNavigate","useState","submit","setSubmit","excludeFromSales","setExcludeFromSales","excludeFromPurchase","setExcludeFromPurchase","total","setTotal","subTotal","setSubTotal","payButton","setPayButton","rows","setRows","console","log","items","setItems","itemCode","itemDescription","totalCharge","mbNo","applicationId","register","handleSubmit","getValues","setValue","watch","reset","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","control","watch1","errors1","govtFee","centerFee","bankCharges","qty","useEffect","finalTotal","parseFloat","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","selectedDue","setSelectedDue","id","name","passport","setPassport","allocation","setAllocation","depositError","setDepositError","loading","setLoading","emailVerify","setEmailVerify","isUploading","setIsUploading","loader","setLoader","center","setCenter","status","setStatus","fieldsDisabled","setFieldsDisabled","stepFormData","setStepFormData","step1FormData","setStep1FormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","imageURL","setImageURL","hovered","setHovered","useRef","accounts","setAccounts","salesAccount","setSalesAccount","inventoryAccount","setInventoryAccount","cogsAccount","setCogsAccount","adjustmentAccount","setAdjustmentAccount","assemblyAccount","setAssemblyAccount","itemType","setItemType","unit","setUnit","taxes","setTaxes","tax","setTax","category","setCategory","categories","setCategories","governmentAccount","setGovernmnentAccount","description","setDescription","ownGovBank","setOwnGovBank","services","setServices","serviceItem","setServiceItem","selectedCustomer","setSelectedCustomer","detail","setDetail","banks","setBanks","selectedMode","setSelectedMode","useParams","getReceptionDetail","async","params","token_number","state","invoice_number","data","CustomerServices","getReceiptDetail","_data$receipt","_data$receipt2","_data$receipt3","_data$receipt4","_data$receipt5","_data$receipt6","_data$receipt7","_data$receipt8","_data$receipt9","_data$receipt10","_data$receipt11","_data$receipt12","_data$receipt13","_data$receipt14","_data$accounts","receipt","sale_receipt_items","customer_name","moment","toDate","Date","invoice_date","customer_mobile","ref","customer_email","address","trn","cost_center","case_no","total_amount","error","ErrorToaster","handleInputChange","index","field","value","updatedRows","_data$receipt15","_data$receipt16","_data$receipt17","_data$receipt18","_data$receipt19","_data$receipt20","_data$receipt21","_data$receipt22","_data$receipt23","_data$receipt24","_data$receipt25","_data$receipt26","getPreSaleDetail","getData","page","limit","getBanks","showErrorToast","_data$accounts2","_data$accounts3","FinanceServices","getAccounts","_data$accounts4","getTax","getCategoryList","getCategories","getServiceItem","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","_getValues2","obj","formData","paid_amount","payment_status","payment_mode","account_id","ref_id","remarks","narration","is_paid","promise","UpdateReceipt","showPromiseToast","response","responseCode","window","location","reload","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","DatePicker","label","size","disabled","message","onChange","md","sm","mt","InputField","placeholder","InputProps","endAdornment","IconButton","onClick","SearchIcon","color","PrimaryButton","bgcolor","title","border","SelectField","options","selected","onSelect","customer","display_customer","pattern","email","multiline","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","_item$service","service","quantity","govt_fee","center_fee","bank_charge","TextField","type","transaction_id","e","target","application_id","ref_no","colSpan","align","variant","Button","textTransform","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}