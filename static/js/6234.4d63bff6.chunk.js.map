{"version":3,"file":"static/js/6234.4d63bff6.chunk.js","mappings":"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","sources":["pages/Dashboard/UserManagement/CreateUser.js","services/Role/routes.js","services/Role/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Box, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel, Grid, IconButton, InputAdornment, ListItemText, MenuItem, OutlinedInput, Paper, Select, Typography } from \"@mui/material\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { Images, SvgIcon, SvgIcon as SvgIconss } from 'assets';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { FontFamily } from \"assets\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport InputField from \"components/Input\";\r\nimport RoleServices from \"services/Role\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SelectField from \"components/Select\";\r\nimport UserServices from \"services/User\";\r\nimport SystemServices from \"services/System\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { InputLabel } from \"@mui/material\";\r\nimport { Checkbox } from \"@mui/material\";\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n// function PasswordIcon(props) {\r\n// \treturn (\r\n// \t\t<SvgIcon className='saraib' {...props}>\r\n// \t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 25 25\" fill=\"none\">\r\n// \t\t\t\t<path d=\"M16.1163 8.29886C16.9177 8.63783 17.6589 9.08308 18.3311 9.62599V5.78823C18.3311 2.59681 15.7343 0 12.5429 0H12.4538C9.26526 0 6.66846 2.59681 6.66846 5.78823V9.62599C7.34064 9.0831 8.08176 8.63786 8.88321 8.29886C9.09865 8.20694 9.31984 8.12364 9.54103 8.04895V5.78823C9.54103 4.17959 10.8481 2.87257 12.4567 2.87257H12.5457C14.1544 2.87257 15.4614 4.17959 15.4614 5.78823V8.05182C15.6797 8.12364 15.9009 8.20694 16.1163 8.29886Z\" fill=\"#B6B6B6\" />\r\n// \t\t\t\t<path d=\"M4.35889 16.8591C4.35889 21.3547 8.00418 24.9999 12.4998 24.9999C16.9953 24.9999 20.6407 21.3575 20.6407 16.8591C20.6407 14.6501 19.7587 12.645 18.3311 11.1771C17.5268 10.3527 16.5501 9.69772 15.4585 9.26974C14.5422 8.91067 13.5425 8.71533 12.4998 8.71533C11.457 8.71533 10.4574 8.91067 9.54104 9.26974C8.44946 9.69488 7.47278 10.3498 6.66846 11.1771C5.23789 12.645 4.35889 14.6501 4.35889 16.8591ZM10.4028 15.216C10.4315 14.1043 11.3363 13.1994 12.448 13.1735C13.6286 13.1448 14.5967 14.0957 14.5967 15.2705C14.5967 15.3941 14.5852 15.5147 14.5651 15.6296C14.4616 16.2242 14.1084 16.7355 13.6142 17.0458C13.4103 17.1751 13.3069 17.4163 13.3586 17.649L13.982 20.6049C14.0194 20.783 13.8843 20.9525 13.7005 20.9525H11.299C11.1152 20.9525 10.9801 20.7859 11.0175 20.6049L11.6408 17.649C11.6897 17.4135 11.5891 17.1722 11.3852 17.0429C10.8911 16.7327 10.5378 16.2242 10.4343 15.6267C10.4114 15.4946 10.3999 15.3567 10.4028 15.216Z\" fill=\"#B6B6B6\" />\r\n// \t\t\t</svg>\r\n// \t\t</SvgIcon>\r\n// \t);\r\n// }\r\n\r\nfunction CreateUser() {\r\n  const [handleBlockedNavigation] =\r\n    useCallbackPrompt(false)\r\n  const navigate = useNavigate();\r\n\r\n  const { register, handleSubmit, formState: { errors }, control, getValues, watch, setError,\r\n    clearErrors, } = useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n  const [inputError, setInputError] = useState(false);\r\n  const [roles, setRoles] = useState([])\r\n  const [selectedRole, setSelectedRole] = useState(null)\r\n  const [buttondisabled, setButtondisabled] = useState(false)\r\n  const [selectedCategory, setSelectedCategory] = useState([])\r\n  const [categories, setCategories] = useState([])\r\n  const theme = useTheme();\r\n  function getStyles(name, personName, theme) {\r\n    return {\r\n      fontWeight: personName.includes(name)\r\n        ? theme.typography.fontWeightMedium\r\n        : theme.typography.fontWeightRegular,\r\n    };\r\n  }\r\n  // Watch both password and confirm password fields for changes\r\n  const password = watch('password', '');\r\n  const confirmPassword = watch('confirmpassword', '');\r\n  console.log(watch());\r\n\r\n  const [personName, setPersonName] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    const selected = typeof value === 'string' ? value.split(',') : value;\r\n\r\n    const selectedObjects = categories.filter((item) => selected.includes(item.label));\r\n\r\n    setPersonName(selectedObjects); // Now you're storing the whole objects\r\n  };\r\n\r\n\r\n  const getRoles = async (search) => {\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n        search: search,\r\n      };\r\n      const { data } = await SystemServices.getRoles(params);\r\n      setRoles(data?.roles?.rows)\r\n    } catch (error) {\r\n      showErrorToast(error);\r\n    }\r\n  };\r\n\r\n\r\n  // *For Create Role\r\n  const CreateUser = async (formData) => {\r\n    console.log(selectedCategoryObjects);\r\n\r\n    setLoading(true)\r\n    setButtondisabled(true)\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        name: getValues('name'),\r\n        employee_id: getValues('id'),\r\n        email: getValues('email'),\r\n        phone: getValues('phone'),\r\n        password: getValues('password'),\r\n        permittedCategories: selectedRole?.name == 'Typist' ? selectedCategoryObjects : null,\r\n        role_id: selectedRole?.id\r\n      }\r\n\r\n\r\n      console.log(obj);\r\n      const promise = UserServices.CreateUser(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving ...',\r\n        'Success',\r\n        'Something Went Wrong'\r\n      );\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate('/user-list')\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      setButtondisabled(false)\r\n      // showErrorToast(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n  // *For Get Customer Queue\r\n  const getCategoryList = async (page, limit, filter) => {\r\n\r\n\r\n    try {\r\n\r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n\r\n\r\n      }\r\n\r\n      const { data } = await CustomerServices.getCategoryList(params)\r\n      setCategories(data?.categories);\r\n\r\n\r\n\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getCategoryList()\r\n    getRoles()\r\n  }, [])\r\n\r\n  const selectedCategoryObjects = categories.filter((category) => selectedCategory.includes(category.id))\r\n\r\n  // Handle checkbox change\r\n  const handleCategoryChange = (categoryId) => {\r\n    setSelectedCategory((prev) => {\r\n      if (prev.includes(categoryId)) {\r\n        // Remove if already selected\r\n        return prev.filter((id) => id !== categoryId)\r\n      } else {\r\n        // Add if not selected\r\n        return [...prev, categoryId]\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Box sx={{ p: 3, borderRadius: 3, }}>\r\n\r\n      <Box component=\"form\" onSubmit={handleSubmit(CreateUser)} >\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n          <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >CREATE USER</Typography>\r\n          <Box sx={{ display: 'flex', gap: '10px' }}>\r\n            <PrimaryButton\r\n              bgcolor={'#bd9b4a'}\r\n              title=\"Save\"\r\n              type={'submit'}\r\n              disabled={buttondisabled}\r\n\r\n            />\r\n\r\n          </Box>\r\n        </Box>\r\n        <Grid container spacing={0} mt={5} p={1} gap={'0px 20px'} >\r\n\r\n          <Grid item xs={12} sm={5}>\r\n\r\n            <InputField\r\n              label={\" Name :*\"}\r\n              size={'small'}\r\n              placeholder={\" Name\"}\r\n              error={errors?.name?.message}\r\n              register={register(\"name\", {\r\n                required:\r\n                  \"Please enter name.\"\r\n\r\n              })}\r\n            />\r\n\r\n\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n\r\n            <InputField\r\n              label={\" Employee ID :*\"}\r\n              size={'small'}\r\n              placeholder={\" Employee ID \"}\r\n              error={errors?.id?.message}\r\n              register={register(\"id\", {\r\n                required:\r\n                  \"Please enter id.\"\r\n\r\n              })}\r\n            />\r\n\r\n\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n\r\n            <InputField\r\n              label={\"Email :\"}\r\n              size={'small'}\r\n              placeholder={\"Email\"}\r\n              error={errors?.email?.message}\r\n              register={register(\"email\", {\r\n                required: false,\r\n                pattern: {\r\n                  value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                  message: \"Please enter a valid email address.\"\r\n                }\r\n              })}\r\n            />\r\n\r\n\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n\r\n            <InputField\r\n              label={\"Phone :*\"}\r\n              size={'small'}\r\n              placeholder={\"Phone \"}\r\n              type={'number'}\r\n              error={errors?.phone?.message}\r\n              register={register(\"phone\", {\r\n                required:\r\n                  \"Please enter phone.\",\r\n                pattern: {\r\n                  value: /^05[0-9]{8}$/,\r\n                  message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                }\r\n\r\n              })}\r\n            />\r\n\r\n\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <SelectField\r\n              size={'small'}\r\n              label={'Select Role :*'}\r\n              options={roles}\r\n              selected={selectedRole}\r\n              onSelect={(value) => setSelectedRole(value)}\r\n              error={errors?.role?.message}\r\n              register={register(\"role\", {\r\n                required: 'Please select role'\r\n              })}\r\n            />\r\n          </Grid>\r\n\r\n\r\n\r\n\r\n\r\n          <Grid item xs={12} sm={5}>\r\n            <InputField\r\n              size=\"small\"\r\n              label=\"Password :*\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              placeholder=\"Enter Your Password\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton edge=\"end\" onClick={() => setShowPassword(!showPassword)}>\r\n                      {showPassword ? <Visibility color=\"primary\" /> : <VisibilityOff color=\"primary\" />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              error={errors.password?.message || (inputError && 'You have entered an invalid email or password.')}\r\n              register={register('password', {\r\n                required: 'Please enter the password.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <InputField\r\n              size=\"small\"\r\n              label=\"Confirm Password :*\"\r\n              type={showConfirmPassword ? 'text' : 'password'}\r\n              placeholder=\"Enter Your Confirm Password\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton edge=\"end\" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>\r\n                      {showConfirmPassword ? <Visibility color=\"primary\" /> : <VisibilityOff color=\"primary\" />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              error={errors.confirmpassword?.message || (inputError && 'You have entered an invalid email or password.')}\r\n              register={register('confirmpassword', {\r\n                required: 'Please enter the confirm password.',\r\n                validate: value => value === password || 'Passwords do not match.',\r\n              })}\r\n            />\r\n\r\n          </Grid>\r\n          {selectedRole?.name === 'Typist' && (\r\n            <Grid item xs={12} sm={12}>\r\n\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                Select Categories\r\n              </Typography>\r\n\r\n              {selectedRole?.name === \"Typist\" && (\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={5}>\r\n                    <FormGroup>\r\n                      {categories?.map((category) => (\r\n                        <FormControlLabel\r\n                          key={category.id}\r\n                          control={\r\n                            <Checkbox\r\n                              checked={selectedCategory?.includes(category.id)}\r\n                              onChange={() => handleCategoryChange(category.id)}\r\n                            />\r\n                          }\r\n                          label={category.name}\r\n                        />\r\n                      ))}\r\n                    </FormGroup>\r\n                  </Grid>\r\n\r\n\r\n                </Grid>\r\n              )}\r\n\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CreateUser;","const routes = {\r\n  createRole: 'roles/add',\r\n  getRoles: 'roles',\r\n  updateRole: 'roles/update',\r\n  deleteRole: 'roles/delete',\r\n  getRolesPermissions: 'permissions',\r\n  updateRolesPermissions: 'permissions/update',\r\n  getSubRolesPermissions:'permissions/subUser'\r\n};\r\n\r\nexport default routes","import { post, get, patch, deleted } from 'services';\r\nimport routes from './routes';\r\n\r\nconst RoleServices = {\r\n  createRole: async (obj) => {\r\n    const data = await post(routes.createRole, obj);\r\n    return data;\r\n  },\r\n  getRoles: async (params) => {\r\n    const data = await get(routes.getRoles, params);\r\n    return data;\r\n  },\r\n  updateRole: async (obj) => {\r\n    const data = await patch(routes.updateRole, obj);\r\n    return data;\r\n  },\r\n  deleteRole: async (params) => {\r\n    const data = await deleted(routes.deleteRole, params);\r\n    return data;\r\n  },\r\n  getRolesPermissions: async (params) => {\r\n    const data = await get(routes.getRolesPermissions, params);\r\n    return data;\r\n  },\r\n  getSubRolesPermissions: async (params) => {\r\n    const data = await get(routes.getSubRolesPermissions, params);\r\n    return data;\r\n  },\r\n  updateRolesPermissions: async (obj) => {\r\n    const data = await post(routes.updateRolesPermissions, obj);\r\n    return data;\r\n  },\r\n}\r\n\r\nexport default RoleServices"],"names":["_errors$name","_errors$id","_errors$email","_errors$phone","_errors$role","_errors$password","_errors$confirmpasswo","handleBlockedNavigation","useCallbackPrompt","navigate","useNavigate","register","handleSubmit","formState","errors","control","getValues","watch","setError","clearErrors","useForm","loading","setLoading","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","inputError","setInputError","roles","setRoles","selectedRole","setSelectedRole","buttondisabled","setButtondisabled","selectedCategory","setSelectedCategory","categories","setCategories","useTheme","password","console","log","personName","setPersonName","React","useEffect","async","params","page","limit","data","CustomerServices","getCategoryList","error","showErrorToast","_data$roles","search","SystemServices","getRoles","rows","selectedCategoryObjects","filter","category","includes","id","_jsx","Box","sx","p","borderRadius","children","_jsxs","component","onSubmit","formData","obj","name","employee_id","email","phone","permittedCategories","role_id","promise","UserServices","CreateUser","showPromiseToast","response","responseCode","display","justifyContent","gap","alignItems","Typography","fontSize","fontWeight","PrimaryButton","bgcolor","title","type","disabled","Grid","container","spacing","mt","item","xs","sm","InputField","label","size","placeholder","message","required","pattern","value","SelectField","options","selected","onSelect","role","InputProps","endAdornment","InputAdornment","position","IconButton","edge","onClick","Visibility","color","VisibilityOff","confirmpassword","validate","variant","gutterBottom","FormGroup","map","FormControlLabel","Checkbox","checked","onChange","handleCategoryChange","categoryId","prev","createRole","updateRole","deleteRole","getRolesPermissions","updateRolesPermissions","getSubRolesPermissions","post","routes","get","patch","deleted"],"sourceRoot":""}