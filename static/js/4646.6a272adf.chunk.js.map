{"version":3,"file":"static/js/4646.6a272adf.chunk.js","mappings":"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","sources":["pages/Dashboard/Reporting/BalanceSheet.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport { Box, Paper, Table, TableBody, TableCell, IconButton, TableContainer, TableHead, TableRow, Typography, tableCellClasses, CircularProgress, Grid, Tabs, Tab } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport { FontFamily, Images } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\r\nimport FinanceServices from 'services/Finance';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { CommaSeparator, handleExportWithComponent } from 'utils';\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  },\r\n  anchorLink: {\r\n    textDecoration: 'underline',\r\n    color: Colors.twitter,\r\n    cursor: 'pointer'\r\n  }\r\n})\r\n\r\nfunction BalanceSheet() {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n\r\n  const contentRef = useRef(null);\r\n  const { register } = useForm();\r\n\r\n  const tableHead = ['Code', 'Name', 'Major Category', 'Sub Category', 'Sub Total (AED)', 'Final Total (AED)']\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  // *For Balance Sheet\r\n  const [balanceSheet, setBalanceSheet] = useState([]);\r\n  console.log(\"🚀 ~ BalanceSheet ~ balanceSheet:\", balanceSheet)\r\n  const [filteredBalanceSheet, setFilteredBalanceSheet] = useState([]);\r\n  console.log(\"🚀 ~ BalanceSheet ~ filteredBalanceSheet:\", filteredBalanceSheet)\r\n\r\n  const [childTabs, setChildTabs] = useState([])\r\n\r\n\r\n  const [capitalTotal, setCapitalTotal] = useState(0)\r\n  const [libalTotal, setLibalTotal] = useState(0)\r\n  // *For Filters\r\n  const [filters, setFilters] = useState('all');\r\n  const [filterData, setFilterData] = useState();\r\n\r\n  // *For Collapse\r\n  const [expand, setExpand] = useState([]);\r\n\r\n  let TotalEquity = 0\r\n\r\n  // *For Get Balance Sheet\r\n  const getBalanceSheet = async (filter) => {\r\n    try {\r\n      const { data } = await FinanceServices.getAccountReports()\r\n      let myData = data?.detail\r\n      setBalanceSheet(data?.detail?.slice(0, -2))\r\n      setFilteredBalanceSheet(data?.detail?.slice(0, -2))\r\n      const fil = []\r\n      data?.detail.forEach(e => {\r\n        let obj = {\r\n          id: e.id,\r\n          name: e.name,\r\n          sub_accounts: e.sub\r\n        }\r\n        fil.push(obj)\r\n      })\r\n      setFilterData(fil?.slice(0, -2))\r\n      const calculateTotal = (data, category) => {\r\n        let total = 0;\r\n\r\n        data?.forEach((item) => {\r\n          try {\r\n            if (item?.name === category) {\r\n              console.log(item);\r\n              console.log(category);\r\n              processSubItems(item?.sub);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n        });\r\n\r\n        return total.toFixed(2);\r\n\r\n        function processSubItems(subItems) {\r\n          console.log(subItems, 'subItemssubItemssubItems');\r\n          subItems?.forEach((subItem) => {\r\n            console.log(subItem);\r\n            if (subItem?.accounts) {\r\n              subItem.accounts.forEach((account) => {\r\n                const credit = parseFloat(account.total_credit) || 0;\r\n                const debit = parseFloat(account.total_debit) || 0;\r\n\r\n\r\n                total += account.nature === 'debit' ? debit - credit : credit - debit;\r\n              });\r\n            }\r\n            else {\r\n              subItem.childAccounts?.forEach((account) => {\r\n                const credit = parseFloat(account.total_credit) || 0;\r\n                const debit = parseFloat(account.total_debit) || 0;\r\n\r\n                total += account.nature === 'debit' ? debit - credit : credit - debit;\r\n\r\n              });\r\n            }\r\n\r\n            // Recursively process child accounts\r\n            if (subItem?.accounts ? subItem?.accounts : subItem?.childAccounts) {\r\n              console.log(subItem?.accounts ? subItem?.accounts : subItem?.childAccounts);\r\n              processSubItems(subItem?.accounts ? subItem?.accounts : subItem?.childAccounts);\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n      // Usage\r\n      const LiabilitiesTotal = calculateTotal(myData, 'Liabilities');\r\n      const OwnerCapitalTotal = calculateTotal(myData, 'Owner Capital');\r\n      console.log(LiabilitiesTotal);\r\n      setCapitalTotal(OwnerCapitalTotal)\r\n      setLibalTotal(LiabilitiesTotal)\r\n      console.log(OwnerCapitalTotal, 'OwnerCapitalTotal');\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = (event, newValue, child) => {\r\n    if (child) {\r\n\r\n      console.log(newValue, 'newValue');\r\n      console.log(balanceSheet);\r\n      console.log(balanceSheet?.map(item => item?.sub?.filter(subItem => subItem?.id == newValue)), 'sdasadsda');\r\n      const arrayOfArrays = balanceSheet?.map(item => item?.sub?.filter(subItem => subItem?.id == newValue))\r\n      const nonEmptyArrays = arrayOfArrays.filter(arr => arr.length > 0);\r\n\r\n      // Log the result to the console\r\n      console.log(nonEmptyArrays.flat());\r\n      setFilteredBalanceSheet(nonEmptyArrays.flat())\r\n\r\n      setFilters(newValue);\r\n    }\r\n    else {\r\n\r\n      setFilters(newValue);\r\n      if (newValue === 'all') {\r\n        setFilteredBalanceSheet(balanceSheet)\r\n        setChildTabs(balanceSheet.find(item => item?.id == newValue)?.sub)\r\n      } else {\r\n        const filterData = balanceSheet.filter(e => e.id === newValue)\r\n        setChildTabs(balanceSheet.find(item => item?.id == newValue)?.sub)\r\n        setFilteredBalanceSheet(filterData)\r\n      }\r\n    }\r\n  };\r\n\r\n  // *For Handle Expand\r\n  const handleExpand = (id) => {\r\n    try {\r\n      const currentIndex = expand.indexOf(id);\r\n      const newExpand = [...expand];\r\n\r\n      if (currentIndex === -1) {\r\n        newExpand.push(id);\r\n      } else {\r\n        newExpand.splice(currentIndex, 1);\r\n      }\r\n\r\n      setExpand(newExpand);\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Filter Chart of Account By Search\r\n  const filterBySearch = (search) => {\r\n    const result = [];\r\n\r\n    for (const item of balanceSheet) {\r\n      if (item?.sub.length > 0) {\r\n        for (const sub of item?.sub) {\r\n          if (sub?.accounts?.length > 0) {\r\n            for (const acc of sub?.accounts) {\r\n              if (acc.account_name?.toLowerCase().includes(search?.toLowerCase()) || acc.account_code?.toLowerCase().includes(search?.toLowerCase())) {\r\n                result.push(item);\r\n              } else {\r\n                if (acc?.childAccounts?.length > 0) {\r\n                  for (const subAcc of acc?.childAccounts) {\r\n                    if (subAcc.account_name?.toLowerCase().includes(search?.toLowerCase()) || subAcc.account_code?.toLowerCase().includes(search?.toLowerCase())) {\r\n                      result.push(item);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    setFilteredBalanceSheet(result)\r\n  }\r\n\r\n  const downloadExcel = () => {\r\n    const headers = tableHead;\r\n    const rows = [];\r\n    let GrandTotal = 0; // Initialize GrandTotal here\r\n    let TotalEquity = 0; // Initialize TotalEquity here\r\n\r\n    filteredBalanceSheet?.forEach((item, index) => {\r\n      item?.sub?.forEach(subItem => {\r\n        let Total = 0;\r\n        subItem?.accounts?.forEach(account => {\r\n          let childFinalTotal = 0;\r\n          let childTotal = 0; // Initialize childTotal here\r\n          const credit = isNaN(account?.total_credit) ? 0 : parseFloat(account?.total_credit);\r\n          const debit = isNaN(account?.total_debit) ? 0 : parseFloat(account?.total_debit);\r\n          childTotal = account?.nature === 'credit' ? credit - debit : debit - credit;\r\n\r\n          if (account?.childAccounts?.length > 0) {\r\n            const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n            const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n              const credit = isNaN(transaction?.total_credit) ? 0 : parseFloat(transaction?.total_credit);\r\n              const debit = isNaN(transaction?.total_debit) ? 0 : parseFloat(transaction?.total_debit);\r\n              return {\r\n                \"credit\": accumulator.credit + credit,\r\n                \"debit\": accumulator.debit + debit,\r\n              };\r\n            }, initialValue);\r\n            childTotal = account?.nature === 'debit' ? result.debit - result.credit : result.credit - result.debit;\r\n\r\n          }\r\n\r\n          Total += childTotal;\r\n          GrandTotal += childTotal;\r\n          if (index !== 0) {\r\n            TotalEquity += childTotal;\r\n          }\r\n\r\n          rows.push([\r\n            account?.account_code ?? '-',\r\n            account?.account_name ?? '-',\r\n            account?.account_category ?? '-',\r\n            account?.account_subcategory ?? '-',\r\n            parseFloat(childTotal.toFixed(2))\r\n          ]);\r\n\r\n          account?.childAccounts?.forEach(child => {\r\n            const childCredit = isNaN(child?.total_credit) ? 0 : parseFloat(child?.total_credit);\r\n            const childDebit = isNaN(child?.total_debit) ? 0 : parseFloat(child?.total_debit);\r\n            let subTotal = child?.nature === 'debit' ? childDebit - childCredit : childCredit - childDebit;\r\n\r\n            childFinalTotal += subTotal;\r\n            rows.push([\r\n              child?.account_code ?? '-',\r\n              child?.account_name ?? '-',\r\n              child?.account_category ?? '-',\r\n              child?.account_subcategory ?? '-',\r\n              parseFloat(subTotal.toFixed(2))\r\n            ]);\r\n          });\r\n        });\r\n\r\n        if (subItem?.accounts?.length > 0) {\r\n          rows.push([\r\n            '', '', '', '',\r\n            `Total of ${subItem?.accounts[0]?.type_code}`,\r\n            parseFloat(Total.toFixed(2))\r\n          ]);\r\n        }\r\n      });\r\n\r\n      if (item?.sub?.length > 0) {\r\n        rows.push(['', '', '', '', `Totals ${item?.name}`, parseFloat(GrandTotal.toFixed(2))]);\r\n      }\r\n    });\r\n\r\n    const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n    const buf = XLSX.write(wb, {\r\n      bookType: \"xlsx\",\r\n      type: \"array\",\r\n      mimeType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    });\r\n\r\n    saveAs(new Blob([buf]), \"data.xlsx\");\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    getBalanceSheet()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ m: 4, mb: 2 }}>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          mr: 4,\r\n          my: 4,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 4 }}>\r\n          Balance Sheet\r\n        </Typography>\r\n        {/* {balanceSheet?.length > 0 && (\r\n          <Box sx={{\r\n            textAlign: \"right\", p: 4, display: \"flex\", gap: 2\r\n\r\n          }}>\r\n            <PrimaryButton\r\n              title=\"Download PDF\"\r\n              type=\"button\"\r\n              style={{ backgroundColor: Colors.bluishCyan }}\r\n              onClick={() => handleExportWithComponent(contentRef)}\r\n            />\r\n            <PrimaryButton\r\n              title={\"Download Excel\"}\r\n              onClick={() => downloadExcel()}\r\n            />\r\n          </Box>\r\n        )} */}\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      {/* <Grid container spacing={1}>\r\n        <Grid item xs={12} sm={3}>\r\n          <InputField\r\n            size={'small'}\r\n            label={'Search'}\r\n            placeholder={'Search'}\r\n            register={register('search', {\r\n              onChange: (e) => filterBySearch(e.target.value)\r\n            })}\r\n          />\r\n        </Grid>\r\n      </Grid> */}\r\n      <Grid container spacing={1} sx={{ mb: 2 }}>\r\n        <Grid item xs={12} sm={12}>\r\n          <Tabs value={filters} onChange={(event, newValue) => handleFilter(event, newValue, false)}>\r\n            <Tab value=\"all\" label=\"All\" />\r\n            {filterData?.map((item, index) => (\r\n              <Tab key={index} value={item?.id} label={item?.name} />\r\n            ))}\r\n          </Tabs>\r\n          <Tabs value={filters} onChange={(event, newValue) => handleFilter(event, newValue, true)} >\r\n\r\n            {childTabs?.map((item, index) => (\r\n\r\n              <Tab key={index} value={item?.id} label={item?.name} />\r\n\r\n\r\n            ))}\r\n          </Tabs>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {balanceSheet ? (\r\n        <Fragment>\r\n          <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5}\r\n            fileName=\"Balance Sheet\"\r\n          >\r\n            <Box className='pdf-show' sx={{ display: 'none' }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 2 }}>\r\n                  Balance Sheet\r\n                </Typography>\r\n                <Box sx={{ fontWeight: 400, fontSize: \"12px\", mt: 1.5, color: Colors.charcoalGrey, }}><span>Date: &nbsp;&nbsp;</span>{moment().format('MM-DD-YYYY')}</Box>\r\n              </Box>\r\n            </Box>\r\n            {/* ========== Table ========== */}\r\n            <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 250px)' }} className='table-box'>\r\n              <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {tableHead.map((item, index) => (\r\n                      <Cell className=\"pdf-table\" key={index}>{item}</Cell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {!loader ? (\r\n                    filteredBalanceSheet?.length > 0 ? (\r\n                      <>\r\n                        <Fragment>\r\n                          {filteredBalanceSheet?.map((item, index) => {\r\n                            let GrandTotal = 0\r\n                            return (\r\n                              <Fragment key={index}>\r\n                                <Row>\r\n                                  <Cell className=\"pdf-table\" colSpan={tableHead?.length}>\r\n                                    <Typography className=\"pdf-table\" variant=\"subtitle1\" sx={{ textAlign: 'left' }}>\r\n                                      {expand.indexOf(item.id) === -1 ? (\r\n                                        <ExpandMore className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                      ) : (\r\n                                        <ExpandLess className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                      )}\r\n                                      {item?.name}\r\n                                    </Typography>\r\n                                  </Cell>\r\n                                </Row>\r\n                                {expand.indexOf(item.id) === -1 &&\r\n                                  <Fragment>\r\n                                    {item?.sub?.map((subItem, i) => {\r\n                                      let Total = 0\r\n                                      return (\r\n                                        <Fragment key={i}>\r\n                                          <Row>\r\n                                            <Cell className=\"pdf-table\" colSpan={tableHead?.length}>\r\n                                              <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, textAlign: 'left', ml: 1.5 }}>\r\n                                                {expand.indexOf(subItem.id) === -1 ? (\r\n                                                  <ExpandMore className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                ) : (\r\n                                                  <ExpandLess className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                )}\r\n                                                {subItem?.name}\r\n                                              </Typography>\r\n                                            </Cell>\r\n                                          </Row>\r\n                                          {expand.indexOf(subItem.id) === -1 &&\r\n                                            <Fragment>\r\n                                              {subItem?.accounts?.map((account, j) => {\r\n                                                let childFinalTotal = 0\r\n                                                const credit = isNaN(account?.total_credit) ? 0 : account?.total_credit\r\n                                                const debit = isNaN(account?.total_debit) ? 0 : account?.total_debit\r\n                                                let childTotal = account?.nature === 'debit' ? parseFloat(debit) - parseFloat(credit) : parseFloat(credit) - parseFloat(debit)\r\n\r\n                                                if (account?.childAccounts?.length > 0) {\r\n                                                  const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                  const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                    const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                    const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                    return {\r\n                                                      \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                      \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                    };\r\n                                                  }, initialValue);\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                                                }\r\n                                                Total += parseFloat(childTotal)\r\n                                                GrandTotal += parseFloat(childTotal)\r\n                                                if (index !== 0) {\r\n                                                  TotalEquity += parseFloat(childTotal)\r\n                                                }\r\n                                                return (\r\n                                                  <Fragment key={j}>\r\n                                                    <Row>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink + \" \" + \"pdf-table\" : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                        <Typography variant=\"body1\" sx={{ ml: 3 }}>\r\n                                                          {account?.account_code ?? '-'}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink + \" \" + \"pdf-table\" : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                        {account?.account_name ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\" >\r\n                                                        {account?.account_category ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\"  >\r\n                                                        {account?.account_subcategory ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                        {CommaSeparator(parseFloat(childTotal.toFixed(2)))}\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                    {expand.indexOf(account.id) !== -1 &&\r\n                                                      <Fragment>\r\n                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                          const credit = isNaN(child?.total_credit) ? 0 : child?.total_credit\r\n                                                          const debit = isNaN(child?.total_debit) ? 0 : child?.total_debit\r\n                                                          let subTotal = child?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n\r\n                                                          childFinalTotal += parseFloat(subTotal)\r\n                                                          return (\r\n                                                            <Fragment key={j}>\r\n                                                              <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  <Typography variant=\"body1\" sx={{ ml: 4.5 }}>\r\n                                                                    {child?.account_code ?? '-'}\r\n                                                                  </Typography>\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_name ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_category ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_subcategory ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {CommaSeparator(parseFloat(subTotal).toFixed(2))}\r\n                                                                </Cell>\r\n                                                                <Cell>\r\n\r\n                                                                </Cell>\r\n                                                              </Row>\r\n                                                            </Fragment>\r\n                                                          )\r\n                                                        })}\r\n                                                      </Fragment>\r\n                                                    }\r\n                                                  </Fragment>\r\n                                                )\r\n                                              })}\r\n                                              {subItem?.accounts?.length > 0 &&\r\n                                                <Row>\r\n                                                  <Cell>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, ml: 4.5 }}>\r\n                                                      Total of {subItem?.accounts[0]?.type_code}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                  <Cell colSpan={3}>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700 }}>\r\n                                                      Total {subItem?.name}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                  <Cell>\r\n                                                  </Cell>\r\n                                                  <Cell>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700 }}>\r\n                                                      {CommaSeparator(parseFloat(Total).toFixed(2))}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                </Row>\r\n                                              }\r\n                                            </Fragment>\r\n                                          }\r\n                                        </Fragment>\r\n                                      )\r\n                                    })}\r\n                                    {console.log(item?.sub, 'item?.subitem?.subitem?.sub')}\r\n                                    {item?.sub?.length > 0 &&\r\n                                      <Fragment>\r\n                                        <Row sx={{ bgcolor: item?.name == \"Asset\" ? Colors.primary : Colors.bluishCyan }}>\r\n                                          <Cell>\r\n                                            <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white, ml: 4.5 }}>\r\n                                              Totals\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                          <Cell colSpan={3}>\r\n                                            <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                              Total {item?.name}\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                          <Cell>\r\n                                          </Cell>\r\n                                          <Cell>\r\n                                            <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                              {CommaSeparator(parseFloat(GrandTotal).toFixed(2))}\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                        </Row>\r\n                                      </Fragment>\r\n                                    }\r\n                                    {/* {item?.name === 'Liabilities' && filters === 'all' &&\r\n                                    <Row sx={{ bgcolor: Colors.primary }}>\r\n                                      <Cell colSpan={5}>\r\n                                        <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          TOTAL EQUITY & LIABILITIES\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                      <Cell>\r\n                                        <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          {parseFloat(TotalEquity).toFixed(2)}\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                    </Row>\r\n                                  } */}\r\n                                  </Fragment>\r\n                                }\r\n                              </Fragment>\r\n                            )\r\n                          })}\r\n                        </Fragment>\r\n                        <Fragment>\r\n                          {filteredBalanceSheet?.map((item, index) => {\r\n                            let GrandTotal = 0\r\n                            return (\r\n                              <Fragment key={index}>\r\n\r\n                                {true &&\r\n                                  <Fragment>\r\n                                    {filteredBalanceSheet?.map((subItem, i) => {\r\n                                      let Total = 0\r\n                                      return (\r\n                                        <Fragment key={i}>\r\n\r\n                                          {true &&\r\n                                            <Fragment>\r\n                                              {subItem?.accounts?.map((account, j) => {\r\n                                                let childFinalTotal = 0\r\n                                                const credit = isNaN(account?.total_credit) ? 0 : account?.total_credit\r\n                                                const debit = isNaN(account?.total_debit) ? 0 : account?.total_debit\r\n\r\n                                                let childTotal = account?.nature === 'debit' ? parseFloat(debit) - parseFloat(credit) : parseFloat(credit) - parseFloat(debit)\r\n                                                if (account?.childAccounts?.length > 0) {\r\n                                                  const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                  const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                    const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                    const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                    return {\r\n                                                      \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                      \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                    };\r\n                                                  }, initialValue);\r\n\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n                                                }\r\n                                                Total += parseFloat(childTotal)\r\n                                                GrandTotal += parseFloat(childTotal)\r\n                                                if (index !== 0) {\r\n                                                  TotalEquity += parseFloat(childTotal)\r\n                                                }\r\n                                                return (\r\n                                                  <Fragment key={j}>\r\n                                                    <Row>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink : ''} onClick={() => handleExpand(account?.id)}>\r\n                                                        <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 3 }}>\r\n                                                          {account?.account_code ?? '-'}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink + \" \" + \"pdf-table\" : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                        {account?.account_name ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                        {account?.account_category ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                        {account?.account_subcategory ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                      </Cell>\r\n                                                      <Cell className=\"pdf-table\">\r\n                                                        {CommaSeparator(parseFloat(childTotal.toFixed(2)))}\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                    {expand.indexOf(account.id) !== -1 &&\r\n                                                      <Fragment>\r\n                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                          const credit = isNaN(child?.total_credit) ? 0 : child?.total_credit\r\n                                                          const debit = isNaN(child?.total_debit) ? 0 : child?.total_debit\r\n\r\n                                                          let subTotal = child?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n                                                          childFinalTotal += parseFloat(subTotal)\r\n                                                          return (\r\n                                                            <Fragment key={j}>\r\n                                                              <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 4.5 }}>\r\n                                                                    {child?.account_code ?? '-'}\r\n                                                                  </Typography>\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_name ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_category ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {child?.account_subcategory ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n                                                                  {CommaSeparator(parseFloat(subTotal).toFixed(2))}\r\n                                                                </Cell>\r\n                                                                <Cell className=\"pdf-table\">\r\n\r\n                                                                </Cell>\r\n                                                              </Row>\r\n                                                            </Fragment>\r\n                                                          )\r\n                                                        })}\r\n                                                      </Fragment>\r\n                                                    }\r\n                                                  </Fragment>\r\n                                                )\r\n                                              })}\r\n                                              {subItem?.accounts?.length > 0 &&\r\n                                                <Row>\r\n                                                  <Cell>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, ml: 4.5 }}>\r\n                                                      Total of {subItem?.accounts[0]?.type_code}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                  <Cell colSpan={3}>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700 }}>\r\n                                                      Total {subItem?.name}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                  <Cell>\r\n                                                  </Cell>\r\n                                                  <Cell>\r\n                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700 }}>\r\n                                                      {CommaSeparator(parseFloat(Total).toFixed(2))}\r\n                                                    </Typography>\r\n                                                  </Cell>\r\n                                                </Row>\r\n                                              }\r\n\r\n                                            </Fragment>\r\n                                          }\r\n                                        </Fragment>\r\n                                      )\r\n                                    })}\r\n\r\n                                    {/* {item?.sub?.length > 0 &&\r\n                                    <Fragment>\r\n                                      <Row sx={{ bgcolor: Colors.bluishCyan }}>\r\n                                        <Cell>\r\n                                          <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white, ml: 4.5 }}>\r\n                                            Total\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                        <Cell colSpan={3}>\r\n                                          <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            Total {item?.name}sdasadsda\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                        <Cell>\r\n                                        </Cell>\r\n                                        <Cell>\r\n                                          <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            {parseFloat(GrandTotal).toFixed(2)}s\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                      </Row>\r\n                                    </Fragment>\r\n                                  } */}\r\n                                    {/* {item?.name === 'Liabilities' && filters === 'all' &&\r\n                                    <Row sx={{ bgcolor: Colors.primary }}>\r\n                                      <Cell colSpan={5}>\r\n                                        <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          TOTAL EQUITY & LIABILITIES\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                      <Cell>\r\n                                        <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          {parseFloat(TotalEquity).toFixed(2)}\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                    </Row>\r\n                                  } */}\r\n                                  </Fragment>\r\n                                }\r\n                              </Fragment>\r\n                            )\r\n                          })}\r\n                          <Row sx={{ bgcolor: Colors.primary }}>\r\n                            <Cell>\r\n                              <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, ml: 4.5, color: 'white' }}>\r\n                                Total\r\n                              </Typography>\r\n                            </Cell>\r\n                            <Cell colSpan={3}>\r\n                              <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, color: 'white' }}>\r\n                                Owner Capital + Liabilities\r\n\r\n                              </Typography>\r\n                            </Cell>\r\n                            <Cell>\r\n                            </Cell>\r\n                            <Cell>\r\n                              <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, color: 'white' }}>\r\n                                {CommaSeparator(parseFloat(parseFloat(libalTotal) + parseFloat(capitalTotal)).toFixed(2))}\r\n                              </Typography>\r\n                            </Cell>\r\n                          </Row>\r\n                        </Fragment>\r\n\r\n\r\n                      </>\r\n                    ) : (\r\n                      <Row>\r\n                        <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                          No Data Found\r\n                        </Cell>\r\n                      </Row>\r\n                    )) : (\r\n                    <Row>\r\n                      <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                        <Box className={classes.loaderWrap}>\r\n                          <CircularProgress />\r\n                        </Box>\r\n                      </Cell>\r\n                    </Row>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </PDFExport>\r\n        </Fragment>\r\n      ) : (\r\n        <CircleLoading />\r\n      )}\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default BalanceSheet;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","anchorLink","textDecoration","Colors","twitter","classes","contentRef","useNavigate","useRef","register","useForm","tableHead","loader","setLoader","useState","balanceSheet","setBalanceSheet","console","log","filteredBalanceSheet","setFilteredBalanceSheet","childTabs","setChildTabs","capitalTotal","setCapitalTotal","libalTotal","setLibalTotal","filters","setFilters","filterData","setFilterData","expand","setExpand","TotalEquity","getBalanceSheet","async","_data$detail","_data$detail2","data","FinanceServices","getAccountReports","myData","detail","slice","fil","forEach","e","obj","id","name","sub_accounts","sub","push","calculateTotal","category","total","item","processSubItems","error","toFixed","subItems","subItem","_subItem$childAccount","accounts","account","credit","parseFloat","total_credit","debit","total_debit","nature","childAccounts","LiabilitiesTotal","OwnerCapitalTotal","ErrorToaster","handleFilter","event","newValue","child","map","_item$sub","filter","nonEmptyArrays","_item$sub2","arr","length","flat","_balanceSheet$find","find","_balanceSheet$find2","handleExpand","currentIndex","indexOf","newExpand","splice","useEffect","_jsxs","Box","sx","m","mb","children","_jsx","mr","my","Typography","variant","charcoalGrey","Grid","container","spacing","xs","sm","Tabs","value","onChange","Tab","label","index","Fragment","PDFExport","ref","landscape","paperSize","margin","fileName","className","mt","moment","format","TableContainer","component","Paper","boxShadow","borderRadius","maxHeight","Table","stickyHeader","minWidth","TableHead","TableBody","colSpan","align","CircularProgress","_Fragment","_item$sub5","_item$sub6","_item$sub7","_item$sub8","GrandTotal","ExpandMore","verticalAlign","opacity","onClick","ExpandLess","transform","i","_subItem$accounts3","_subItem$accounts4","_subItem$accounts5","_subItem$accounts6","_subItem$accounts$2","Total","ml","j","_account$childAccount4","_account$account_code2","_account$account_name2","_account$account_cate2","_account$account_subc2","_account$childAccount6","childFinalTotal","isNaN","childTotal","_account$childAccount5","initialValue","result","reduce","accumulator","transaction","account_code","account_name","account_category","account_subcategory","CommaSeparator","_child$account_code2","_child$account_name2","_child$account_catego2","_child$account_subcat2","subTotal","bgcolor","type_code","primary","bluishCyan","white","_subItem$accounts7","_subItem$accounts8","_subItem$accounts$3","_account$childAccount7","_account$account_code3","_account$account_name3","_account$account_cate3","_account$account_subc3","_account$childAccount9","_account$childAccount8","_child$account_code3","_child$account_name3","_child$account_catego3","_child$account_subcat3","CircleLoading"],"sourceRoot":""}