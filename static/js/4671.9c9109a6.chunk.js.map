{"version":3,"file":"static/js/4671.9c9109a6.chunk.js","mappings":"ufAsBA,MAAMA,GAAMC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,EAAiBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACzCE,OAAQ,EAEX,IAEKC,GAAOL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,EAAkBO,IAAA,IAAC,MAAEJ,GAAOI,EAAA,MAAM,CAC3C,CAAC,KAAKC,EAAAA,EAAiBC,QAAS,CAC5BC,SAAU,GACVC,WAAY,cACZP,OAAQ,oBACRQ,QAAS,OACTC,UAAW,OACXC,WAAY,SACZC,MAAO,UACPC,aAAc,OACdC,WAAY,cACZC,WAAY,QAGhB,CAAC,KAAKV,EAAAA,EAAiBW,QAAS,CAC5BT,SAAU,GACVC,WAAY,cAEZS,SAAU,SACVR,QAAS,iBACTS,YAAa,kBAEb,eAAgB,CACZC,QAAS,OACTC,IAAK,MACLC,WAAY,SACZC,eAAgB,SAChB,eAAgB,CACZC,OAAQ,YAGhB,IAAO,CACHC,MAAO,OACPC,OAAQ,QAEZ,sBAAuB,CACnBC,cAAe,aACflB,WAAYmB,EAAAA,GAAWC,cACvBX,SAAU,UAEd,sBAAuB,CACnBR,QAAS,MACTe,MAAO,OACPC,OAAQ,SAGnB,IAEKI,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,WAAY,CACVZ,QAAS,OACTM,OAAQ,IACR,QAAS,CACPD,MAAO,kBACPC,OAAQ,oBAGZO,WAAY,CACVC,eAAgB,YAChBrB,MAAOsB,EAAAA,EAAOC,QACdZ,OAAQ,aAi/BZ,QA7+BA,WAEE,MAAMa,EAAUP,IACVQ,GAAaC,EAAAA,EAAAA,QAAO,MAEpBC,EAAY,CAAC,OAAQ,OAAQ,iBAAkB,eAAgB,kBAAmB,sBAEjFC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAG9BC,EAAqBC,IAA0BF,EAAAA,EAAAA,UAAS,KACxDG,EAA6BC,IAAkCJ,EAAAA,EAAAA,UAAS,KAGxEK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,QAChCO,EAAYC,IAAiBR,EAAAA,EAAAA,aAC7BS,EAAYC,IAAiBV,EAAAA,EAAAA,aAC7BW,EAAUC,IAAeZ,EAAAA,EAAAA,aACzBa,EAAQC,IAAad,EAAAA,EAAAA,aACrBe,EAAWC,IAAgBhB,EAAAA,EAAAA,UAAS,KAEpCiB,EAAcC,IAAmBlB,EAAAA,EAAAA,UAAS,IAC1CmB,EAAeC,IAAoBpB,EAAAA,EAAAA,UAAS,IAC5CqB,EAAWC,KAAgBtB,EAAAA,EAAAA,UAAS,IACpCuB,GAAoBC,KAAyBxB,EAAAA,EAAAA,UAAS,IAGtDyB,GAAQC,KAAa1B,EAAAA,EAAAA,UAAS,KA8B9B2B,GAAYC,KAAiB5B,EAAAA,EAAAA,UAAS,GAGvC6B,GAAyBC,UAC7B,IAAK,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACF,MAAMC,EAAS,IAAK3B,KAAe4B,GACnC3B,EAAc0B,GACd,IAAIE,EAAS,IACRF,GAEL,MAAM,KAAEG,SAAeC,EAAAA,EAAgBC,kBAAkBH,GAC3DpC,EAA2B,OAAJqC,QAAI,IAAJA,OAAI,EAAJA,EAAMG,OAAOC,MAAM,IACxCvC,EAAmC,OAAJmC,QAAI,IAAJA,OAAI,EAAJA,EAAMG,OAAOC,MAAM,IAClD,IAAIC,EAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMG,OAAOC,MAAM,GAEhC,MAAME,EAAiBA,CAACN,EAAMO,KAC5B,IAAIC,EAAQ,EAcZ,OAZI,OAAJR,QAAI,IAAJA,GAAAA,EAAMS,SAASC,IACb,KACU,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,QAASJ,IACjBK,QAAQC,IAAQ,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMC,MAClBC,QAAQC,IAAIN,GACZO,EAAoB,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAE1B,CAAE,MAAOC,GACPJ,QAAQC,IAAIG,EACd,KAGKR,EAAMS,QAAQ,GAErB,SAASH,EAAgBI,GACf,OAARA,QAAQ,IAARA,GAAAA,EAAUT,SAASU,IAUX,IAADC,GATLR,QAAQC,IAAIM,GACD,OAAPA,QAAO,IAAPA,GAAAA,EAASE,UACXF,EAAQE,SAASZ,SAASa,IACxB,MAAMC,EAASC,WAAWF,EAAQG,eAAiB,EAC7CC,EAAQF,WAAWF,EAAQK,cAAgB,EAEjDnB,GAA4B,UAAnBc,EAAQM,OAAqBF,EAAQH,EAASA,EAASG,CAAK,IAIlD,QAArBN,EAAAD,EAAQU,qBAAa,IAAAT,GAArBA,EAAuBX,SAASa,IAC9B,MAAMC,EAASC,WAAWF,EAAQG,eAAiB,EAC7CC,EAAQF,WAAWF,EAAQK,cAAgB,EAEjDnB,GAA4B,UAAnBc,EAAQM,OAAqBF,EAAQH,EAASA,EAASG,CAAK,KAK9D,OAAPP,QAAO,IAAPA,GAAAA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASU,iBACnDjB,QAAQC,IAAW,OAAPM,QAAO,IAAPA,GAAAA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASU,eAC7Df,EAAuB,OAAPK,QAAO,IAAPA,GAAAA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASE,SAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASU,eACnE,GAEJ,GAIIC,EAAexB,EAAeD,EAAQ,WACtC0B,EAAoBzB,EAAeD,EAAQ,YACjD,IAAI2B,EAAW3B,EAAOP,QAAOY,GAAsB,aAAV,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,QAC3CC,QAAQC,IAAImB,EAAU,oBACtBpB,QAAQC,IAAe,QAAZrB,EAACwC,EAAS,UAAE,IAAAxC,GAAK,QAALC,EAAXD,EAAauB,WAAG,IAAAtB,OAAL,EAAXA,EAAkBK,QAAOY,GAA6B,IAAjB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,gBAEnDrB,QAAQC,IAAIkB,GACZnB,QAAQC,IAAIiB,EAAc,oDAC1BnD,EAAgBmD,GAChBjD,EAAiBkD,GACjBnB,QAAQC,IAAIiB,GAGZlB,QAAQC,IAAI,iBAAkBiB,GAG9B,MAAMI,EAA0CC,IAC9C,IAAI3B,EAAQ,EAuBZ,OArBY,OAAZ2B,QAAY,IAAZA,GAAAA,EAAc1B,SAASF,IACA,gCAAjBA,EAASI,MACXJ,EAASQ,IAAIN,SAAS2B,IACpBA,EAAYf,SAASZ,SAASa,IACL,UAAnBA,EAAQM,SACVpB,GAASgB,WAAWF,EAAQK,aAC9B,IAIES,EAAYf,SAASQ,eACvBO,EAAYf,SAASQ,cAAcpB,SAAS4B,IACd,UAAxBA,EAAaT,SACfpB,GAASgB,WAAWa,EAAaV,aACnC,GAEJ,GAEJ,IAGKnB,EAAMS,QAAQ,EAAE,EAGnBqB,EAAaA,CAACtC,EAAMO,KAGpB,OAAJP,QAAI,IAAJA,GAAAA,EAAMS,SAASC,IACb,KAeF,SAA0BQ,GAExBN,QAAQC,IAAIK,GACZ,IAAIqB,EAAa,EACjB,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAASuB,OAAQD,IAAK,CACxC,MAAMrB,EAAUD,EAASsB,GACzB,IAAIE,EAAgBvB,EAAQS,OACxBe,EAAa,EACjB,GAAIxB,EAAQU,eAAiBV,EAAQU,cAAcY,OAAS,EAC1D,IAAK,IAAIG,EAAI,EAAGA,EAAIzB,EAAQU,cAAcY,OAAQG,IAAK,CACrD,MAAMC,EAAQ1B,EAAQU,cAAce,GACpChC,QAAQC,IAAIgC,EAAO,SACnB,MAAMC,EAActB,WAAWqB,EAAMpB,eAAiB,EAChDsB,EAAavB,WAAWqB,EAAMlB,cAAgB,EAEpDgB,GAA+B,SAAjBD,EAA2BlB,WAAWuB,GAAcvB,WAAWsB,GAAetB,WAAWsB,GAAetB,WAAWuB,EACnI,CAGFR,GAAcI,EACd,MAAMpB,EAASC,WAAWL,EAAQM,eAAiB,EAC7CC,EAAQF,WAAWL,EAAQQ,cAAgB,EACjDY,GAA+B,SAAjBG,EAA2BlB,WAAWE,GAASF,WAAWD,GAAUC,WAAWD,GAAUC,WAAWE,GAClHd,QAAQC,IAAI8B,EAAY,cAC1B,CACA5D,GAAawD,GACb3B,QAAQC,IAAI0B,EAAY,cAG1B,EAzCMS,CAAqB,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMW,SAE3B,CAAE,MAAOL,GACPJ,QAAQC,IAAIG,EACd,MAVU,GAaCC,QAAQ,IAqCjBgC,EAAiBX,EAAsB,QAAZ5C,EAACsC,EAAS,UAAE,IAAAtC,GAAK,QAALC,EAAXD,EAAaqB,WAAG,IAAApB,OAAL,EAAXA,EAAkBG,QAAOY,GAA6B,IAAjB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,gBACzErB,QAAQC,IAAIoC,GACZ,MAAMC,EAAgChB,EAAuC7B,GAC7EpB,GAAsBiE,GAEtB,MAAMC,EAAM,GACR,OAAJnD,QAAI,IAAJA,GAAY,QAARJ,EAAJI,EAAMG,cAAM,IAAAP,GAAZA,EAAca,SAAQ2C,IACpB,IAAIC,EAAM,CACRC,GAAIF,EAAEE,GACN3C,KAAMyC,EAAEzC,KACR4C,aAAcH,EAAErC,KAElBoC,EAAIK,KAAKH,EAAI,IAEfpF,EAAckF,EAAI/C,MAAM,IACX+C,EAAI/C,MAAM,EAGzB,CAAE,MAAOY,IACPyC,EAAAA,EAAAA,IAAazC,EACf,GAII0C,GAAuBA,CAACC,EAAOC,EAAUf,KAC7C,GAAIA,EAAO,CAGT,MACMgB,GADmC,OAAnBnG,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBoG,KAAIpD,IAAI,IAAAqD,EAAA,OAAQ,OAAJrD,QAAI,IAAJA,GAAS,QAALqD,EAAJrD,EAAMK,WAAG,IAAAgD,OAAL,EAAJA,EAAWjE,QAAOqB,IAAkB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASmC,KAAMM,GAAS,KACvE9D,QAAOkE,GAAOA,EAAIvB,OAAS,IAIhE5E,EAA+BgG,EAAeI,QAE9ClG,EAAW6F,EACb,MAIE,GADA7F,EAAW6F,GACM,QAAbA,EAAoB,CAAC,IAADM,EACtBrG,EAA+BH,GAC/Be,EAAmE,QAAvDyF,EAACxG,EAAoByG,MAAKzD,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,KAAMM,WAAS,IAAAM,OAAA,EAAtDA,EAAwDnD,IACvE,KAAO,CAAC,IAADqD,EACL,MAAMpG,EAAaN,EAAoBoC,QAAOsD,GAAKA,EAAEE,KAAOM,IAC5DnF,EAAmE,QAAvD2F,EAAC1G,EAAoByG,MAAKzD,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,KAAMM,WAAS,IAAAQ,OAAA,EAAtDA,EAAwDrD,KACrElD,EAA+BG,EACjC,CACF,EAIIqG,GAAgBrE,KACpBsE,EAAAA,EAAAA,KAAS,IAAMhF,GAAuBU,IAAM,EAIxCuE,GAAgBjB,IACpB,IACE,MAAMkB,EAAetF,GAAOuF,QAAQnB,GAC9BoB,EAAY,IAAIxF,KAEA,IAAlBsF,EACFE,EAAUlB,KAAKF,GAEfoB,EAAUC,OAAOH,EAAc,GAGjCrF,GAAUuF,EACZ,CAAE,MAAO1D,IACPyC,EAAAA,EAAAA,IAAazC,EACf,GA6KF,OAJA4D,EAAAA,EAAAA,YAAU,KACRtF,IAAwB,GACvB,KAGDuF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,EAAGC,GAAI,GAAIC,SAAA,EACvBC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CACFC,GAAI,CACF7I,QAAS,OACTG,eAAgB,gBAChBD,WAAY,SACZgJ,GAAI,EACJC,GAAI,GACJH,UAEFC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAEpJ,MAAOsB,EAAAA,EAAOuI,aAAcjK,WAAYmB,EAAAA,GAAWC,eAAiBuI,SAAC,gCAuBtGL,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAET,SAAA,EAWzBC,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAAC/E,MAAI,EAACkF,GAAI,GAAIC,GAAI,EAAEX,UACvBC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CACTC,eAAe,EACfC,KAAK,QACLC,MAAO,YACPC,MAAO9H,EACP+H,SAAWC,GA9dGC,KACtB,IAEE,GAAe,gBAAXA,EAEF,YADAhI,EAAY,WAGdA,EAAY,IAAIiI,KAAKD,IACrBhC,GAAa,CAAEjG,SAAUmI,IAAO,IAAID,KAAKD,IAAUG,OAAO,eAC5D,CAAE,MAAOxF,IACPyC,EAAAA,EAAAA,IAAazC,EACf,GAmd4ByF,CAAeL,QAGvCjB,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAAC/E,MAAI,EAACkF,GAAI,GAAIC,GAAI,EAAEX,UACvBC,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CACTY,UAAUtI,EACV2H,eAAe,EACfC,KAAK,QACLW,QAASvI,EACT6H,MAAO,UACPC,MAAO5H,EACP6H,SAAWC,GA3dCC,KACpB,IAEE,GAAe,gBAAXA,EAEF,YADA9H,EAAU,WAGZA,EAAU,IAAI+H,KAAKD,IACnBhC,GAAa,CAAE/F,OAAQiI,IAAO,IAAID,KAAKD,IAAUG,OAAO,eAC1D,CAAE,MAAOxF,IACPyC,EAAAA,EAAAA,IAAazC,EACf,GAgd4B4F,CAAaR,WAIvCjB,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGZ,GAAI,CAAEE,GAAI,GAAIC,UACxCL,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAAC/E,MAAI,EAACkF,GAAI,GAAIC,GAAI,GAAGX,SAAA,EACxBL,EAAAA,EAAAA,MAACgC,EAAAA,EAAI,CAACX,MAAOpI,EAASqI,SAAUA,CAACxC,EAAOC,IAAaF,GAAqBC,EAAOC,GAAU,GAAOsB,SAAA,EAChGC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAACZ,MAAM,MAAMD,MAAM,QAEZ,OAAVjI,QAAU,IAAVA,OAAU,EAAVA,EAAY8F,KAAI,CAACpD,EAAMqG,KACtB5B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAAaZ,MAAW,OAAJxF,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,GAAI2C,MAAW,OAAJvF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,MAArCoG,SAGd5B,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAACX,MAAOpI,EAASqI,SAAUA,CAACxC,EAAOC,IAAaF,GAAqBC,EAAOC,GAAU,GAAMsB,SAErF,OAAT1G,QAAS,IAATA,OAAS,EAATA,EAAWsF,KAAI,CAACpD,EAAMqG,KAErB5B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAG,CAAaZ,MAAW,OAAJxF,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,GAAI2C,MAAW,OAAJvF,QAAI,IAAJA,OAAI,EAAJA,EAAMC,MAArCoG,YAQjBrJ,GACCyH,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UACPL,EAAAA,EAAAA,MAACoC,EAAAA,EAAS,CAACC,IAAK9J,EAAY+J,WAAW,EAAMC,UAAU,KAAKC,OAAQ,EAClEC,SAAS,2BAA0BpC,SAAA,EAEnCC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACyC,UAAU,WAAWxC,GAAI,CAAE7I,QAAS,QAASgJ,UAChDL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAE7I,QAAS,OAAQG,eAAgB,iBAAkB6I,SAAA,EAC5DC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAEpJ,MAAOsB,EAAAA,EAAOuI,aAAcjK,WAAYmB,EAAAA,GAAWC,cAAesI,GAAI,GAAIC,SAAC,8BAG1GL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEjJ,WAAY,IAAKR,SAAU,OAAQkM,GAAI,IAAK7L,MAAOsB,EAAAA,EAAOuI,cAAgBN,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,mBAA0BqB,MAASC,OAAO,uBAI1IrB,EAAAA,EAAAA,KAACsC,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAO5C,GAAI,CAAE6C,UAAW,6BAA8BC,aAAc,EAAGC,UAAW,uBAAyBP,UAAU,YAAWrC,UACzJL,EAAAA,EAAAA,MAACkD,EAAAA,EAAK,CAACC,cAAY,EAACjD,GAAI,CAAEkD,SAAU,KAAM/C,SAAA,EACxCC,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,CAAAhD,UACRC,EAAAA,EAAAA,KAACtK,EAAAA,EAAQ,CAAAqK,SACN5H,EAAUwG,KAAI,CAACpD,EAAMqG,KACpB5B,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SAAcxE,GAARqG,UAIvC5B,EAAAA,EAAAA,KAACgD,EAAAA,EAAS,CAAAjD,SACN3H,GAgaA4H,EAAAA,EAAAA,KAACxK,EAAG,CAAAuK,UACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS9K,EAAUmF,OAAS,EAAG4F,MAAM,SAAStD,GAAI,CAAEjJ,WAAY,KAAMoJ,UAC1EC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACyC,UAAWpK,EAAQL,WAAWoI,UACjCC,EAAAA,EAAAA,KAACmD,EAAAA,EAAgB,WAlaI,OAA3B1K,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6B6E,QAAS,GACpCoC,EAAAA,EAAAA,MAAA0D,EAAAA,SAAA,CAAArD,SAAA,EACEC,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,SACqB,OAA3BtH,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6BkG,KAAI,CAACpD,EAAMqG,KAAW,IAADyB,EAAAC,EAAAC,EAAAC,EACjD,IAAIC,EAAa,EACjB,OACE/D,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPC,EAAAA,EAAAA,KAACxK,EAAG,CAAAuK,UACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAkB,OAAT9K,QAAS,IAATA,OAAS,EAATA,EAAWmF,OAAOyC,UAC/BL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKL,UAAW,QAASyJ,SAAA,EAC7D,IAA7BhG,GAAOuF,QAAQ/D,EAAK4C,KACnB6B,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CAACtB,UAAU,WAAWxC,GAAI,CAAE+D,cAAe,MAAOxM,OAAQ,UAAWyM,SAAa,OAAJrI,QAAI,IAAJA,GAAS,QAAL8H,EAAJ9H,EAAMK,WAAG,IAAAyH,OAAL,EAAJA,EAAW/F,QAAS,EAAI,EAAI,GAAKuG,QAASA,IAAMzE,GAAa7D,EAAK4C,OAE3J6B,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAAC1B,UAAU,WAAWxC,GAAI,CAAE+D,cAAe,MAAOxM,OAAQ,UAAW4M,UAAW,gBAAiBH,SAAa,OAAJrI,QAAI,IAAJA,GAAS,QAAL+H,EAAJ/H,EAAMK,WAAG,IAAA0H,OAAL,EAAJA,EAAWhG,QAAS,EAAI,EAAI,GAAKuG,QAASA,IAAMzE,GAAa7D,EAAK4C,MAEpL,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAMC,aAIiB,IAA7BzB,GAAOuF,QAAQ/D,EAAK4C,MACnBuB,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,CACF,OAAJxE,QAAI,IAAJA,GAAS,QAALgI,EAAJhI,EAAMK,WAAG,IAAA2H,OAAL,EAAJA,EAAW5E,KAAI,CAAC3C,EAASqB,KAAO,IAAD2G,EAAAC,EAAAC,EAAAC,EAAAC,EAC9B,IAAIC,EAAQ,EAEZ,OACE3E,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPC,EAAAA,EAAAA,KAACxK,EAAG,CAAAuK,UACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAkB,OAAT9K,QAAS,IAATA,OAAS,EAATA,EAAWmF,OAAOyC,UAC/BL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKL,UAAW,OAAQgO,GAAI,KAAMvE,SAAA,EACnE,IAAhChG,GAAOuF,QAAQtD,EAAQmC,KACtB6B,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CAACtB,UAAU,WAAWxC,GAAI,CAAE+D,cAAe,MAAOxM,OAAQ,UAAWyM,SAAgB,OAAP5H,QAAO,IAAPA,GAAiB,QAAVgI,EAAPhI,EAASE,gBAAQ,IAAA8H,OAAV,EAAPA,EAAmB1G,QAAS,EAAI,EAAI,GAAKuG,QAASA,IAAMzE,GAAapD,EAAQmC,OAEtK6B,EAAAA,EAAAA,KAAC8D,EAAAA,EAAU,CAAC1B,UAAU,WAAWxC,GAAI,CAAE+D,cAAe,MAAOxM,OAAQ,UAAW4M,UAAW,gBAAiBH,SAAgB,OAAP5H,QAAO,IAAPA,GAAiB,QAAViI,EAAPjI,EAASE,gBAAQ,IAAA+H,OAAV,EAAPA,EAAmB3G,QAAS,EAAI,EAAI,GAAKuG,QAASA,IAAMzE,GAAapD,EAAQmC,MAE5L,OAAPnC,QAAO,IAAPA,OAAO,EAAPA,EAASR,aAIiB,IAAhCzB,GAAOuF,QAAQtD,EAAQmC,MACtBuB,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,CACC,OAAP/D,QAAO,IAAPA,GAAiB,QAAVkI,EAAPlI,EAASE,gBAAQ,IAAAgI,OAAV,EAAPA,EAAmBvF,KAAI,CAACxC,EAASsB,KAAO,IAAD8G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtC,IAAIC,EAAkB,EAClBrH,EAAa,EACjB,IAAW,OAAPrB,QAAO,IAAPA,GAAsB,QAAfoI,EAAPpI,EAASO,qBAAa,IAAA6H,OAAf,EAAPA,EAAwBjH,QAAS,EAAG,CAAC,IAADwH,EACtC,MAAMC,EAAe,CAAE,OAAU,EAAG,MAAS,GAEvCC,EAAgB,OAAP7I,QAAO,IAAPA,GAAsB,QAAf2I,EAAP3I,EAASO,qBAAa,IAAAoI,OAAf,EAAPA,EAAwBG,QAAO,CAACC,EAAaC,KAC1D,MAAM/I,EAASgJ,MAAiB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAa7I,cAAgB,EAAe,OAAX6I,QAAW,IAAXA,OAAW,EAAXA,EAAa7I,aAC7DC,EAAQ6I,MAAiB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAa3I,aAAe,EAAe,OAAX2I,QAAW,IAAXA,OAAW,EAAXA,EAAa3I,YACjE,MAAO,CACL,OAAUH,WAAW6I,EAAY9I,QAAUC,WAAWD,GACtD,MAASC,WAAW6I,EAAY3I,OAASF,WAAWE,GACrD,GACAwI,GACHvH,EAAiC,WAAb,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASM,QAAqBJ,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQzI,OAASF,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQ5I,QAAUC,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQ5I,QAAUC,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQzI,MAEtJ,MAEEiB,EAAiC,WAAb,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASM,QAAqBJ,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASK,aAAeH,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,cAAgBD,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,cAAgBD,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASK,aAQ5K,OAJA6H,GAAShI,WAAWmB,GAGpBiG,GAAcpH,WAAWmB,IAEvBkC,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPL,EAAAA,EAAAA,MAAClK,EAAG,CAAAuK,SAAA,EACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAkB,OAAPjG,QAAO,IAAPA,GAAAA,EAASO,cAAgB1E,EAAQJ,WAAa,GAAIiM,QAASA,IAAMzE,GAAoB,OAAPjD,QAAO,IAAPA,OAAO,EAAPA,EAASgC,IAAI4B,UAC1GC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAE0E,GAAI,GAAIvE,SACxC,QADwCyE,EACtD,OAAPrI,QAAO,IAAPA,OAAO,EAAPA,EAASkJ,oBAAY,IAAAb,EAAAA,EAAI,SAG9BxE,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAkB,OAAPjG,QAAO,IAAPA,GAAAA,EAASO,cAAgB1E,EAAQJ,WAARI,aAAyC,YAAa6L,QAASA,IAAMzE,GAAoB,OAAPjD,QAAO,IAAPA,OAAO,EAAPA,EAASgC,IAAI4B,SACjH,QADiH0E,EAC/H,OAAPtI,QAAO,IAAPA,OAAO,EAAPA,EAASmJ,oBAAY,IAAAb,EAAAA,EAAI,OAE5BzE,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACC,QADD2E,EACjB,OAAPvI,QAAO,IAAPA,OAAO,EAAPA,EAASoJ,wBAAgB,IAAAb,EAAAA,EAAI,OAEhC1E,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACI,QADJ4E,EACjB,OAAPxI,QAAO,IAAPA,OAAO,EAAPA,EAASqJ,2BAAmB,IAAAb,EAAAA,EAAI,OAEnC3E,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,eAEhBpC,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,UACxB0F,EAAAA,EAAAA,IAAepJ,WAAWmB,GAAY1B,QAAQ,UAGlB,IAAhC/B,GAAOuF,QAAQnD,EAAQgC,MACtB6B,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,SACC,OAAP5D,QAAO,IAAPA,GAAsB,QAAfyI,EAAPzI,EAASO,qBAAa,IAAAkI,OAAf,EAAPA,EAAwBjG,KAAI,CAACjB,EAAOD,KAAO,IAADiI,EAAAC,EAAAC,EAAAC,EACzC,MAAMzJ,EAASgJ,MAAW,OAAL1H,QAAK,IAALA,OAAK,EAALA,EAAOpB,cAAgB,EAAS,OAALoB,QAAK,IAALA,OAAK,EAALA,EAAOpB,aACjDC,EAAQ6I,MAAW,OAAL1H,QAAK,IAALA,OAAK,EAALA,EAAOlB,aAAe,EAAS,OAALkB,QAAK,IAALA,OAAK,EAALA,EAAOlB,YACrD,IAAIsJ,EAA6B,WAAb,OAALpI,QAAK,IAALA,OAAK,EAALA,EAAOjB,SAAsBJ,WAAWE,GAASF,WAAWD,IAASN,QAAQ,IAAMO,WAAWD,GAAUC,WAAWE,IAAQT,QAAQ,GAGlJ,OADA+I,GAAmBxI,WAAWyJ,IAE5B9F,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UACPL,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAAS,WAAYhG,SAAA,EAC9BC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAE0E,GAAI,KAAMvE,SAC5C,QAD4C2F,EAC1D,OAALhI,QAAK,IAALA,OAAK,EAALA,EAAO2H,oBAAY,IAAAK,EAAAA,EAAI,SAG5B1F,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACL,QADK4F,EACnB,OAALjI,QAAK,IAALA,OAAK,EAALA,EAAO4H,oBAAY,IAAAK,EAAAA,EAAI,OAE1B3F,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACD,QADC6F,EACnB,OAALlI,QAAK,IAALA,OAAK,EAALA,EAAO6H,wBAAgB,IAAAK,EAAAA,EAAI,OAE9B5F,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACE,QADF8F,EACnB,OAALnI,QAAK,IAALA,OAAK,EAALA,EAAO8H,2BAAmB,IAAAK,EAAAA,EAAI,OAEjC7F,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,UACxB0F,EAAAA,EAAAA,IAAepJ,WAAWyJ,GAAUhK,QAAQ,OAE/CkE,EAAAA,EAAAA,KAAClK,EAAI,QAnBM2H,EAuBJ,QAtDNA,EA4DJ,KAGP,OAAPzB,QAAO,IAAPA,GAAiB,QAAVmI,EAAPnI,EAASE,gBAAQ,IAAAiI,OAAV,EAAPA,EAAmB7G,QAAS,IAC3BoC,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPL,EAAAA,EAAAA,MAAClK,EAAG,CAAAuK,SAAA,EACFC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAK2N,GAAI,KAAMvE,SAAA,CAAC,YACjE,OAAP/D,QAAO,IAAPA,GAAoB,QAAboI,EAAPpI,EAASE,SAAS,UAAE,IAAAkI,OAAb,EAAPA,EAAsB4B,gBAGpChG,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,KAAMoJ,SAAA,CAAC,SAC3D,OAAP/D,QAAO,IAAPA,OAAO,EAAPA,EAASR,WAGpBwE,EAAAA,EAAAA,KAAClK,EAAI,KAELkK,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,KAAMoJ,UACvE0F,EAAAA,EAAAA,IAAepJ,WAAWgI,GAAOvI,QAAQ,WAInC,QAAZnD,GAAuC,mBAAX,OAAPqD,QAAO,IAAPA,OAAO,EAAPA,EAASR,QAC7BkE,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAASjO,EAAAA,EAAOmO,SAAUlG,SAAA,EACnCC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,SAAC,oBAIlGC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,UAC5F0F,EAAAA,EAAAA,IAAepJ,WAAWA,WAAW9C,GAAgB8C,WAAW1C,IAAYmC,QAAQ,mBAvIxFuB,EAiJJ,KAGV,OAAJ9B,QAAI,IAAJA,GAAS,QAALiI,EAAJjI,EAAMK,WAAG,IAAA4H,OAAL,EAAJA,EAAWlG,QAAS,IACnB0C,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UACPL,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAASjO,EAAAA,EAAOqO,YAAapG,SAAA,EACtCC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,MAAO5B,GAAI,KAAMvE,SAAC,aAI3GC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,SAAA,CAAC,SACnF,OAAJxE,QAAI,IAAJA,OAAI,EAAJA,EAAMC,WAGjBwE,EAAAA,EAAAA,KAAClK,EAAI,KAELkK,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,UAC5F0F,EAAAA,EAAAA,IAAepJ,WAAWoH,GAAY3H,QAAQ,aAMxDrD,EAA4B6E,OAAS,IAAMsE,GAAqB,QAAZjJ,IACnD+G,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAASjO,EAAAA,EAAOmO,SAAUlG,SAAA,EACnCC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,SAAC,kBAIlGL,EAAAA,EAAAA,MAAC5J,EAAI,CAAAiK,SAAA,CACJtE,QAAQC,IAAInC,EAAa,UACvBkC,QAAQC,IAAIjC,EAAc,UAC1BgC,QAAQC,IAAIW,WAAWA,WAAW9C,GAAgB8C,WAAW5C,IAAgBqC,QAAQ,GAAG,WAEzFkE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,UAC5F0F,EAAAA,EAAAA,KAAgBpJ,WAAWA,WAAW9C,GAAgB8C,WAAW1C,IAAa0C,WAAW5C,IAAgBqC,QAAQ,iBA3MjH8F,EAkNJ,OAIjB5B,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,SACqB,OAA3BtH,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6BkG,KAAI,CAACpD,EAAMqG,KAAW,IAADwE,EACjD,IAAI3C,EAAa,EACjB,OACEzD,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UAGLL,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,CACqB,OAA3BtH,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6BkG,KAAI,CAAC3C,EAASqB,KAAO,IAADgJ,EAAAC,EAAAC,EAChD,IAAIlC,EAAQ,EACZ,OACErE,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UAGLL,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,CACC,OAAP/D,QAAO,IAAPA,GAAiB,QAAVqK,EAAPrK,EAASE,gBAAQ,IAAAmK,OAAV,EAAPA,EAAmB1H,KAAI,CAACxC,EAASsB,KAAO,IAAD+I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACtC,IAAIhC,EAAkB,EAClBrH,EAAa,EACjB,IAAW,OAAPrB,QAAO,IAAPA,GAAsB,QAAfqK,EAAPrK,EAASO,qBAAa,IAAA8J,OAAf,EAAPA,EAAwBlJ,QAAS,EAAG,CAAC,IAADwJ,EACtC,MAAM/B,EAAe,CAAE,OAAU,EAAG,MAAS,GAEvCC,EAAgB,OAAP7I,QAAO,IAAPA,GAAsB,QAAf2K,EAAP3K,EAASO,qBAAa,IAAAoK,OAAf,EAAPA,EAAwB7B,QAAO,CAACC,EAAaC,KAC1D,MAAM/I,EAASgJ,MAAiB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAa7I,cAAgB,EAAe,OAAX6I,QAAW,IAAXA,OAAW,EAAXA,EAAa7I,aAC7DC,EAAQ6I,MAAiB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAa3I,aAAe,EAAe,OAAX2I,QAAW,IAAXA,OAAW,EAAXA,EAAa3I,YACjE,MAAO,CACL,OAAUH,WAAW6I,EAAY9I,QAAUC,WAAWD,GACtD,MAASC,WAAW6I,EAAY3I,OAASF,WAAWE,GACrD,GACAwI,GACHvH,EAAiC,WAAb,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASM,QAAqBJ,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQzI,OAASF,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQ5I,QAAUC,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQ5I,QAAUC,WAAiB,OAAN2I,QAAM,IAANA,OAAM,EAANA,EAAQzI,MAEtJ,MAGEiB,EAAiC,WAAb,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASM,QAAqBJ,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASK,aAAeH,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,cAAgBD,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,cAAgBD,WAAkB,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASK,aAK5K,OAFA6H,GAAShI,WAAWmB,GACpBiG,GAAcpH,WAAWmB,IAEvBkC,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPL,EAAAA,EAAAA,MAAClK,EAAG,CAAAuK,SAAA,EACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAkB,OAAPjG,QAAO,IAAPA,GAAAA,EAASO,cAAgB1E,EAAQJ,WAAa,GAAIiM,QAASA,IAAMzE,GAAoB,OAAPjD,QAAO,IAAPA,OAAO,EAAPA,EAASgC,IAAI4B,UAC1GC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAE0E,GAAI,GAAIvE,SACxC,QADwC0G,EACtD,OAAPtK,QAAO,IAAPA,OAAO,EAAPA,EAASkJ,oBAAY,IAAAoB,EAAAA,EAAI,SAG9BzG,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAkB,OAAPjG,QAAO,IAAPA,GAAAA,EAASO,cAAgB1E,EAAQJ,WAARI,aAAyC,YAAa6L,QAASA,IAAMzE,GAAoB,OAAPjD,QAAO,IAAPA,OAAO,EAAPA,EAASgC,IAAI4B,SACjH,QADiH2G,EAC/H,OAAPvK,QAAO,IAAPA,OAAO,EAAPA,EAASmJ,oBAAY,IAAAoB,EAAAA,EAAI,OAE5B1G,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACC,QADD4G,EACjB,OAAPxK,QAAO,IAAPA,OAAO,EAAPA,EAASoJ,wBAAgB,IAAAoB,EAAAA,EAAI,OAEhC3G,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACI,QADJ6G,EACjB,OAAPzK,QAAO,IAAPA,OAAO,EAAPA,EAASqJ,2BAAmB,IAAAoB,EAAAA,EAAI,OAEnC5G,EAAAA,EAAAA,KAAClK,EAAI,KAELkK,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,UACxB0F,EAAAA,EAAAA,IAAepJ,WAAWmB,GAAY1B,QAAQ,UAGlB,IAAhC/B,GAAOuF,QAAQnD,EAAQgC,MACtB6B,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,SACC,OAAP5D,QAAO,IAAPA,GAAsB,QAAf0K,EAAP1K,EAASO,qBAAa,IAAAmK,OAAf,EAAPA,EAAwBlI,KAAI,CAACjB,EAAOD,KAAO,IAADsJ,EAAAC,EAAAC,EAAAC,EACzC,MAAM9K,EAASgJ,MAAW,OAAL1H,QAAK,IAALA,OAAK,EAALA,EAAOpB,cAAgB,EAAS,OAALoB,QAAK,IAALA,OAAK,EAALA,EAAOpB,aACjDC,EAAQ6I,MAAW,OAAL1H,QAAK,IAALA,OAAK,EAALA,EAAOlB,aAAe,EAAS,OAALkB,QAAK,IAALA,OAAK,EAALA,EAAOlB,YACrD,IAAIsJ,EAA6B,WAAb,OAALpI,QAAK,IAALA,OAAK,EAALA,EAAOjB,SAAsBJ,WAAWE,GAASF,WAAWD,IAASN,QAAQ,IAAMO,WAAWD,GAAUC,WAAWE,IAAQT,QAAQ,GAGlJ,OADA+I,GAAmBxI,WAAWyJ,IAE5B9F,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAAA9B,UACPL,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAAS,WAAYhG,SAAA,EAC9BC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAE0E,GAAI,KAAMvE,SAC5C,QAD4CgH,EAC1D,OAALrJ,QAAK,IAALA,OAAK,EAALA,EAAO2H,oBAAY,IAAA0B,EAAAA,EAAI,SAG5B/G,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACL,QADKiH,EACnB,OAALtJ,QAAK,IAALA,OAAK,EAALA,EAAO4H,oBAAY,IAAA0B,EAAAA,EAAI,OAE1BhH,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACD,QADCkH,EACnB,OAALvJ,QAAK,IAALA,OAAK,EAALA,EAAO6H,wBAAgB,IAAA0B,EAAAA,EAAI,OAE9BjH,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,SACE,QADFmH,EACnB,OAALxJ,QAAK,IAALA,OAAK,EAALA,EAAO8H,2BAAmB,IAAA0B,EAAAA,EAAI,OAEjClH,EAAAA,EAAAA,KAAClK,EAAI,CAACsM,UAAU,YAAWrC,UACxB0F,EAAAA,EAAAA,IAAepJ,WAAWyJ,GAAUhK,QAAQ,OAE/CkE,EAAAA,EAAAA,KAAClK,EAAI,QAnBM2H,EAuBJ,QAtDNA,EA2DJ,KAGP,OAAPzB,QAAO,IAAPA,GAAiB,QAAVsK,EAAPtK,EAASE,gBAAQ,IAAAoK,OAAV,EAAPA,EAAmBhJ,QAAS,IAC3BoC,EAAAA,EAAAA,MAACmC,EAAAA,SAAQ,CAAA9B,SAAA,EACPL,EAAAA,EAAAA,MAAClK,EAAG,CAAAuK,SAAA,EACFC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAK2N,GAAI,KAAMvE,SAAA,CAAC,YACjE,OAAP/D,QAAO,IAAPA,GAAoB,QAAbuK,EAAPvK,EAASE,SAAS,UAAE,IAAAqK,OAAb,EAAPA,EAAsBP,gBAGpChG,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,KAAMoJ,SAAA,CAAC,SAC3D,OAAP/D,QAAO,IAAPA,OAAO,EAAPA,EAASR,WAGpBwE,EAAAA,EAAAA,KAAClK,EAAI,KAELkK,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,KAAMoJ,UACvE0F,EAAAA,EAAAA,IAAepJ,WAAWgI,GAAOvI,QAAQ,WAInC,QAAZnD,GAAuC,mBAAX,OAAPqD,QAAO,IAAPA,OAAO,EAAPA,EAASR,QAC7BkE,EAAAA,EAAAA,MAAClK,EAAG,CAACoK,GAAI,CAAEmG,QAASjO,EAAAA,EAAOmO,SAAUlG,SAAA,EACnCC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS,EAAElD,UACfC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,OAAQnG,SAAC,8BAIlGC,EAAAA,EAAAA,KAAClK,EAAI,CAAAiK,UACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACiC,UAAU,YAAYhC,QAAQ,QAAQR,GAAI,CAAEjJ,WAAY,IAAKH,MAAOsB,EAAAA,EAAOoO,qBAxHxF7I,EAkIJ,KAGV,OAAJ9B,QAAI,IAAJA,GAAS,QAAL6K,EAAJ7K,EAAMK,WAAG,IAAAwK,OAAL,EAAJA,EAAW9I,QAAS,IACnB0C,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,QA7IFD,EAmLJ,UAMnB5B,EAAAA,EAAAA,KAACxK,EAAG,CAAAuK,UACFC,EAAAA,EAAAA,KAAClK,EAAI,CAACmN,QAAS9K,EAAUmF,OAAS,EAAG4F,MAAM,SAAStD,GAAI,CAAEjJ,WAAY,KAAMoJ,SAAC,iCAmB7FC,EAAAA,EAAAA,KAACmH,EAAAA,EAAa,MAKtB,C","sources":["pages/Dashboard/Reporting/ProfitLossStatement.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, CircularProgress, Grid, Tabs, Tab } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport { FontFamily } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\r\nimport FinanceServices from 'services/Finance';\r\nimport DatePicker from 'components/DatePicker';\r\nimport moment from 'moment';\r\nimport { CommaSeparator, Debounce, handleExportWithComponent } from 'utils';\r\nimport ExportFinanceServices from 'services/ExportFinance';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  },\r\n  anchorLink: {\r\n    textDecoration: 'underline',\r\n    color: Colors.twitter,\r\n    cursor: 'pointer'\r\n  }\r\n})\r\n\r\nfunction ProfitLossStatement() {\r\n\r\n  const classes = useStyles();\r\n  const contentRef = useRef(null);\r\n\r\n  const tableHead = ['Code', 'Name', 'Major Category', 'Sub Category', 'Sub Total (AED)', 'Final Total (AED)']\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  // *For Profit Loss Statement\r\n  const [profitLossStatement, setProfitLossStatement] = useState([]);\r\n  const [filteredProfitLossStatement, setFilteredProfitLossStatement] = useState([]);\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState('all');\r\n  const [filterData, setFilterData] = useState();\r\n  const [dateFilter, setDateFilter] = useState();\r\n  const [fromDate, setFromDate] = useState();\r\n  const [toDate, setToDate] = useState();\r\n  const [childTabs, setChildTabs] = useState([])\r\n\r\n  const [totalRevenue, setTotalRevenue] = useState(0)\r\n  const [totalExpenses, setTotalExpenses] = useState(0)\r\n  const [totalCost, setTotalCost] = useState(0)\r\n  const [totalAdminExpenses, setTotalAdminExpenses] = useState(0)\r\n\r\n  // *For Collapse\r\n  const [expand, setExpand] = useState([]);\r\n\r\n  // *For Handle Date\r\n  const handleFromDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setFromDate('invalid')\r\n        return\r\n      }\r\n      setFromDate(new Date(newDate))\r\n      handleFilter({ fromDate: moment(new Date(newDate)).format('MM-DD-YYYY') })\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  const handleToDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setToDate('invalid')\r\n        return\r\n      }\r\n      setToDate(new Date(newDate))\r\n      handleFilter({ toDate: moment(new Date(newDate)).format('MM-DD-YYYY') })\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n  const [GrossTotal, setGrossTotal] = useState(0)\r\n\r\n  // *For Get Balance Sheet\r\n  const getProfitLossStatement = async (filter) => {\r\n    try {\r\n      const Filter = { ...dateFilter, ...filter }\r\n      setDateFilter(Filter)\r\n      let params = {\r\n        ...Filter\r\n      }\r\n      const { data } = await FinanceServices.getAccountReports(params)\r\n    setProfitLossStatement(data?.detail.slice(3))\r\n      setFilteredProfitLossStatement(data?.detail.slice(3))\r\n      let myData = data?.detail.slice(3)\r\n\r\n      const calculateTotal = (data, category) => {\r\n        let total = 0;\r\n\r\n        data?.forEach((item) => {\r\n          try {\r\n            if (item?.name === category) {\r\n              console.log(item?.name);\r\n              console.log(category);\r\n              processSubItems(item?.sub);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n        });\r\n\r\n        return total.toFixed(2);\r\n\r\n        function processSubItems(subItems) {\r\n          subItems?.forEach((subItem) => {\r\n            console.log(subItem);\r\n            if (subItem?.accounts) {\r\n              subItem.accounts.forEach((account) => {\r\n                const credit = parseFloat(account.total_credit) || 0;\r\n                const debit = parseFloat(account.total_debit) || 0;\r\n\r\n                total += account.nature === 'debit' ? debit - credit : credit - debit;\r\n              });\r\n            }\r\n            else {\r\n              subItem.childAccounts?.forEach((account) => {\r\n                const credit = parseFloat(account.total_credit) || 0;\r\n                const debit = parseFloat(account.total_debit) || 0;\r\n\r\n                total += account.nature === 'debit' ? debit - credit : credit - debit;\r\n              });\r\n            }\r\n\r\n            // Recursively process child accounts\r\n            if (subItem?.accounts ? subItem?.accounts : subItem?.childAccounts) {\r\n              console.log(subItem?.accounts ? subItem?.accounts : subItem?.childAccounts);\r\n              processSubItems(subItem?.accounts ? subItem?.accounts : subItem?.childAccounts);\r\n            }\r\n          });\r\n        }\r\n      };\r\n\r\n      // Usage\r\n      const revenueTotal = calculateTotal(myData, 'Revenue');\r\n      const totalEnxpensesVal = calculateTotal(myData, 'Expenses');\r\n      let costData = myData.filter(item => item?.name == \"Expenses\")\r\n      console.log(costData, 'costDatacostData');\r\n      console.log(costData[0]?.sub?.filter(item => item?.type_number == 1));\r\n\r\n      console.log(totalEnxpensesVal);\r\n      console.log(revenueTotal, 'revenueTotalrevenueTotalrevenueTotalrevenueTotal');\r\n      setTotalRevenue(revenueTotal)\r\n      setTotalExpenses(totalEnxpensesVal)\r\n      console.log(revenueTotal);\r\n\r\n\r\n      console.log('Total Revenue:', revenueTotal);\r\n\r\n\r\n      const calculateAdminOperationalExpensesTotal = (expensesData) => {\r\n        let total = 0;\r\n\r\n        expensesData?.forEach((category) => {\r\n          if (category.name == 'Admin & Operational Expenses') {\r\n            category.sub.forEach((subCategory) => {\r\n              subCategory.accounts.forEach((account) => {\r\n                if (account.nature === 'debit') {\r\n                  total += parseFloat(account.total_debit);\r\n                }\r\n              });\r\n\r\n              // If there are child accounts, consider their debits as well\r\n              if (subCategory.accounts.childAccounts) {\r\n                subCategory.accounts.childAccounts.forEach((childAccount) => {\r\n                  if (childAccount.nature === 'debit') {\r\n                    total += parseFloat(childAccount.total_debit);\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        return total.toFixed(2);\r\n      };\r\n\r\n      const totalSales = (data, category) => {\r\n        let total = 0;\r\n\r\n        data?.forEach((item) => {\r\n          try {\r\n            if (true) {\r\n\r\n              processSubitems2(item?.accounts);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n        });\r\n\r\n        return total.toFixed(2);\r\n\r\n\r\n\r\n\r\n        function processSubitems2(subItems) {\r\n\r\n          console.log(subItems)\r\n          let grandTotal = 0\r\n          for (let i = 0; i < subItems.length; i++) {\r\n            const subItem = subItems[i];\r\n            let accountNature = subItem.nature;\r\n            let childTotal = 0;\r\n            if (subItem.childAccounts && subItem.childAccounts.length > 0) {\r\n              for (let j = 0; j < subItem.childAccounts.length; j++) {\r\n                const child = subItem.childAccounts[j];\r\n                console.log(child, \"child\")\r\n                const childCredit = parseFloat(child.total_credit) || 0;\r\n                const childDebit = parseFloat(child.total_debit) || 0;\r\n\r\n                childTotal += accountNature == \"debit\" ? parseFloat(childDebit) - parseFloat(childCredit) : parseFloat(childCredit) - parseFloat(childDebit);\r\n              }\r\n            }\r\n\r\n            grandTotal += childTotal;\r\n            const credit = parseFloat(subItem.total_credit) || 0;\r\n            const debit = parseFloat(subItem.total_debit) || 0;\r\n            grandTotal += accountNature == \"debit\" ? parseFloat(debit) - parseFloat(credit) : parseFloat(credit) - parseFloat(debit);\r\n            console.log(childTotal, \"Child total\")\r\n          }\r\n          setTotalCost(grandTotal)\r\n          console.log(grandTotal, \"grand Total\")\r\n\r\n\r\n        }\r\n      };\r\n      // Usage\r\n      const costSalesTotal = totalSales(costData[0]?.sub?.filter(item => item?.type_number == 1));\r\n      console.log(costSalesTotal);\r\n      const adminOperationalExpensesTotal = calculateAdminOperationalExpensesTotal(myData);\r\n      setTotalAdminExpenses(adminOperationalExpensesTotal)\r\n\r\n      const fil = []\r\n      data?.detail?.forEach(e => {\r\n        let obj = {\r\n          id: e.id,\r\n          name: e.name,\r\n          sub_accounts: e.sub\r\n        }\r\n        fil.push(obj)\r\n      })\r\n      setFilterData(fil.slice(3))\r\n      let mydata = fil.slice(3)\r\n\r\n\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Handle Category Filter\r\n  const handleCategoryFilter = (event, newValue, child) => {\r\n    if (child) {\r\n\r\n\r\n      const arrayOfArrays = profitLossStatement?.map(item => item?.sub?.filter(subItem => subItem?.id == newValue))\r\n      const nonEmptyArrays = arrayOfArrays.filter(arr => arr.length > 0);\r\n\r\n      // Log the result to the console\r\n\r\n      setFilteredProfitLossStatement(nonEmptyArrays.flat())\r\n\r\n      setFilters(newValue);\r\n    }\r\n    else {\r\n\r\n      setFilters(newValue);\r\n      if (newValue === 'all') {\r\n        setFilteredProfitLossStatement(profitLossStatement)\r\n        setChildTabs(profitLossStatement.find(item => item?.id == newValue)?.sub)\r\n      } else {\r\n        const filterData = profitLossStatement.filter(e => e.id === newValue)\r\n        setChildTabs(profitLossStatement.find(item => item?.id == newValue)?.sub)\r\n        setFilteredProfitLossStatement(filterData)\r\n      }\r\n    }\r\n  };\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = (data) => {\r\n    Debounce(() => getProfitLossStatement(data));\r\n  }\r\n\r\n  // *For Handle Expand\r\n  const handleExpand = (id) => {\r\n    try {\r\n      const currentIndex = expand.indexOf(id);\r\n      const newExpand = [...expand];\r\n\r\n      if (currentIndex === -1) {\r\n        newExpand.push(id);\r\n      } else {\r\n        newExpand.splice(currentIndex, 1);\r\n      }\r\n\r\n      setExpand(newExpand);\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Filter Chart of Account By Search\r\n  const filterBySearch = (search) => {\r\n    const result = [];\r\n\r\n    for (const item of profitLossStatement) {\r\n      if (item?.sub.length > 0) {\r\n        for (const sub of item?.sub) {\r\n          if (sub?.accounts?.length > 0) {\r\n            for (const acc of sub?.accounts) {\r\n              if (acc.account_name?.toLowerCase().includes(search?.toLowerCase()) || acc.account_code?.toLowerCase().includes(search?.toLowerCase())) {\r\n                result.push(item);\r\n              } else {\r\n                if (acc?.childAccounts?.length > 0) {\r\n                  for (const subAcc of acc?.childAccounts) {\r\n                    if (subAcc.account_name?.toLowerCase().includes(search?.toLowerCase()) || subAcc.account_code?.toLowerCase().includes(search?.toLowerCase())) {\r\n                      result.push(item);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    setFilteredProfitLossStatement(result)\r\n  }\r\n\r\n  const downloadExcel = () => {\r\n    const headers = tableHead;\r\n    const rows = [];\r\n    // Iterate through the data and push each row to the 'rows' array\r\n    filteredProfitLossStatement?.forEach(item => {\r\n      let GrandTotal = 0\r\n      rows.push([\r\n        item.name,\r\n        '', // Empty cells for the columns that don't have data in this row\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ]);\r\n\r\n      if (item.sub) {\r\n        item.sub.forEach(subItem => {\r\n          let Total = 0\r\n          rows.push([\r\n            subItem.name,\r\n            '',\r\n            '',\r\n            '',\r\n            '',\r\n            ''\r\n          ]);\r\n          if (subItem.accounts) {\r\n            subItem.accounts.forEach(account => {\r\n              let childFinalTotal = 0\r\n              let childTotal = 0\r\n              if (account?.childAccounts?.length > 0) {\r\n                const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                  const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                  const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                  return {\r\n                    \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                    \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                  };\r\n                }, initialValue);\r\n                childTotal = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n              }\r\n              else {\r\n                childTotal = account?.nature === 'debit' ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit) : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n              }\r\n              Total += parseFloat(childTotal)\r\n              GrandTotal += parseFloat(childTotal)\r\n              // const total = account.total !== undefined && account.total !== null ? parseFloat(account.total).toFixed(2) : '';\r\n              rows.push([\r\n                account.account_code ?? '-',\r\n                account.account_name ?? '-',\r\n                account.account_category ?? '-',\r\n                account.account_subcategory ?? '-',\r\n                '',\r\n                childTotal\r\n              ]);\r\n\r\n              if (account.childAccounts) {\r\n                account.childAccounts.forEach(child => {\r\n                  const credit = isNaN(child?.total_credit) ? 0 : child?.total_credit\r\n                  const debit = isNaN(child?.total_debit) ? 0 : child?.total_debit\r\n                  let subTotal = child?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n                  childFinalTotal += parseFloat(subTotal)\r\n                  // const childTotal = child.total !== undefined && child.total !== null ? parseFloat(child.total).toFixed(2) : '';\r\n                  rows.push([\r\n                    child.account_code ?? '-',\r\n                    child.account_name ?? '-',\r\n                    child.account_category ?? '-',\r\n                    child.account_subcategory ?? '-',\r\n                    subTotal,\r\n                    ''\r\n                  ]);\r\n                });\r\n              }\r\n            });\r\n          }\r\n          subItem?.accounts?.length > 0 && (\r\n            rows.push([\r\n              `Total of ${subItem?.accounts[0]?.type_code}`,\r\n              \"\",\r\n              `Total of ${subItem?.name}`,\r\n              \"\",\r\n              \"\",\r\n              Total\r\n            ])\r\n          )\r\n          subItem?.name === 'Cost of Sales' && (\r\n            rows.push([\r\n              \"\",\r\n              \"\",\r\n              \"Gross Profit\",\r\n              \"\",\r\n              \"\",\r\n              parseFloat(parseFloat(totalRevenue) - parseFloat(totalCost)).toFixed(2)\r\n            ])\r\n          )\r\n        });\r\n        item?.sub?.length > 0 && (\r\n          rows.push([\r\n            \"Total\",\r\n            \"\",\r\n            `Total ${item?.name}`,\r\n            \"\",\r\n            \"\",\r\n            parseFloat(GrandTotal).toFixed(2)\r\n          ])\r\n        )\r\n      }\r\n    });\r\n    filteredProfitLossStatement.length - 1 && (\r\n      rows.push([\r\n        \"\",\r\n        \"\",\r\n        \"Net Profit\",\r\n        \"\",\r\n        \"\",\r\n        parseFloat(parseFloat(totalRevenue) - parseFloat(totalExpenses)).toFixed(2)\r\n      ])\r\n    )\r\n\r\n    // Convert the data to a worksheet\r\n    const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n    // Convert the workbook to a binary Excel file and trigger the download\r\n    const buf = XLSX.write(wb, {\r\n      bookType: \"xlsx\",\r\n      type: \"array\",\r\n      mimeType: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    });\r\n\r\n    saveAs(new Blob([buf]), \"data.xlsx\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProfitLossStatement()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ m: 4, mb: 2 }}>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          mr: 4,\r\n          my: 4,\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, }}>\r\n          Profit OR Loss Statement\r\n        </Typography>\r\n        {/* {profitLossStatement?.length > 0 && (\r\n          <Box sx={{\r\n            textAlign: \"right\", p: 4, display: \"flex\", gap: 2\r\n\r\n          }}>\r\n            <PrimaryButton\r\n              title=\"Download PDF\"\r\n              type=\"button\"\r\n              style={{ backgroundColor: Colors.bluishCyan }}\r\n              onClick={() => handleExportWithComponent(contentRef)}\r\n            />\r\n            <PrimaryButton\r\n              title={\"Download Excel\"}\r\n              onClick={() => downloadExcel()}\r\n            />\r\n          </Box>\r\n        )} */}\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Grid container spacing={1}>\r\n        {/* <Grid item xs={12} sm={3}>\r\n          <InputField\r\n            size={'small'}\r\n            label={'Search'}\r\n            placeholder={'Search'}\r\n            register={register('search', {\r\n              onChange: (e) => filterBySearch(e.target.value)\r\n            })}\r\n          />\r\n        </Grid> */}\r\n        <Grid item xs={12} sm={3}>\r\n          <DatePicker\r\n            disableFuture={true}\r\n            size='small'\r\n            label={'From Date'}\r\n            value={fromDate}\r\n            onChange={(date) => handleFromDate(date)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={3}>\r\n          <DatePicker\r\n            disabled={fromDate ? false : true}\r\n            disableFuture={true}\r\n            size='small'\r\n            minDate={fromDate}\r\n            label={'To Date'}\r\n            value={toDate}\r\n            onChange={(date) => handleToDate(date)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={1} sx={{ mb: 2 }}>\r\n        <Grid item xs={12} sm={12}>\r\n          <Tabs value={filters} onChange={(event, newValue) => handleCategoryFilter(event, newValue, false)} >\r\n            <Tab value=\"all\" label=\"All\" />\r\n\r\n            {filterData?.map((item, index) => (\r\n              <Tab key={index} value={item?.id} label={item?.name} />\r\n            ))}\r\n          </Tabs>\r\n          <Tabs value={filters} onChange={(event, newValue) => handleCategoryFilter(event, newValue, true)} >\r\n\r\n            {childTabs?.map((item, index) => (\r\n\r\n              <Tab key={index} value={item?.id} label={item?.name} />\r\n\r\n\r\n            ))}\r\n          </Tabs>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {profitLossStatement ? (\r\n        <Fragment>\r\n          <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5}\r\n            fileName=\"Profit OR Loss Statement\"\r\n          >\r\n            <Box className='pdf-show' sx={{ display: 'none' }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 2 }}>\r\n                  Profit OR Loss Statement\r\n                </Typography>\r\n                <Box sx={{ fontWeight: 400, fontSize: \"12px\", mt: 1.5, color: Colors.charcoalGrey, }}><span>Date: &nbsp;&nbsp;</span>{moment().format('MM-DD-YYYY')}</Box>\r\n              </Box>\r\n            </Box>\r\n            {/* ========== Table ========== */}\r\n            <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 250px)' }} className='table-box'>\r\n              <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {tableHead.map((item, index) => (\r\n                      <Cell className='pdf-table' key={index}>{item}</Cell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {!loader ? (\r\n                    filteredProfitLossStatement?.length > 0 ? (\r\n                      <>\r\n                        <Fragment>\r\n                          {filteredProfitLossStatement?.map((item, index) => {\r\n                            let GrandTotal = 0\r\n                            return (\r\n                              <Fragment key={index}>\r\n                                <Row>\r\n                                  <Cell colSpan={tableHead?.length}>\r\n                                    <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, textAlign: 'left' }}>\r\n                                      {expand.indexOf(item.id) === -1 ? (\r\n                                        <ExpandMore className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                      ) : (\r\n                                        <ExpandLess className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                      )}\r\n                                      {item?.name}\r\n                                    </Typography>\r\n                                  </Cell>\r\n                                </Row>\r\n                                {expand.indexOf(item.id) === -1 &&\r\n                                  <Fragment>\r\n                                    {item?.sub?.map((subItem, i) => {\r\n                                      let Total = 0\r\n\r\n                                      return (\r\n                                        <Fragment key={i}>\r\n                                          <Row>\r\n                                            <Cell colSpan={tableHead?.length}>\r\n                                              <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, textAlign: 'left', ml: 1.5 }}>\r\n                                                {expand.indexOf(subItem.id) === -1 ? (\r\n                                                  <ExpandMore className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                ) : (\r\n                                                  <ExpandLess className='pdf-hide' sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                )}\r\n                                                {subItem?.name}\r\n                                              </Typography>\r\n                                            </Cell>\r\n                                          </Row>\r\n                                          {expand.indexOf(subItem.id) === -1 &&\r\n                                            <Fragment>\r\n                                              {subItem?.accounts?.map((account, j) => {\r\n                                                let childFinalTotal = 0\r\n                                                let childTotal = 0\r\n                                                if (account?.childAccounts?.length > 0) {\r\n                                                  const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                  const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                    const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                    const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                    return {\r\n                                                      \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                      \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                    };\r\n                                                  }, initialValue);\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                                                }\r\n                                                else {\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit) : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n\r\n\r\n                                                }\r\n                                                Total += parseFloat(childTotal)\r\n\r\n\r\n                                                GrandTotal += parseFloat(childTotal)\r\n                                                return (\r\n                                                  <Fragment key={j}>\r\n                                                    <Row>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink : ''} onClick={() => handleExpand(account?.id)}>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ ml: 3 }}>\r\n                                                          {account?.account_code ?? '-'}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink + ' ' + 'pdf-table' : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                        {account?.account_name ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table' >\r\n                                                        {account?.account_category ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                        {account?.account_subcategory ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                        {CommaSeparator(parseFloat(childTotal).toFixed(2))}\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                    {expand.indexOf(account.id) !== -1 &&\r\n                                                      <Fragment>\r\n                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                          const credit = isNaN(child?.total_credit) ? 0 : child?.total_credit\r\n                                                          const debit = isNaN(child?.total_debit) ? 0 : child?.total_debit\r\n                                                          let subTotal = child?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n\r\n                                                          childFinalTotal += parseFloat(subTotal)\r\n                                                          return (\r\n                                                            <Fragment key={j}>\r\n                                                              <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                <Cell>\r\n                                                                  <Typography className='pdf-table' variant=\"body2\" sx={{ ml: 4.5 }}>\r\n                                                                    {child?.account_code ?? '-'}\r\n                                                                  </Typography>\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_name ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_category ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_subcategory ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {CommaSeparator(parseFloat(subTotal).toFixed(2))}\r\n                                                                </Cell>\r\n                                                                <Cell>\r\n\r\n                                                                </Cell>\r\n                                                              </Row>\r\n                                                            </Fragment>\r\n                                                          )\r\n                                                        })}\r\n                                                      </Fragment>\r\n                                                    }\r\n\r\n                                                  </Fragment>\r\n                                                )\r\n                                              })}\r\n                                              {subItem?.accounts?.length > 0 &&\r\n                                                <Fragment>\r\n                                                  <Row>\r\n                                                    <Cell>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, ml: 4.5 }}>\r\n                                                        Total of {subItem?.accounts[0]?.type_code}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                    <Cell colSpan={3}>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700 }}>\r\n                                                        Total {subItem?.name}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                    <Cell>\r\n                                                    </Cell>\r\n                                                    <Cell>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700 }}>\r\n                                                        {CommaSeparator(parseFloat(Total).toFixed(2))}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                  </Row>\r\n                                                  {filters === 'all' && subItem?.name === 'Cost of Sales' &&\r\n                                                    <Row sx={{ bgcolor: Colors.primary }}>\r\n                                                      <Cell colSpan={5}>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                                          Gross Profit\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                                          {CommaSeparator(parseFloat(parseFloat(totalRevenue) - parseFloat(totalCost)).toFixed(2))}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                  }\r\n                                                </Fragment>\r\n                                              }\r\n\r\n                                            </Fragment>\r\n                                          }\r\n                                        </Fragment>\r\n                                      )\r\n                                    })}\r\n                                    {item?.sub?.length > 0 &&\r\n                                      <Fragment>\r\n                                        <Row sx={{ bgcolor: Colors.bluishCyan }}>\r\n                                          <Cell>\r\n                                            <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white, ml: 4.5 }}>\r\n                                              Total\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                          <Cell colSpan={3}>\r\n                                            <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                              Total {item?.name}\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                          <Cell>\r\n                                          </Cell>\r\n                                          <Cell>\r\n                                            <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                              {CommaSeparator(parseFloat(GrandTotal).toFixed(2))}\r\n                                            </Typography>\r\n                                          </Cell>\r\n                                        </Row>\r\n                                      </Fragment>\r\n                                    }\r\n                                    {filteredProfitLossStatement.length - 1 === index && filters === 'all' &&\r\n                                      <Row sx={{ bgcolor: Colors.primary }}>\r\n                                        <Cell colSpan={5}>\r\n                                          <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            Net Profit\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                        <Cell>\r\n                                        {console.log(totalRevenue,'asdasd')}\r\n                                         { console.log(totalExpenses,'asdasd')}\r\n                                         { console.log(parseFloat(parseFloat(totalRevenue) - parseFloat(totalExpenses)).toFixed(2),'asdasd')}\r\n                                          \r\n                                          <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            {CommaSeparator((parseFloat(parseFloat(totalRevenue) - parseFloat(totalCost))- parseFloat(totalExpenses)).toFixed(2))}\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                      </Row>\r\n                                    }\r\n                                  </Fragment>\r\n                                }\r\n                              </Fragment>\r\n                            )\r\n                          })}\r\n                        </Fragment>\r\n                        <Fragment>\r\n                          {filteredProfitLossStatement?.map((item, index) => {\r\n                            let GrandTotal = 0\r\n                            return (\r\n                              <Fragment key={index}>\r\n\r\n                                {true &&\r\n                                  <Fragment>\r\n                                    {filteredProfitLossStatement?.map((subItem, i) => {\r\n                                      let Total = 0\r\n                                      return (\r\n                                        <Fragment key={i}>\r\n\r\n                                          {true &&\r\n                                            <Fragment>\r\n                                              {subItem?.accounts?.map((account, j) => {\r\n                                                let childFinalTotal = 0\r\n                                                let childTotal = 0\r\n                                                if (account?.childAccounts?.length > 0) {\r\n                                                  const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                  const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                    const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                    const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                    return {\r\n                                                      \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                      \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                    };\r\n                                                  }, initialValue);\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                                                }\r\n                                                else {\r\n\r\n                                                  childTotal = account?.nature === 'debit' ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit) : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n\r\n                                                }\r\n                                                Total += parseFloat(childTotal)\r\n                                                GrandTotal += parseFloat(childTotal)\r\n                                                return (\r\n                                                  <Fragment key={j}>\r\n                                                    <Row>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink : ''} onClick={() => handleExpand(account?.id)}>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ ml: 3 }}>\r\n                                                          {account?.account_code ?? '-'}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell className={account?.childAccounts ? classes.anchorLink + ' ' + 'pdf-table' : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                        {account?.account_name ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                        {account?.account_category ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                        {account?.account_subcategory ?? '-'}\r\n                                                      </Cell>\r\n                                                      <Cell>\r\n                                                      </Cell>\r\n                                                      <Cell className='pdf-table'>\r\n                                                        {CommaSeparator(parseFloat(childTotal).toFixed(2))}\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                    {expand.indexOf(account.id) !== -1 &&\r\n                                                      <Fragment>\r\n                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                          const credit = isNaN(child?.total_credit) ? 0 : child?.total_credit\r\n                                                          const debit = isNaN(child?.total_debit) ? 0 : child?.total_debit\r\n                                                          let subTotal = child?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n\r\n                                                          childFinalTotal += parseFloat(subTotal)\r\n                                                          return (\r\n                                                            <Fragment key={j}>\r\n                                                              <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                <Cell>\r\n                                                                  <Typography className='pdf-table' variant=\"body2\" sx={{ ml: 4.5 }}>\r\n                                                                    {child?.account_code ?? '-'}\r\n                                                                  </Typography>\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_name ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_category ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {child?.account_subcategory ?? '-'}\r\n                                                                </Cell>\r\n                                                                <Cell className='pdf-table'>\r\n                                                                  {CommaSeparator(parseFloat(subTotal).toFixed(2))}\r\n                                                                </Cell>\r\n                                                                <Cell>\r\n\r\n                                                                </Cell>\r\n                                                              </Row>\r\n                                                            </Fragment>\r\n                                                          )\r\n                                                        })}\r\n                                                      </Fragment>\r\n                                                    }\r\n                                                  </Fragment>\r\n                                                )\r\n                                              })}\r\n                                              {subItem?.accounts?.length > 0 &&\r\n                                                <Fragment>\r\n                                                  <Row>\r\n                                                    <Cell>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, ml: 4.5 }}>\r\n                                                        Total of {subItem?.accounts[0]?.type_code}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                    <Cell colSpan={3}>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700 }}>\r\n                                                        Total {subItem?.name}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                    <Cell>\r\n                                                    </Cell>\r\n                                                    <Cell>\r\n                                                      <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700 }}>\r\n                                                        {CommaSeparator(parseFloat(Total).toFixed(2))}\r\n                                                      </Typography>\r\n                                                    </Cell>\r\n                                                  </Row>\r\n                                                  {filters === 'all' && subItem?.name === 'Cost of Sales' &&\r\n                                                    <Row sx={{ bgcolor: Colors.primary }}>\r\n                                                      <Cell colSpan={5}>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                                          Gross Profitssdasdasda\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                      <Cell>\r\n                                                        <Typography className='pdf-table' variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                                          {/* {parseFloat(Total).toFixed(2)}sadsadsda */}\r\n                                                        </Typography>\r\n                                                      </Cell>\r\n                                                    </Row>\r\n                                                  }\r\n                                                </Fragment>\r\n                                              }\r\n                                            </Fragment>\r\n                                          }\r\n                                        </Fragment>\r\n                                      )\r\n                                    })}\r\n                                    {item?.sub?.length > 0 &&\r\n                                      <Fragment>\r\n                                        {/* <Row sx={{ bgcolor: Colors.bluishCyan }}>\r\n                                        <Cell>\r\n                                          <Typography variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white, ml: 4.5 }}>\r\n                                            Total\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                        <Cell colSpan={3}>\r\n                                          <Typography variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            Total {item?.name}sda\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                        <Cell>\r\n                                        </Cell>\r\n                                        <Cell>\r\n                                          <Typography variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                            {parseFloat(GrandTotal).toFixed(2)}\r\n                                          </Typography>\r\n                                        </Cell>\r\n                                      </Row> */}\r\n                                      </Fragment>\r\n                                    }\r\n                                    {/* {filteredProfitLossStatement.length - 1 === index && filters === 'all' &&\r\n                                    <Row sx={{ bgcolor: Colors.primary }}>\r\n                                      <Cell colSpan={5}>\r\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          Net Profit\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                      <Cell>\r\n                                        <Typography variant=\"body2\" sx={{ fontWeight: 700, color: Colors.white }}>\r\n                                          {parseFloat(TotalEquity).toFixed(2)}\r\n                                        </Typography>\r\n                                      </Cell>\r\n                                    </Row>\r\n                                  } */}\r\n                                  </Fragment>\r\n                                }\r\n                              </Fragment>\r\n                            )\r\n                          })}\r\n                        </Fragment>\r\n                      </>\r\n                    ) : (\r\n                      <Row>\r\n                        <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                          No Data Found\r\n                        </Cell>\r\n                      </Row>\r\n                    )) : (\r\n                    <Row>\r\n                      <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                        <Box className={classes.loaderWrap}>\r\n                          <CircularProgress />\r\n                        </Box>\r\n                      </Cell>\r\n                    </Row>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </PDFExport>\r\n        </Fragment>\r\n      ) : (\r\n        <CircleLoading />\r\n      )}\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ProfitLossStatement;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","anchorLink","textDecoration","Colors","twitter","classes","contentRef","useRef","tableHead","loader","setLoader","useState","profitLossStatement","setProfitLossStatement","filteredProfitLossStatement","setFilteredProfitLossStatement","filters","setFilters","filterData","setFilterData","dateFilter","setDateFilter","fromDate","setFromDate","toDate","setToDate","childTabs","setChildTabs","totalRevenue","setTotalRevenue","totalExpenses","setTotalExpenses","totalCost","setTotalCost","totalAdminExpenses","setTotalAdminExpenses","expand","setExpand","GrossTotal","setGrossTotal","getProfitLossStatement","async","_costData$","_costData$$sub","_costData$2","_costData$2$sub","_data$detail","Filter","filter","params","data","FinanceServices","getAccountReports","detail","slice","myData","calculateTotal","category","total","forEach","item","name","console","log","processSubItems","sub","error","toFixed","subItems","subItem","_subItem$childAccount","accounts","account","credit","parseFloat","total_credit","debit","total_debit","nature","childAccounts","revenueTotal","totalEnxpensesVal","costData","type_number","calculateAdminOperationalExpensesTotal","expensesData","subCategory","childAccount","totalSales","grandTotal","i","length","accountNature","childTotal","j","child","childCredit","childDebit","processSubitems2","costSalesTotal","adminOperationalExpensesTotal","fil","e","obj","id","sub_accounts","push","ErrorToaster","handleCategoryFilter","event","newValue","nonEmptyArrays","map","_item$sub","arr","flat","_profitLossStatement$","find","_profitLossStatement$2","handleFilter","Debounce","handleExpand","currentIndex","indexOf","newExpand","splice","useEffect","_jsxs","Box","sx","m","mb","children","_jsx","mr","my","Typography","variant","charcoalGrey","Grid","container","spacing","xs","sm","DatePicker","disableFuture","size","label","value","onChange","date","newDate","Date","moment","format","handleFromDate","disabled","minDate","handleToDate","Tabs","Tab","index","Fragment","PDFExport","ref","landscape","paperSize","margin","fileName","className","mt","TableContainer","component","Paper","boxShadow","borderRadius","maxHeight","Table","stickyHeader","minWidth","TableHead","TableBody","colSpan","align","CircularProgress","_Fragment","_item$sub3","_item$sub4","_item$sub5","_item$sub6","GrandTotal","ExpandMore","verticalAlign","opacity","onClick","ExpandLess","transform","_subItem$accounts2","_subItem$accounts3","_subItem$accounts4","_subItem$accounts5","_subItem$accounts$2","Total","ml","_account$childAccount3","_account$account_code2","_account$account_name2","_account$account_cate2","_account$account_subc2","_account$childAccount5","childFinalTotal","_account$childAccount4","initialValue","result","reduce","accumulator","transaction","isNaN","account_code","account_name","account_category","account_subcategory","CommaSeparator","_child$account_code2","_child$account_name2","_child$account_catego2","_child$account_subcat2","subTotal","bgcolor","type_code","primary","white","bluishCyan","_item$sub7","_subItem$accounts6","_subItem$accounts7","_subItem$accounts$3","_account$childAccount6","_account$account_code3","_account$account_name3","_account$account_cate3","_account$account_subc3","_account$childAccount8","_account$childAccount7","_child$account_code3","_child$account_name3","_child$account_catego3","_child$account_subcat3","CircleLoading"],"sourceRoot":""}