{"version":3,"file":"static/js/5633.6480e881.chunk.js","mappings":"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","sources":["pages/Dashboard/Cards/UpdateCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Checkbox, Container, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n\r\nfunction UpdateCard() {\r\n  const theme = useTheme();\r\n  const { user } = useAuth()\r\n  const navigate = useNavigate()\r\n  const [formChange, setFormChange] = useState(false)\r\n  const [submit, setSubmit] = useState(false)\r\n\r\n  const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    watch,\r\n    formState: { errors: errors1 },\r\n\r\n  } = useForm();\r\n\r\n  // Watch all form data\r\nconsole.log(watch());\r\n\r\n\r\n  const isFormDataEmpty = (data) => {\r\n    // Check if all form fields are empty\r\n    return Object.values(data).every((value) => {\r\n      // If the value is an object (like companyLogo), check if it's empty\r\n      if (typeof value === 'object' && value !== null) {\r\n        return Object.keys(value).length === 0;\r\n      }\r\n      // Otherwise, check if the value is an empty string\r\n      return value === \"\";\r\n    });\r\n  };\r\n\r\n \r\n\r\n\r\n\r\n\r\n  const allowFilesType = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n    'application/pdf',\r\n    'application/vnd.ms-excel',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n  ];\r\n  const allowFilesType2 = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n\r\n  ];\r\n  const [guarantors, setGuarantors] = useState([])\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n  const [emailVerify, setEmailVerify] = useState(false)\r\n  \r\n\r\n  const [center, setCenter] = useState(null)\r\n  const [status, setStatus] = useState(null)\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState()\r\n\r\n  const [selectedType, setSelectedType] = useState(null)\r\n  const [date, setDate] = useState(null)\r\n  const [balanceType, setBalanceType] = useState(null)\r\n  const {state}=useLocation()\r\n\r\n  //documents array\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n  const submitForm1 = async (formData) => {\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        account_name: formData?.name,\r\n       \r\n      \r\n      \r\n\r\n      };\r\n      const promise = CustomerServices.UpdateCard(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving...',\r\n        'Added Successfully',\r\n        'Something Went Wrong'\r\n      );\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate(\"/card-list\");\r\n      }\r\n\r\n      \r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\nuseEffect(() => {\r\n    if(state){\r\n        console.log(state);\r\n        \r\n        setValue1('name',state?.account_name)\r\n    }\r\n\r\n}, [])\r\n\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n      </Box>\r\n      <Box m={3} sx={{backgroundColor:'white',borderRadius:\"12px\"}} >\r\n        {<>\r\n\r\n          <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n              <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Update Card</Typography>\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ p: 3 }}>\r\n\r\n\r\n              <Grid container sx={{ gap: '5px 25px' }}>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    label={\" Account Name :*\"}\r\n                    size={'small'}\r\n                    placeholder={\" Account Name\"}\r\n                    error={errors1?.name?.message}\r\n                    register={register1(\"name\", {\r\n                      required:\r\n                        \"Please enter card name.\"\r\n\r\n                    })}\r\n                  /></Grid>\r\n             \r\n              \r\n               \r\n                \r\n\r\n               \r\n                <Grid  container justifyContent={'flex-end'}>\r\n                <PrimaryButton \r\n                 bgcolor={'#bd9b4a'}\r\n                  title=\"Update\"\r\n                  type={'submit'}\r\n                  \r\n\r\n                />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Box></>}\r\n\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateCard;"],"names":["_errors1$name","useTheme","user","useAuth","navigate","useNavigate","formChange","setFormChange","useState","submit","setSubmit","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","watch","errors1","console","log","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","emailVerify","setEmailVerify","center","setCenter","status","setStatus","stepFormData","setStepFormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","state","useLocation","useEffect","account_name","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","async","formData","obj","name","promise","CustomerServices","UpdateCard","showPromiseToast","response","responseCode","error","ErrorToaster","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","InputField","label","size","placeholder","message","required","PrimaryButton","bgcolor","title","type"],"sourceRoot":""}