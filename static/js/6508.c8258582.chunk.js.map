{"version":3,"file":"static/js/6508.c8258582.chunk.js","mappings":"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","sources":["pages/Dashboard/Visa/AdminApproval.js","components/UploadFile2/index.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    tableCellClasses,\r\n    IconButton,\r\n    CircularProgress,\r\n    Chip,\r\n    Grid,\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from \"@mui/material\";\r\nimport {\r\n    AllocateIcon,\r\n    CheckIcon,\r\n    EyeIcon,\r\n    FontFamily,\r\n    Images,\r\n    MessageIcon,\r\n    PendingIcon,\r\n    RequestBuyerIdIcon,\r\n} from \"assets\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { CircleLoading } from \"components/Loaders\";\r\nimport { ErrorToaster, SuccessToaster } from \"components/Toaster\";\r\nimport FinanceStatusDialog from \"components/Dialog/FinanceStatusDialog\";\r\nimport AllocateStatusDialog from \"components/Dialog/AllocateStatusDialog\";\r\nimport AllocateDialog from \"components/Dialog/AllocateDialog\";\r\nimport CustomerServices from \"services/Customer\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport Pagination from \"components/Pagination\";\r\nimport {\r\n    CleanTypes,\r\n    Debounce,\r\n    encryptData,\r\n    formatPermissionData,\r\n    getFileSize,\r\n    handleDownload,\r\n    handleExportWithComponent,\r\n} from \"utils\";\r\nimport InputField from \"components/Input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addPermission } from \"redux/slices/navigationDataSlice\";\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport SelectField from \"components/Select\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from \"@progress/kendo-react-pdf\";\r\nimport moment from \"moment\";\r\nimport CommissionServices from \"services/Commission\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport { adjustSectionValue } from \"@mui/x-date-pickers/internals/hooks/useField/useField.utils\";\r\nimport VisaServices from \"services/Visa\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport excelFile from \"assets/excel/request_format.csv\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport ReceiptIcon from \"@mui/icons-material/Receipt\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport UploadFile2 from \"components/UploadFile2\";\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n        border: \"1px solid #EEEEEE\",\r\n        padding: \"15px\",\r\n        textAlign: \"left\",\r\n        whiteSpace: \"nowrap\",\r\n        color: \"#434343\",\r\n        paddingRight: \"50px\",\r\n        background: \"transparent\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: \"Public Sans\",\r\n\r\n        textWrap: \"nowrap\",\r\n        padding: \"5px !important\",\r\n        paddingLeft: \"15px !important\",\r\n\r\n        \".MuiBox-root\": {\r\n            display: \"flex\",\r\n            gap: \"6px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            \".MuiBox-root\": {\r\n                cursor: \"pointer\",\r\n            },\r\n        },\r\n        svg: {\r\n            width: \"auto\",\r\n            height: \"24px\",\r\n        },\r\n        \".MuiTypography-root\": {\r\n            textTransform: \"capitalize\",\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: \"nowrap\",\r\n        },\r\n        \".MuiButtonBase-root\": {\r\n            padding: \"8px\",\r\n            width: \"28px\",\r\n            height: \"28px\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: \"flex\",\r\n        height: 100,\r\n        \"& svg\": {\r\n            width: \"40px !important\",\r\n            height: \"40px !important\",\r\n        },\r\n    },\r\n});\r\n\r\nfunction AdminApproval() {\r\n    const allowFilesType = [\"text/csv\"];\r\n    const { state } = useLocation()\r\n    const allowFilesType2 = [\r\n        \"image/png\",\r\n        \"image/jpg\",\r\n        \"image/jpeg\",\r\n        \"application/pdf\",\r\n        \"application/vnd.ms-excel\",\r\n        \"application/msword\",\r\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    ];\r\n    const { user, userLogout } = useAuth();\r\n    console.log(user);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        reset,\r\n        formState: { errors: errors2 },\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        formState: { errors: errors3 },\r\n    } = useForm();\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false);\r\n    const [paymentDialog, setPaymentDialog] = useState(false);\r\n    const [approvalStatus, setApprovalStatus] = useState(null)\r\n\r\n    const tableHead = [\r\n        { name: \"VR ID.\", key: \"\" },\r\n        { name: \"Date\", key: \"created_at\" },\r\n        { name: \"Customer\", key: \"created_at\" },\r\n        { name: \"Visa Quantity\", key: \"commission_visa\" },\r\n        { name: \"Total Amount\", key: \"commission_monthly\" },\r\n        { name: \"VAT\", key: \"\" },\r\n\r\n        { name: \"Admin Approval Status\", key: \"\" },\r\n        { name: \"Status Change Date\", key: \"customerCount\" },\r\n        { name: \"Reason\", key: \"customerCount\" },\r\n        { name: \"Actions\", key: \"\" },\r\n    ];\r\n\r\n    const [visas, setVisas] = useState([]);\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState(\"asc\");\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([\r\n\r\n\r\n    ]);\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            console.log(data?.rows?.length);\r\n\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null);\r\n    const [paymentAmount, setPaymentAmount] = useState(0);\r\n    const [itemAmount, setItemAmount] = useState();\r\n    const [status, setStatus] = useState();\r\n    const [date, setDate] = useState(null);\r\n    const [date2, setDate2] = useState(null);\r\n    const [date3, setDate3] = useState(null);\r\n    const [paymentType, setPaymentType] = useState(null);\r\n    const [banks, setBanks] = useState([]);\r\n    const [excelDialog, setExcelDialog] = useState(false);\r\n    const [selectedBank, setSelectedBank] = useState(null);\r\n    const [excel, setExcel] = useState();\r\n    const [proofAdmin, setProofAdmin] = useState(false);\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [file, setFile] = useState();\r\n    const [filename, setFilename] = useState();\r\n    const [fileDetail, setFileDetail] = useState();\r\n    const [extension, setExtension] = useState();\r\n    const [documents, setDocuments] = useState([])\r\n    const [proofDialog, setProofDialog] = useState(false);\r\n    const [proofDoc, setProofDoc] = useState();\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [selectedCustomer2, setSelectedCustomer2] = useState(null)\r\n    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n    const [wpsList, setWpsList] = useState([])\r\n    const [wpsValid, setWpsValid] = useState(false)\r\n    const [customerDetail, setCustomerDetail] = useState(null)\r\n    const [isUploading, setIsUploading] = useState(false)\r\n    const [selectedStatus, setSelectedStatus] = useState(null)\r\n    const [fromDate, setFromDate] = useState(null)\r\n    const [toDate, setToDate] = useState(null)\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getBanks = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const { data } = await SystemServices.getBanks();\r\n\r\n            setBanks(data?.banks);\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n\r\n        try {\r\n            console.log(e.target.files, 'e.target.files');\r\n            if (e.target.files.length > 0) {\r\n\r\n                e.preventDefault();\r\n                const file = e.target.files[0];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n                if (allowFilesType.includes(file.type)) {\r\n                    setFile(file);\r\n                    setFileDetail(arr);\r\n                    setIsUploading(false)\r\n                    // handleUpload(file, arr);\r\n                    // const path = await handleUpload(file, arr);\r\n                    // console.log('Uploaded file path:', path);\r\n                    // console.log(path, 'pathpathpath');\r\n                    // return path\r\n                } else {\r\n                    showErrorToast(\r\n                        `Only ${CleanTypes(allowFilesType)} formats is supported`\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n\r\n    };\r\n    // *For Upload Document\r\n    const handleUploadDocument2 = async (e) => {\r\n        try {\r\n            e.preventDefault()\r\n            const files = Array.from(e.target.files)\r\n            const maxSize = 10 * 1024 * 1024 // 10 MB\r\n            const allowedTypes = [\"image/jpeg\", \"image/png\", \"application/pdf\"] // Add or modify as needed\r\n\r\n            const uploadPromises = files.map(async (file) => {\r\n                if (file.size > maxSize) {\r\n                    showErrorToast(`File ${file.name} is larger than 10 MB`)\r\n                    return null\r\n                }\r\n\r\n                if (!allowedTypes.includes(file.type)) {\r\n                    showErrorToast(`File ${file.name} is not of an allowed type`)\r\n                    return null\r\n                }\r\n\r\n                const fileInfo = {\r\n                    name: file.name,\r\n                    file: \"\",\r\n                    type: file.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                }\r\n\r\n                try {\r\n                    const uploadedPath = await handleUpload2(file, [fileInfo])\r\n                    return uploadedPath\r\n                } catch (uploadError) {\r\n                    showErrorToast(`Failed to upload ${file.name}: ${uploadError.message}`)\r\n                    return null\r\n                }\r\n            })\r\n\r\n            const uploadedPaths = await Promise.all(uploadPromises)\r\n            const validPaths = uploadedPaths.filter((path) => path !== null)\r\n\r\n            if (validPaths.length === 0) {\r\n                showErrorToast(\"No files were successfully uploaded\")\r\n                return \"\"\r\n            }\r\n\r\n            const pathString = validPaths.join(\",\")\r\n            console.log(\"Uploaded file paths:\", pathString)\r\n            return pathString\r\n        } catch (error) {\r\n            ErrorToaster(error.message || \"An error occurred during file upload\")\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        setProgress(0);\r\n        let docs = fileDetail;\r\n        console.log(selectedCustomer, 'asdasdas');\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            formData.append(\"id\", user?.user_type == 'C' ? selectedCustomer?.customer_id : selectedCustomer?.id);\r\n            console.log(file);\r\n\r\n            let maxSize = 10 * 1024 * 1024; // 10 MB\r\n            if (file.size > maxSize) {\r\n                showErrorToast(\"File Size Must Be Less than 10 MB\");\r\n                return; // Stop execution if file size is too large\r\n            }\r\n\r\n            const { data } = await instance.post(routes.uploadCVS, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                    console.log(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n\r\n            // Check if the response is successful\r\n            if (data?.responseCode === 200) {\r\n\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                console.log(data, \"Upload successful\");\r\n                toast.success(\"Successfully Updated!\");\r\n                setExcel(false);\r\n\r\n                setExcelDialog(false);\r\n                setFilename('')\r\n                return data?.data?.path;\r\n            } else {\r\n                console.log('asdasasdasdasdasdad');\r\n\r\n                // Handle API response error\r\n                setFilename('')\r\n                setExcel(false);\r\n                setExcelDialog(false)\r\n\r\n                showErrorToast(data?.message || \"An error occurred during upload.\");\r\n            }\r\n        } catch (error) {\r\n            // Handle network or other unexpected errors\r\n            console.error(\"Upload error:\", error);\r\n            setFilename('')\r\n            setExcel(false);\r\n            setExcelDialog(false)\r\n\r\n            showErrorToast(error.response?.data?.message || \"Something went wrong, please try again.\");\r\n        }\r\n    };\r\n\r\n    const handleUpload2 = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, \"asddasasd\");\r\n                return data?.data?.path;\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getVisaRequestList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage;\r\n            const Limit = limit ? limit : pageLimit;\r\n            const Filter = filter ? { ...filters, ...filter } : null;\r\n            \r\n            setCurrentPage(Page);\r\n            setPageLimit(Limit);\r\n            setFilters(Filter);\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                admin_approval_required:true,\r\n                customer_id: user?.user_type == \"C\" ? user?.customer_id : null,\r\n            };\r\n\r\n\r\n\r\n            params = { ...params, ...Filter };\r\n            console.log(params, 'params');\r\n            const { data } = await VisaServices.getVisaRequestList(params);\r\n            setVisas(data?.rows);\r\n            setTotalCount(data?.count);\r\n\r\n            console.log(formatPermissionData(data?.permissions));\r\n\r\n            setPermissions(formatPermissionData(data?.permissions));\r\n            setPermissions(formatPermissionData(data?.permissions));\r\n            data?.permissions.forEach((e) => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            });\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                status: status.id,\r\n                visa_id: selectedVisa?.id,\r\n            };\r\n\r\n            const promise = VisaServices.updateStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getVisaRequestList();\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const UpdateApprovalStatus = async (formData) => {\r\n        setButtonDisabled(true)\r\n        let totalAmount = parseFloat((parseFloat(formData?.amount) * 0.05) + parseFloat(formData?.amount)).toFixed(2)\r\n        try {\r\n            let obj = {\r\n                id: selectedVisa?.id, \r\n                customer_id: selectedVisa?.customer_id,\r\n                admin_approved: approvalStatus?.id ,\r\n                 admin_reason: formData?.reason\r\n            };\r\n\r\n            const promise = VisaServices.UpdateApprovalStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                getVisaRequestList();\r\n                reset();\r\n                setButtonDisabled(false)\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const UpdateProof = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                proof_date: date,\r\n                id: selectedVisa?.id,\r\n                proof_document: proofDoc,\r\n                proof_amount: formData?.amount,\r\n            };\r\n\r\n            const promise = VisaServices.UpdateProof(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setProofDialog(false);\r\n                getVisaRequestList();\r\n                reset();\r\n                setProofDoc(\"\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleDate2 = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setFromDate(\"invalid\");\r\n                return;\r\n            }\r\n            setFromDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleDate3 = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setToDate(\"invalid\");\r\n                return;\r\n            }\r\n            setToDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getWpsCheck = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: 1,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : selectedCustomer?.id,\r\n\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CustomerServices.checkWPS(params)\r\n            setWpsValid(data?.wpsRequired)\r\n            console.log(data);\r\n            if (data?.wpsRequired) {\r\n                showErrorToast(\"You have to create WPS first\")\r\n            }\r\n            else {\r\n                handleUpload();\r\n            }\r\n\r\n            // if (data?.rows?.length > 0) {\r\n\r\n            //     let dateMonth = moment(data?.rows[0]?.date).startOf(\"month\");\r\n            //     let currentMonth = moment().startOf(\"month\");\r\n\r\n            //     let diff = currentMonth.diff((dateMonth), 'months')\r\n            //     console.log(diff, 'diff');\r\n            //     if (diff <= 1) {\r\n            //         setWpsValid(true)\r\n            //     }\r\n            //     else {\r\n            //         setWpsValid(false)\r\n            //     }\r\n            // }\r\n            // else {\r\n            //     setWpsValid(true)\r\n            // }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const UpdateCSV = async () => {\r\n        // const today = moment();\r\n        // const tenthOfMonth = moment().startOf('month').add(9, 'days');\r\n        // let valid = false\r\n        // const date = moment(wpsList?.date);\r\n        // const lastMonth = moment().subtract(1, 'months');\r\n        // console.log(customerDetail, 'customerDetailcustomerDetail');\r\n        // console.log(today.isAfter(tenthOfMonth));\r\n        // console.log(moment(customerDetail?.created_at));\r\n        // console.log(wpsList?.date);\r\n        // const createdAt = moment(customerDetail?.created_at).startOf('day');\r\n        // const today2 = moment().startOf('day');\r\n\r\n        // const differenceInDays = today2.diff(createdAt, 'days');\r\n\r\n        // console.log(`Difference in days: ${differenceInDays}`);\r\n\r\n\r\n        // console.log(today.isAfter(tenthOfMonth) && !moment(customerDetail?.created_at).isSame(moment(), 'month') && !wpsList?.date);\r\n\r\n\r\n        // if (today.isAfter(tenthOfMonth) && !date.isSame(lastMonth, 'month') && wpsList?.date) {\r\n\r\n\r\n        //     console.log(\"The 10th date of the current month has passed.\");\r\n        //     showErrorToast('You have to create WPS first')\r\n        // }\r\n        // else if ((today.isAfter(tenthOfMonth) && !moment(customerDetail?.created_at).isSame(moment(), 'month')) && !wpsList?.date) {\r\n        //     showErrorToast('You have to create WPS first')\r\n\r\n        // }\r\n        // else if (differenceInDays > 40) {\r\n        //     showErrorToast('You have to create WPS first')\r\n\r\n        // }\r\n\r\n        // else {\r\n        //     handleUpload();\r\n        //     console.log(\"The 10th date of the current month has not passed yet.\");\r\n        // }\r\n        getWpsCheck()\r\n\r\n    };\r\n\r\n\r\n    const updateResult = (key, newResult) => {\r\n        console.log(newResult, 'newResult');\r\n        setProofDoc(newResult)\r\n\r\n\r\n    };\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues(\"search\"),\r\n            payment_status: selectedStatus?.id,\r\n            customer_id: selectedCustomer2?.id,\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n        };\r\n        Debounce(() => getVisaRequestList(1, \"\", data));\r\n    };\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort,\r\n        };\r\n        Debounce(() => getVisaRequestList(1, \"\", data));\r\n    };\r\n\r\n    const downloadExcel = () => {\r\n        fetch(excelFile)\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n                console.log(blob);\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement(\"a\");\r\n                link.href = url;\r\n                link.setAttribute(\"download\", \"Format.csv\"); // Adjust the filename as needed\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n            .catch((error) => console.error(\"Error downloading Excel file:\", error));\r\n    };\r\n\r\n    // *For Get Customer Detail\r\n    const getCustomerDetail = async (id, type) => {\r\n        try {\r\n            let params = { customer_id: id };\r\n            if (id) {\r\n\r\n                const { data } = await CustomerServices.getCustomerDetail(params);\r\n                console.log(data?.details?.security_deposit_scenario);\r\n                getWPSList(1, 1, {}, id)\r\n                setCustomerDetail(data?.details)\r\n\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getWPSList = async (page, limit, filter, id) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : id,\r\n\r\n\r\n            }\r\n\r\n\r\n            const { data } = await CustomerServices.getWPSList(params)\r\n            setWpsList(data?.rows[0])\r\n            if (data?.rows?.length > 0) {\r\n\r\n                let dateMonth = moment(data?.rows[0]?.date).startOf(\"month\");\r\n                let currentMonth = moment().startOf(\"month\");\r\n\r\n                let diff = currentMonth.diff((dateMonth), 'months')\r\n                console.log(diff, 'diff');\r\n                if (diff <= 1) {\r\n                    setWpsValid(true)\r\n                }\r\n                else {\r\n                    setWpsValid(false)\r\n                }\r\n            }\r\n            else {\r\n                setWpsValid(true)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        getBanks();\r\n        getCustomerQueue()\r\n        if (user?.user_type == 'C') {\r\n            console.log(user, 'user');\r\n\r\n            setValue3('customer', user)\r\n            setSelectedCustomer(user)\r\n            getCustomerDetail(user?.customer_id)\r\n\r\n        }\r\n        if (state) {\r\n            console.log(state);\r\n            let data = {\r\n                approval_status: state,\r\n            };\r\n            getVisaRequestList(1, \"\", data);\r\n\r\n        }\r\n        else {\r\n            getVisaRequestList();\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <SimpleDialog\r\n                open={proofDialog}\r\n                onClose={() => {\r\n                    setDocuments([])\r\n                    setProofDialog(false);\r\n                    reset();\r\n                    setProofDoc(\"\");\r\n\r\n                }}\r\n                title={\"Proof Of Payment\"}\r\n            >\r\n                {!proofAdmin ? (\r\n                    <Box component=\"form\" onSubmit={handleSubmit4(UpdateProof)}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: \"18px\",\r\n                                        fontWeight: \"bold\",\r\n                                        color: Colors.gray,\r\n                                        mt: 1,\r\n                                    }}\r\n                                >\r\n                                    Upload Proof :*{\" \"}\r\n                                </Typography>\r\n                                <UploadFile2\r\n                                    Memo={true}\r\n                                    updateResult={updateResult}\r\n                                    multiple={true}\r\n                                    accept={allowFilesType2}\r\n                                    error={errors4?.proof?.message}\r\n                                    file={proofDoc}\r\n                                    register={register4(\"proof\", {\r\n                                        required: \"Please upload  proof   .\",\r\n                                        onChange: async (e) => {\r\n                                            const path = await handleUploadDocument2(e);\r\n                                            if (path) {\r\n                                                setProofDoc(path);\r\n                                            }\r\n                                        },\r\n                                    })}\r\n                                />\r\n                                {/* {proofDoc &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>} */}\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <LabelCustomInput\r\n                                    label={\"Amount : \"}\r\n                                    disabled={true}\r\n                                    StartLabel={\"AED\"}\r\n                                    register={register4(\"amount\", { required: \"Enter  amount\" })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <DatePicker\r\n                                    label={\"Payment Date :\"}\r\n                                    value={date}\r\n                                    size={\"small\"}\r\n                                    error={errors4?.date?.message}\r\n                                    register={register4(\"date\", {\r\n                                        required: \"Please enter  date.\",\r\n                                    })}\r\n                                    onChange={(date) => {\r\n                                        handleDate(date);\r\n                                        setValue4(\"date\", date);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid container sx={{ justifyContent: \"center\" }}>\r\n                                <Grid\r\n                                    item\r\n                                    xs={6}\r\n                                    sm={6}\r\n                                    sx={{\r\n                                        mt: 2,\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                        gap: \"25px\",\r\n                                    }}\r\n                                >\r\n                                    <PrimaryButton\r\n                                        bgcolor={Colors.primary}\r\n                                        title=\"Yes,Confirm\"\r\n                                        type=\"submit\"\r\n                                    />\r\n                                    <PrimaryButton\r\n                                        onClick={() => {\r\n                                            setProofDialog(false);\r\n                                            reset();\r\n                                            setProofDoc(\"\");\r\n                                        }}\r\n                                        bgcolor={\"#FF1F25\"}\r\n                                        title=\"No,Cancel\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                ) : (\r\n                    <Box>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container>\r\n                                <Typography\r\n                                    sx={{\r\n                                        fontSize: \"18px\",\r\n                                        fontWeight: \"bold\",\r\n                                        color: Colors.gray,\r\n                                        mt: 1,\r\n                                    }}\r\n                                >\r\n                                    Upload Proof : {\" \"}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid container>\r\n                                {documents?.map((document, index) => (\r\n\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        lg={6}\r\n                                        sx={{ cursor: \"pointer\", display: \"flex\", gap: \"5px\", alignItems: 'center' }}\r\n                                        component={\"div\"}\r\n                                        key={index}\r\n                                        onClick={() => {\r\n                                            console.log(process.env.REACT_APP_IMAGE_BASE_URL);\r\n                                            console.log(document.trim())\r\n\r\n                                            const fileName = document.trim().split(\"_\").pop()\r\n                                            if (fileName?.includes(\"doc\") || fileName?.includes(\"xls\")) {\r\n                                                handleDownload(document.trim(), fileName || \"\")\r\n                                            } else {\r\n                                                window.open(process.env.REACT_APP_IMAGE_BASE_URL + document.trim(), \"_blank\")\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        {console.log(documents)}\r\n                                        {document && (\r\n                                            <Box>\r\n                                                <Box component={'img'} src={Images.docIcon} alt=\"Document Icon\" width={35} height={35} />\r\n                                            </Box>\r\n                                        )}\r\n                                        <p\r\n                                            style={{\r\n                                                textAlign: \"center\",\r\n                                                lineHeight: \"20px\",\r\n                                                color: \"#0F2772\",\r\n                                                fontWeight: \"bold\",\r\n                                                fontSize: \"15px\",\r\n                                            }}\r\n                                        >\r\n                                            {document.trim().split(\"_\").pop()}\r\n                                        </p>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n\r\n\r\n\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <LabelCustomInput\r\n                                    value={selectedVisa?.proof_amount}\r\n                                    label={\"Amount : \"}\r\n                                    StartLabel={\"AED\"}\r\n                                    disabled={true}\r\n                                    register={register4(\"amount\", { required: \"Enter  amount\" })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <InputField\r\n                                    label={\"Date :\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    value={moment(selectedVisa?.proof_date).format(\"MM-DD-YYYY\")}\r\n                                    rows={5}\r\n                                    placeholder={\"Description\"}\r\n                                    error={errors2?.description?.message}\r\n                                    register={register2(\"description\", {\r\n                                        required: false,\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n                }\r\n            </SimpleDialog >\r\n            <SimpleDialog\r\n                open={excelDialog}\r\n                onClose={() => setExcelDialog(false)}\r\n                title={\"Upload Excel\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit3(UpdateCSV)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12} display={'flex'} justifyContent={'center'}>\r\n                            <PrimaryButton\r\n                                bgcolor={'#0076bf'}\r\n                                title=\"Download Template\"\r\n                                onClick={() => downloadExcel()}\r\n                                loading={loading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Customer :'}\r\n\r\n                                options={customerQueue}\r\n                                disabled={user?.user_type == 'C' ? true : false}\r\n                                selected={selectedCustomer}\r\n                                onSelect={(value) => {\r\n                                    setSelectedCustomer(value)\r\n                                    getCustomerDetail(value?.id)\r\n                                    setValue3('customer', value)\r\n\r\n                                }}\r\n                                error={errors3?.customer?.message}\r\n                                register={register3(\"customer\", {\r\n                                    required: 'Please select customer account.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        {selectedCustomer && <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload CSV :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors3?.excel?.message}\r\n                                disabled={isUploading}\r\n\r\n                                register={register3(\"excel\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  excel   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        setIsUploading(true)\r\n                                        handleUploadDocument(e);\r\n\r\n                                        const file = e.target.files[0];\r\n                                        console.log(file);\r\n                                        setFilename(file?.name)\r\n                                        setExcel(file)\r\n\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {console.log(excel?.name, 'asdasdasdasd')}\r\n                            {excel?.name &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>}\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton className='disbaledClass' bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => { setExcelDialog(false); setExcel(false); setSelectedCustomer(null) }} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={\"Change Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Select Status :\"}\r\n                                options={[\r\n                                    { id: \"Pending\", name: \"Pending\" },\r\n                                    { id: \"Approved\", name: \"Approved\" },\r\n                                    { id: \"Rejected\", name: \"Rejected\" },\r\n                                ]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value);\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setStatusDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={\"Change Approval Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdateApprovalStatus)}>\r\n                    <Grid container>\r\n                        \r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={\"small\"}\r\n                                label={\"Approval Status :\"}\r\n                                options={[\r\n                                    { id: true, name: \"Approved\" },\r\n                                    { id: false, name: \"Rejected\" },\r\n                                ]}\r\n                                selected={approvalStatus}\r\n                                onSelect={(value) => {\r\n                                    setApprovalStatus(value);\r\n                                }}\r\n                                error={errors2?.status?.message}\r\n                                register={register2(\"status\", {\r\n                                    required: \"Please select status.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        \r\n                        <Grid item xs={12} sm={12} mt={2}>\r\n                            <InputField\r\n                                label={\"Reason :\"}\r\n                                size={\"small\"}\r\n                              \r\n                                placeholder={\"Reason\"}\r\n                                error={errors2?.reason?.message}\r\n                                register={register2(\"reason\", {\r\n                                    required: false,\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    disabled={buttonDisabled}\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setPaymentDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mb: 2 }}>\r\n                <Typography sx={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n                    Admin Approval\r\n                </Typography>\r\n                <Box sx={{ display: \"flex\", gap: \"5px\" }}>\r\n                    {permissions?.create && (\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Create Request\"\r\n                            onClick={() => navigate(\"/create-request\")}\r\n                            loading={loading}\r\n                        />\r\n                    )}\r\n                    {permissions?.excel && (\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            title=\"Import Via Excel\"\r\n                            onClick={() => {\r\n                                setExcelDialog(true); setSelectedCustomer(null)\r\n\r\n\r\n                                if (user?.user_type == 'C') {\r\n                                    console.log(user, 'user');\r\n\r\n                                    setValue3('customer', user)\r\n                                    setSelectedCustomer(user)\r\n                                    getCustomerDetail(user?.customer_id)\r\n\r\n                                }\r\n                            }}\r\n                            loading={loading}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={2}>\r\n                        <InputField\r\n                            label={\"Search :\"}\r\n                            size={'small'}\r\n                            fullWidth={true}\r\n                            placeholder={\"Search\"}\r\n                            error={errors?.search?.message}\r\n                            register={register(\"search\")}\r\n                        />\r\n                    </Grid>\r\n                    {user?.user_type != 'C' && <Grid item xs={2} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Customer :'}\r\n\r\n                            options={customerQueue}\r\n                            selected={selectedCustomer2}\r\n                            onSelect={(value) => {\r\n                                setSelectedCustomer2(value)\r\n\r\n\r\n                            }}\r\n                            error={errors?.customer?.message}\r\n                            register={register(\"customer\")}\r\n                        />\r\n                    </Grid>}\r\n                    <Grid item xs={2} >\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Select Status :'}\r\n\r\n                            options={[{ id: 'paid', name: 'Paid' }, { id: 'unpaid', name: 'Unpaid' }]}\r\n                            selected={selectedStatus}\r\n                            onSelect={(value) => {\r\n                                setSelectedStatus(value)\r\n\r\n\r\n                            }}\r\n                            error={errors?.status?.message}\r\n                            register={register(\"status\")}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <DatePicker\r\n                            label={\" From Date  :\"}\r\n                            value={fromDate}\r\n\r\n                            size={'small'}\r\n                            maxDate={new Date()}\r\n                            error={errors?.fromDate?.message}\r\n                            register={register(\"fromDate\")}\r\n                            onChange={(date) => {\r\n                                handleDate2(date)\r\n                                setValue('fromDate', date)\r\n                            }\r\n\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <DatePicker\r\n                            label={\" To Date  :\"}\r\n                            value={toDate}\r\n                            maxDate={new Date()}\r\n                            size={'small'}\r\n                            minDate={new Date(fromDate)}\r\n                            error={errors?.toDate?.message}\r\n                            register={register(\"toDate\")}\r\n                            onChange={(date) => {\r\n                                handleDate3(date)\r\n                                setValue('toDate', date)\r\n                            }\r\n\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={2} justifyContent={'flex-end'}>\r\n                    <Grid\r\n                        item\r\n                        xs={2}\r\n                        display={\"flex\"}\r\n                        justifyContent={\"flex-end\"}\r\n                        gap={2}\r\n                    >\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            textcolor={Colors.white}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => {\r\n                                setSelectedCustomer2(null)\r\n                                setToDate(null)\r\n                                setFromDate(null)\r\n                                setSelectedStatus(null)\r\n                                setValue('status', '')\r\n                                setValue(\"search\", \"\");\r\n                                getVisaRequestList(1, '', null);\r\n                            }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {visas && (\r\n                        <Box>\r\n                            <Grid container mb={2}></Grid>\r\n\r\n                            {visas && (\r\n                                <Fragment>\r\n                                    <PDFExport\r\n                                        ref={contentRef}\r\n                                        landscape={true}\r\n                                        paperSize=\"A4\"\r\n                                        margin={5}\r\n                                        fileName=\"Import Customers\"\r\n                                    >\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: \"calc(100vh - 200px)\",\r\n                                                mt: 5,\r\n                                                backgroundColor: \"transparent\",\r\n                                                boxShadow: \"none !important\",\r\n                                                borderRadius: \"0px !important\",\r\n                                            }}\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell\r\n                                                                style={{\r\n                                                                    textAlign:\r\n                                                                        cell?.name == \"SR No.\" ? \"center\" : \"left\",\r\n                                                                    paddingRight:\r\n                                                                        cell?.name == \"SR No.\" ? \"15px\" : \"50px\",\r\n                                                                }}\r\n                                                                className=\"pdf-table\"\r\n                                                                key={index}\r\n                                                            >\r\n                                                                <Box\r\n                                                                    sx={{\r\n                                                                        display: \"flex\",\r\n                                                                        alignItems: \"flex-end\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {cell?.name}{\" \"}\r\n                                                                    {cell?.name == \"Date\" && (\r\n                                                                        <>\r\n                                                                            &nbsp;\r\n                                                                            <span\r\n                                                                                style={{\r\n                                                                                    height: \"20px\",\r\n                                                                                    cursor: \"pointer\",\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                <Box\r\n                                                                                    component={\"img\"}\r\n                                                                                    onClick={() => {\r\n                                                                                        setSort(\r\n                                                                                            sort == \"asc\" ? \"desc\" : \"asc\"\r\n                                                                                        );\r\n                                                                                        handleSort(cell?.key);\r\n                                                                                    }}\r\n                                                                                    src={Images.sortIcon}\r\n                                                                                    width={\"18px\"}\r\n                                                                                ></Box>\r\n                                                                            </span>\r\n                                                                        </>\r\n                                                                    )}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {visas?.map((item, index) => {\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: \"1px solid #EEEEEE !important\",\r\n                                                                }}\r\n                                                            >\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.id}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {moment(item?.created_at).format(\r\n                                                                        \"MM-DD-YYYY\"\r\n                                                                    )}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.customer?.name}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.candidates_count}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.total_visa_charges}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {parseFloat(parseFloat(item?.total_visa_charges) * 0.05).toFixed(2)}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    <Box\r\n                                                                        component={\"div\"}\r\n                                                                        sx={{ cursor: \"pointer\" }}\r\n                                                                        onClick={() => {\r\n                                                                            if(item?.admin_approved == null &&  user?.user_type == 'O'){\r\n\r\n                                                                                setDate(null);\r\n                                                                                setPaymentType(null);\r\n                                                                                setPaymentDialog(true);\r\n                                                                                setSelectedVisa(item);\r\n                                                                            }\r\n\r\n                                                                                \r\n                                                                            \r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <Box\r\n                                                                            component={\"img\"}\r\n                                                                            src={\r\n                                                                                item?.admin_approved == true\r\n                                                                                    ? Images.successIcon\r\n                                                                                    : Images.errorIcon\r\n                                                                            }\r\n                                                                            width={\"13px\"}\r\n                                                                        ></Box>\r\n                                                                        {item?.admin_approved == true  ? \"Approved\" : item?.admin_approved == false ? 'Rejected'  :  \"Pending\"}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.admin_status_change_at ? moment(item?.admin_status_change_at).format( \"MM-DD-YYYY\") : '-'}\r\n                                                                </Cell>\r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    {item?.admin_reason ? item?.admin_reason : '-'}\r\n                                                                </Cell>\r\n                                                                {/* <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                        if (user?.user_type != 'C' && permissions?.status_update) {\r\n                                                                            setStatusDialog(true); setSelectedVisa(item); setStatus({ id: item?.processing_status, name: item?.processing_status })\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        <Box component={'img'} src={item?.processing_status == 'Approved' ? Images.successIcon : item?.processing_status == 'Pending' ? Images.pendingIcon : Images.errorIcon} width={'13px'}></Box>\r\n                                                                        {item?.processing_status}\r\n                                                                    </Box>\r\n\r\n\r\n                                                                </Cell> */}\r\n                                                             \r\n                                                                <Cell\r\n                                                                    style={{ textAlign: \"left\" }}\r\n                                                                    className=\"pdf-table\"\r\n                                                                >\r\n                                                                    <Box>\r\n                                              \r\n                                                                        { (\r\n                                                                            <Box\r\n                                                                                component={\"img\"}\r\n                                                                                src={Images.detailIcon}\r\n                                                                                onClick={() =>\r\n                                                                                    navigate(`/visa-detail/${item?.id}`)\r\n                                                                                }\r\n                                                                                width={\"35px\"}\r\n                                                                            ></Box>\r\n                                                                        )}\r\n                                                                      \r\n                                                                     \r\n                                                                        {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n                                                            </Row>\r\n                                                        );\r\n                                                    })}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) =>\r\n                                            getVisaRequestList(1, size.target.value, filters)\r\n                                        }\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getVisaRequestList(page, \"\", filters)}\r\n                                    />\r\n                                </Fragment>\r\n                            )}\r\n\r\n                            {loader && <CircleLoading />}\r\n                        </Box>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        </Box >\r\n    );\r\n}\r\n\r\nexport default AdminApproval;\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { Box, CircularProgress, IconButton, Typography } from \"@mui/material\"\r\nimport { makeStyles } from \"@mui/styles\"\r\nimport Colors from \"assets/Style/Colors\"\r\nimport { Images } from \"assets\"\r\nimport styled from \"@emotion/styled\"\r\nimport DeleteIcon from \"@mui/icons-material/Delete\"\r\nimport $ from \"jquery\"\r\n\r\n// Styles\r\nconst useStyle = makeStyles({\r\n  root: {\r\n    borderRadius: 2,\r\n    textAlign: \"center\",\r\n    px: 2,\r\n    width: \"220px\",\r\n    height: \"120px\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n})\r\n\r\n// Styled component for the input\r\nconst Input = styled(\"input\")({\r\n  position: \"absolute\",\r\n  left: 0,\r\n  top: 0,\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  display: \"block\",\r\n  opacity: 0,\r\n  fontSize: 0,\r\n  cursor: \"pointer\",\r\n})\r\n\r\nfunction UploadFile2({\r\n  inputRef,\r\n  error,\r\n  accept,\r\n  register,\r\n  multiple,\r\n  style,\r\n  custom,\r\n  Memo,\r\n  file,\r\n  fileId,\r\n  updateResult,\r\n  disabled,\r\n  loader,\r\n}) {\r\n  const [fileAvailable, setFileAvailable] = useState([])\r\n\r\n  const classes = useStyle()\r\n\r\n  useEffect(() => {\r\n    $(\"input.custom-file\").prop(\"disabled\", disabled)\r\n    $(\".custom-file input\").prop(\"disabled\", disabled)\r\n    $(\".custom-file button\").prop(\"disabled\", disabled)\r\n  }, [disabled])\r\n\r\n  useEffect(() => {\r\n    if (file && file.length > 0) {\r\n      const currentFile = file\r\n      console.log(currentFile,'currentFile');\r\n      \r\n      if (currentFile) {\r\n        const multiPaths = currentFile.split(\",\")\r\n        const result = multiPaths.map((item) => ({\r\n          extension: item.split(\".\").pop(),\r\n          name: item.split(\"/\").pop(),\r\n          path: item.trim(),\r\n        }))\r\n        console.log(result,'result');\r\n        \r\n        setFileAvailable(result)\r\n      }\r\n    }\r\n  }, [file, fileId])\r\n\r\n  const handleDelete = (path) => {\r\n    const newResult = fileAvailable.filter((x) => x.path !== path)\r\n    const updatedPaths = newResult.map((item) => item.path).join(\",\")\r\n    setFileAvailable(newResult)\r\n    updateResult(fileId, updatedPaths)\r\n  }\r\n\r\n  const handleFileChange = (event) => {\r\n    const files = Array.from(event.target.files)\r\n    const newFiles = files.map((file) => ({\r\n      extension: file.name.split(\".\").pop(),\r\n      name: file.name,\r\n      path: URL.createObjectURL(file),\r\n    }))\r\n\r\n    const updatedFiles = [...fileAvailable, ...newFiles]\r\n    setFileAvailable(updatedFiles)\r\n\r\n    const updatedPaths = updatedFiles.map((item) => item.path).join(\",\")\r\n    updateResult(fileId, updatedPaths)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Box style={style} className={classes.root}>\r\n        <Input\r\n          className=\"custom-file\"\r\n          disabled={disabled}\r\n          ref={inputRef}\r\n          type=\"file\"\r\n          multiple={multiple}\r\n          accept={accept}\r\n          onChange={handleFileChange}\r\n          {...register}\r\n          style={{ width: \"250px\" }}\r\n        />\r\n        {Memo && (\r\n          <Box sx={{ fontSize: \"15px\" }}>\r\n            <Box sx={{ textAlign: \"left\" }}>\r\n              <Box component={\"img\"} src={Images?.uploadDoc} width={\"50px\"}></Box>\r\n            </Box>\r\n            <Typography\r\n              component={\"h5\"}\r\n              variant=\"caption\"\r\n              sx={{ color: Colors.black, mt: 0.2, textAlign: \"center\", fontSize: \"15px\", width: \"223px\" }}\r\n            >\r\n              <span style={{ color: Colors.blue }}>Click to Upload</span> Or drag & drop\r\n            </Typography>\r\n            <Typography\r\n              component={\"h5\"}\r\n              variant=\"caption\"\r\n              sx={{ color: Colors.black, mt: 0.2, textAlign: \"left\", fontSize: \"15px\" }}\r\n            >\r\n              (Max. File size: 10 MB)\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"space-between\", gap: \"2px\", flexWrap: \"wrap\" }}>\r\n        {loader ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          fileAvailable.length > 0 &&\r\n          fileAvailable.map((item, index) => (\r\n            <Box key={index} sx={{ display: \"flex\", alignItems: \"center\",width:'35%' }}>\r\n              {item?.extension && (\r\n                <Box sx={{ position: \"relative\" }}>\r\n                  <Box\r\n                    component={\"div\"}\r\n                    onClick={() => handleDelete(item?.path)}\r\n                    sx={{ position: \"absolute\", top: -10, right: -10, cursor: \"pointer\" }}\r\n                  >\r\n                    <IconButton>\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                  <Box\r\n                    component={\"img\"}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={() => window.open(process.env.REACT_APP_IMAGE_BASE_URL + item.path, \"_blank\")}\r\n                    src={\r\n                      item?.extension === \"png\" || item?.extension === \"jpg\" || item?.extension === \"jpeg\"\r\n                        ? Images.uploadImage\r\n                        : item?.extension === \"pdf\"\r\n                          ? Images.uploadPDF\r\n                          : item?.extension === \"xls\"\r\n                            ? Images.uploadXls\r\n                            : Images.docIcon\r\n                    }\r\n                    width={\"50px\"}\r\n                  />\r\n                  <p\r\n                    onClick={() => window.open(process.env.REACT_APP_IMAGE_BASE_URL + item.path, \"_blank\")}\r\n                    style={{ color: \"blue\", width: \"120px\", cursor: \"pointer\" }}\r\n                  >\r\n                    {item?.name}\r\n                  </p>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          ))\r\n        )}\r\n      </Box>\r\n\r\n      {(error ) && (\r\n        <Typography color=\"error\" sx={{ fontSize: 12, textAlign: \"left\" }}>\r\n          {error || \"Please upload at least one file.\"}\r\n        </Typography>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UploadFile2\r\n\r\n"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","svg","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","_errors4$proof","_errors4$date","_errors2$description","_errors3$customer","_errors3$excel","_errors$status","_errors2$status","_errors2$reason","_errors$search","_errors$customer","_errors$status2","_errors$fromDate","_errors$toDate","allowFilesType","state","useLocation","user","userLogout","useAuth","console","log","register","handleSubmit","getValues","setValue","formState","errors","useForm","register2","handleSubmit2","setValue2","getValues2","reset","errors2","register3","handleSubmit3","setValue3","getValues3","errors3","register4","handleSubmit4","setValue4","getValues4","errors4","navigate","useNavigate","dispatch","useDispatch","contentRef","useRef","statusDialog","setStatusDialog","useState","paymentDialog","setPaymentDialog","approvalStatus","setApprovalStatus","visas","setVisas","loader","setLoader","sort","setSort","customerQueue","setCustomerQueue","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","selectedVisa","setSelectedVisa","paymentAmount","setPaymentAmount","itemAmount","setItemAmount","status","setStatus","date","setDate","date2","setDate2","date3","setDate3","paymentType","setPaymentType","banks","setBanks","excelDialog","setExcelDialog","selectedBank","setSelectedBank","excel","setExcel","proofAdmin","setProofAdmin","progress","setProgress","uploadedSize","setUploadedSize","file","setFile","filename","setFilename","fileDetail","setFileDetail","extension","setExtension","documents","setDocuments","proofDialog","setProofDialog","proofDoc","setProofDoc","selectedCustomer","setSelectedCustomer","selectedCustomer2","setSelectedCustomer2","buttonDisabled","setButtonDisabled","wpsList","setWpsList","wpsValid","setWpsValid","customerDetail","setCustomerDetail","isUploading","setIsUploading","selectedStatus","setSelectedStatus","fromDate","setFromDate","toDate","setToDate","filters","setFilters","permissions","setPermissions","loading","setLoading","handleUpload2","async","docs","formData","FormData","append","data","instance","post","routes","uploadDocuments","onUploadProgress","progressEvent","uploadedBytes","loaded","percentCompleted","Math","round","total","getFileSize","_data$data3","_data$data4","isUpload","nations","path","error","ErrorToaster","getVisaRequestList","page","limit","filter","Page","Limit","Filter","params","admin_approval_required","customer_id","user_type","VisaServices","rows","count","formatPermissionData","forEach","e","route","identifier","permitted","addPermission","showErrorToast","getWpsCheck","id","CustomerServices","checkWPS","wpsRequired","maxSize","size","uploadCVS","_data$data","_data$data2","responseCode","toast","success","message","_error$response","_error$response$data","response","handleUpload","getCustomerDetail","type","_data$details","details","security_deposit_scenario","getWPSList","_data$rows2","length","_data$rows$","dateMonth","moment","startOf","diff","useEffect","SystemServices","getBanks","_data$rows","getCustomerQueue","approval_status","_jsxs","Box","sx","p","children","_jsx","SimpleDialog","open","onClose","title","Grid","container","spacing","Typography","Colors","gray","mt","map","document","index","item","md","lg","component","onClick","process","trim","fileName","split","pop","includes","handleDownload","window","src","Images","docIcon","alt","style","lineHeight","xs","sm","LabelCustomInput","value","proof_amount","label","StartLabel","disabled","required","InputField","proof_date","format","placeholder","description","onSubmit","obj","proof_document","amount","promise","UpdateProof","showPromiseToast","UploadFile2","Memo","updateResult","key","newResult","multiple","accept","proof","onChange","preventDefault","files","Array","from","target","allowedTypes","uploadPromises","name","fileInfo","uploadError","validPaths","Promise","all","pathString","join","handleUploadDocument2","DatePicker","newDate","Date","handleDate","PrimaryButton","bgcolor","primary","fetch","excelFile","then","blob","url","URL","createObjectURL","Blob","link","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","catch","SelectField","options","selected","onSelect","customer","UploadFileSingle","arr","CleanTypes","handleUploadDocument","uploadXls","className","visa_id","updateStatus","parseFloat","toFixed","admin_approved","admin_reason","reason","UpdateApprovalStatus","mb","create","fullWidth","search","maxDate","handleDate2","minDate","handleDate3","textcolor","white","handleFilter","payment_status","from_date","to_date","Debounce","Fragment","PDFExport","ref","landscape","paperSize","margin","TableContainer","Paper","maxHeight","backgroundColor","boxShadow","borderRadius","Table","stickyHeader","minWidth","TableHead","cell","_Fragment","sort_by","sort_order","handleSort","sortIcon","TableBody","_item$customer","created_at","candidates_count","total_visa_charges","successIcon","errorIcon","admin_status_change_at","detailIcon","Pagination","pageSize","onPageSizeChange","tableCount","onPageChange","CircleLoading","useStyle","root","px","position","Input","left","top","opacity","inputRef","custom","fileId","fileAvailable","setFileAvailable","classes","$","prop","currentFile","result","event","newFiles","updatedFiles","updatedPaths","uploadDoc","variant","black","blue","flexWrap","CircularProgress","x","handleDelete","right","IconButton","DeleteIcon","uploadImage","uploadPDF"],"sourceRoot":""}