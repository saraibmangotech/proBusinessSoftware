{"version":3,"file":"static/js/9278.e7d7c7ee.chunk.js","mappings":"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","sources":["pages/Dashboard/Accounts/CreateAccount.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Box, FormControl, FormControlLabel, Grid, Radio, RadioGroup, Typography } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SelectField from \"components/Select\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport { FontFamily } from \"assets\";\r\nimport {  SuccessToaster } from \"components/Toaster\";\r\nimport InputField from \"components/Input\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport SystemServices from \"services/System\";\r\nimport { showErrorToast } from \"components/NewToaster\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\n\r\nfunction CreateAccount() {\r\n  const [handleBlockedNavigation] =\r\n  useCallbackPrompt(false)\r\n  const navigate = useNavigate();\r\n\r\n  const { register, handleSubmit, formState: { errors }, setValue, resetField } = useForm();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Unit\r\n  const [units, setUnits] = useState([]);\r\n  const [selectedUnit, setSelectedUnit] = useState();\r\n\r\n  // *For Account Nature\r\n  const [accountNature, setAccountNature] = useState('primary');\r\n\r\n\r\n  // *For Major Categories\r\n  const [majorCategories, setMajorCategories] = useState([]);\r\n  const [selectedMajorCategory, setSelectedMajorCategory] = useState();\r\n\r\n\r\n\r\n  // *For Currency\r\n  const [currencies, setCurrencies] = useState([]);\r\n  const [selectedCurrency, setSelectedCurrency] = useState(null);\r\n  const [paymentType, setPaymentType] = useState(\"debit\");\r\n\r\n  //for Nature\r\n  const [selectedNature, setSelectedNature] = useState(null)\r\n\r\n  // *For Sub Categories\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [selectedSubCategory, setSelectedSubCategory] = useState(null);\r\n\r\n  // *For Parent Account\r\n  const [parentAccounts, setParentAccounts] = useState([]);\r\n  const [selectedParentAccount, setSelectedParentAccount] = useState();\r\n\r\n  // *For Account PreRequisite  \r\n  const [headId, setHeadId] = useState();\r\n  const [subHeadId, setSubHeadId] = useState();\r\n  const [typeCode, setTypeCode] = useState();\r\n  const [typeSeries, setTypeSeries] = useState();\r\n  const [primarySeries, setPrimarySeries] = useState();\r\n\r\n  const [balanceDate, setBalanceDate] = useState();\r\n\r\n  // *For Handle Date\r\n  const handleBalanceDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setBalanceDate('invalid')\r\n        return\r\n      }\r\n      setBalanceDate(new Date(newDate))\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Units\r\n  const getUnits = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getUnits()\r\n      const unitsArray = []\r\n      data?.units.forEach(element => {\r\n        let obj = {\r\n          id: element,\r\n          name: element\r\n        }\r\n        unitsArray.push(obj)\r\n      });\r\n      setUnits(unitsArray)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Major Categories\r\n  const getMajorCategories = async () => {\r\n    try {\r\n      const { data } = await FinanceServices.getMajorCategories()\r\n      setMajorCategories(data?.categories)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Currencies\r\n  const getCurrencies = async (defaultId) => {\r\n    try {\r\n      let params = {\r\n        detailed: true\r\n      }\r\n      const { data } = await SystemServices.getCurrencies(params)\r\n      const currenciesArray = []\r\n      data?.currencies?.forEach(element => {\r\n        let obj = {\r\n          id: element?.currency,\r\n          name: element?.currency.toUpperCase(),\r\n          rate: element?.conversion_rate\r\n        }\r\n        currenciesArray.push(obj)\r\n      });\r\n\r\n      setCurrencies(currenciesArray)\r\n      if (defaultId) {\r\n        setSelectedCurrency(currenciesArray.find(e => e?.id === defaultId))\r\n      }\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Sub Categories\r\n  const getSubCategories = async (id) => {\r\n    try {\r\n      let params = {\r\n        category_id: id\r\n      }\r\n      const { data } = await FinanceServices.getSubCategories(params)\r\n      setSubCategories(data?.categories)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For handle Accounts PreRequisite\r\n  const handleSelectSubCat = (item) => {\r\n    setSelectedSubCategory(item)\r\n    const { type } = subCategories.find(e => e.id === item?.id)\r\n    setHeadId(type?.head_id)\r\n    setSubHeadId(type?.id)\r\n    setTypeCode(type?.type_code + type?.type_number)\r\n    setTypeSeries(type?.series)\r\n  }\r\n\r\n  // *For Get Account Code\r\n  const getAccountCode = async (code, series, primarySeries) => {\r\n    try {\r\n      let params = {\r\n        type_code: code,\r\n        type_series: series,\r\n      }\r\n      if (accountNature === 'subAccount') {\r\n        params.primary_series = primarySeries\r\n      }\r\n      const { data } = await FinanceServices.getAccountCode(params)\r\n      setValue('accountCode', data?.code?.account_code)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account By SubCategory\r\n  const getAccountBySubCategory = async (id) => {\r\n    try {\r\n      let params = {\r\n        sub_category: id,\r\n      }\r\n      const { data } = await FinanceServices.getAccountBySubCategory(params)\r\n      setParentAccounts(data?.accounts?.rows)\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    }\r\n  }\r\n\r\n  // *For handle Parent Accounts PreRequisite\r\n  const handleParentAccount = (item) => {\r\n    setSelectedParentAccount(item)\r\n    const data = parentAccounts.find(e => e.id === item?.id)\r\n    setPrimarySeries(data?.primary_series)\r\n    getAccountCode(typeCode, typeSeries, data?.primary_series)\r\n  }\r\n\r\n  // *For Create Account\r\n  const createAccount = async (formData) => {\r\n    setLoading(true)\r\n    console.log(paymentType);\r\n    console.log(selectedNature);\r\n    try {\r\n      let obj = {\r\n        name: formData?.accountName,\r\n        head_id: headId,\r\n        sub_head: subHeadId,\r\n        category: selectedMajorCategory?.id,\r\n        sub_category: selectedSubCategory?.id,\r\n        type_code: typeCode,\r\n        type_series: typeSeries,\r\n        unit: selectedUnit?.id,\r\n        opening_balance: parseInt(formData?.openingBalance),\r\n        balance_date: balanceDate,\r\n        nature: selectedNature?.id,\r\n        currency: selectedCurrency?.id,\r\n        comments: formData?.comments\r\n      }\r\n      if (accountNature === 'subAccount') {\r\n        obj.primary_series = primarySeries\r\n        obj.primary_account_id = selectedParentAccount?.id\r\n      }\r\n      const { message } = await FinanceServices.createAccount(obj)\r\n      SuccessToaster(message)\r\n      navigate('/account-list')\r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n  \r\n    getMajorCategories()\r\n    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (accountNature === 'subAccount' && selectedSubCategory?.id) {\r\n      getAccountBySubCategory(selectedSubCategory?.id)\r\n      setSelectedParentAccount('')\r\n      resetField('accountCode')\r\n    } else if (accountNature === 'primary' && selectedSubCategory?.id) {\r\n      getAccountCode(typeCode, typeSeries)\r\n    }\r\n  }, [selectedSubCategory, accountNature]);\r\n\r\n  return (\r\n    <Box sx={{  p: 3, borderRadius: 3}}>\r\n\r\n      \r\n      <Box component=\"form\" onSubmit={handleSubmit(createAccount)} >\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Create Account</Typography>\r\n        <Box sx={{ display: 'flex', gap: '5px' }} >\r\n\r\n          <PrimaryButton\r\n           bgcolor={'#bd9b4a'}\r\n            title=\"Save\"\r\n            type={'submit'}\r\n\r\n          />\r\n\r\n\r\n        </Box>\r\n\r\n      </Box>\r\n        <Grid container spacing={2} >\r\n        \r\n          <Grid item xs={12} sm={12}>\r\n            <Typography variant=\"subtitle1\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular }}>\r\n              Nature\r\n            </Typography>\r\n            <FormControl>\r\n              <RadioGroup row value={accountNature} onChange={(e) => setAccountNature(e.target.value)}>\r\n                <FormControlLabel value=\"primary\" control={<Radio />} label=\"Primary\" />\r\n                <FormControlLabel value=\"subAccount\" control={<Radio />} label=\"Sub Account\" />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <SelectField\r\n              label={'Major Category'}\r\n              size={'small'}\r\n              options={majorCategories}\r\n              selected={selectedMajorCategory}\r\n              onSelect={(value) => { setSelectedMajorCategory(value); getSubCategories(value?.id); setSelectedSubCategory(null) }}\r\n              error={errors?.majorCategory?.message}\r\n              register={register(\"majorCategory\", {\r\n                required: 'Please select major category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <SelectField\r\n              disabled={selectedMajorCategory ? false : true}\r\n              label={'Sub Category'}\r\n              size={'small'}\r\n              options={subCategories}\r\n              selected={selectedSubCategory}\r\n              onSelect={(value) => handleSelectSubCat(value)}\r\n              error={errors?.subCategory?.message}\r\n              register={register(\"subCategory\", {\r\n                required: 'Please select sub category.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            {accountNature === 'subAccount' &&\r\n              <SelectField\r\n                disabled={selectedSubCategory ? false : true}\r\n                label={'Parent Account'}\r\n                size={'small'}\r\n                options={parentAccounts}\r\n                selected={selectedParentAccount}\r\n                onSelect={(value) => {\r\n                  handleParentAccount(value)\r\n                  console.log(value);\r\n                  setValue('currency', value?.currency ? value?.currency?.toUpperCase() : 'USD')\r\n                  setValue('nature', value?.nature ? value?.nature?.toUpperCase() : 'Debit')\r\n                  setSelectedNature({ id: value?.nature ? value?.nature : 'debit', name: value?.nature ? value?.nature?.toUpperCase() : 'Debit' })\r\n                  setSelectedCurrency({ id: value?.currency ? value?.currency : 'usd', name: value?.currency ? value?.currency?.toUpperCase() : 'USD' })\r\n                }\r\n\r\n                }\r\n\r\n                error={errors?.parentAccount?.message}\r\n                register={register(\"parentAccount\", {\r\n                  required: accountNature === 'subAccount' ? 'Please select parent account.' : false,\r\n                })}\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              disabled={true}\r\n              label={'Account Code'}\r\n              size={'small'}\r\n              placeholder={'Account Code'}\r\n              register={register(\"accountCode\")}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Account Name'}\r\n              placeholder={'Account Name'}\r\n              size={'small'}\r\n              error={errors?.accountName?.message}\r\n              register={register(\"accountName\", {\r\n                required: 'Please enter account name.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Opening Balance (AED)'}\r\n              placeholder={'Opening Balance (AED)'}\r\n              size={'small'}\r\n              error={errors?.openingBalance?.message}\r\n              register={register(\"openingBalance\", {\r\n                required: 'Please enter opening balance.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <DatePicker\r\n              label={'Balance Date'}\r\n              size={'small'}\r\n              value={balanceDate}\r\n              onChange={(date) => handleBalanceDate(date)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            {console.log(accountNature)}\r\n            <SelectField\r\n              label={'Nature'}\r\n              size={'small'}\r\n              disabled={accountNature == \"subAccount\" ? true : false}\r\n              options={[{ id: 'debit', name: 'Debit' }, { id: 'credit', name: 'Credit' }]}\r\n              selected={selectedNature}\r\n              onSelect={(value) => setSelectedNature(value)}\r\n              error={errors?.currency?.message}\r\n              register={register(\"nature\", {\r\n                required: 'Please select nature.',\r\n              })}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={4}>\r\n            <InputField\r\n              label={'Comments'}\r\n              size={'small'}\r\n              placeholder={'Comments'}\r\n              error={errors?.comments?.message}\r\n              register={register(\"comments\", {\r\n                required: 'Please enter comments.',\r\n              })}\r\n            />\r\n          </Grid>\r\n         \r\n        </Grid>\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;"],"names":["_errors$majorCategory","_errors$subCategory","_errors$parentAccount","_errors$accountName","_errors$openingBalanc","_errors$currency","_errors$comments","handleBlockedNavigation","useCallbackPrompt","navigate","useNavigate","register","handleSubmit","formState","errors","setValue","resetField","useForm","loading","setLoading","useState","units","setUnits","selectedUnit","setSelectedUnit","accountNature","setAccountNature","majorCategories","setMajorCategories","selectedMajorCategory","setSelectedMajorCategory","currencies","setCurrencies","selectedCurrency","setSelectedCurrency","paymentType","setPaymentType","selectedNature","setSelectedNature","subCategories","setSubCategories","selectedSubCategory","setSelectedSubCategory","parentAccounts","setParentAccounts","selectedParentAccount","setSelectedParentAccount","headId","setHeadId","subHeadId","setSubHeadId","typeCode","setTypeCode","typeSeries","setTypeSeries","primarySeries","setPrimarySeries","balanceDate","setBalanceDate","getAccountCode","async","code","series","_data$code","params","type_code","type_series","primary_series","data","FinanceServices","account_code","error","showErrorToast","useEffect","getMajorCategories","categories","id","_data$accounts","sub_category","getAccountBySubCategory","accounts","rows","_jsx","Box","sx","p","borderRadius","children","_jsxs","component","onSubmit","console","log","obj","name","formData","accountName","head_id","sub_head","category","unit","opening_balance","parseInt","openingBalance","balance_date","nature","currency","comments","primary_account_id","message","createAccount","SuccessToaster","display","justifyContent","mb","Typography","fontSize","fontWeight","gap","PrimaryButton","bgcolor","title","type","Grid","container","spacing","item","xs","sm","variant","color","Colors","charcoalGrey","fontFamily","FontFamily","NunitoRegular","FormControl","RadioGroup","row","value","onChange","e","target","FormControlLabel","control","Radio","label","SelectField","size","options","selected","onSelect","category_id","getSubCategories","majorCategory","required","disabled","find","type_number","handleSelectSubCat","subCategory","_value$currency","_value$nature","_value$nature2","_value$currency2","handleParentAccount","toUpperCase","parentAccount","InputField","placeholder","DatePicker","date","newDate","Date","handleBalanceDate"],"sourceRoot":""}