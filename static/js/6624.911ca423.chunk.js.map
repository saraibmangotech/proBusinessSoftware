{"version":3,"file":"static/js/6624.911ca423.chunk.js","mappings":"0qBAyDA,MAAMA,GAAMC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,EAAiBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACzCE,OAAQ,EAEX,IAEKC,GAAOL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,EAAkBO,IAAA,IAAC,MAAEJ,GAAOI,EAAA,MAAM,CAC3C,CAAC,KAAKC,EAAAA,EAAiBC,QAAS,CAC5BC,SAAU,GACVC,WAAY,cACZP,OAAQ,oBACRQ,QAAS,OACTC,UAAW,OACXC,WAAY,SACZC,MAAO,UACPC,aAAc,OACdC,WAAY,cACZC,WAAY,QAGhB,CAAC,KAAKV,EAAAA,EAAiBW,QAAS,CAC5BT,SAAU,GACVC,WAAY,cAEZS,SAAU,SACVR,QAAS,iBACTS,YAAa,kBAEb,eAAgB,CACZC,QAAS,OACTC,IAAK,MACLC,WAAY,SACZC,eAAgB,SAChB,eAAgB,CACZC,OAAQ,YAGhB,IAAO,CACHC,MAAO,OACPC,OAAQ,QAEZ,sBAAuB,CACnBC,cAAe,aACflB,WAAYmB,EAAAA,GAAWC,cACvBX,SAAU,UAEd,sBAAuB,CACnBR,QAAS,MACTe,MAAO,OACPC,OAAQ,SAGnB,IAEKI,GAAYC,EAAAA,EAAAA,GAAW,CACzBC,WAAY,CACRZ,QAAS,OACTM,OAAQ,IACR,QAAS,CACLD,MAAO,kBACPC,OAAQ,sBA8+BpB,QAz+BA,WAAoB,IAADO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACf,MAAMC,EAAiB,CAEnB,YAGEC,EAAkB,CACpB,YACA,YACA,aACA,kBACA,2BACA,qBACA,WACA,4EAEE,KAAEC,EAAI,WAAEC,IAAeC,EAAAA,EAAAA,KAC7BC,QAAQC,IAAIJ,GACZ,MAAM,SAAEK,EAAQ,aAAEC,EAAY,UAAEC,GAAS,SAAEC,GAAUC,WAAW,OAAEC,MAAaC,EAAAA,EAAAA,OAE3EN,SAAUO,GACVN,aAAcO,GACdL,SAAUM,GACVL,WAAaC,OAAQK,MAErBJ,EAAAA,EAAAA,OAEAN,SAAUW,GACVV,aAAcW,GACdT,SAAUU,GACVX,UAAWY,GACXV,WAAaC,OAAQU,MAErBT,EAAAA,EAAAA,OAEAN,SAAUgB,GACVf,aAAcgB,GACdd,SAAUe,GACVhB,UAAWiB,GACXf,WAAaC,OAAQe,MAErBd,EAAAA,EAAAA,OAEAN,SAAUqB,GACVpB,aAAcqB,GACdnB,SAAUoB,GACVrB,UAAWsB,GACXpB,WAAaC,OAAQoB,MAErBnB,EAAAA,EAAAA,MAIEoB,KAHWC,EAAAA,EAAAA,MACD5C,KAEC6C,EAAAA,EAAAA,OACXC,IAAaC,EAAAA,EAAAA,QAAO,OACnBC,GAAcC,KAAmBC,EAAAA,EAAAA,WAAS,IAC1CC,GAAeC,KAAoBF,EAAAA,EAAAA,WAAS,IAM5CG,GAASC,KAAcJ,EAAAA,EAAAA,UAAS,KAGhCK,GAAQC,KAAaN,EAAAA,EAAAA,WAAS,IAE9BO,GAAMC,KAAWR,EAAAA,EAAAA,UAAS,QAI1BS,GAAeC,KAAoBV,EAAAA,EAAAA,UAAS,KAK5CW,GAAYC,KAAiBZ,EAAAA,EAAAA,UAAS,IACtCa,GAAWC,KAAgBd,EAAAA,EAAAA,UAAS,KACpCe,GAAaC,KAAkBhB,EAAAA,EAAAA,UAAS,IACxCiB,GAAcC,KAAmBlB,EAAAA,EAAAA,UAAS,OAE1CmB,GAAYC,KAAiBpB,EAAAA,EAAAA,aAC7BqB,GAAQC,KAAatB,EAAAA,EAAAA,aACrBuB,GAAMC,KAAWxB,EAAAA,EAAAA,UAAS,OAC1ByB,GAAaC,KAAkB1B,EAAAA,EAAAA,UAAS,OACxC2B,GAAOC,KAAY5B,EAAAA,EAAAA,UAAS,KAC5B6B,GAAaC,KAAkB9B,EAAAA,EAAAA,WAAS,IACxC+B,GAAcC,KAAmBhC,EAAAA,EAAAA,UAAS,OAC1CiC,GAAOC,KAAYlC,EAAAA,EAAAA,aAEnBmC,GAAUC,KAAepC,EAAAA,EAAAA,UAAS,IAClCqC,GAAcC,KAAmBtC,EAAAA,EAAAA,UAAS,IAC1CuC,GAAMC,KAAWxC,EAAAA,EAAAA,aACjByC,GAAUC,KAAe1C,EAAAA,EAAAA,aACzB2C,GAAYC,KAAiB5C,EAAAA,EAAAA,aAC7B6C,GAAWC,KAAgB9C,EAAAA,EAAAA,aAC3B+C,GAAaC,KAAkBhD,EAAAA,EAAAA,WAAS,IACxCiD,GAAUC,KAAelD,EAAAA,EAAAA,aACzBmD,GAAQC,KAAapD,EAAAA,EAAAA,aACrBqD,GAAkBC,KAAuBtD,EAAAA,EAAAA,UAAS,OAClDuD,GAAgBC,KAAqBxD,EAAAA,EAAAA,UAAS,OAC9CyD,GAAWC,KAAgB1D,EAAAA,EAAAA,UAAS,OACpC2D,GAAUC,KAAe5D,EAAAA,EAAAA,UAAS,OAGlC6D,GAASC,KAAc9D,EAAAA,EAAAA,UAAS,CAAC,IAGjC+D,GAAaC,KAAkBhE,EAAAA,EAAAA,aAE/BiE,GAASC,KAAclE,EAAAA,EAAAA,WAAS,GAmFjCmE,GAAwBC,UAC1B,IACIC,EAAEC,iBACF,IAAIC,EAAO,GACX1G,QAAQC,IAAIuG,EAAEG,OAAOC,MAAMC,OAAQ,UACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAEG,OAAOC,MAAMC,OAAQC,IAAK,CAC5C,MAAMpC,EAAO8B,EAAEG,OAAOC,MAAME,GAC5B,IAAIC,EAAM,CACN,CACIC,KAAU,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,KACZtC,KAAM,GACNuC,KAAU,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,KAAKC,MAAM,KAAK,GAC5BC,MAAMC,EAAAA,EAAAA,IAAY1C,EAAKyC,MACvBE,UAAU,IAGdC,EAAU,SACd,GAAI5C,EAAKyC,KAAOG,GACZC,EAAAA,EAAAA,IAAe,yCAEd,CAED,MAAMC,QAAqBC,GAAc/C,EAAMqC,GAC3CL,EACAA,GAAQ,IAAMc,EAGdd,EAAOc,CAEf,CAGJ,CAEA,OADAxH,QAAQC,IAAIyG,EAAM,QACXA,CAQX,CAAE,MAAOgB,IACLC,EAAAA,EAAAA,IAAaD,EACjB,GA4CED,GAAgBlB,MAAO7B,EAAMkD,KAC/BrD,GAAY,GACZ,IACI,MAAMsD,EAAW,IAAIC,SACrBD,EAASE,OAAO,WAAYrD,GAC5B1E,QAAQC,IAAIyE,GACZ,MAAM,KAAEsD,SAAeC,EAAAA,EAASC,KAAKC,EAAAA,EAAOC,gBAAiBP,EAAU,CACnEQ,iBAAmBC,IACf,MAAMC,EAAgBD,EAAcE,OAC9BC,EAAmBC,KAAKC,MACT,IAAhBJ,EAAuBD,EAAcM,OAG1CrE,GAAYkE,GACZzI,QAAQC,KAAImH,EAAAA,EAAAA,IAAYmB,IACxB9D,IAAgB2C,EAAAA,EAAAA,IAAYmB,GAAe,IAGxC,IAADM,EAAAC,EAAV,GAAId,EAKA,OAJAJ,EAAK,GAAGP,UAAW,EACnBO,EAAK,GAAGlD,KAAW,OAAJsD,QAAI,IAAJA,GAAU,QAANa,EAAJb,EAAMA,YAAI,IAAAa,OAAN,EAAJA,EAAYE,QAE3B/I,QAAQC,IAAI+H,EAAM,aACP,OAAJA,QAAI,IAAJA,GAAU,QAANc,EAAJd,EAAMA,YAAI,IAAAc,OAAN,EAAJA,EAAYpC,IAG3B,CAAE,MAAOgB,IACLC,EAAAA,EAAAA,IAAaD,EACjB,GAkBEsB,GAAazC,MAAO0C,EAAMC,EAAOC,KAEnC,IACI,MAAMC,EAAOH,GAAc/F,GACrBmG,EAAQH,GAAgBlG,GACxBsG,EAAS,IAAKtD,MAAYmD,GAChChG,GAAeiG,GACfnG,GAAaoG,GACbpD,GAAWqD,GACXtJ,QAAQC,IAAIuF,IAEZ,IAAI+D,EAAS,CACTN,KAAMG,EACNF,MAAOG,EACPG,YAAgC,MAAf,OAAJ3J,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,WAAuB,OAAJ5J,QAAI,IAAJA,OAAI,EAAJA,EAAM2J,YAA8B,OAAhBhE,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkE,IAIhFH,EAAS,IAAKA,KAAWD,GAEzB,MAAM,KAAEtB,SAAe2B,EAAAA,EAAiBX,WAAWO,GACnDhH,GAAe,OAAJyF,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,MACjB/D,GAAiB,OAAJmC,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,KAAK,IACxB7G,GAAkB,OAAJiF,QAAI,IAAJA,OAAI,EAAJA,EAAM6B,OACpB7J,QAAQC,KAAI6J,EAAAA,EAAAA,IAAyB,OAAJ9B,QAAI,IAAJA,OAAI,EAAJA,EAAM9B,cACvCC,IAAe2D,EAAAA,EAAAA,IAAyB,OAAJ9B,QAAI,IAAJA,OAAI,EAAJA,EAAM9B,cACtC,OAAJ8B,QAAI,IAAJA,GAAAA,EAAM9B,YAAY6D,SAAQvD,IACjB,OAADA,QAAC,IAADA,GAAAA,EAAGwD,OAAU,OAADxD,QAAC,IAADA,GAAAA,EAAGyD,YAAe,OAADzD,QAAC,IAADA,GAAAA,EAAG0D,WAChCtI,IAASuI,EAAAA,EAAAA,IAAe,OAAD3D,QAAC,IAADA,OAAC,EAADA,EAAGwD,OAC9B,GAGR,CAAE,MAAOtC,IACLH,EAAAA,EAAAA,IAAeG,EACnB,CACI,EA4KR,OAXA0C,EAAAA,EAAAA,YAAU,KACNpB,KA5ZazC,WAEb,IAMI,MAAM,KAAEyB,SAAeqC,EAAAA,EAAeC,WAEtCvG,GAAa,OAAJiE,QAAI,IAAJA,OAAI,EAAJA,EAAMlE,MACnB,CAAE,MAAO4D,IACLH,EAAAA,EAAAA,IAAeG,EACnB,CACI,EA+YJ4C,GA5YqB/D,OAAO0C,EAAMC,EAAOC,KAEzC,IACI,MAAMC,EAAOH,GAAc/F,GACrBmG,EAAQH,GAAgBlG,GACxBsG,EAAS,IAAKtD,MAAYmD,GAChChG,GAAeiG,GACfnG,GAAaoG,GACbpD,GAAWqD,GACX,IAAIC,EAAS,CACTN,KAAMG,EACNF,MAAOG,EACPG,YAAgC,MAAf,OAAJ3J,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,WAAuB,OAAJ5J,QAAI,IAAJA,OAAI,EAAJA,EAAM2J,YAAc,MAE9DD,EAAS,IAAKA,KAAWD,GACzB,MAAM,KAAEtB,SAAe2B,EAAAA,EAAiBY,iBAAiBhB,GACzD,GAAuB,MAAf,OAAJ1J,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,WAAkB,CAAC,IAADe,EACxBxK,QAAQC,IAAI2C,IACZ,IAAI6H,EAAkB,OAAJzC,QAAI,IAAJA,GAAU,QAANwC,EAAJxC,EAAM4B,YAAI,IAAAY,OAAN,EAAJA,EAAYE,MAAKC,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMjB,MAAU,OAAJ7J,QAAI,IAAJA,OAAI,EAAJA,EAAM2J,eAC7DxJ,QAAQC,IAAIwK,GACZhF,GAAoBgF,GACpB9J,GAAU,WAAY8J,EAE1B,CACA5H,GAAqB,OAAJmF,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,KAE3B,CAAE,MAAOlC,IACLH,EAAAA,EAAAA,IAAeG,EACnB,CACI,EAgXJ6C,IACI/E,IAAwB,OAAJ3F,QAAI,IAAJA,GAAAA,EAAM2J,cAtNRjD,WACtB,IACI,IAAIgD,EAAS,CAAEC,YAAgC,MAAf,OAAJ3J,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,WAAuB,OAAJ5J,QAAI,IAAJA,OAAI,EAAJA,EAAM2J,YAA8B,OAAhBhE,SAAgB,IAAhBA,QAAgB,EAAhBA,GAAkBkE,IAC3F,MAAM,KAAE1B,SAAe2B,EAAAA,EAAiBiB,kBAAkBrB,GAC1DvJ,QAAQC,IAAI+H,EAAK6C,SAGjBlF,GAAsB,OAAJqC,QAAI,IAAJA,OAAI,EAAJA,EAAM6C,QAE5B,CAAE,MAAOnD,IACLH,EAAAA,EAAAA,IAAeG,EACnB,GA6MIkD,EACJ,GAED,KAGCE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,GAAIC,SAAA,EACdC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACTC,KAAMnG,GACNoG,QAASA,IAAMnG,IAAe,GAC9BoG,MAAO,mBAAmBL,UAE1BC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAU,OAAOC,SAAUjK,IAxGxB+E,UAChB,IACI,IAAImF,EAAM,CACNC,WAAYjI,GACZgG,GAAgB,OAAZtG,SAAY,IAAZA,QAAY,EAAZA,GAAcsG,GAClBkC,eAAgBxG,GAChByG,aAAsB,OAARhE,QAAQ,IAARA,OAAQ,EAARA,EAAUiE,QAM5B,MAAMC,EAAUC,EAAAA,EAAeC,YAAYP,GAC3C1L,QAAQC,IAAI8L,IAEZG,EAAAA,EAAAA,IACIH,EACA,YACA,qBACA,wBAIJ,MAAMI,QAAiBJ,EACQ,OAAnB,OAARI,QAAQ,IAARA,OAAQ,EAARA,EAAUC,gBACVjH,IAAe,GACf6D,KACAjI,GAAU,cAAe,IAEjC,CACA,MAAO2G,GACH1H,QAAQC,IAAIyH,EAChB,KAwEmEwD,UACvDJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAErB,SAAA,EAEvBJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAEtB,SAAA,EACbC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,GAAI,CAAErN,SAAU,OAAQQ,WAAY,OAAQH,MAAO0O,EAAAA,EAAOC,KAAMC,GAAI,GAAI1B,SAAC,sBACrFC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAgB,CACbC,MAAM,EACNC,OAAQnN,EACR8H,MAAc,OAAP/F,SAAO,IAAPA,IAAc,QAAPvC,EAAPuC,GAASqL,aAAK,IAAA5N,OAAP,EAAPA,EAAgB6N,QACvBvI,KAAMU,GACNlF,SAAUqB,GAAU,QAAS,CACzB2L,SAEI,2BAEJC,SAAU5G,UACN,MAAMG,QAAaJ,GAAsBE,GACrCE,GACArB,GAAYqB,EAChB,MAKX9B,KACGkG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEzM,QAAS,OAAQE,WAAY,SAAUD,IAAK,QAAS0M,SAAA,EAC5DC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAW,MAAO4B,IAAKC,EAAAA,GAAOC,UAAW1O,MAAO,UACrDuM,EAAAA,EAAAA,KAAA,QAAMoC,MAAO,CAAEvP,MAAO,QAASkN,SAAEtG,KAAgB,WAE7DuG,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAGtC,UACtBC,EAAAA,EAAAA,KAACsC,EAAAA,EAAgB,CAACC,MAAO,YAAaC,WAAY,MAAOzN,SAAUqB,GAAU,SAAU,CAAE2L,SAAU,uBAEvG/B,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAGtC,UACtBC,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CACPF,MAAO,iBACPG,MAAOnK,GAEPyD,KAAM,QACNO,MAAc,OAAP/F,SAAO,IAAPA,IAAa,QAANtC,EAAPsC,GAAS+B,YAAI,IAAArE,OAAN,EAAPA,EAAe4N,QACtB/M,SAAUqB,GAAU,OAAQ,CACxB2L,SAEI,wBAGRC,SAAWzJ,IAlHnBoK,KAChB,IAEI,GAAe,gBAAXA,EAEA,YADAnK,GAAQ,WAGZA,GAAQ,IAAIoK,KAAKD,GACrB,CAAE,MAAOpG,IACLC,EAAAA,EAAAA,IAAaD,EACjB,GAyG4BsG,CAAWtK,GACXjC,GAAU,OAAQiC,EAAK,OAQnCyH,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAACtB,GAAI,CAAEtM,eAAgB,UAAWwM,UAC7CJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAGgB,GAAI,EAAGxC,GAAI,CAAE4B,GAAI,EAAGrO,QAAS,OAAQG,eAAgB,gBAAiBF,IAAK,QAAS0M,SAAA,EAClGC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACC,QAASxB,EAAAA,EAAOyB,QAAS5C,MAAM,cAActE,KAAK,YACjEkE,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACG,QAASA,IAAMjJ,IAAe,GAAQ+I,QAAS,UAAW3C,MAAM,2BAOnGJ,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACTC,KAAMrH,GACNsH,QAASA,IAAMrH,IAAe,GAC9BsH,MAAO,eAAeL,UAEtBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAU,OAAOC,SAAUtK,IA5H1BoF,UAvPGA,WACjBhC,GAAY,GACZ,IAAIqD,EAAO9C,GACX,IACI,MAAM+C,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQrD,IACxB1E,QAAQC,IAAIyE,IACZ,IAAI4C,EAAU,SACd,GAAI5C,GAAKyC,KAAOG,GACZC,EAAAA,EAAAA,IAAe,yCAEd,CAED,MAAM,KAAES,SAAeC,EAAAA,EAASC,KAAKC,EAAAA,EAAOkG,UAAWxG,EAAU,CAC7DQ,iBAAmBC,IACf,MAAMC,EAAgBD,EAAcE,OAC9BC,EAAmBC,KAAKC,MACT,IAAhBJ,EAAuBD,EAAcM,OAG1CrE,GAAYkE,GACZzI,QAAQC,KAAImH,EAAAA,EAAAA,IAAYmB,IACxB9D,IAAgB2C,EAAAA,EAAAA,IAAYmB,IAC5B+F,EAAAA,GAAMC,QAAQ,0BAEdtK,IAAe,EAAM,IAGlB,IAADuK,EAAAC,EAAV,GAAIzG,EAKA,OAJAJ,EAAK,GAAGP,UAAW,EACnBO,EAAK,GAAGlD,KAAW,OAAJsD,QAAI,IAAJA,GAAU,QAANwG,EAAJxG,EAAMA,YAAI,IAAAwG,OAAN,EAAJA,EAAYzF,QAE3B/I,QAAQC,IAAI+H,EAAM,aACP,OAAJA,QAAI,IAAJA,GAAU,QAANyG,EAAJzG,EAAMA,YAAI,IAAAyG,OAAN,EAAJA,EAAY/H,IAG3B,CACJ,CAAE,MAAOgB,IACLH,EAAAA,EAAAA,IAAeG,EACnB,GAiNAgH,EAAc,IA2HmDxD,UACrDJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAErB,SAAA,EACvBC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAIjP,QAAS,OAAQG,eAAgB,SAASwM,UACjEC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CACVC,QAAS,UACT3C,MAAM,oBACN6C,QAASA,KA9GjCO,MAAMC,GACDC,MAAK1C,GAAYA,EAAS2C,SAC1BD,MAAKC,IACF9O,QAAQC,IAAI6O,GACZ,MAAMC,EAAMC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACL,KAC3CM,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOR,EACZK,EAAKI,aAAa,WAAY,gBAC9BH,SAASjR,KAAKqR,YAAYL,GAC1BA,EAAKM,QACLN,EAAKO,WAAWC,YAAYR,EAAK,IAEpCS,OAAMnI,GAAS1H,QAAQ0H,MAAM,gCAAiCA,IAkGZ,EAC/BtB,QAASA,QAGjB0E,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAEtB,SAAA,EACbC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,GAAI,CAAErN,SAAU,OAAQQ,WAAY,OAAQH,MAAO0O,EAAAA,EAAOC,KAAMC,GAAI,GAAI1B,SAAC,oBACrFC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAgB,CACbC,MAAM,EACNC,OAAQpN,EACR+H,MAAc,OAAPpG,SAAO,IAAPA,IAAc,QAAPhC,EAAPgC,GAAS8C,aAAK,IAAA9E,OAAP,EAAPA,EAAgB2N,QACvBvI,KAAMN,GACNlE,SAAUgB,GAAU,QAAS,CACzBgM,SAEI,2BAEJC,SAAU5G,UAtdbA,WACzB,IACIC,EAAEC,iBACF,MAAM/B,EAAO8B,EAAEG,OAAOC,MAAM,GAC5B,IAAIG,EAAM,CACN,CACIC,KAAU,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,KACZtC,KAAM,GACNuC,KAAU,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,KAAKC,MAAM,KAAK,GAC5BC,MAAMC,EAAAA,EAAAA,IAAY1C,EAAKyC,MACvBE,UAAU,IAGd1H,EAAemQ,SAASpL,EAAKuC,OAE7BtC,GAAQD,GACRK,GAAcgC,KAOdQ,EAAAA,EAAAA,IAAe,SAAQwI,EAAAA,EAAAA,IAAWpQ,0BAE1C,CAAE,MAAO+H,IACLH,EAAAA,EAAAA,IAAeG,EACnB,GA4bgCsI,CAAqBxJ,GAErB,MAAM9B,EAAO8B,EAAEG,OAAOC,MAAM,GAC5B5G,QAAQC,IAAIyE,GACZG,GAAgB,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,KAAK,MAQlCpC,KACGkG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEzM,QAAS,OAAQE,WAAY,SAAUD,IAAK,QAAS0M,SAAA,EAC5DC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAW,MAAO4B,IAAKC,EAAAA,GAAOC,UAAW1O,MAAO,UACrDuM,EAAAA,EAAAA,KAAA,QAAMoC,MAAO,CAAEvP,MAAO,QAASkN,SAAEtG,KAAgB,WAE7DuG,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAACtB,GAAI,CAAEtM,eAAgB,UAAWwM,UAC7CJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAGgB,GAAI,EAAGxC,GAAI,CAAE4B,GAAI,EAAGrO,QAAS,OAAQG,eAAgB,gBAAiBF,IAAK,QAAS0M,SAAA,EAClGC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACC,QAASxB,EAAAA,EAAOyB,QAAS5C,MAAM,cAActE,KAAK,YACjEkE,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACG,QAASA,IAAMnK,IAAe,GAAQiK,QAAS,UAAW3C,MAAM,2BAOnGJ,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACTC,KAAMpJ,GACNqJ,QAASA,IAAMpJ,IAAgB,GAC/BqJ,MAAO,iBAAiBL,UAExBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAU,OAAOC,SAAUtL,GA5SvBoG,UACjB,IACI,IAAImF,EAAM,CACNuE,YAA0B,YAAbzM,GAAOkG,IAAuC,YAAblG,GAAOkG,IAA2B,KAChFA,GAAgB,OAAZtG,SAAY,IAAZA,QAAY,EAAZA,GAAcsG,GAClBF,YAAyB,OAAZpG,SAAY,IAAZA,QAAY,EAAZA,GAAcoG,aAI/B,MAAMuC,EAAUpC,EAAAA,EAAiBuG,eAAexE,GAChD1L,QAAQC,IAAI8L,IAEZG,EAAAA,EAAAA,IACIH,EACA,YACA,qBACA,wBAIJ,MAAMI,QAAiBJ,EACQ,OAAnB,OAARI,QAAQ,IAARA,OAAQ,EAARA,EAAUC,gBACVlK,IAAgB,GAChB8G,KAER,CACA,MAAOtB,GACH1H,QAAQC,IAAIyH,EAChB,KAgRmEwD,UACvDJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAErB,SAAA,EACvBC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAGtC,UACtBC,EAAAA,EAAAA,KAACgF,EAAAA,EAAW,CACRhJ,KAAM,QACNuG,MAAO,kBAEP0C,QAAS,CAAC,CAAE1G,GAAI,WAAY1C,KAAM,YAAc,CAAE0C,GAAI,WAAY1C,KAAM,aACxEqJ,SAAU7M,GACV8M,SAAWzC,IACPpK,GAAUoK,EAAM,EAIpBnG,MAAa,OAANnH,SAAM,IAANA,IAAc,QAARhB,EAANgB,GAAQiD,cAAM,IAAAjE,OAAR,EAANA,EAAgB0N,QACvB/M,SAAUA,EAAS,SAAU,CACzBgN,SAAU,+BAItB/B,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAACtB,GAAI,CAAEtM,eAAgB,UAAWwM,UAC7CJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAGgB,GAAI,EAAGxC,GAAI,CAAE4B,GAAI,EAAGrO,QAAS,OAAQG,eAAgB,gBAAiBF,IAAK,QAAS0M,SAAA,EAClGC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACC,QAASxB,EAAAA,EAAOyB,QAAS5C,MAAM,cAActE,KAAK,YACjEkE,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACG,QAASA,IAAMlM,IAAgB,GAAQgM,QAAS,UAAW3C,MAAM,2BAOpGJ,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACTC,KAAMjJ,GACNkJ,QAASA,IAAMjJ,IAAiB,GAChCkJ,MAAO,cAAcL,UAErBC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAU,OAAOC,SAAU3K,IA/S1ByF,UACdvG,QAAQC,IAAImD,IAEZ,IACI,IAAIsI,EAAM,CACNlC,YAAiB,OAAJ3J,QAAI,IAAJA,OAAI,EAAJA,EAAM2J,YACnB+G,cAAmB,OAAJ1Q,QAAI,IAAJA,OAAI,EAAJA,EAAMmH,KACrBwJ,YAAaxP,GAAW,eACxBqO,SAAU/J,GACV5B,KAAM+M,IAAO3K,GAAU,aAAa4K,IAAI,GAAI,QAIhD1Q,QAAQC,IAAIyL,GAEZ,MAAMK,EAAUpC,EAAAA,EAAiBgH,UAAUjF,GAC3C1L,QAAQC,IAAI8L,IAEZG,EAAAA,EAAAA,IACIH,EACA,YACA,qBACA,wBAIJ,MAAMI,QAAiBJ,EACQ,OAAnB,OAARI,QAAQ,IAARA,OAAQ,EAARA,EAAUC,gBACV/J,IAAiB,GACjBgD,GAAY,IACZ2D,KACAjI,GAAU,cAAc,IACxBwE,GAAU,MAElB,CACA,MAAOmC,GACH1H,QAAQC,IAAIyH,EAChB,KA0QiEwD,UACrDJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAACC,WAAS,EAAApB,SAAA,EACXJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAEtB,SAAA,EACbC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,GAAI,CAAErN,SAAU,OAAQQ,WAAY,OAAQH,MAAO0O,EAAAA,EAAOC,KAAMC,GAAI,GAAI1B,SAAC,yBACrFC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAgB,CACbC,MAAM,EACNC,OAAQnN,EACR8H,MAAc,OAAPzG,SAAO,IAAPA,IAAe,QAARzB,EAAPyB,GAASqE,cAAM,IAAA9F,OAAR,EAAPA,EAAiByN,QACxBvI,KAAMY,GACNsL,UAAW,kBACX1Q,SAAUW,GAAU,SAAU,CAC1BqM,SAEI,8BAEJC,SAAU5G,UACN,MAAMG,QAAaJ,GAAsBE,GACrCE,GACAnB,GAAUmB,EACd,UAOhBoE,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAIqD,GAAI,IAAI3F,SAAA,EAC/BC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,GAAI,CAAErN,SAAU,OAAQQ,WAAY,OAAQH,MAAO0O,EAAAA,EAAOC,KAAMC,GAAI,GAAI1B,SAAC,iBACpFpF,OAKLqF,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,GAAIgB,GAAI,GAAGtC,UACtBC,EAAAA,EAAAA,KAAC2F,EAAAA,EAAU,CACPpD,MAAO,gBACPvG,KAAM,QACN4J,WAAW,EACXnH,KAAM,EACNoH,YAAa,cACbtJ,MAAc,OAAPzG,SAAO,IAAPA,IAAoB,QAAbxB,EAAPwB,GAASuP,mBAAW,IAAA/Q,OAAb,EAAPA,EAAsBwN,QAC7B/M,SAAUW,GAAU,cAAe,CAC/BqM,UACI,SAKhB/B,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAACtB,GAAI,CAAEtM,eAAgB,UAAWwM,UAG7CJ,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAGgB,GAAI,EAAGxC,GAAI,CAAE4B,GAAI,EAAGrO,QAAS,OAAQG,eAAgB,gBAAiBF,IAAK,QAAS0M,SAAA,EAClGC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACgD,SAAUR,IAAO3K,GAAU,aAAaoL,KAAKT,MAASU,QAAQ,SAAU,WAAa,EAAkBjD,QAASxB,EAAAA,EAAOyB,QAAS5C,MAAM,cAActE,KAAK,YACxKkE,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CAACG,QAASA,IAAM/L,IAAiB,GAAQ6L,QAAS,UAAW3C,MAAM,2BAQrGT,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEzM,QAAS,OAAQG,eAAgB,gBAAiBmS,GAAI,GAAI3F,SAAA,EACjEC,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CAACzB,GAAI,CAAErN,SAAU,OAAQQ,WAAY,QAAS+M,SAAC,oBAC1DC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI,CAAEzM,QAAS,OAAQC,IAAK,OAAQ0M,SAEjB,MAAf,OAAJrL,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,aAAoB0B,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CACtCC,QAAS,UACR3C,MAAM,aACN6C,QAASA,KACL7I,GAAU,MACVxE,GAAU,cAAe,IACzBf,QAAQC,IAAIyF,IACZ,IAAI0L,EAAgB9O,GAAQ+O,MAAM1G,GAA6B,OAAjB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,eAEhD,GADAjQ,QAAQC,IAAImR,EAAe,YACvBA,GAAgC,OAAd1L,SAAc,IAAdA,IAAAA,GAAgB4L,oBAKlC,GAAkB,OAAd5L,SAAc,IAAdA,IAAAA,GAAgB6L,WAAY,CAC5B,MAAMC,EAAiBf,IAAO/K,GAAe6L,YAAYE,QACnDC,EAAejB,MAASgB,QAC9BzR,QAAQC,IAAIuR,GACZxR,QAAQC,IAAIyR,GACRF,IAAmBE,GAA+B,OAAdhM,SAAc,IAAdA,IAAAA,GAAgB4L,oBAKtC,OAAT1L,SAAS,IAATA,IAAAA,GAAWlC,MAAkC,IAAjB,OAATkC,SAAS,IAATA,QAAS,EAATA,GAAWqK,cACnClK,GAAY0K,IAAgB,OAAT7K,SAAS,IAATA,QAAS,EAATA,GAAWlC,MAAMgN,IAAI,EAAG,UAAUiB,OAAO,cAC5DtP,IAAiB,IAEH,OAATuD,SAAS,IAATA,IAAAA,GAAWlC,MAAkC,IAAjB,OAATkC,SAAS,IAATA,QAAS,EAATA,GAAWqK,cACnClK,GAAY0K,IAAgB,OAAT7K,SAAS,IAATA,QAAS,EAATA,GAAWlC,MAAMiO,OAAO,cAC3CtP,IAAiB,KAGjB0D,GAAY0K,IAAqB,OAAd/K,SAAc,IAAdA,QAAc,EAAdA,GAAgB6L,YAAYI,OAAO,cACtDtP,IAAiB,KAdjBkF,EAAAA,EAAAA,IAAe,gCAgBvB,MACIvH,QAAQC,IAAI,qCA3BhBsH,EAAAA,EAAAA,IAAe,uBA6BnB,EAGJnB,QAASA,UAOD,MAAf,OAAJvG,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,aAAoB0B,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAAApB,UAEtCC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAAC6B,GAAI,EAAEtB,UACbC,EAAAA,EAAAA,KAACgF,EAAAA,EAAW,CACRhJ,KAAM,QACNuG,MAAO,oBAEP0C,QAASxN,GACTyN,SAAU7K,GACV8K,SAAWzC,IA3UT7F,MA4UEvC,GAAoBoI,GA5UtB7F,EA6Ue,CAAEwB,YAAkB,OAALqE,QAAK,IAALA,OAAK,EAALA,EAAOnE,KA3UvDkI,EAAAA,EAAAA,KAAS,IAAM5I,GAAW,EAAG,GAAIhB,KA4UbrH,GAAU,WAAYkN,EAAM,EAGhCnG,MAAc,OAAP9G,SAAO,IAAPA,IAAiB,QAAVlB,EAAPkB,GAASiR,gBAAQ,IAAAnS,OAAV,EAAPA,EAAmBuN,QAC1B/M,SAAUO,GAAU,WAAY,CAC5ByM,SAAU,2CAS1B/B,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAG,UAGAC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAAC1B,MAAI,EAACmH,GAAI,GAAG5G,SACb5I,KAAWwI,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAG,SAAA,EAEZC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,WAAS,EAACuE,GAAI,IAOhBvO,KACIwI,EAAAA,EAAAA,MAACiH,EAAAA,SAAQ,CAAA7G,SAAA,EACLC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAS,CAACC,IAAKlQ,GAAYmQ,WAAW,EAAMC,UAAU,KAAKC,OAAQ,EAAGC,SAAS,mBAAkBnH,UAE9FC,EAAAA,EAAAA,KAACmH,EAAAA,EAAc,CACX9G,UAAW+G,EAAAA,EACXvH,GAAI,CACAwH,UAAW,sBAAuB5F,GAAI,EAAG6F,gBAAiB,cAAeC,UAAW,kBAAmBC,aAAc,kBAEvHzH,UAGFJ,EAAAA,EAAAA,MAAC8H,EAAAA,EAAK,CAACC,cAAY,EAAC7H,GAAI,CAAE8H,SAAU,KAAM5H,SAAA,EACtCC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAS,CAAA7H,UAENC,EAAAA,EAAAA,KAACnO,EAAG,CAAAkO,SA3yBlC,CAAC,CAAElE,KAAM,aAAcgM,IAAK,IAAM,CAAEhM,KAAM,WAAYgM,IAAK,IAAM,CAAEhM,KAAM,WAAYgM,IAAK,cAAgB,CAAEhM,KAAM,cAAegM,IAAK,cAAgB,CAAEhM,KAAM,WAAYgM,IAAK,mBAAqB,CAAEhM,KAAM,cAAegM,IAAK,uBA4yBnLC,KAAI,CAACC,EAAMC,KAClBhI,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAyB,SAAV,OAAJoV,QAAI,IAAJA,OAAI,EAAJA,EAAMlM,MAAiB,SAAW,OAAQ/I,aAA4B,SAAV,OAAJiV,QAAI,IAAJA,OAAI,EAAJA,EAAMlM,MAAiB,OAAS,QAAU4J,UAAU,YAAW1F,UAI7IC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACC,GAAI,CAAEzM,QAAS,OAAQE,WAAY,WAAYX,UAAW,UAAWoN,SACjE,OAAJgI,QAAI,IAAJA,OAAI,EAAJA,EAAMlM,QAJNmM,UAUrBhI,EAAAA,EAAAA,KAACiI,EAAAA,EAAS,CAAAlI,SACE,OAAP5I,SAAO,IAAPA,QAAO,EAAPA,GAAS2Q,KAAI,CAACtI,EAAMwI,KAAW,IAADE,EAAAC,EAE3B,OACIxI,EAAAA,EAAAA,MAAC9N,EAAG,CAEAgO,GAAI,CACA3N,OAAQ,gCACV6N,SAAA,EAGFC,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,SACpDuF,IAAW,OAAJ9F,QAAI,IAAJA,OAAI,EAAJA,EAAM4G,YAAYI,OAAO,iBAErCxG,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,SACpDuF,IAAW,OAAJ9F,QAAI,IAAJA,OAAI,EAAJA,EAAMjH,MAAMiO,OAAO,gBAE/BxG,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,SAChD,OAAJP,QAAI,IAAJA,GAAc,QAAV0I,EAAJ1I,EAAMkH,gBAAQ,IAAAwB,OAAV,EAAJA,EAAgBrM,QAGrBmE,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,SAChD,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAM6F,eAEXrF,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,UACrDC,EAAAA,EAAAA,KAAAoI,EAAAA,SAAA,CAAArI,UAGS,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAM0E,YAAYvE,EAAAA,EAAAA,MAACuB,EAAAA,GAAI,CACpB1B,MAAI,EACJmH,GAAI,EACJ0B,GAAI,EACJxI,GAAI,CAAErM,OAAQ,UAAWJ,QAAS,OAAQC,IAAK,OAC/CgN,UAAW,MACX4C,QAASA,KAAO,IAADqF,EAAAC,EAC+FC,EAAlG,OAAJhJ,QAAI,IAAJA,GAAc,QAAV8I,EAAJ9I,EAAM0E,gBAAQ,IAAAoE,GAAdA,EAAgBvM,MAAM,KAAK0M,MAAM9D,SAAS,QAAc,OAAJnF,QAAI,IAAJA,GAAc,QAAV+I,EAAJ/I,EAAM0E,gBAAQ,IAAAqE,GAAdA,EAAgBxM,MAAM,KAAK0M,MAAM9D,SAAS,QAE9F+D,EAAAA,EAAAA,IAAmB,OAAJlJ,QAAI,IAAJA,OAAI,EAAJA,EAAM0E,SAAc,OAAJ1E,QAAI,IAAJA,GAAc,QAAVgJ,EAAJhJ,EAAM0E,gBAAQ,IAAAsE,OAAV,EAAJA,EAAgBzM,MAAM,KAAK0M,OAI1D5E,OAAO3D,KAAKyI,kCAA2C,OAAJnJ,QAAI,IAAJA,OAAI,EAAJA,EAAM0E,UAAU,SACvE,EAEJnE,SAAA,EAIAC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAAAG,UACAC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAW,MAAO4B,IAAKC,EAAAA,GAAO0G,QAASnV,MAAO,YAEvDuM,EAAAA,EAAAA,KAAA,KAAGoC,MAAO,CAAEzP,UAAW,SAAUkW,WAAY,OAAQhW,MAAO,UAAWG,WAAY,OAAQR,SAAU,QAASuN,SACrG,OAAJP,QAAI,IAAJA,GAAc,QAAV2I,EAAJ3I,EAAM0E,gBAAQ,IAAAiE,OAAV,EAAJA,EAAgBpM,MAAM,KAAK0M,UAP3BT,QAYjBhI,EAAAA,EAAAA,KAAC7N,EAAI,CAACiQ,MAAO,CAAEzP,UAAW,QAAU8S,UAAU,YAAW1F,UACrDJ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACS,UAAW,MAAOR,GAAI,CAAEzM,QAAS,kBAAmBG,eAAgB,wBAAyBC,OAAQ,WAAayP,QAASA,KAC5HpO,QAAQC,IAAIJ,GACW,MAAf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM4J,YAAyC,OAAjB,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,cACjB,OAAX/J,SAAW,IAAXA,IAAAA,GAAa1C,SACbC,GAAU,MAEVvB,IAAgB,GAAOmB,GAAgBsH,GAG/C,EACFO,SAAA,EACEC,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CAACS,UAAW,MAAO4B,IAAS,OAAJzC,QAAI,IAAJA,GAAAA,EAAMsF,YAAc5C,EAAAA,GAAO4G,YAAmC,OAAjB,OAAJtJ,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,aAAsB5C,EAAAA,GAAO6G,YAAc7G,EAAAA,GAAO8G,UAAWvV,MAAO,SAC1I,OAAJ+L,QAAI,IAAJA,GAAAA,EAAMsF,YAAc,WAAkC,OAAjB,OAAJtF,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,aAAsB,UAAY,kBAjE7EkD,EA0EH,cAU9BhI,EAAAA,EAAAA,KAACiJ,EAAAA,EAAU,CACPlR,YAAaA,GACbmR,SAAUrR,GACVsR,iBAAmBnN,GAAS6B,GAAW,EAAG7B,EAAKR,OAAOkH,OACtD0G,WAAyB,OAAb3R,SAAa,IAAbA,QAAa,EAAbA,GAAeiE,OAC3B/D,WAAYA,GACZ0R,aAAevL,GAASD,GAAWC,EAAM,SAQxDzG,KAAU2I,EAAAA,EAAAA,KAACsJ,EAAAA,EAAa,aAcjD,C","sources":["pages/Dashboard/WPSManagement/WPSList.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { CleanTypes, Debounce, encryptData, formatPermissionData, getFileSize, handleDownload, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\nimport wpsListervices from 'services/Visa';\r\nimport DatePicker from 'components/DatePicker';\r\nimport SystemServices from 'services/System';\r\nimport excelFile from 'assets/excel/request_format.csv'\r\nimport UploadFile from 'components/UploadFile';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport toast from 'react-hot-toast';\r\nimport { useAuth } from 'context/UseContext';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { useStaticPicker } from '@mui/x-date-pickers/internals';\r\n\r\n\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction WPSList() {\r\n    const allowFilesType = [\r\n\r\n        'text/csv',\r\n\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'text/csv',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const { user, userLogout } = useAuth();\r\n    console.log(user);\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        formState: { errors: errors3 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        formState: { errors: errors4 },\r\n\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [paymentDialog, setPaymentDialog] = useState(false)\r\n\r\n    const tableHead = [{ name: 'Created At', key: '' }, { name: 'WPS Date', key: '' }, { name: 'Customer', key: 'created_at' }, { name: 'Description', key: 'created_at' }, { name: 'Document', key: 'commission_visa' }, { name: 'Is Approved', key: 'commission_monthly' }]\r\n\r\n\r\n\r\n    const [wpsList, setWpsList] = useState([])\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null)\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n    const [status, setStatus] = useState()\r\n    const [date, setDate] = useState(null)\r\n    const [paymentType, setPaymentType] = useState(null)\r\n    const [banks, setBanks] = useState([])\r\n    const [excelDialog, setExcelDialog] = useState(false)\r\n    const [selectedBank, setSelectedBank] = useState(null)\r\n    const [excel, setExcel] = useState()\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [file, setFile] = useState()\r\n    const [filename, setFilename] = useState()\r\n    const [fileDetail, setFileDetail] = useState()\r\n    const [extension, setExtension] = useState()\r\n    const [proofDialog, setProofDialog] = useState(false)\r\n    const [proofDoc, setProofDoc] = useState()\r\n    const [wpsDoc, setWpsDoc] = useState()\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [customerDetail, setCustomerDetail] = useState(null)\r\n    const [latestWps, setLatestWps] = useState(null)\r\n    const [wpsMonth, setWpsMonth] = useState(null)\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const getBanks = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n\r\n\r\n\r\n\r\n            const { data } = await SystemServices.getBanks()\r\n\r\n            setBanks(data?.banks)\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : null\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            if (user?.user_type == 'C') {\r\n                console.log(customerQueue);\r\n                let currentUser = data?.rows?.find(item => item?.id == user?.customer_id)\r\n                console.log(currentUser);\r\n                setSelectedCustomer(currentUser)\r\n                setValue1('customer', currentUser)\r\n\r\n            }\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n\r\n                setFile(file)\r\n                setFileDetail(arr)\r\n                // handleUpload(file, arr);\r\n                // const path = await handleUpload(file, arr);\r\n                // console.log('Uploaded file path:', path);\r\n                // console.log(path, 'pathpathpath');\r\n                // return path\r\n            } else {\r\n                showErrorToast(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n    // *For Upload Document\r\n    const handleUploadDocument2 = async (e) => {\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files.length, \"length\")\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n                let maxSize = 10 * 1024 * 1024\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB')\r\n                }\r\n                else {\r\n\r\n                    const uploadedPath = await handleUpload2(file, arr);\r\n                    if (path) {\r\n                        path += \",\" + uploadedPath\r\n                    }\r\n                    else {\r\n                        path = uploadedPath\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n            console.log(path, \"path\")\r\n            return path;\r\n            // if (allowFilesType.includes(file.type)) {\r\n\r\n\r\n            //   return path\r\n            // } else {\r\n            //   ErrorToaster(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            // }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        setProgress(0);\r\n        let docs = fileDetail\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            console.log(file);\r\n            let maxSize = 10 * 1024 * 1024\r\n            if (file.size > maxSize) {\r\n                showErrorToast('File Size Must Be Less than 10 MB')\r\n            }\r\n            else {\r\n\r\n                const { data } = await instance.post(routes.uploadCVS, formData, {\r\n                    onUploadProgress: (progressEvent) => {\r\n                        const uploadedBytes = progressEvent.loaded;\r\n                        const percentCompleted = Math.round(\r\n                            (uploadedBytes * 100) / progressEvent.total\r\n                        );\r\n\r\n                        setProgress(percentCompleted);\r\n                        console.log(getFileSize(uploadedBytes));\r\n                        setUploadedSize(getFileSize(uploadedBytes));\r\n                        toast.success(' Successfully Updated!')\r\n\r\n                        setExcelDialog(false)\r\n                    },\r\n                });\r\n                if (data) {\r\n                    docs[0].isUpload = true;\r\n                    docs[0].file = data?.data?.nations;\r\n\r\n                    console.log(data, 'asddasasd');\r\n                    return data?.data?.path\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n    const handleUpload2 = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Detail\r\n    const getCustomerDetail = async () => {\r\n        try {\r\n            let params = { customer_id: user?.user_type == 'C' ? user?.customer_id : selectedCustomer?.id };\r\n            const { data } = await CustomerServices.getCustomerDetail(params);\r\n            console.log(data.details);\r\n\r\n\r\n            setCustomerDetail(data?.details)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getWPSList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            console.log(selectedCustomer);\r\n\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : selectedCustomer?.id,\r\n\r\n\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await CustomerServices.getWPSList(params)\r\n            setWpsList(data?.rows)\r\n            setLatestWps(data?.rows[0])\r\n            setTotalCount(data?.count)\r\n            console.log(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                is_approved: status.id == 'Approved' ? true : status.id == 'Rejected' ? false : null,\r\n                id: selectedVisa?.id,\r\n                customer_id: selectedVisa?.customer_id\r\n\r\n            };\r\n\r\n            const promise = CustomerServices.UpdateWPStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getWPSList();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const CreateWPS = async (formData) => {\r\n        console.log(selectedVisa);\r\n\r\n        try {\r\n            let obj = {\r\n                customer_id: user?.customer_id,\r\n                customer_name: user?.name,\r\n                description: getValues2('description'),\r\n                document: wpsDoc,\r\n                date: moment(wpsMonth, \"MMMM-YYYY\").add(10, \"day\")\r\n\r\n\r\n            };\r\n            console.log(obj);\r\n\r\n            const promise = CustomerServices.CreateWPS(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                setProofDoc('')\r\n                getWPSList();\r\n                setValue2('description','')\r\n                setWpsDoc(null)\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const UpdateProof = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                proof_date: date,\r\n                id: selectedVisa?.id,\r\n                proof_document: proofDoc,\r\n                proof_amount: formData?.amount,\r\n\r\n\r\n\r\n            };\r\n\r\n            const promise = wpsListervices.UpdateProof(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setProofDialog(false);\r\n                getWPSList();\r\n                setValue2('description', '')\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const UpdateCSV = async () => {\r\n        handleUpload()\r\n    }\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = (data) => {\r\n\r\n        Debounce(() => getWPSList(1, '', data));\r\n    }\r\n\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getWPSList(1, '', data));\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        fetch(excelFile)\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n                console.log(blob);\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', 'filename.csv'); // Adjust the filename as needed\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n            .catch(error => console.error('Error downloading Excel file:', error));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getWPSList()\r\n        getBanks()\r\n        getCustomerQueue()\r\n        if (selectedCustomer || user?.customer_id) {\r\n\r\n            getCustomerDetail()\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <SimpleDialog\r\n                open={proofDialog}\r\n                onClose={() => setProofDialog(false)}\r\n                title={'Proof Of Payment'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit4(UpdateProof)}>\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload Proof :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType2}\r\n                                error={errors4?.proof?.message}\r\n                                file={proofDoc}\r\n                                register={register4(\"proof\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  proof   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        const path = await handleUploadDocument2(e);\r\n                                        if (path) {\r\n                                            setProofDoc(path);\r\n                                        }\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {filename &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <LabelCustomInput label={'Amount : '} StartLabel={'AED'} register={register4(\"amount\", { required: \"Enter  amount\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Payment Date :\"}\r\n                                value={date}\r\n\r\n                                size={'small'}\r\n                                error={errors4?.date?.message}\r\n                                register={register4(\"date\", {\r\n                                    required:\r\n\r\n                                        \"Please enter  date.\"\r\n\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date)\r\n                                    setValue4('date', date)\r\n\r\n\r\n                                }\r\n\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setProofDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={excelDialog}\r\n                onClose={() => setExcelDialog(false)}\r\n                title={'Upload Excel'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit3(UpdateCSV)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12} display={'flex'} justifyContent={'center'}>\r\n                            <PrimaryButton\r\n                                bgcolor={'#0076bf'}\r\n                                title=\"Download Template\"\r\n                                onClick={() => downloadExcel()}\r\n                                loading={loading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload CSV :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors3?.excel?.message}\r\n                                file={excel}\r\n                                register={register3(\"excel\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  excel   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        handleUploadDocument(e);\r\n\r\n                                        const file = e.target.files[0];\r\n                                        console.log(file);\r\n                                        setFilename(file?.name)\r\n\r\n\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {filename &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setExcelDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={'Change Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Status :'}\r\n\r\n                                options={[{ id: 'Approved', name: 'Approved' }, { id: 'Rejected', name: 'Rejected' }]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setStatusDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={'Create WPS?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(CreateWPS)}>\r\n                    <Grid container >\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload Document :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType2}\r\n                                error={errors2?.wpsDoc?.message}\r\n                                file={wpsDoc}\r\n                                className={'validationClass'}\r\n                                register={register2(\"wpsDoc\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  document.  .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        const path = await handleUploadDocument2(e);\r\n                                        if (path) {\r\n                                            setWpsDoc(path);\r\n                                        }\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} mb={2.5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>WPS Month : </Typography>\r\n                            {wpsMonth}\r\n                        </Grid>\r\n\r\n\r\n\r\n                        <Grid item xs={12} sm={12}>\r\n                            <InputField\r\n                                label={\"Description :\"}\r\n                                size={'small'}\r\n                                multiline={true}\r\n                                rows={5}\r\n                                placeholder={\"Description\"}\r\n                                error={errors2?.description?.message}\r\n                                register={register2(\"description\", {\r\n                                    required:\r\n                                        false\r\n\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n\r\n\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton disabled={moment(wpsMonth, 'MMMM-YYYY').diff(moment().startOf(\"month\"), \"months\") >= 0 ? true : false} bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setPaymentDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>WPS Management</Typography>\r\n                <Box sx={{ display: 'flex', gap: '5px' }} >\r\n\r\n                    {user?.user_type == 'C' && <PrimaryButton\r\n                       bgcolor={'#bd9b4a'}\r\n                        title=\"Create WPS\"\r\n                        onClick={() => {\r\n                            setWpsDoc(null)\r\n                            setValue2('description', '')\r\n                            console.log(customerDetail);\r\n                            let pendingStatus = wpsList.some((item => item?.is_approved == null));\r\n                            console.log(pendingStatus, 'wpsList');\r\n                            if (pendingStatus && !customerDetail?.bypass_requirements) {\r\n                                showErrorToast('You have Pending WPS')\r\n                            }\r\n                            else {\r\n\r\n                                if (customerDetail?.created_at) {\r\n                                    const createdAtMonth = moment(customerDetail.created_at).month();\r\n                                    const currentMonth = moment().month();\r\n                                    console.log(createdAtMonth);\r\n                                    console.log(currentMonth);\r\n                                    if (createdAtMonth === currentMonth && !customerDetail?.bypass_requirements) {\r\n                                        showErrorToast(\"You can create WPS next month\");\r\n\r\n                                    }\r\n\r\n                                    else if (latestWps?.date && latestWps?.is_approved == true) {\r\n                                        setWpsMonth(moment(latestWps?.date).add(1, 'months').format(\"MMMM-YYYY\"))\r\n                                        setPaymentDialog(true);\r\n                                    }\r\n                                    else if (latestWps?.date && latestWps?.is_approved == false) {\r\n                                        setWpsMonth(moment(latestWps?.date).format(\"MMMM-YYYY\"))\r\n                                        setPaymentDialog(true);\r\n                                    }\r\n                                    else {\r\n                                        setWpsMonth(moment(customerDetail?.created_at).format(\"MMMM-YYYY\"))\r\n                                        setPaymentDialog(true);\r\n                                    }\r\n                                } else {\r\n                                    console.log(\"No created_at date available\");\r\n                                }\r\n                            }\r\n\r\n                        }}\r\n                        loading={loading}\r\n                    />}\r\n\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n            {user?.user_type != 'C' && <Grid container  >\r\n\r\n                <Grid item xs={4} >\r\n                    <SelectField\r\n                        size={'small'}\r\n                        label={'Select Customer :'}\r\n\r\n                        options={customerQueue}\r\n                        selected={selectedCustomer}\r\n                        onSelect={(value) => {\r\n                            setSelectedCustomer(value)\r\n                            handleFilter({ customer_id: value?.id })\r\n                            setValue1('customer', value)\r\n\r\n                        }}\r\n                        error={errors1?.customer?.message}\r\n                        register={register1(\"customer\", {\r\n                            required: 'Please select customer account.',\r\n                        })}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>}\r\n\r\n            <Box >\r\n\r\n\r\n                <Grid item md={11}>\r\n                    {wpsList && <Box>\r\n\r\n                        <Grid container mb={2} >\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                        {(\r\n                            wpsList && (\r\n                                <Fragment>\r\n                                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: 'calc(100vh - 200px)', mt: 5, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                            }}\r\n\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell style={{ textAlign: cell?.name == 'Date' ? 'center' : 'left', paddingRight: cell?.name == 'Date' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                                                key={index}\r\n\r\n                                                            >\r\n                                                                <Box sx={{ display: 'flex', alignItems: 'flex-end', textAlign: 'center' }}>\r\n                                                                    {cell?.name}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {wpsList?.map((item, index) => {\r\n\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: '1px solid #EEEEEE !important',\r\n                                                                }}\r\n                                                            >\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {moment(item?.date).format(\"MMMM-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.customer?.name}\r\n\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.description}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <>\r\n\r\n\r\n                                                                        {item?.document && <Grid\r\n                                                                            item\r\n                                                                            md={6}\r\n                                                                            lg={4}\r\n                                                                            sx={{ cursor: 'pointer', display: 'flex', gap: '5px' }}\r\n                                                                            component={'div'}\r\n                                                                            onClick={() => {\r\n                                                                                if (item?.document?.split('_').pop().includes('doc') || item?.document?.split('_').pop().includes('xls')) {\r\n\r\n                                                                                    handleDownload(item?.document, item?.document?.split('_').pop());\r\n                                                                                }\r\n                                                                                else {\r\n\r\n                                                                                    window.open(process.env.REACT_APP_IMAGE_BASE_URL + item?.document, '_blank');\r\n                                                                                }\r\n                                                                            }}\r\n                                                                            // onClick={() => handleDownload(item?.document, item?.document?.split('_').pop())}\r\n                                                                            key={index}\r\n                                                                        >\r\n\r\n                                                                            <Box>\r\n                                                                                <Box component={'img'} src={Images.docIcon} width={'25px'} />\r\n                                                                            </Box>\r\n                                                                            <p style={{ textAlign: 'center', lineHeight: '20px', color: '#0F2772', fontWeight: 'bold', fontSize: '12px' }}>\r\n                                                                                {item?.document?.split('_').pop()}\r\n                                                                            </p>\r\n                                                                        </Grid>}\r\n                                                                    </>\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box component={'div'} sx={{ display: 'flex !important', justifyContent: 'flex-start !important', cursor: 'pointer' }} onClick={() => {\r\n                                                                        console.log(user);\r\n                                                                        if (user?.user_type != 'C' && item?.is_approved == null) {\r\n                                                                            if (permissions?.status) {\r\n                                                                                setStatus(null)\r\n\r\n                                                                                setStatusDialog(true); setSelectedVisa(item)\r\n                                                                            }\r\n\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        <Box component={'img'} src={item?.is_approved ? Images.successIcon : item?.is_approved == null ? Images.pendingIcon : Images.errorIcon} width={'13px'}></Box>\r\n                                                                        {item?.is_approved ? 'Approved' : item?.is_approved == null ? 'Pending' : 'Rejected'}\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                                            </Row>\r\n\r\n                                                        );\r\n                                                    })}\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getWPSList(1, size.target.value)}\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getWPSList(page, \"\")}\r\n                                    />\r\n\r\n                                </Fragment>\r\n                            )\r\n                        )}\r\n\r\n\r\n                        {loader && <CircleLoading />}\r\n\r\n\r\n                    </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default WPSList;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","_errors4$proof","_errors4$date","_errors3$excel","_errors$status","_errors2$wpsDoc","_errors2$description","_errors1$customer","allowFilesType","allowFilesType2","user","userLogout","useAuth","console","log","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","errors1","register2","handleSubmit2","setValue2","getValues2","errors2","register3","handleSubmit3","setValue3","getValues3","errors3","register4","handleSubmit4","setValue4","getValues4","errors4","dispatch","useNavigate","useDispatch","contentRef","useRef","statusDialog","setStatusDialog","useState","paymentDialog","setPaymentDialog","wpsList","setWpsList","loader","setLoader","sort","setSort","customerQueue","setCustomerQueue","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","selectedVisa","setSelectedVisa","itemAmount","setItemAmount","status","setStatus","date","setDate","paymentType","setPaymentType","banks","setBanks","excelDialog","setExcelDialog","selectedBank","setSelectedBank","excel","setExcel","progress","setProgress","uploadedSize","setUploadedSize","file","setFile","filename","setFilename","fileDetail","setFileDetail","extension","setExtension","proofDialog","setProofDialog","proofDoc","setProofDoc","wpsDoc","setWpsDoc","selectedCustomer","setSelectedCustomer","customerDetail","setCustomerDetail","latestWps","setLatestWps","wpsMonth","setWpsMonth","filters","setFilters","permissions","setPermissions","loading","setLoading","handleUploadDocument2","async","e","preventDefault","path","target","files","length","i","arr","name","type","split","size","getFileSize","isUpload","maxSize","showErrorToast","uploadedPath","handleUpload2","error","ErrorToaster","docs","formData","FormData","append","data","instance","post","routes","uploadDocuments","onUploadProgress","progressEvent","uploadedBytes","loaded","percentCompleted","Math","round","total","_data$data3","_data$data4","nations","getWPSList","page","limit","filter","Page","Limit","Filter","params","customer_id","user_type","id","CustomerServices","rows","count","formatPermissionData","forEach","route","identifier","permitted","addPermission","useEffect","SystemServices","getBanks","getCustomerQueue","_data$rows","currentUser","find","item","getCustomerDetail","details","_jsxs","Box","sx","p","children","_jsx","SimpleDialog","open","onClose","title","component","onSubmit","obj","proof_date","proof_document","proof_amount","amount","promise","wpsListervices","UpdateProof","showPromiseToast","response","responseCode","Grid","container","spacing","xs","Typography","Colors","gray","mt","UploadFileSingle","Memo","accept","proof","message","required","onChange","src","Images","uploadXls","style","sm","LabelCustomInput","label","StartLabel","DatePicker","value","newDate","Date","handleDate","PrimaryButton","bgcolor","primary","onClick","uploadCVS","toast","success","_data$data","_data$data2","handleUpload","fetch","excelFile","then","blob","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","catch","includes","CleanTypes","handleUploadDocument","is_approved","UpdateWPStatus","SelectField","options","selected","onSelect","customer_name","description","moment","add","CreateWPS","className","mb","InputField","multiline","placeholder","disabled","diff","startOf","pendingStatus","some","bypass_requirements","created_at","createdAtMonth","month","currentMonth","format","Debounce","customer","md","Fragment","PDFExport","ref","landscape","paperSize","margin","fileName","TableContainer","Paper","maxHeight","backgroundColor","boxShadow","borderRadius","Table","stickyHeader","minWidth","TableHead","key","map","cell","index","TableBody","_item$customer","_item$document4","_Fragment","lg","_item$document","_item$document2","_item$document3","pop","handleDownload","process","docIcon","lineHeight","successIcon","pendingIcon","errorIcon","Pagination","pageSize","onPageSizeChange","tableCount","onPageChange","CircleLoading"],"sourceRoot":""}