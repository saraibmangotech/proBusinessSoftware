{"version":3,"file":"static/js/4210.e90a9896.chunk.js","mappings":"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","sources":["pages/Dashboard/Reception/Receptions.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport DataTable from 'components/DataTable';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\nimport { useAuth } from 'context/UseContext';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction ReceptionList() {\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [status, setStatus] = useState(null)\r\n  const [statusDialog, setStatusDialog] = useState(false)\r\n  const [selectedData, setSelectedData] = useState(null)\r\n  const [tableLoader, setTableLoader] = useState(false)\r\n   const { user } = useAuth()\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n    getValues,\r\n    reset,\r\n  } = useForm();\r\n\r\n  const tableHead = [{ name: 'SR No.', key: '' },{ name: 'Token Number.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [sort, setSort] = useState('desc')\r\n\r\n  // *For Get Customer Queue\r\n \r\n\r\n\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n      setLoader(true)\r\n  \r\n      try {\r\n     \r\n        let params = {\r\n          page: 1,\r\n          limit: 1000,\r\n       \r\n  \r\n        }\r\n       \r\n        const { data } = await CustomerServices.getReceptionsList(params)\r\n        setCustomerQueue(data?.rows)\r\n       \r\n      } catch (error) {\r\n        showErrorToast(error)\r\n      } finally {\r\n        setLoader(false)\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n\r\n\r\n\r\n  // *For Handle Filter\r\n\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues('search')\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n  const handleDelete = async (item) => {\r\n \r\n\r\n    try {\r\n        let params = { reception_id: selectedData?.id }\r\n\r\n\r\n        const { message } = await CustomerServices.deleteReception(params)\r\n\r\n        SuccessToaster(message);\r\n        getCustomerQueue()\r\n    } catch (error) {\r\n        showErrorToast(error)\r\n    } finally {\r\n        // setLoader(false)\r\n    }\r\n}\r\n  const UpdateStatus = async () => {\r\n    try {\r\n      let obj = {\r\n        customer_id: selectedData?.id,\r\n        is_active: status?.id,\r\n      };\r\n\r\n      const promise = CustomerServices.CustomerStatus(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setStatusDialog(false);\r\n        setStatus(null)\r\n        getCustomerQueue();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n    const columns = [\r\n      {\r\n        header: \"SR No.\",\r\n        accessorKey: \"id\",\r\n  \r\n  \r\n      },\r\n      {\r\n        header: \"Token Number.\",\r\n        accessorKey: \"token_number\",\r\n  \r\n  \r\n      },\r\n      {\r\n        header: \"Customer\",\r\n        accessorKey: \"customer_name\",\r\n  \r\n  \r\n      },\r\n      {\r\n        header: \"Mobile\",\r\n        accessorKey: \"mobile\",\r\n  \r\n  \r\n      },\r\n      // {\r\n      //   header: \"Type\",\r\n      //   accessorKey: \"cost_center\",\r\n      //   cell: ({ row }) => (\r\n      //     <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n      //       {row?.original?.is_company ? 'Company' : \"Individual\"}\r\n      //     </Box>\r\n      //   ),\r\n  \r\n      // },\r\n      {\r\n        id: \"created_at\",\r\n        header: \"Registration Date\",\r\n        // Remove accessorKey and fix accessorFn to use row directly\r\n        accessorFn: (row) => moment(row.created_at).format(\"MM-DD-YYYY\"),\r\n        cell: ({ row }) => (\r\n          <Box variant=\"contained\" color=\"primary\" sx={{ cursor: \"pointer\", display: \"flex\", gap: 2 }}>\r\n            {moment(row.original.created_at).format(\"MM-DD-YYYY\")}\r\n          </Box>\r\n        ),\r\n      },\r\n  \r\n     \r\n      {\r\n        header: \"Actions\",\r\n        cell: ({ row }) => (\r\n  \r\n          <Box sx={{display:'flex',gap:1}}>\r\n            {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/reception-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n            {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-reception/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n            <Box>\r\n              {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n  \r\n              {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n            </Box>\r\n  \r\n          </Box>\r\n        ),\r\n      },\r\n  \r\n    ]\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCustomerQueue()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n\r\n      <ConfirmationDialog\r\n        open={confirmationDialog}\r\n        onClose={() => setConfirmationDialog(false)}\r\n        message={\"Are You Sure?\"}\r\n        action={() => {\r\n          setConfirmationDialog(false);\r\n          handleDelete()\r\n\r\n        }}\r\n      />\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={\r\n\r\n                  [\r\n                    { id: false, name: \"Disabled\" },\r\n                    { id: true, name: \"Enabled\" },\r\n\r\n                  ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Reception List</Typography>\r\n      {user?.role_id != 1003 && <PrimaryButton\r\n         bgcolor={'#bd9b4a'}\r\n          title=\"Create \"\r\n          onClick={() => { navigate('/create-reception'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n          loading={loading}\r\n        />}\r\n\r\n\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box >\r\n\r\n\r\n        {<DataTable loading={loader} data={customerQueue} columns={columns} />}\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ReceptionList;"],"names":["styled","TableRow","_ref","theme","border","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","_errors$status","navigate","useNavigate","status","setStatus","useDispatch","useRef","useState","statusDialog","setStatusDialog","selectedData","setSelectedData","tableLoader","setTableLoader","user","useAuth","register","handleSubmit","formState","errors","setValue","getValues","reset","useForm","loader","setLoader","confirmationDialog","setConfirmationDialog","customerQueue","setCustomerQueue","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","filters","setFilters","permissions","setPermissions","loading","setLoading","sort","setSort","getCustomerQueue","async","page","limit","filter","params","data","CustomerServices","getReceptionsList","rows","error","showErrorToast","columns","header","accessorKey","id","accessorFn","row","moment","created_at","format","cell","_ref3","_jsx","Box","variant","sx","children","original","_ref4","_jsxs","component","onClick","_row$original","localStorage","setItem","src","Images","detailIcon","_row$original2","editIcon","deleteIcon","useEffect","p","ConfirmationDialog","open","onClose","message","action","reception_id","deleteReception","SuccessToaster","handleDelete","SimpleDialog","title","onSubmit","obj","customer_id","is_active","promise","CustomerStatus","console","log","showPromiseToast","response","responseCode","Grid","container","spacing","item","xs","sm","SelectField","size","label","options","name","selected","onSelect","value","required","mt","PrimaryButton","bgcolor","Colors","primary","type","mb","Typography","role_id","DataTable"],"sourceRoot":""}