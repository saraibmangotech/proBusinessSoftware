{"version":3,"file":"static/js/2962.8b40bbb2.chunk.js","mappings":"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","sources":["pages/Dashboard/Visa/DraftVisa.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    ListItemText,\r\n    Tooltip,\r\n    Checkbox,\r\n    InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { CleanTypes, Debounce, encryptData, formatPermissionData, getFileSize, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport CommissionServices from 'services/Commission';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { adjustSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\r\nimport VisaServices from 'services/Visa';\r\nimport DatePicker from 'components/DatePicker';\r\nimport SystemServices from 'services/System';\r\nimport excelFile from 'assets/excel/request_format.csv'\r\nimport UploadFile from 'components/UploadFile';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport toast from 'react-hot-toast';\r\nimport { useAuth } from 'context/UseContext';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    }\r\n})\r\n\r\nfunction DraftVisa() {\r\n    const allowFilesType = [\r\n\r\n        'text/csv',\r\n\r\n    ];\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        formState: { errors: errors3 },\r\n\r\n    } = useForm();\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const contentRef = useRef(null);\r\n    const [statusDialog, setStatusDialog] = useState(false)\r\n    const [paymentDialog, setPaymentDialog] = useState(false)\r\n\r\n    const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Date', key: 'created_at' }, { name: 'Customer', key: 'created_at' }, { name: 'Visa Quantity', key: 'commission_visa' }, { name: 'Total Amount', key: 'commission_monthly' }, { name: 'Deposit Balance', key: 'customerCount' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n    const [visas, setVisas] = useState([])\r\n\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const [sort, setSort] = useState('asc')\r\n    const { user, userLogout } = useAuth();\r\n\r\n    // *For Customer Queue\r\n    const [customerQueue, setCustomerQueue] = useState([]);\r\n\r\n\r\n\r\n    // *For setPermissions\r\n    const [totalCount, setTotalCount] = useState(0);\r\n    const [pageLimit, setPageLimit] = useState(50);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedVisa, setSelectedVisa] = useState(null)\r\n\r\n    const [itemAmount, setItemAmount] = useState()\r\n    const [status, setStatus] = useState()\r\n    const [date, setDate] = useState(null)\r\n    const [paymentType, setPaymentType] = useState(null)\r\n    const [banks, setBanks] = useState([])\r\n    const [excelDialog, setExcelDialog] = useState(false)\r\n    const [selectedBank, setSelectedBank] = useState(null)\r\n    const [excel, setExcel] = useState()\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [file, setFile] = useState()\r\n    const [filename, setFilename] = useState()\r\n    const [fileDetail, setFileDetail] = useState()\r\n    const [extension, setExtension] = useState()\r\n    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n    const [selectedDraft, setSelectedDraft] = useState(null)\r\n    // *For Filters\r\n    const [filters, setFilters] = useState({});\r\n\r\n    // *For Permissions\r\n    const [permissions, setPermissions] = useState();\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const getBanks = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n\r\n\r\n\r\n\r\n            const { data } = await SystemServices.getBanks()\r\n\r\n            setBanks(data?.banks)\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e) => {\r\n        try {\r\n            const inputElement = e.target;\r\n            e.preventDefault();\r\n            const file = e.target.files[0];\r\n            let arr = [\r\n                {\r\n                    name: file?.name,\r\n                    file: \"\",\r\n                    type: file?.type.split(\"/\")[1],\r\n                    size: getFileSize(file.size),\r\n                    isUpload: false,\r\n                },\r\n            ];\r\n            if (allowFilesType.includes(file.type)) {\r\n\r\n                setFile(file)\r\n                setFileDetail(arr)\r\n                setExcel(file)\r\n                // handleUpload(file, arr);\r\n                // const path = await handleUpload(file, arr);\r\n                // console.log('Uploaded file path:', path);\r\n                // console.log(path, 'pathpathpath');\r\n                // return path\r\n            } else {\r\n                // Clear the file input after processing\r\n                inputElement.value = \"\";\r\n                setFile('')\r\n                setFileDetail([])\r\n                setExcel('')\r\n                showErrorToast(`Only ${CleanTypes(allowFilesType)} formats is supported`);\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        setProgress(0);\r\n        let docs = fileDetail\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file);\r\n            formData.append(\"id\", selectedCustomer?.id);\r\n            console.log(file);\r\n            let maxSize = 10 * 1024 * 1024\r\n            if (file.size > maxSize) {\r\n                showErrorToast('File Size Must Be Less than 3 MB')\r\n            }\r\n            else {\r\n\r\n                const { data } = await instance.post(routes.uploadCVSDraft, formData, {\r\n                    onUploadProgress: (progressEvent) => {\r\n                        const uploadedBytes = progressEvent.loaded;\r\n                        const percentCompleted = Math.round(\r\n                            (uploadedBytes * 100) / progressEvent.total\r\n                        );\r\n\r\n                        setProgress(percentCompleted);\r\n                        console.log(getFileSize(uploadedBytes));\r\n                        setUploadedSize(getFileSize(uploadedBytes));\r\n                        toast.success(' Successfully Updated!')\r\n\r\n                        setExcelDialog(false)\r\n                        setExcel(false)\r\n                        setButtonDisabled(false)\r\n                        setSelectedCustomer(null)\r\n                    },\r\n                });\r\n                if (data) {\r\n                    docs[0].isUpload = true;\r\n                    docs[0].file = data?.data?.nations;\r\n\r\n                    console.log(data, 'asddasasd');\r\n                    return data?.data?.path\r\n\r\n                }\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Customer Queue\r\n    const getVisaRequestList = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = filter ? { ...filters, ...filter } : null;\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n                is_draft: true,\r\n                customer_id: user?.user_type == 'C' ? user?.customer_id : null,\r\n            }\r\n            params = { ...params, ...Filter }\r\n\r\n            const { data } = await VisaServices.getVisaRequestList(params)\r\n            setVisas(data?.rows)\r\n            setTotalCount(data?.count)\r\n            console.log(formatPermissionData(data?.permissions));\r\n\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            setPermissions(formatPermissionData(data?.permissions))\r\n            data?.permissions.forEach(e => {\r\n                if (e?.route && e?.identifier && e?.permitted) {\r\n                    dispatch(addPermission(e?.route));\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const UpdateStatus = async () => {\r\n        try {\r\n            let obj = {\r\n                status: status.id ? 'approved' : 'rejected',\r\n                visa_id: selectedVisa?.id\r\n            };\r\n\r\n            const promise = VisaServices.updateStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setStatusDialog(false);\r\n                getVisaRequestList();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const UpdatePaymentStatus = async (formData) => {\r\n        try {\r\n            let obj = {\r\n                payment_date: date,\r\n                payment_type: paymentType?.name,\r\n                visa_id: selectedVisa?.id,\r\n                amount: formData?.amount,\r\n                bank_id: selectedBank?.id,\r\n                description: formData?.description,\r\n\r\n\r\n            };\r\n\r\n            const promise = VisaServices.updatePaymentStatus(obj);\r\n            console.log(promise);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n\r\n            // Await the promise and then check its response\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                setPaymentDialog(false);\r\n                getVisaRequestList();\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const handleDate = (newDate) => {\r\n        try {\r\n            // eslint-disable-next-line eqeqeq\r\n            if (newDate == \"Invalid Date\") {\r\n                setDate(\"invalid\");\r\n                return;\r\n            }\r\n            setDate(new Date(newDate));\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const UpdateCSV = async () => {\r\n        setButtonDisabled(true)\r\n        handleUpload()\r\n    }\r\n\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = () => {\r\n        let data = {\r\n            search: getValues('search')\r\n        }\r\n        Debounce(() => getVisaRequestList(1, '', data));\r\n    }\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            const Page = page ? page : currentPage\r\n            const Limit = limit ? limit : pageLimit\r\n            const Filter = { ...filters, ...filter }\r\n            setCurrentPage(Page)\r\n            setPageLimit(Limit)\r\n            setFilters(Filter)\r\n            let params = {\r\n                page: Page,\r\n                limit: Limit,\r\n            }\r\n            params = { ...params, ...Filter }\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n\r\n            setCustomerQueue(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const handleSort = (key) => {\r\n        let data = {\r\n            sort_by: key,\r\n            sort_order: sort\r\n        }\r\n        Debounce(() => getVisaRequestList(1, '', data));\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        fetch(excelFile)\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n                console.log(blob);\r\n                const url = window.URL.createObjectURL(new Blob([blob]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', 'filename.csv'); // Adjust the filename as needed\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode.removeChild(link);\r\n            })\r\n            .catch(error => console.error('Error downloading Excel file:', error));\r\n    };\r\n    const handleDeleteDraft = async (item) => {\r\n        console.log(selectedDraft);\r\n\r\n        try {\r\n            let params = { id: selectedDraft?.id }\r\n\r\n\r\n            const { message } = await CustomerServices.handleDeleteDraft(params)\r\n\r\n            SuccessToaster(message);\r\n            getVisaRequestList()\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVisaRequestList()\r\n        getBanks()\r\n        getCustomerQueue()\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"Are You Sure?\"}\r\n                action={() => {\r\n                    setConfirmationDialog(false);\r\n                    handleDeleteDraft()\r\n\r\n                }}\r\n            />\r\n            <SimpleDialog\r\n                open={excelDialog}\r\n                onClose={() => { setExcelDialog(false); setExcel(false); setSelectedCustomer(null) }}\r\n                title={'Upload Excel'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit3(UpdateCSV)}>\r\n                    <Grid container spacing={2}>\r\n                        {/* <Grid item xs={12} sm={12} display={'flex'} justifyContent={'center'}>\r\n                            <PrimaryButton\r\n                                bgcolor={'#0076bf'}\r\n                                title=\"Download Template\"\r\n                                onClick={() => downloadExcel()}\r\n                                loading={loading}\r\n                            />\r\n                        </Grid> */}\r\n                        <Grid item xs={12} >\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Customer :'}\r\n\r\n                                options={customerQueue}\r\n                                selected={selectedCustomer}\r\n                                onSelect={(value) => {\r\n                                    setSelectedCustomer(value)\r\n\r\n                                    setValue3('customer', value)\r\n\r\n                                }}\r\n                                error={errors3?.customer?.message}\r\n                                register={register3(\"customer\", {\r\n                                    required: 'Please select customer account.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray, mt: 1 }}>Upload CSV :* </Typography>\r\n                            <UploadFileSingle\r\n                                Memo={true}\r\n                                accept={allowFilesType}\r\n                                error={errors3?.excel?.message}\r\n\r\n                                register={register3(\"excel\", {\r\n                                    required:\r\n\r\n                                        \"Please upload  excel   .\"\r\n                                    ,\r\n                                    onChange: async (e) => {\r\n                                        handleUploadDocument(e);\r\n\r\n                                        const file = e.target.files[0];\r\n                                        console.log(file);\r\n                                        setFilename(file?.name)\r\n                                        setExcel(file)\r\n\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            />\r\n                            {console.log(excel?.name, 'asdasdasdasd')}\r\n                            {excel?.name &&\r\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                                    <Box component={'img'} src={Images.uploadXls} width={'50px'}></Box>\r\n                                    <span style={{ color: 'blue' }}>{filename}</span> </Box>}\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton disabled={buttonDisabled} bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => { setExcelDialog(false); setExcel(false); setSelectedCustomer(null) }} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={statusDialog}\r\n                onClose={() => setStatusDialog(false)}\r\n                title={'Change Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Select Status :'}\r\n\r\n                                options={[{ id: false, name: 'rejected' }, { id: true, name: 'approved' }]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.status?.message}\r\n                                register={register(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setStatusDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <SimpleDialog\r\n                open={paymentDialog}\r\n                onClose={() => setPaymentDialog(false)}\r\n                title={'Change Payment Status?'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdatePaymentStatus)}>\r\n                    <Grid container >\r\n                        <Grid item xs={12} sm={12}>\r\n                            <DatePicker\r\n                                label={\"Payment Date :\"}\r\n                                value={date}\r\n\r\n                                size={'small'}\r\n                                error={errors2?.date?.message}\r\n                                register={register2(\"date\", {\r\n                                    required:\r\n\r\n                                        \"Please enter  date.\"\r\n\r\n                                })}\r\n                                onChange={(date) => {\r\n                                    handleDate(date)\r\n                                    setValue2('date', date)\r\n\r\n\r\n                                }\r\n\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Payment Type :'}\r\n\r\n                                options={[{ id: 'cash', name: 'Cash' }, { id: 'bank', name: 'Bank' }, { id: 'cheque', name: 'Cheque' }]}\r\n                                selected={paymentType}\r\n                                onSelect={(value) => {\r\n                                    setPaymentType(value)\r\n\r\n\r\n                                }}\r\n                                error={errors2?.status?.message}\r\n                                register={register2(\"status\", {\r\n                                    required: 'Please select status.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Bank :'}\r\n\r\n                                options={banks}\r\n                                selected={selectedBank}\r\n                                onSelect={(value) => {\r\n                                    setSelectedBank(value)\r\n\r\n\r\n                                }}\r\n                                error={errors2?.banks?.message}\r\n                                register={register2(\"bank\", {\r\n                                    required: 'Please select bank.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <LabelCustomInput label={'Amount : '} StartLabel={'AED'} register={register2(\"amount\", { required: \"Enter year inside rate\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <InputField\r\n                                label={\"Description :\"}\r\n                                size={'small'}\r\n                                rows={5}\r\n                                placeholder={\"Description\"}\r\n                                error={errors2?.description?.message}\r\n                                register={register2(\"description\", {\r\n                                    required:\r\n                                        false\r\n\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n                        <Grid container sx={{ justifyContent: 'center' }}>\r\n                            <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                                <PrimaryButton bgcolor={Colors.primary} title=\"Yes,Confirm\" type=\"submit\" />\r\n                                <PrimaryButton onClick={() => setPaymentDialog(false)} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Draft Visa Request</Typography>\r\n                {/* <Box sx={{ display: 'flex', gap: '5px' }} >\r\n\r\n\r\n                    {permissions?.excel && <PrimaryButton\r\n                        bgcolor={'#0076bf'}\r\n                        title=\"Import Via Excel\"\r\n                        onClick={() => setExcelDialog(true)}\r\n                        loading={loading}\r\n                    />}\r\n\r\n                </Box> */}\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            <Box >\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'Search'} placeholder={'Search'} register={register(\"search\")} />\r\n                    </Grid>\r\n                    {/* <Grid item xs={3} >\r\n                        <LabelCustomInput type={'text'} bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Customers'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'3px solid #FAFAFA'} StartLabel={'By Commission'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid>\r\n                    <Grid item xs={3} >\r\n                        <LabelCustomInput bgcolor={'#FAFAFA'} color={Colors.primary} border={'2px solid #FAFAFA'} StartLabel={'By Date'} placeholder={'Enter Name'}   register={register(\"payroll\")} />\r\n                    </Grid> */}\r\n                    <Grid item xs={6} display={'flex'} justifyContent={'flex-end'} gap={2} >\r\n                        <PrimaryButton\r\n                            bgcolor={\"#0076bf\"}\r\n                            textcolor={Colors.white}\r\n                            // border={`1px solid ${Colors.primary}`}\r\n                            title=\"Reset\"\r\n                            onClick={() => { setValue('search', ''); getVisaRequestList(1, '', null); }}\r\n                            loading={loading}\r\n                        />\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Search\"\r\n                            onClick={() => handleFilter()}\r\n                            loading={loading}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item md={11}>\r\n                    {visas && <Box>\r\n\r\n                        <Grid container mb={2} >\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                        {(\r\n                            visas && (\r\n                                <Fragment>\r\n                                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5} fileName='Import Customers' >\r\n\r\n                                        <TableContainer\r\n                                            component={Paper}\r\n                                            sx={{\r\n                                                maxHeight: 'calc(100vh - 200px)', mt: 5, backgroundColor: 'transparent', boxShadow: 'none !important', borderRadius: '0px !important'\r\n\r\n                                            }}\r\n\r\n                                        >\r\n                                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                                <TableHead>\r\n\r\n                                                    <Row>\r\n                                                        {tableHead.map((cell, index) => (\r\n                                                            <Cell style={{ textAlign: cell?.name == 'SR No.' ? 'center' : 'left', paddingRight: cell?.name == 'SR No.' ? '15px' : '50px' }} className=\"pdf-table\"\r\n                                                                key={index}\r\n\r\n                                                            >\r\n                                                                <Box sx={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                                                                    {cell?.name} {cell?.name == 'Date' && <>&nbsp;<span style={{ height: '20px', cursor: 'pointer' }}><Box component={'img'} onClick={() => { setSort(sort == 'asc' ? 'desc' : 'asc'); handleSort(cell?.key) }} src={Images.sortIcon} width={'18px'}></Box></span></>}\r\n                                                                </Box>\r\n                                                            </Cell>\r\n                                                        ))}\r\n                                                    </Row>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {visas?.map((item, index) => {\r\n\r\n                                                        return (\r\n                                                            <Row\r\n                                                                key={index}\r\n                                                                sx={{\r\n                                                                    border: '1px solid #EEEEEE !important',\r\n                                                                }}\r\n                                                            >\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.id}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {moment(item?.created_at).format(\"MM-DD-YYYY\")}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.customer?.name}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.candidates_count}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.total_visa_charges}\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    {item?.customer?.deposit_balance}\r\n\r\n\r\n                                                                </Cell>\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box component={'div'} sx={{ cursor: 'pointer' }} >\r\n                                                                        Draft\r\n                                                                    </Box>\r\n\r\n\r\n                                                                </Cell>\r\n\r\n                                                                <Cell style={{ textAlign: 'left' }} className=\"pdf-table\">\r\n                                                                    <Box sx={{ display: 'flex', gap: 2 }}>\r\n                                                                        <Box>\r\n                                                                            {permissions?.details && <Box component={'img'} src={Images.detailIcon} onClick={() => navigate(`/draft-detail/${item?.id}`)} width={'35px'}></Box>}\r\n\r\n                                                                            {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                                                        </Box>\r\n                                                                        <Box>\r\n                                                                            {permissions?.delete && <Box component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedDraft(item); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n\r\n                                                                            {/* <Box component={'img'} src={Images.deleteIcon} width={'35px'}></Box>  */}\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                </Cell>\r\n\r\n\r\n\r\n                                                            </Row>\r\n\r\n                                                        );\r\n                                                    })}\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </PDFExport>\r\n                                    {/* ========== Pagination ========== */}\r\n                                    <Pagination\r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageLimit}\r\n                                        onPageSizeChange={(size) => getVisaRequestList(1, size.target.value)}\r\n                                        tableCount={customerQueue?.length}\r\n                                        totalCount={totalCount}\r\n                                        onPageChange={(page) => getVisaRequestList(page, \"\")}\r\n                                    />\r\n\r\n                                </Fragment>\r\n                            )\r\n                        )}\r\n\r\n\r\n                        {loader && <CircleLoading />}\r\n\r\n\r\n                    </Box>}\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </Box>\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default DraftVisa;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","_errors3$customer","_errors3$excel","_errors$status","_errors2$date","_errors2$status","_errors2$banks","_errors2$description","allowFilesType","register","handleSubmit","getValues","setValue","formState","errors","useForm","register2","handleSubmit2","setValue2","getValues2","errors2","register3","handleSubmit3","setValue3","getValues3","errors3","navigate","useNavigate","dispatch","useDispatch","contentRef","useRef","statusDialog","setStatusDialog","useState","paymentDialog","setPaymentDialog","visas","setVisas","loader","setLoader","sort","setSort","user","userLogout","useAuth","customerQueue","setCustomerQueue","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","selectedVisa","setSelectedVisa","itemAmount","setItemAmount","status","setStatus","date","setDate","paymentType","setPaymentType","banks","setBanks","excelDialog","setExcelDialog","selectedBank","setSelectedBank","excel","setExcel","selectedCustomer","setSelectedCustomer","progress","setProgress","uploadedSize","setUploadedSize","file","setFile","filename","setFilename","fileDetail","setFileDetail","extension","setExtension","buttonDisabled","setButtonDisabled","confirmationDialog","setConfirmationDialog","selectedDraft","setSelectedDraft","filters","setFilters","permissions","setPermissions","loading","setLoading","getVisaRequestList","async","page","limit","filter","Page","Limit","Filter","params","is_draft","customer_id","user_type","data","VisaServices","rows","count","console","log","formatPermissionData","forEach","e","route","identifier","permitted","addPermission","error","showErrorToast","useEffect","SystemServices","getBanks","CustomerServices","getCustomerQueue","_jsxs","Box","sx","p","children","_jsx","ConfirmationDialog","open","onClose","message","action","id","handleDeleteDraft","SuccessToaster","SimpleDialog","title","component","onSubmit","docs","formData","FormData","append","maxSize","size","instance","post","routes","uploadCVSDraft","onUploadProgress","progressEvent","uploadedBytes","loaded","percentCompleted","Math","round","total","getFileSize","toast","success","_data$data","_data$data2","isUpload","nations","path","handleUpload","Grid","container","spacing","item","xs","SelectField","label","options","selected","onSelect","value","customer","required","Typography","Colors","gray","mt","UploadFileSingle","Memo","accept","onChange","inputElement","target","preventDefault","files","arr","name","type","split","includes","CleanTypes","handleUploadDocument","src","Images","uploadXls","style","sm","PrimaryButton","disabled","bgcolor","primary","onClick","obj","visa_id","promise","updateStatus","showPromiseToast","response","responseCode","payment_date","payment_type","amount","bank_id","description","updatePaymentStatus","DatePicker","newDate","Date","ErrorToaster","handleDate","LabelCustomInput","StartLabel","InputField","placeholder","mb","textcolor","white","handleFilter","search","Debounce","md","Fragment","PDFExport","ref","landscape","paperSize","margin","fileName","TableContainer","Paper","maxHeight","backgroundColor","boxShadow","borderRadius","Table","stickyHeader","minWidth","TableHead","key","map","cell","index","className","_Fragment","sort_by","sort_order","handleSort","sortIcon","TableBody","_item$customer","_item$customer2","moment","created_at","format","candidates_count","total_visa_charges","deposit_balance","details","detailIcon","delete","deleteIcon","Pagination","pageSize","onPageSizeChange","tableCount","length","onPageChange","CircleLoading"],"sourceRoot":""}