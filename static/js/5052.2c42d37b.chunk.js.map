{"version":3,"file":"static/js/5052.2c42d37b.chunk.js","mappings":"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","sources":["components/Dialog/ThankyouDialog.js","../node_modules/src/index.tsx","pages/Auth/VerifyOtp/index.js"],"sourcesContent":["import { CancelOutlined } from '@mui/icons-material';\r\nimport { Box, Dialog, IconButton, Typography } from '@mui/material';\r\nimport { FontFamily, Timer } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\n\r\nfunction ThankyouDialog({ open, onClose, message1, message2 }) {\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      sx={{ '& .MuiDialog-paper': { width: '25%', height: \"auto\", borderRadius: 2, py: { xs: 2, md: 4 }, px: { xs: 3, md: 6 } } }}\r\n    >\r\n      <IconButton onClick={() => onClose()} sx={{ position: 'absolute', right: 13, top: 13 }}>\r\n        <CancelOutlined />\r\n      </IconButton>\r\n      <Box sx={{ textAlign: 'center' }}>\r\n        <Timer />\r\n        <Typography variant=\"h3\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mt: 1, mb: 1.5 }}>\r\n          {message1}\r\n        </Typography>\r\n        <Typography variant=\"h6\" sx={{ color: Colors.smokeyGrey, fontFamily: FontFamily.NunitoRegular }}>\r\n          {message2}\r\n        </Typography>\r\n      </Box>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ThankyouDialog","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Box, Container, Grid, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport OTPInput from 'react-otp-input';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { FontFamily, VerifyPasswordIcon } from 'assets';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport { useAuth } from 'context/UseContext';\r\nimport AuthServices from 'services/Auth';\r\nimport Storage from 'utils/Storage';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNavigation, setPermission } from 'redux/slices/navigationDataSlice';\r\nimport { addChildRoutes, encryptData, getPermissionsRoutes } from 'utils';\r\nimport ThankyouDialog from 'components/Dialog/ThankyouDialog';\r\n\r\nconst useStyle = makeStyles({\r\n  otpBox: {\r\n    paddingTop: 48,\r\n    paddingBottom: 48,\r\n    paddingLeft: 40,\r\n    paddingRight: 40,\r\n    backgroundColor: Colors.white,\r\n    borderRadius: '16px',\r\n    boxShadow: ' 0px 8px 32px 0px #00000040'\r\n  },\r\n  subtitle: {\r\n    marginTop: 8,\r\n    color: Colors.smokeyGrey,\r\n    fontFamily: FontFamily.NunitoRegular,\r\n    textAlign: 'center'\r\n  }\r\n})\r\n\r\nconst OtpBox = ({ value, setValue }) => {\r\n  return (\r\n    <Box sx={{ my: 2 }}>\r\n      <OTPInput\r\n        value={value}\r\n        numInputs={4}\r\n        onChange={setValue}\r\n        inputStyle={{\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          fontSize: \"26px\",\r\n          backgroundColor: '#eaeaea',\r\n          color: Colors.textSecondary,\r\n          border: \"none\",\r\n          borderRadius: '8px',\r\n          outline: \"none\",\r\n        }}\r\n        focusStyle={{\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          fontSize: \"26px\",\r\n          outline: \"none\",\r\n          border: \"none\",\r\n          borderRadius: '8px',\r\n        }}\r\n        containerStyle={{ display: \"flex\", justifyContent: \"space-evenly\" }}\r\n        renderInput={(props) => <input {...props} />}\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nfunction VerifyOtp() {\r\n\r\n  const classes = useStyle();\r\n  const { state } = useLocation();\r\n\r\n  const navigate = useNavigate();\r\n  if (!state) {\r\n    navigate('/login')\r\n  }\r\n  const { userLogin } = useAuth();\r\n  const { setStorageItem } = Storage();\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false);\r\n  const [showButton, setShowButton] = useState(false);\r\n\r\n  // *For Dialog Box\r\n  const [thankyouDialog, setThankyouDialog] = useState(false);\r\n\r\n  // *For OTP Value\r\n  const [numberOtp, setNumberOtp] = useState('');\r\n  const [emailOtp, setEmailOtp] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  // *For Resend OTP\r\n  const [resendOtpTimer, setResendOtpTimer] = useState(true);\r\n  const [mins, setMins] = useState();\r\n  const [sec, setSec] = useState();\r\n\r\n  // *For Otp Timer\r\n  const otpTimer = () => {\r\n    try {\r\n      const duration = 60 * 2 // *Set OTP Time Duration\r\n      var timer = duration, minutes, seconds;\r\n      var timeInterval = setInterval(function () {\r\n        minutes = parseInt(timer / 60, 10);\r\n        seconds = parseInt(timer % 60, 10);\r\n\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n        setMins(minutes)\r\n        setSec(seconds)\r\n        if (--timer < 0) {\r\n          timer = duration;\r\n          setResendOtpTimer(false)\r\n          clearInterval(timeInterval)\r\n        }\r\n      }, 1000);\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Reset OTP Value\r\n  const resetOtpValue = () => {\r\n    setNumberOtp('')\r\n    setEmailOtp('')\r\n  }\r\n\r\n  // *For Verify OTP\r\n  const verifyOtp = async () => {\r\n    setLoading(true)\r\n    try {\r\n      if (state?.screen === 'login') {\r\n        let obj = {\r\n          email: state?.email,\r\n          password: state?.password,\r\n          phone_otp: numberOtp,\r\n          email_otp: emailOtp,\r\n        }\r\n        const { data } = await AuthServices.login(obj)\r\n        let loginObj = {\r\n          email: state?.email,\r\n          password: state?.password,\r\n          otp_token: data.otp_token\r\n        }\r\n        setTimeout(async () => {\r\n          const result = await AuthServices.login(loginObj)\r\n          if (result?.data?.password_change) {\r\n            navigate('/new-password', { state: { token: data?.otp_token } })\r\n            return\r\n          }\r\n          let obj = result?.data\r\n          obj.token = encryptData('noToken')\r\n          obj.fcm_token = localStorage.getItem('fcmToken')\r\n          userLogin(obj)\r\n          setStorageItem('journey', result?.data?.journey)\r\n          dispatch(addNavigation(addChildRoutes(result?.data?.modules)))\r\n          dispatch(setPermission(getPermissionsRoutes(result?.data?.modules)))\r\n        }, 1000);\r\n      }\r\n      else if( state?.screen=='link'){\r\n        let obj = {\r\n          email: state?.email,\r\n          uae_phone: state?.uae_phone,\r\n          phone_otp: numberOtp,\r\n          email_otp: emailOtp,\r\n          business_region:state?.business_region\r\n        }\r\n        const { data,responseCode } = await AuthServices.Linking(obj)\r\n\r\n        let linkObj = {\r\n          ...state,\r\n          otp_token: data.otp_token\r\n        }\r\n        const result = await AuthServices.Linking(linkObj)\r\n        \r\n        if(result?.responseCode==200){\r\n          SuccessToaster(result?.message)\r\n          navigate('/login')\r\n        }\r\n        else{\r\n          ErrorToaster('Try Again Later')\r\n          navigate('/login')\r\n        }\r\n\r\n\r\n      }\r\n      else {\r\n        let obj = {\r\n          email: state?.email,\r\n          uae_phone: state?.uae_phone,\r\n          phone_otp: numberOtp,\r\n          email_otp: emailOtp,\r\n        }\r\n        if (state?.uae_phone) {\r\n          const { data } = await AuthServices.register(obj)\r\n          let registerObj = {\r\n            ...state,\r\n            otp_token: data.otp_token\r\n          }\r\n          setTimeout(async () => {\r\n            const result = await AuthServices.register(registerObj)\r\n            if (result?.data?.customer_type === 'export') {\r\n              setThankyouDialog(true)\r\n            } else {\r\n              let obj = result?.data\r\n              obj.token = encryptData('noToken')\r\n              obj.fcm_token = localStorage.getItem('fcmToken')\r\n              userLogin(obj)\r\n              setStorageItem('journey', result.data?.journey)\r\n              dispatch(addNavigation(addChildRoutes(data?.modules)))\r\n              dispatch(setPermission(getPermissionsRoutes(data?.modules)))\r\n            }\r\n          }, 2000);\r\n        } else {\r\n          const { data } = await AuthServices.forgetPassword(obj)\r\n          navigate(`/new-password?otp_token=${data?.otp_token}`, { state: state })\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError(true)\r\n      resetOtpValue()\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // *For Resend OTP\r\n  const resendOtp = async () => {\r\n    try {\r\n      let otpObj = {\r\n        uae_phone: state?.uae_phone,\r\n        email: state?.email\r\n      }\r\n      if (state?.uae_phone) {\r\n        const { message } = await AuthServices.register(otpObj)\r\n        SuccessToaster(message)\r\n      } else {\r\n        const { message } = await AuthServices.forgetPassword(otpObj)\r\n        SuccessToaster(message)\r\n      }\r\n      otpTimer()\r\n      setResendOtpTimer(true)\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    otpTimer()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(emailOtp?.length );\r\n    \r\n    const inputPhoneLength = numberOtp?.length === 4 ? true : false\r\n    const inputEmailLength = emailOtp?.length === 4 ? true : false\r\n    // if (state?.emailField && inputEmailLength) {\r\n    //   setShowButton(true)\r\n    // } else {\r\n    //   setShowButton(false)\r\n    // }\r\n    if (inputEmailLength) {\r\n      setShowButton(true)\r\n    } else {\r\n      setShowButton(false)\r\n    }\r\n  }, [numberOtp, emailOtp]);\r\n\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      {state && <Box sx={{ py: 9, bgcolor: Colors.primary }}>\r\n\r\n        {/* ========== Thank You Dialog  ========== */}\r\n        <ThankyouDialog\r\n          open={thankyouDialog}\r\n          onClose={() => { setThankyouDialog(false); navigate('/') }}\r\n          message1={'Thank you for registration.'}\r\n          message2={'Please proceed with Galaxy Customer Service to start the export procedure.'}\r\n        />\r\n\r\n        <Container>\r\n          <Grid container spacing={1} justifyContent={'space-between'}>\r\n            <Grid item md={7} sx={{ display: { xs: 'none', md: 'block' } }}>\r\n              <VerifyPasswordIcon />\r\n            </Grid>\r\n            <Grid item xs={12} md={3.5}>\r\n              <Box className={classes.otpBox} >\r\n                <Typography variant=\"h4\" sx={{ color: Colors.charcoalGrey, textAlign: 'center' }}>\r\n                  OTP Verification\r\n                </Typography>\r\n                {state?.phoneField &&\r\n                  <Fragment>\r\n                    <Typography variant=\"body2\" className={classes.subtitle}>\r\n                      OTP has been sent to your\r\n                      preferred mobile number\r\n                    </Typography>\r\n                    <OtpBox value={numberOtp} setValue={(val) => setNumberOtp(val)} />\r\n                    <Box sx={{ mt: 3 }} />\r\n                  </Fragment>\r\n                }\r\n                {state?.emailField &&\r\n                  <Fragment>\r\n                    <Typography variant=\"body2\" className={classes.subtitle}>\r\n                      OTP has been sent to your\r\n                      preferred email\r\n                    </Typography>\r\n                    <OtpBox value={emailOtp} setValue={(val) => setEmailOtp(val)} />\r\n                  </Fragment>\r\n                }\r\n                {error &&\r\n                  <Typography color=\"error\" sx={{ fontSize: 12, textAlign: 'center', my: 2 }} >You have entered invalid OTP code</Typography>\r\n                }\r\n                <Box sx={{ mt: 1.5, mb: 2 }}>\r\n                  {resendOtpTimer ? (\r\n                    <Typography variant=\"body1\" sx={{ fontWeight: 700, color: Colors.primary, fontFamily: FontFamily.NunitoRegular, textAlign: 'center' }}>\r\n                      {mins}:{sec}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <Typography variant=\"body2\" sx={{ color: Colors.smokeyGrey, fontFamily: FontFamily.NunitoRegular, textAlign: 'center' }}>\r\n                        Don’t received OTP code?\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" onClick={() => resendOtp()} sx={{ cursor: 'pointer', color: Colors.primary, fontFamily: FontFamily.NunitoRegular, textAlign: 'center' }}>\r\n                        Resend Code\r\n                      </Typography>\r\n                    </Fragment>\r\n                  )}\r\n                </Box>\r\n                {showButton &&\r\n                  <Box sx={{ textAlign: 'center' }}>\r\n                    <PrimaryButton\r\n                      title=\"Verify\"\r\n                      loading={loading}\r\n                      style={{ fontSize: 14, borderRadius: 26, width: 160 }}\r\n                      onClick={() => verifyOtp()}\r\n                    />\r\n                  </Box>\r\n                }\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>}\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default VerifyOtp;"],"names":["_ref","open","onClose","message1","message2","_jsxs","Dialog","sx","width","height","borderRadius","py","xs","md","px","children","_jsx","IconButton","onClick","position","right","top","CancelOutlined","Box","textAlign","Timer","Typography","variant","color","Colors","charcoalGrey","fontFamily","FontFamily","NunitoRegular","mt","mb","smokeyGrey","isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","type","inputMode","onInput","useStyle","makeStyles","otpBox","paddingTop","paddingBottom","paddingLeft","paddingRight","backgroundColor","white","boxShadow","subtitle","marginTop","OtpBox","setValue","my","fontSize","textSecondary","border","outline","focusStyle","justifyContent","props","classes","state","useLocation","navigate","useNavigate","userLogin","useAuth","setStorageItem","Storage","dispatch","useDispatch","loading","setLoading","useState","showButton","setShowButton","thankyouDialog","setThankyouDialog","numberOtp","setNumberOtp","emailOtp","setEmailOtp","setError","resendOtpTimer","setResendOtpTimer","mins","setMins","sec","setSec","otpTimer","duration","minutes","seconds","timer","timeInterval","setInterval","parseInt","clearInterval","ErrorToaster","verifyOtp","async","screen","email","password","phone_otp","email_otp","AuthServices","login","loginObj","otp_token","setTimeout","_result$data","_result$data2","_result$data3","_result$data4","result","password_change","token","encryptData","fcm_token","localStorage","getItem","journey","addNavigation","addChildRoutes","modules","setPermission","getPermissionsRoutes","uae_phone","business_region","responseCode","Linking","linkObj","SuccessToaster","message","register","registerObj","_result$data5","customer_type","_result$data6","forgetPassword","useEffect","log","inputEmailLength","Fragment","bgcolor","primary","ThankyouDialog","Container","Grid","container","spacing","item","VerifyPasswordIcon","phoneField","val","emailField","fontWeight","otpObj","resendOtp","cursor","PrimaryButton","title"],"sourceRoot":""}