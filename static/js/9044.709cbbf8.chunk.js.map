{"version":3,"file":"static/js/9044.709cbbf8.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/Add.js","pages/Dashboard/SalesReciept/UpdatePreSale.js"],"sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Checkbox,\r\n    Container,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Grid,\r\n    IconButton,\r\n    InputLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Table,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n    TableBody,\r\n    TableHead,\r\n    TextField,\r\n    Paper,\r\n} from \"@mui/material\";\r\nimport RegisterContainer from \"container/Register\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport MobileStepper from \"@mui/material/MobileStepper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport { PrimaryButton } from \"components/Buttons\";\r\nimport Colors from \"assets/Style/Colors\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport UploadFile from \"components/UploadFile\";\r\nimport InputField from \"components/Input\";\r\nimport DatePicker from \"components/DatePicker\";\r\nimport { ErrorToaster } from \"components/Toaster\";\r\nimport { FormControl } from \"@mui/base\";\r\nimport LabelCustomInput from \"components/Input/LabelCustomInput\";\r\nimport SelectField from \"components/Select\";\r\nimport {\r\n    CleanTypes,\r\n    Debounce,\r\n    Debounce2,\r\n    getFileSize,\r\n    handleDownload,\r\n} from \"utils\";\r\nimport instance from \"config/axios\";\r\nimport routes from \"services/System/routes\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CustomerServices from \"services/Customer\";\r\nimport CustomerService from \"../DashboardPages/CustomerService\";\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\";\r\nimport moment from \"moment\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport SystemServices from \"services/System\";\r\nimport UploadFileSingle from \"components/UploadFileSingle\";\r\nimport { Images } from \"assets\";\r\nimport { useCallbackPrompt } from \"hooks/useCallBackPrompt\";\r\nimport { addMonths } from \"date-fns\";\r\nimport { useAuth } from \"context/UseContext\";\r\nimport DoDisturbIcon from \"@mui/icons-material/DoDisturb\";\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from \"services/Finance\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\n\r\n// import { TableBody, TableHead } from \"mui-datatables\";\r\n\r\nfunction UpdatePreSale() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth();\r\n    const navigate = useNavigate();\r\n    const [formChange, setFormChange] = useState(false);\r\n    const [submit, setSubmit] = useState(false);\r\n    const [excludeFromSales, setExcludeFromSales] = useState(\"no\");\r\n    const [excludeFromPurchase, setExcludeFromPurchase] = useState(\"no\");\r\n    const [total, setTotal] = useState(0);\r\n    const [subTotal, setSubTotal] = useState(0);\r\n    const [rows, setRows] = useState([]);\r\n    const [selectedRow, setSelectedRow] = useState(null)\r\n    const [editState, setEditState] = useState(false)\r\n\r\n    console.log(rows, \"data\")\r\n    const [items, setItems] = useState([\r\n        {\r\n            itemCode: \"\",\r\n            itemDescription: \"TASHEEL AUTO 19\",\r\n            totalCharge: 17.1,\r\n            mbNo: \"\",\r\n            applicationId: \"\",\r\n            total: 17.1,\r\n        },\r\n    ]);\r\n\r\n    // const addItem = () => {\r\n    //   const newItem = {\r\n    //     itemCode: \"\",\r\n    //     itemDescription: \"\",\r\n    //     totalCharge: 0,\r\n    //     mbNo: \"\",\r\n    //     applicationId: \"\",\r\n    //     total: 0,\r\n    //   };\r\n    //   setItems([...items, newItem]);\r\n    // };\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        setValue,\r\n        watch,\r\n        reset,\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch: watch1,\r\n        formState: { errors: errors1 },\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n\r\n    // Watch for changes in the fee-related fields\r\n    const govtFee = watch('govt_fee', 0);\r\n    const centerFee = watch('center_fee', 0);\r\n    const bankCharges = watch('bank_charge', 0);\r\n    const qty = watch('quantity', 1);\r\n    useEffect(() => {\r\n        const feesTotal = (parseFloat(govtFee) || 0) + (parseFloat(centerFee) || 0) + (parseFloat(bankCharges) || 0);\r\n        const finalTotal = feesTotal * (parseFloat(qty) || 1);\r\n        setValue(\"total\", parseFloat(finalTotal).toFixed(2));\r\n    }, [govtFee, centerFee, bankCharges, qty]);\r\n\r\n    const addItem = (data) => {\r\n        console.log(serviceItem);\r\n\r\n        // Create a new row with the serviceItem included\r\n        const newRow = { ...data, service: serviceItem, service_id: serviceItem?.id };\r\n\r\n        setRows((prevRows) => {\r\n            const updatedRows = [...prevRows, newRow];\r\n            const newSubTotal = updatedRows.reduce((sum, row) => parseFloat(sum) + parseFloat(row.total), 0);\r\n            setSubTotal(newSubTotal);\r\n            return updatedRows;\r\n        });\r\n\r\n        reset();\r\n        setServiceItem(\"\");\r\n    };\r\n\r\n\r\n    const updateItem = (data) => {\r\n        console.log(\"Raw data passed to updateItem:\", data);\r\n        console.log(\"Current serviceItem:\", serviceItem);\r\n\r\n        if (!data?.id) {\r\n            console.warn(\"No valid ID found in data. Skipping update.\");\r\n            return;\r\n        }\r\n\r\n        const updatedItem = { ...data, service: serviceItem, service_id: serviceItem?.id };\r\n        console.log(\"Updated item to be saved:\", updatedItem);\r\n\r\n        setRows(prevItems => {\r\n            console.log(\"Previous rows:\", prevItems);\r\n\r\n            const updatedRows = prevItems.map(item => {\r\n                if (item.id === data.id) {\r\n                    console.log(`Item with ID ${item.id} matched. Replacing with updated item.`);\r\n                    return updatedItem;\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n\r\n            console.log(\"Rows after update:\", updatedRows);\r\n\r\n            // 👇 Calculate total after updating rows\r\n            const total = updatedRows.reduce((sum, item) => {\r\n                // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n                return parseFloat(sum) + (parseFloat(item.total) || 0);\r\n            }, 0);\r\n\r\n            console.log(\"New total after update:\", total);\r\n\r\n            // You can update a state for total if you have one:\r\n            setSubTotal(total); // <-- Make sure to declare this with useState\r\n\r\n            return updatedRows;\r\n        });\r\n\r\n        console.log(\"Resetting form and states...\");\r\n        reset();\r\n        setServiceItem(null);\r\n        setEditState(false);\r\n    };\r\n\r\n\r\n    const getInvoiceNumber = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            const { data } = await CustomerServices.getInvoiceNumber();\r\n\r\n            console.log(data);\r\n            setValue1(\"invoice_no\", `AAD/${data?.next_invoice_number}`);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === \"object\" && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n    const allowFilesType = [\r\n        \"image/png\",\r\n        \"image/jpg\",\r\n        \"image/jpeg\",\r\n        \"application/pdf\",\r\n        \"application/vnd.ms-excel\",\r\n        \"application/msword\",\r\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    ];\r\n    const allowFilesType2 = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\r\n    const [guarantors, setGuarantors] = useState([]);\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n    const { id } = useParams()\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n    const [selectedDue, setSelectedDue] = useState({\r\n        id: \"Instant\",\r\n        name: \"Instant\",\r\n    });\r\n    const [passport, setPassport] = useState();\r\n    const [allocation, setAllocation] = useState(false);\r\n    const [depositError, setDepositError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [emailVerify, setEmailVerify] = useState(false);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n        monthlyVisaServiceCharges: false,\r\n        vipMedical: false,\r\n        extraTyping: true,\r\n    });\r\n\r\n    const [center, setCenter] = useState(null);\r\n    const [status, setStatus] = useState(null);\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState();\r\n    const [step1FormData, setStep1FormData] = useState();\r\n    const [selectedType, setSelectedType] = useState(null);\r\n    const [date, setDate] = useState(null);\r\n    const [balanceType, setBalanceType] = useState(null);\r\n    const [imageURL, setImageURL] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n    const [hovered, setHovered] = useState(false);\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [salesAccount, setSalesAccount] = useState(null);\r\n    const [inventoryAccount, setInventoryAccount] = useState(null);\r\n    const [cogsAccount, setCogsAccount] = useState(null);\r\n    const [adjustmentAccount, setAdjustmentAccount] = useState(null);\r\n    const [assemblyAccount, setAssemblyAccount] = useState(null);\r\n    const [itemType, setItemType] = useState(null);\r\n    const [unit, setUnit] = useState(null);\r\n    const [taxes, setTaxes] = useState([]);\r\n    const [tax, setTax] = useState(null);\r\n    const [category, setCategory] = useState(null);\r\n    const [categories, setCategories] = useState(null);\r\n    const [governmentAccount, setGovernmnentAccount] = useState(null);\r\n    const [description, setDescription] = useState(null);\r\n    const [ownGovBank, setOwnGovBank] = useState(null);\r\n    const [selectedCostCenter, setSelectedCostCenter] = useState(null)\r\n    const [services, setServices] = useState(null);\r\n    const [serviceItem, setServiceItem] = useState(null);\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [detail, setDetail] = useState(null)\r\n    //documents array\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const submitForm1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                id: detail?.id,\r\n                token_number: formData?.token,\r\n                token_date: date,\r\n                invoice_prefix: \"AAD\",\r\n                trn: formData?.trn,\r\n                case_no: formData?.caseno,\r\n                customer_address: formData?.address,\r\n                cost_center: formData?.cost_center,\r\n                customer_name: formData?.display_customer,\r\n                customer_id: detail?.customer_id,\r\n                reception_id: detail?.reception_id,\r\n                customer_mobile: formData?.mobile,\r\n                customer_email: formData?.email,\r\n                ref: formData?.ref,\r\n                total_amount: subTotal,\r\n\r\n                items: rows\r\n            };\r\n            console.log(formData, \"formData\");\r\n            const promise = CustomerServices.UpdateSaleReceipt(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/pre-sales\");\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n    // *For Get Account\r\n    const getReceptionDetail = async () => {\r\n        try {\r\n            let params = {\r\n                token_number: getValues1(\"token\"),\r\n            };\r\n            const { data } = await CustomerServices.getReceptionDetail(params);\r\n            console.log(data, \"dataaa\");\r\n            setDetail(data?.token)\r\n            setValue1(\"customer\", data?.token?.customer_name);\r\n            setValue1(\"invoice_date\", moment().toDate());\r\n            setValue1(\"mobile\", data?.token?.mobile);\r\n            setValue1(\"ref\", data?.token?.reference);\r\n            setValue1(\"display_customer\", data?.token?.customer_name);\r\n            setValue1(\"email\", data?.token?.customer_email);\r\n            setValue1(\"address\", data?.token?.customer_address);\r\n            setValue1(\"trn\", data?.token?.trn);\r\n            setValue1(\"cost_center\", data?.token?.cost_center);\r\n            setValue1(\"mobileValue\", data?.token?.mobile);\r\n\r\n            setAccounts(data?.accounts?.rows);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    const getServiceItem = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await CustomerServices.getServiceItem(params);\r\n\r\n            setServices(data?.rows);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const handleServiceSelect = async (value) => {\r\n        console.log(value, \"idididid\");\r\n        setServiceItem(value);\r\n        if (value) {\r\n            // setLoader(true)\r\n            try {\r\n                let params = {\r\n                    service_id: value?.id,\r\n                };\r\n\r\n                const { data } = await CustomerServices.DetailServiceItem(params);\r\n                setValue(\"id\", data?.service?.id);\r\n                setValue(\"govt_fee\", data?.service?.bank_service_charge);\r\n                setValue(\"center_fee\", data?.service?.center_fee);\r\n                setValue(\"bank_charge\", data?.service?.bank_service_charge);\r\n                // setValue(\"transaction_id\", data?.transaction_id);\r\n                setServiceItem(data?.service);\r\n                setValue(\"quantity\", 1);\r\n            } catch (error) {\r\n                ErrorToaster(error);\r\n            } finally {\r\n                // setLoader(false)\r\n            }\r\n        }\r\n        else {\r\n            setValue(\"id\", '');\r\n            setValue(\"govt_fee\", '');\r\n            setValue(\"center_fee\", '');\r\n            setValue(\"bank_charge\", '');\r\n            setValue(\"transaction_id\", '');\r\n            setValue(\"application_id\", '');\r\n            setValue(\"ref_no\", '');\r\n            setServiceItem(null);\r\n            setValue(\"quantity\", '');\r\n        }\r\n\r\n    };\r\n\r\n    const getAccounts = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await FinanceServices.getAccounts(params);\r\n\r\n\r\n            setAccounts(data?.accounts?.rows);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const getTax = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await FinanceServices.getTax(params);\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setTaxes(data?.tax);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n    const getCategories = async () => {\r\n        // setLoader(true)\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n            };\r\n\r\n            const { data } = await CustomerServices.getCategoryList(params);\r\n\r\n            setCategories(data?.categories);\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAccounts();\r\n        getTax();\r\n        getCategories();\r\n        getServiceItem();\r\n        setSelectedCustomer({ id: \"walkin\", name: \"Walk-in Customer\" })\r\n        setValue1(\"customer\", { id: \"walkin\", name: \"Walk-in Customer\" })\r\n        setValue1(\"cost_center\", { id: \"Al-ADHEED\", name: \"Al-ADHEED\" })\r\n    }, []);\r\n    const getData = async () => {\r\n        try {\r\n            let params = {\r\n                id: id\r\n            };\r\n\r\n            const { data } = await CustomerServices.getPreSaleDetail(params);\r\n            setDetail(data?.receipt)\r\n            console.log(data?.receipt?.sale_receipt_items);\r\n            setValue1('token', data?.receipt?.token_number)\r\n            setValue1(\"mobileValue\", data?.receipt?.customer_mobile);\r\n            setRows(data?.receipt?.sale_receipt_items)\r\n            setSubTotal(data?.receipt?.total_amount)\r\n            setDate(new Date(data?.receipt?.invoice_date))\r\n            setValue1('display_customer', data?.receipt?.customer_name)\r\n            setSelectedCostCenter({ id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n            setValue1('cost_center', { id: data?.receipt?.cost_center, name: data?.receipt?.cost_center })\r\n            setValue1('mobile', data?.receipt?.customer_mobile)\r\n            setValue1('trn', data?.receipt?.trn)\r\n            setValue1('email', data?.receipt?.customer_email)\r\n            setValue1('caseno', data?.receipt?.case_no)\r\n            setValue1('ref', data?.receipt?.ref)\r\n            setValue1('address', data?.receipt?.customer_address)\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n        getInvoiceNumber()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}></Box>\r\n            <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n                {\r\n                    <>\r\n                        <Box component={\"form\"} onSubmit={handleSubmit1(submitForm1)}>\r\n                            <Box\r\n                                sx={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"10px\",\r\n                                    p: 3,\r\n                                    alignItems: \"flex-end\",\r\n                                }}\r\n                            >\r\n                                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n                                    Update Sales Receipt\r\n                                </Typography>\r\n                            </Box>\r\n\r\n                            <Box sx={{ p: 3 }}>\r\n                                <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                                    <Grid item xs={12}  >\r\n                                        <Grid container gap={2}>\r\n                                            <Grid item md={3} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Token\"\r\n                                                    size=\"small\"\r\n                                                    disabled={true}\r\n                                                    placeholder=\"Enter Token\"\r\n                                                    register={register1(\"token\")}\r\n\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item md={3} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label={\"Mobile *:\"}\r\n                                                    size={'small'}\r\n                                                    type={'number'}\r\n                                                    disabled={fieldsDisabled}\r\n                                                    placeholder={\"Mobile\"}\r\n                                                    register={register1(\"mobileValue\")}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid\r\n                                        item\r\n                                        md={5.5}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    disabled={true}\r\n                                                    label=\"Invoice No\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"TSL/83540\"\r\n                                                    register={register1(\"invoice_no\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={5.7}>\r\n                                                <DatePicker\r\n                                                    label={\"Invoice Date :*\"}\r\n                                                    value={date}\r\n                                                    size={'small'}\r\n                                                    disabled={true}\r\n                                                    error={errors1?.date?.message}\r\n                                                    register={register1(\"date\", {\r\n                                                        required:\r\n                                                            date ? false :\r\n                                                                \"please enter  date.\"\r\n\r\n                                                    })}\r\n                                                    onChange={(date) => {\r\n\r\n                                                        setValue1('date', date)\r\n                                                        setDate(new Date(date));\r\n\r\n                                                    }\r\n\r\n                                                    }\r\n                                                /></Grid>\r\n\r\n                                            <Grid item xs={5.7} >\r\n                                                <SelectField\r\n                                                    size={'small'}\r\n                                                    label={'Customer *:'}\r\n                                                    disabled={true}\r\n                                                    options={[{ id: \"walkin\", name: \"Walk-in Customer\" }]}\r\n                                                    selected={selectedCustomer}\r\n                                                    onSelect={(value) => {\r\n                                                        setSelectedCustomer(value)\r\n\r\n\r\n                                                    }}\r\n                                                    error={errors1?.customer?.message}\r\n                                                    register={register1(\"customer\", {\r\n                                                        required: false,\r\n                                                    })}\r\n                                                />\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid\r\n                                        item\r\n                                        md={5.5}\r\n                                        sm={12}\r\n                                        xs={12}\r\n                                        sx={{\r\n                                            border: \"2px solid black\",\r\n                                            p: 2,\r\n                                            borderRadius: \"15px\",\r\n                                            mt: { md: 0, sm: 2, xs: 2 },\r\n                                        }}\r\n                                    >\r\n                                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Display Customer\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Walk-in Customer\"\r\n                                                    register={register1(\"display_customer\", {\r\n                                                        required: 'please enter display name.'\r\n                                                    })}\r\n                                                    error={errors1?.display_customer?.message}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Mobile\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Mobile No\"\r\n\r\n                                                    register={register1(\"mobile\", {\r\n                                                        required: 'please enter mobile .',\r\n                                                        pattern: {\r\n                                                            value: /^05[0-9]{8}$/,\r\n                                                            message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                                          },\r\n                                                    })}\r\n                                                    error={errors1?.mobile?.message}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Email\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Email\"\r\n\r\n                                                    register={register1(\"email\", {\r\n                                                        required: false\r\n                                                    })}\r\n                                                    error={errors1?.email?.message}\r\n                                                />\r\n                                            </Grid>\r\n                                            {/* \r\n                      <Grid item md={5.7} sm={12} xs={12}>\r\n                        <InputField\r\n                          label=\"TRN\"\r\n                          size=\"small\"\r\n                          placeholder=\"TRN\"\r\n\r\n\r\n                          register={register1(\"trn\", {\r\n                            required: 'please enter trn .'\r\n                          })}\r\n                          error={errors1?.trn?.message}\r\n                        />\r\n                      </Grid> */}\r\n\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Ref\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Reference\"\r\n                                                    register={register1(\"ref\")}\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <SelectField\r\n                                                    label=\"Cost Center\"\r\n                                                    size=\"small\"\r\n\r\n                                                    options={[{ id: \"Al-ADHEED\", name: \"Al-ADHEED\" }]}\r\n                                                    selected={selectedCostCenter}\r\n                                                    onSelect={(value) => setSelectedCostCenter(value)}\r\n                                                    register={register1(\"cost_center\",\r\n                                                        {\r\n                                                            required: false\r\n                                                        }\r\n                                                    )}\r\n\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"TRN\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"TRN\"\r\n\r\n                                                    register={register1(\"trn\", {\r\n                                                        required: false\r\n                                                    })}\r\n\r\n                                                />\r\n                                            </Grid>\r\n                                            {/* <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Case No\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Case No\"\r\n\r\n                                                    register={register1(\"caseno\", {\r\n                                                        required: false\r\n                                                    })}\r\n\r\n                                                />\r\n                                            </Grid> */}\r\n\r\n                                            <Grid item md={5.7} sm={12} xs={12}>\r\n                                                <InputField\r\n                                                    label=\"Address\"\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Address\"\r\n                                                    multiline\r\n                                                    rows={2}\r\n\r\n                                                    register={register1(\"address\", {\r\n                                                        required: false\r\n                                                    })}\r\n                                                    error={errors1?.address?.message}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    {/* </Grid> */}\r\n                                    <Grid item xs={12} display={'flex'} justifyContent={'flex-end'}>\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            disabled={rows?.length == 0}\r\n                                            variant=\"contained\"\r\n                                            sx={{\r\n                                                textTransform: 'capitalize',\r\n                                                backgroundColor: \"#bd9b4a\",\r\n                                                \":hover\": {\r\n                                                    backgroundColor: \"rgb(189 155 74)\",\r\n                                                },\r\n                                            }}\r\n                                        >\r\n                                            Update\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Box>\r\n\r\n\r\n                        <form onSubmit={handleSubmit(!editState ? addItem : updateItem)}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Item Code</TableCell>\r\n                                            <TableCell sx={{ width: \"400px\" }}>Service</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Qty</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Govt fee</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Center fee</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Bank Charge</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Trsn Id</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>App/Case ID</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Ref No</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Total</TableCell>\r\n                                            <TableCell sx={{ width: \"150px\" }}>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {<TableRow>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    disabled={true}\r\n                                                    placeholder=\"Item code\"\r\n                                                    register={register(\"id\", { required: \"Item code is required\" })}\r\n                                                />\r\n                                                {errors.id && <span>{errors.id.message}</span>}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <SelectField\r\n                                                    size=\"small\"\r\n                                                    options={services}\r\n                                                    disabled={detail?.is_paid || editState}\r\n                                                    selected={serviceItem}\r\n                                                    onSelect={handleServiceSelect}\r\n                                                    //  error={errors?.service?.message}\r\n                                                    register={register(\"service\", {\r\n                                                        required: \"Please select a service.\",\r\n                                                    })}\r\n                                                />\r\n                                                {errors.service && <span style={{ color: \"red\" }}>{errors.service.message}</span>}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    disabled={detail?.is_paid}\r\n                                                    placeholder=\"Quantity\"\r\n                                                    type=\"number\"\r\n                                                    register={register(\"quantity\", { required: \"Quantity is required\" })}\r\n                                                />\r\n                                                {errors.quantity && <span style={{ color: \"red\" }}>{errors.quantity.message}</span>}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    disabled={detail?.is_paid}\r\n                                                    placeholder=\"Govt fee\"\r\n\r\n                                                    register={register(\"govt_fee\", { required: \"Govt fee is required\" })}\r\n                                                />\r\n                                                {errors.govt_fee && <span style={{ color: \"red\" }}>{errors.govt_fee.message}</span>}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    disabled={detail?.is_paid}\r\n                                                    placeholder=\"Center Fee\"\r\n\r\n                                                    register={register(\"center_fee\", { required: \"Center fee is required\" })}\r\n                                                />\r\n                                                {errors.center_fee && <span style={{ color: \"red\" }}>{errors.center_fee.message}</span>}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    disabled={detail?.is_paid}\r\n                                                    placeholder=\"Bank Charges\"\r\n\r\n                                                    register={register(\"bank_charge\", { required: \"Bank charges are required\" })}\r\n\r\n                                                />\r\n                                                {errors.bank_charge && <span style={{ color: \"red\" }}>{errors.bank_charge.message}</span>}\r\n\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Transaction Id\"\r\n\r\n                                                    register={register(\"transaction_id\", { required: false })}\r\n\r\n                                                />\r\n                                                {errors.transaction_id && <span style={{ color: \"red\" }}>{errors.transaction_id.message}</span>}\r\n\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"Application Id\"\r\n\r\n                                                    register={register(\"application_id\", {\r\n                                                        required: 'application id is required',\r\n                                                    })}\r\n                                                />\r\n                                                {errors.application_id && (\r\n                                                    <span style={{ color: \"red\" }}>\r\n                                                        {errors.application_id.message}\r\n                                                    </span>\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    size=\"small\"\r\n                                                    placeholder=\" Ref No\"\r\n\r\n                                                    register={register(\"ref_no\", {\r\n                                                        required: false,\r\n                                                    })}\r\n                                                />\r\n                                                {errors.ref_no && (\r\n                                                    <span style={{ color: \"red\" }}>\r\n                                                        {errors.ref_no.message}\r\n                                                    </span>\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <InputField\r\n                                                    disabled={true}\r\n                                                    style={{ border: \"none\" }}\r\n                                                    size=\"small\"\r\n                                                    placeholder=\"\"\r\n                                                    register={register(\"total\")}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {(!editState && !detail?.is_paid) && <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    type=\"submit\"\r\n                                                    sx={{\r\n                                                        textTransform: 'capitalize',\r\n                                                        backgroundColor: \"rgb(189 155 74)\",\r\n                                                        fontSize: \"12px\",\r\n                                                        \":hover\": {\r\n                                                            backgroundColor: \"rgb(189 155 74)\",\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    <AddIcon />\r\n                                                </Button>}\r\n                                                {editState && <> <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    type=\"submit\"\r\n                                                    sx={{\r\n                                                        textTransform: 'capitalize',\r\n                                                        backgroundColor: \"rgb(189 155 74)\",\r\n                                                        fontSize: \"12px\",\r\n                                                        \":hover\": {\r\n                                                            backgroundColor: \"rgb(189 155 74)\",\r\n                                                        },\r\n                                                    }}\r\n                                                >\r\n                                                    Update\r\n                                                </Button>\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n\r\n                                                        onClick={() => {\r\n                                                            setEditState(false)\r\n\r\n                                                            setValue(\"id\", '');\r\n                                                            setValue(\"govt_fee\", '');\r\n                                                            setValue(\"center_fee\", '');\r\n                                                            setValue(\"bank_charge\", '');\r\n                                                            setValue(\"transaction_id\", '');\r\n                                                            setValue(\"application_id\", '');\r\n                                                            setValue(\"ref_no\", '');\r\n                                                            setServiceItem(null);\r\n                                                            setValue(\"quantity\", '');\r\n                                                        }}\r\n                                                        sx={{\r\n                                                            mt: 2,\r\n                                                            textTransform: 'capitalize',\r\n                                                            backgroundColor: \"rgb(189 155 74)\",\r\n                                                            fontSize: \"12px\",\r\n                                                            \":hover\": {\r\n                                                                backgroundColor: \"rgb(189 155 74)\",\r\n                                                            },\r\n                                                        }}\r\n                                                    >\r\n                                                        Cancel\r\n                                                    </Button></>}\r\n                                            </TableCell>\r\n                                        </TableRow>}\r\n\r\n                                        {rows?.length > 0 && rows?.map((item, index) => (\r\n                                            <TableRow key={index}>\r\n                                                <TableCell>{item?.id}</TableCell>\r\n                                                <TableCell>{item?.service?.name}</TableCell>\r\n                                                <TableCell>{item?.quantity}</TableCell>\r\n                                                <TableCell>{item?.govt_fee}</TableCell>\r\n                                                <TableCell>{item?.center_fee}</TableCell>\r\n                                                <TableCell>{item?.bank_charge}</TableCell>\r\n                                                <TableCell>{item?.transaction_id}</TableCell>\r\n                                                <TableCell>{item?.application_id}</TableCell>\r\n                                                <TableCell>{item?.ref_no}</TableCell>\r\n\r\n                                                <TableCell>{item?.total}</TableCell>\r\n                                                <TableCell><Box sx={{ display: 'flex', gap: 1 }}>\r\n\r\n                                                    {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => {\r\n                                                        setSelectedRow(item); setEditState(true)\r\n                                                        setValue(\"id\", item?.id);\r\n                                                        setValue(\"govt_fee\", item?.govt_fee);\r\n                                                        setValue(\"center_fee\", item?.center_fee);\r\n                                                        setValue(\"bank_charge\", item?.bank_charge);\r\n                                                        setValue(\"transaction_id\", item?.transaction_id);\r\n                                                        setValue(\"application_id\", item?.application_id);\r\n                                                        setValue(\"ref_no\", item?.ref_no);\r\n                                                        setValue(\"service\", item?.service);\r\n                                                        setServiceItem(item?.service);\r\n                                                        setValue(\"quantity\", item?.quantity);\r\n                                                        console.log(item?.service)\r\n\r\n                                                    }} src={Images.editIcon} width={'35px'}></Box>}\r\n                                                    <Box>\r\n                                                        {!detail?.is_paid && <Box sx={{ cursor: 'pointer' }} component={'img'} src={Images.deleteIcon} onClick={() => {\r\n\r\n                                                            let selectedID = item?.id\r\n                                                            setRows(rows?.filter(item2 => item2?.id != item?.id))\r\n                                                            let filteredData = rows?.filter(item2 => item2?.id != item?.id)\r\n                                                            // 👇 Calculate total after updating rows\r\n                                                            const total = filteredData.reduce((sum, item) => {\r\n                                                                // Replace `item.amount` with the correct field to total (e.g., item.price or item.total)\r\n                                                                return sum + (parseFloat(item.total) || 0);\r\n                                                            }, 0);\r\n\r\n                                                            console.log(\"New total after update:\", total);\r\n\r\n                                                            // You can update a state for total if you have one:\r\n                                                            setSubTotal(total); // <-- Make sure to declare this with useState\r\n\r\n                                                        }} width={'35px'}></Box>}\r\n\r\n\r\n                                                    </Box>\r\n\r\n                                                </Box></TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Sub-total:</Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{subTotal}</Typography> {/* Display the Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Net Taxable Amount:</Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{rows\r\n                                                    ?.reduce((total, item) => {\r\n                                                        const fee = parseFloat(item?.center_fee ?? 0);\r\n                                                        const qty = parseInt(item?.quantity ?? 1);\r\n                                                        return total + fee * qty;\r\n                                                    }, 0)\r\n                                                    .toFixed(2)}</Typography> {/* Display the Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Total Vat:</Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n                                                    rows?.reduce((total, item) => {\r\n                                                        const fee = parseFloat(item?.center_fee ?? 0);\r\n                                                        const qty = parseFloat(item?.quantity ?? 1);\r\n                                                        return total + fee * qty;\r\n                                                    }, 0) * 0.05\r\n                                                ).toFixed(2)}\r\n                                                </Typography> {/* Display the Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        {/* Amount Total Row (optional, if needed for the final sum) */}\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={9} align=\"right\">\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>Amount Total:</Typography>\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Typography variant=\"h6\" sx={{ fontSize: \"15px\" }}>{(\r\n                                                    parseFloat(subTotal) +\r\n                                                    rows?.reduce((total, item) => {\r\n                                                        const fee = parseFloat(item?.center_fee ?? 0);\r\n                                                        const qty = parseFloat(item?.quantity ?? 1);\r\n                                                        return total + fee * qty;\r\n                                                    }, 0) * 0.05\r\n                                                ).toFixed(2)}\r\n                                                </Typography> {/* This can be the same as Sub-total */}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </form>\r\n                    </>\r\n                }\r\n            </Box >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdatePreSale;\r\n"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","_errors1$date","_errors1$customer","_errors1$display_cust","_errors1$mobile","_errors1$email","_errors1$address","useTheme","user","useAuth","navigate","useNavigate","formChange","setFormChange","useState","submit","setSubmit","excludeFromSales","setExcludeFromSales","excludeFromPurchase","setExcludeFromPurchase","total","setTotal","subTotal","setSubTotal","rows","setRows","selectedRow","setSelectedRow","editState","setEditState","console","log","items","setItems","itemCode","itemDescription","totalCharge","mbNo","applicationId","register","handleSubmit","getValues","setValue","watch","reset","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","control","watch1","errors1","govtFee","centerFee","bankCharges","qty","useEffect","finalTotal","parseFloat","toFixed","guarantors","setGuarantors","activeStep","setActiveStep","React","id","useParams","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","selectedDue","setSelectedDue","name","passport","setPassport","allocation","setAllocation","depositError","setDepositError","loading","setLoading","emailVerify","setEmailVerify","isUploading","setIsUploading","loader","setLoader","fieldsDisabled","setFieldsDisabled","monthlyVisaServiceCharges","vipMedical","extraTyping","center","setCenter","status","setStatus","stepFormData","setStepFormData","step1FormData","setStep1FormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","imageURL","setImageURL","hovered","setHovered","useRef","accounts","setAccounts","salesAccount","setSalesAccount","inventoryAccount","setInventoryAccount","cogsAccount","setCogsAccount","adjustmentAccount","setAdjustmentAccount","assemblyAccount","setAssemblyAccount","itemType","setItemType","unit","setUnit","taxes","setTaxes","tax","setTax","category","setCategory","categories","setCategories","governmentAccount","setGovernmnentAccount","description","setDescription","ownGovBank","setOwnGovBank","selectedCostCenter","setSelectedCostCenter","services","setServices","serviceItem","setServiceItem","selectedCustomer","setSelectedCustomer","detail","setDetail","async","_data$accounts2","params","page","limit","data","FinanceServices","getAccounts","error","ErrorToaster","_data$accounts3","getTax","CustomerServices","getCategoryList","getCategories","getServiceItem","_data$receipt","_data$receipt2","_data$receipt3","_data$receipt4","_data$receipt5","_data$receipt6","_data$receipt7","_data$receipt8","_data$receipt9","_data$receipt10","_data$receipt11","_data$receipt12","_data$receipt13","_data$receipt14","_data$receipt15","_data$receipt16","_data$receipt17","getPreSaleDetail","receipt","sale_receipt_items","token_number","customer_mobile","total_amount","Date","invoice_date","customer_name","cost_center","trn","customer_email","case_no","ref","customer_address","getData","getInvoiceNumber","next_invoice_number","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","formData","obj","token","token_date","invoice_prefix","caseno","address","display_customer","customer_id","reception_id","mobile","email","promise","UpdateSaleReceipt","showPromiseToast","response","responseCode","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","md","sm","InputField","label","size","disabled","placeholder","type","border","DatePicker","value","message","required","onChange","SelectField","options","selected","onSelect","customer","mt","pattern","multiline","Button","length","variant","textTransform","warn","updatedItem","service","service_id","prevItems","updatedRows","map","reduce","sum","newRow","prevRows","newSubTotal","row","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","is_paid","_data$service","_data$service2","_data$service3","_data$service4","DetailServiceItem","bank_service_charge","center_fee","style","color","quantity","govt_fee","bank_charge","transaction_id","application_id","ref_no","AddIcon","onClick","index","_item$service","cursor","src","Images","editIcon","deleteIcon","filter","item2","colSpan","align","_item$center_fee","_item$quantity","parseInt","_item$center_fee2","_item$quantity2","_item$center_fee3","_item$quantity3"],"sourceRoot":""}