{"version":3,"file":"static/js/6231.40bb5073.chunk.js","mappings":"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","sources":["pages/Dashboard/Accounts/AccountLedger.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport { EyeIcon, FontFamily } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Debounce, LedgerLinking } from 'utils';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport moment from 'moment';\r\nimport FinanceServices from 'services/Finance';\r\n\r\n// *For Table Style\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n      fontSize: 14,\r\n      fontFamily: 'Public Sans',\r\n      border: '1px solid #EEEEEE',\r\n      padding: '15px',\r\n      textAlign: 'left',\r\n      whiteSpace: 'nowrap',\r\n      color: '#434343',\r\n      paddingRight: '50px',\r\n      background: 'transparent',\r\n      fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n      fontSize: 14,\r\n      fontFamily: 'Public Sans',\r\n\r\n      textWrap: 'nowrap',\r\n      padding: '5px !important',\r\n      paddingLeft: '15px !important',\r\n\r\n      '.MuiBox-root': {\r\n          display: 'flex',\r\n          gap: '6px',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          '.MuiBox-root': {\r\n              cursor: 'pointer'\r\n          }\r\n      },\r\n      'svg': {\r\n          width: 'auto',\r\n          height: '24px',\r\n      },\r\n      '.MuiTypography-root': {\r\n          textTransform: 'capitalize',\r\n          fontFamily: FontFamily.NunitoRegular,\r\n          textWrap: 'nowrap',\r\n      },\r\n      '.MuiButtonBase-root': {\r\n          padding: '8px',\r\n          width: '28px',\r\n          height: '28px',\r\n      }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction AccountLedger() {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const { state } = useLocation();\r\n  const [TotalBalance, setTotalBalance] = useState();\r\n\r\n  let Balance = TotalBalance;\r\n\r\n\r\n  const { register, handleSubmit, setValue } = useForm();\r\n\r\n  const tableHead = ['Date', 'JV#', 'Particular#', 'Type', 'Description', 'Comments', 'Debit (AED)', 'Credit (AED)', 'Balance (AED)']\r\n\r\n  const [loader, setLoader] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Account Ledger\r\n  const [accountLedgers, setAccountLedgers] = useState();\r\n\r\n\r\n  // *For Pagination\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  const [fromDate, setFromDate] = useState();\r\n  const [toDate, setToDate] = useState();\r\n\r\n  // *For Handle Date\r\n  const handleFromDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setFromDate('invalid')\r\n        return\r\n      }\r\n      setFromDate(new Date(newDate))\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  const handleToDate = (newDate) => {\r\n    try {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (newDate == 'Invalid Date') {\r\n        setToDate('invalid')\r\n        return\r\n      }\r\n      setToDate(new Date(newDate))\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    }\r\n  }\r\n\r\n  // *For Get Account Ledger\r\n  const getAccountLedgers = async (page, limit, filter) => {\r\n    setLoading(true)\r\n    try {\r\n      const Page = page ? page : currentPage\r\n      const Limit = limit ? limit : pageLimit\r\n      const Filter = { ...filters, ...filter }\r\n      setCurrentPage(Page)\r\n      setPageLimit(Limit)\r\n      setFilters(Filter)\r\n      let params = {\r\n        page: Page,\r\n        limit: Limit,\r\n        account_id: id\r\n      }\r\n      params = { ...params, ...Filter }\r\n      const { data } = await FinanceServices.getAccountLedgers(params)\r\n      setAccountLedgers(data?.statement?.rows);\r\n      setTotalCount(data?.statement?.count);\r\n      setTotalBalance(data?.statement?.opening_balance_aed);\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // *For Handle Filter\r\n  const handleFilter = () => {\r\n    let data = {\r\n      from_date: fromDate ? moment(new Date(fromDate)).format('MM-DD-YYYY') : '',\r\n      to_date: toDate ? moment(new Date(toDate)).format('MM-DD-YYYY') : ''\r\n    }\r\n    getAccountLedgers(1, '', data)\r\n    // Debounce(() => getAccountLedgers(1, '', data));\r\n  }\r\n\r\n  const handleFilterSearch = (data) => {\r\n    Debounce(() => getAccountLedgers(1, '', data));\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAccountLedgers()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ m: 4, mb: 2 }}>\r\n\r\n      <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: FontFamily.NunitoRegular, mb: 4 }}>\r\n        {state?.accountName} Account's Ledger\r\n      </Typography>\r\n\r\n      {/* Filters */}\r\n      <Box component={'form'} onSubmit={handleSubmit(handleFilter)}>\r\n        <Grid container spacing={1} >\r\n          <Grid item xs={12} sm={3}>\r\n            <InputField\r\n              size={'small'}\r\n              label={'Search'}\r\n              placeholder={'Search'}\r\n              register={register('search', {\r\n                onChange: (e) => handleFilterSearch({ search: e.target.value })\r\n              })}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <DatePicker\r\n              disableFuture={true}\r\n              size='small'\r\n              label={'From Date'}\r\n              value={fromDate}\r\n              onChange={(date) => handleFromDate(date)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <DatePicker\r\n              disableFuture={true}\r\n              size='small'\r\n              minDate={fromDate}\r\n              label={'To Date'}\r\n              value={toDate}\r\n              onChange={(date) => handleToDate(date)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2} sx={{ mt: 3.5 }}>\r\n            <PrimaryButton\r\n              title=\"Search\"\r\n              type='submit'\r\n              loading={loading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {accountLedgers ? (\r\n        <Fragment>\r\n\r\n          {/* ========== Table ========== */}\r\n          <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 330px)' }}>\r\n            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n              <TableHead>\r\n                <TableRow>\r\n                  {tableHead.map((item, index) => (\r\n                    <Cell key={index}>{item}</Cell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {!loader ? (\r\n                  accountLedgers?.length > 0 ? (\r\n                    <Fragment>\r\n                      {accountLedgers.map((item, index) => {\r\n                        let page = LedgerLinking(item?.entry?.reference_module)\r\n                        let debit = item?.debit;\r\n                        let credit = item?.credit;\r\n                        if (state?.currency) {\r\n                          credit = item?.credit_cur\r\n                          debit = item?.debit_cur\r\n                        }\r\n\r\n                        const balance = state?.nature === 'debit' ? (parseFloat(debit) - parseFloat(credit)).toFixed(2) : (parseFloat(credit) - parseFloat(debit)).toFixed(2)\r\n                        Balance += parseFloat(balance)\r\n                        return (\r\n                          <Row key={index} sx={{ bgcolor: index % 2 !== 0 && '#EEFBEE' }}>\r\n                            <Cell>\r\n                              {item?.created_at ? moment(item?.created_at).format('MM-DD-YYYY') : '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.journal_id ? item?.series_id + item?.journal_id : '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.entry?.reference_no ?? '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.type?.type_name ?? '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.description ?? '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.comment ?? '-'}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.debit}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {item?.credit}\r\n                            </Cell>\r\n                            <Cell>\r\n                              {Balance?.toFixed(2)}\r\n                            </Cell>\r\n                            {/* <Cell>\r\n                              <Box\r\n                                onClick={page ? () =>\r\n                                  navigate(`/${page}/${item?.entry?.reference_id}`)\r\n                                  : () => {\r\n\r\n                                    navigate(`/general-journal-ledger`, { state: item?.series_id + item?.journal_id })\r\n                                  }}\r\n                              >\r\n                                <IconButton\r\n                                  sx={{\r\n                                    bgcolor:\r\n                                      Colors.primary,\r\n                                    \"&:hover\": {\r\n                                      bgcolor:\r\n                                        Colors.primary,\r\n                                    },\r\n                                  }}\r\n                                >\r\n                                  <EyeIcon />\r\n                                </IconButton>\r\n\r\n                              </Box>\r\n                            </Cell> */}\r\n                          </Row>\r\n                        )\r\n                      })}\r\n                    </Fragment>\r\n                  ) : (\r\n                    <Row>\r\n                      <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                        No Data Found\r\n                      </Cell>\r\n                    </Row>\r\n                  )) : (\r\n                  <Row>\r\n                    <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                      <Box className={classes.loaderWrap}>\r\n                        <CircularProgress />\r\n                      </Box>\r\n                    </Cell>\r\n                  </Row>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {/* ========== Pagination ========== */}\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            pageSize={pageLimit}\r\n            onPageSizeChange={(size) => getAccountLedgers(1, size.target.value)}\r\n            tableCount={accountLedgers?.length}\r\n            totalCount={totalCount}\r\n            onPageChange={(page) => getAccountLedgers(page, '')}\r\n          />\r\n\r\n        </Fragment>\r\n      ) : (\r\n        <CircleLoading />\r\n      )}\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AccountLedger;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","classes","id","useNavigate","useParams","state","useLocation","TotalBalance","setTotalBalance","useState","Balance","register","handleSubmit","setValue","useForm","tableHead","loader","setLoader","loading","setLoading","accountLedgers","setAccountLedgers","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","filters","setFilters","fromDate","setFromDate","toDate","setToDate","getAccountLedgers","async","page","limit","filter","_data$statement","_data$statement2","_data$statement3","Page","Limit","Filter","params","account_id","data","FinanceServices","statement","rows","count","opening_balance_aed","error","ErrorToaster","useEffect","_jsxs","Box","sx","m","mb","children","Typography","variant","Colors","charcoalGrey","accountName","_jsx","component","onSubmit","handleFilter","from_date","moment","Date","format","to_date","Grid","container","spacing","item","xs","sm","InputField","size","label","placeholder","onChange","e","handleFilterSearch","search","target","value","Debounce","DatePicker","disableFuture","date","newDate","handleFromDate","minDate","handleToDate","mt","PrimaryButton","title","type","Fragment","TableContainer","Paper","boxShadow","borderRadius","maxHeight","Table","stickyHeader","minWidth","TableHead","map","index","TableBody","colSpan","length","align","className","CircularProgress","_item$entry","_item$entry$reference","_item$entry2","_item$type$type_name","_item$type","_item$description","_item$comment","_Balance","LedgerLinking","entry","reference_module","debit","credit","currency","credit_cur","debit_cur","balance","nature","parseFloat","toFixed","bgcolor","created_at","journal_id","series_id","reference_no","type_name","description","comment","Pagination","pageSize","onPageSizeChange","tableCount","onPageChange","CircleLoading"],"sourceRoot":""}