{"version":3,"file":"static/js/968.418f5816.chunk.js","mappings":"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","sources":["pages/Dashboard/Banks/BankList.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport {\r\n  Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Chip, Grid, InputLabel,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  ListItemText,\r\n  Tooltip,\r\n  Checkbox,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { AllocateIcon, CheckIcon, EyeIcon, FontFamily, Images, MessageIcon, PendingIcon, RequestBuyerIdIcon } from 'assets';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport FinanceStatusDialog from 'components/Dialog/FinanceStatusDialog';\r\nimport AllocateStatusDialog from 'components/Dialog/AllocateStatusDialog';\r\nimport AllocateDialog from 'components/Dialog/AllocateDialog';\r\nimport CustomerServices from 'services/Customer';\r\nimport { makeStyles } from '@mui/styles';\r\nimport Pagination from 'components/Pagination';\r\nimport { Debounce, encryptData, formatPermissionData, handleExportWithComponent } from 'utils';\r\nimport InputField from 'components/Input';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPermission } from 'redux/slices/navigationDataSlice';\r\nimport SimpleDialog from 'components/Dialog/SimpleDialog';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport SelectField from 'components/Select';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport DataTable from 'components/DataTable';\r\nimport ConfirmationDialog from 'components/Dialog/ConfirmationDialog';\r\n\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n  border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n  [`&.${tableCellClasses.head}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n    border: '1px solid #EEEEEE',\r\n    padding: '15px',\r\n    textAlign: 'left',\r\n    whiteSpace: 'nowrap',\r\n    color: '#434343',\r\n    paddingRight: '50px',\r\n    background: 'transparent',\r\n    fontWeight: 'bold'\r\n\r\n  },\r\n  [`&.${tableCellClasses.body}`]: {\r\n    fontSize: 14,\r\n    fontFamily: 'Public Sans',\r\n\r\n    textWrap: 'nowrap',\r\n    padding: '5px !important',\r\n    paddingLeft: '15px !important',\r\n\r\n    '.MuiBox-root': {\r\n      display: 'flex',\r\n      gap: '6px',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      '.MuiBox-root': {\r\n        cursor: 'pointer'\r\n      }\r\n    },\r\n    'svg': {\r\n      width: 'auto',\r\n      height: '24px',\r\n    },\r\n    '.MuiTypography-root': {\r\n      textTransform: 'capitalize',\r\n      fontFamily: FontFamily.NunitoRegular,\r\n      textWrap: 'nowrap',\r\n    },\r\n    '.MuiButtonBase-root': {\r\n      padding: '8px',\r\n      width: '28px',\r\n      height: '28px',\r\n    }\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  loaderWrap: {\r\n    display: 'flex',\r\n    height: 100,\r\n    '& svg': {\r\n      width: '40px !important',\r\n      height: '40px !important'\r\n    }\r\n  }\r\n})\r\n\r\nfunction BankList() {\r\n\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const contentRef = useRef(null);\r\n  const [status, setStatus] = useState(null)\r\n  const [statusDialog, setStatusDialog] = useState(false)\r\n  const [selectedData, setSelectedData] = useState(null)\r\n  const [tableLoader, setTableLoader] = useState(false)\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n    getValues,\r\n    reset,\r\n  } = useForm();\r\n\r\n  const tableHead = [{ name: 'SR No.', key: '' }, { name: 'Customer ', key: 'name' }, { name: 'Registration Date', key: 'visa_eligibility' }, { name: 'Deposit Amount', key: 'deposit_total' }, { name: 'Status', key: '' }, { name: 'Actions', key: '' }]\r\n\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n\r\n  // *For Customer Queue\r\n  const [customerQueue, setCustomerQueue] = useState([]);\r\nconst [data, setData] = useState([])\r\n\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [pageLimit, setPageLimit] = useState(50);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n\r\n  // *For Filters\r\n  const [filters, setFilters] = useState({});\r\n\r\n  // *For Permissions\r\n  const [permissions, setPermissions] = useState();\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [sort, setSort] = useState('desc')\r\n\r\n  // *For Get Customer Queue\r\n  const getCustomerQueue = async (page, limit, filter) => {\r\n    setLoader(true)\r\n\r\n    try {\r\n  \r\n      let params = {\r\n        page: 1,\r\n        limit: 1000,\r\n      \r\n\r\n      }\r\n    \r\n      const { data } = await CustomerServices.getBanks(params)\r\n      setData(data?.banks);\r\n     \r\n     \r\n      \r\n    } catch (error) {\r\n      showErrorToast(error)\r\n    } finally {\r\n      setLoader(false)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSort = (key) => {\r\n    let data = {\r\n      sort_by: key,\r\n      sort_order: sort\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n\r\n\r\n\r\n  // *For Handle Filter\r\n\r\n  const handleFilter = () => {\r\n    let data = {\r\n      search: getValues('search')\r\n    }\r\n    Debounce(() => getCustomerQueue(1, '', data));\r\n  }\r\n  const handleDelete = async (item) => {\r\n \r\n\r\n    try {\r\n        let params = { customer_id: selectedData?.id }\r\n\r\n\r\n        const { message } = await CustomerServices.DeleteBank(params)\r\n\r\n        SuccessToaster(message);\r\n        getCustomerQueue()\r\n    } catch (error) {\r\n        showErrorToast(error)\r\n    } finally {\r\n        // setLoader(false)\r\n    }\r\n}\r\n  const UpdateStatus = async () => {\r\n    try {\r\n      let obj = {\r\n        id: selectedData?.id,\r\n        is_active: status?.id,\r\n      };\r\n\r\n      const promise = CustomerServices.UpdateBank(obj);\r\n      console.log(promise);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        \"Saving...\",\r\n        \"Added Successfully\",\r\n        \"Something Went Wrong\"\r\n      );\r\n\r\n      // Await the promise and then check its response\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        setStatusDialog(false);\r\n        setStatus(null)\r\n        getCustomerQueue();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const columns = [\r\n    {\r\n      header: \"SR No.\",\r\n      accessorKey: \"id\",\r\n\r\n\r\n    },\r\n    {\r\n      header: \"Name\",\r\n      accessorKey: \"name\",\r\n\r\n\r\n    },\r\n    \r\n  \r\n    {\r\n      header: \"Account Number\",\r\n      accessorKey: \"account_number\",\r\n\r\n\r\n    },\r\n   \r\n    {\r\n        header: \"IBN Number\",\r\n        accessorKey: \"account_ibn\",\r\n  \r\n  \r\n      },\r\n      {\r\n            header: \"Status\",\r\n            cell: ({ row }) => (\r\n      \r\n              <Box component={'div'} sx={{ cursor: 'pointer' }} onClick={() => {\r\n                setSelectedData(row?.original)\r\n                  setStatusDialog(true)\r\n                \r\n              }}>\r\n                <Chip sx={{ backgroundColor: row?.original?.is_active ? '#05c105' : '#a13605', color: 'white' }} label={row?.original?.is_active ? 'Active' : 'Inactive'} />\r\n      \r\n              </Box>\r\n            ),\r\n          },\r\n    \r\n    {\r\n      header: \"Actions\",\r\n      cell: ({ row }) => (\r\n\r\n        <Box sx={{display:'flex',gap:1}}>\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/bank-detail/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/customer-detail'); }} src={Images.detailIcon} width={'35px'}></Box>}\r\n          {true && <Box component={'img'} sx={{ cursor: \"pointer\" }} onClick={() => { navigate(`/update-bank/${row?.original?.id}`); localStorage.setItem(\"currentUrl\", '/update-customer') }} src={Images.editIcon} width={'35px'}></Box>}\r\n         \r\n         \r\n          {/* <Box>\r\n            {true && <Box sx={{cursor:'pointer'}} component={'img'} src={Images.deleteIcon} onClick={() => { setSelectedData(row?.original); setConfirmationDialog(true) }} width={'35px'}></Box>}\r\n\r\n          \r\n          </Box> */}\r\n\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n  ]\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getCustomerQueue()\r\n  }, []);\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n\r\n      <ConfirmationDialog\r\n        open={confirmationDialog}\r\n        onClose={() => setConfirmationDialog(false)}\r\n        message={\"Are You Sure?\"}\r\n        action={() => {\r\n          setConfirmationDialog(false);\r\n          handleDelete()\r\n\r\n        }}\r\n      />\r\n      <SimpleDialog\r\n        open={statusDialog}\r\n        onClose={() => setStatusDialog(false)}\r\n        title={\"Change Status?\"}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(UpdateStatus)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={\"small\"}\r\n                label={\"Select Status :\"}\r\n                options={\r\n\r\n                  [\r\n                    { id: false, name: \"Disabled\" },\r\n                    { id: true, name: \"Enabled\" },\r\n\r\n                  ]}\r\n                selected={status}\r\n                onSelect={(value) => {\r\n                  setStatus(value);\r\n                }}\r\n                \r\n                error={errors?.status?.message}\r\n                register={register(\"status\", {\r\n                  required: \"Please select status.\",\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid container sx={{ justifyContent: \"center\" }}>\r\n              <Grid\r\n                item\r\n                xs={6}\r\n                sm={6}\r\n                sx={{\r\n                  mt: 2,\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  gap: \"25px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  bgcolor={Colors.primary}\r\n                  title=\"Yes,Confirm\"\r\n                  type=\"submit\"\r\n                />\r\n                <PrimaryButton\r\n                  onClick={() => setStatusDialog(false)}\r\n                  bgcolor={\"#FF1F25\"}\r\n                  title=\"No,Cancel\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n        <Typography sx={{ fontSize: '24px', fontWeight: 'bold' }}>Bank List</Typography>\r\n        {true && <PrimaryButton\r\n         bgcolor={'#bd9b4a'}\r\n          title=\"Create\"\r\n          onClick={() => { navigate('/create-bank'); localStorage.setItem(\"currentUrl\", '/create-customer') }}\r\n          loading={loading}\r\n        />}\r\n\r\n\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box >\r\n\r\n\r\n        {<DataTable loading={loader} data={data} columns={columns} />}\r\n      </Box>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default BankList;"],"names":["styled","TableRow","_ref","theme","border","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","_errors$status","navigate","useNavigate","status","setStatus","useDispatch","useRef","useState","statusDialog","setStatusDialog","selectedData","setSelectedData","tableLoader","setTableLoader","register","handleSubmit","formState","errors","setValue","getValues","reset","useForm","loader","setLoader","confirmationDialog","setConfirmationDialog","customerQueue","setCustomerQueue","data","setData","totalCount","setTotalCount","pageLimit","setPageLimit","currentPage","setCurrentPage","filters","setFilters","permissions","setPermissions","loading","setLoading","sort","setSort","getCustomerQueue","async","page","limit","filter","params","CustomerServices","getBanks","banks","error","showErrorToast","columns","header","accessorKey","cell","_ref3","_row$original","_row$original2","row","_jsx","Box","component","sx","onClick","original","children","Chip","backgroundColor","is_active","label","_ref4","_jsxs","_row$original3","id","localStorage","setItem","src","Images","detailIcon","_row$original4","editIcon","useEffect","p","ConfirmationDialog","open","onClose","message","action","customer_id","DeleteBank","SuccessToaster","handleDelete","SimpleDialog","title","onSubmit","obj","promise","UpdateBank","console","log","showPromiseToast","response","responseCode","Grid","container","spacing","item","xs","sm","SelectField","size","options","name","selected","onSelect","value","required","mt","PrimaryButton","bgcolor","Colors","primary","type","mb","Typography","DataTable"],"sourceRoot":""}