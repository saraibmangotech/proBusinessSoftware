{"version":3,"file":"static/js/2594.b1265ee7.chunk.js","mappings":"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","sources":["pages/Dashboard/Reception/ReceptionDetail.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { Box, FormControlLabel, Grid, Radio, RadioGroup, Typography } from \"@mui/material\"\r\nimport { PrimaryButton } from \"components/Buttons\"\r\nimport Colors from \"assets/Style/Colors\"\r\nimport InputField from \"components/Input\"\r\nimport SelectField from \"components/Select\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { Debounce2 } from \"utils\"\r\nimport CustomerServices from \"services/Customer\"\r\nimport { showErrorToast, showPromiseToast } from \"components/NewToaster\"\r\nimport SimpleDialog from \"components/Dialog/SimpleDialog\"\r\nimport { ErrorToaster } from \"components/Toaster\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\n\r\nfunction ReceptionDetail() {\r\n    const navigate = useNavigate()\r\n    const { id } = useParams()\r\n    const [customerType, setCustomerType] = useState(\"individual\")\r\n    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n    const [buttonDisabled2, setButtonDisabled2] = useState(true)\r\n    const [customers, setCustomers] = useState([])\r\n    const [selectedCompany, setSelectedCompany] = useState(null)\r\n    const [selectedCustomer, setSelectedCustomer] = useState(null)\r\n    const [companies, setCompanies] = useState([])\r\n    const [companyDialog, setCompanyDialog] = useState(false)\r\n    const [newDetail, setNewDetail] = useState(null)\r\n    const [subCustDisable, setSubCustDisable] = useState(false)\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n\r\n\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n\r\n    const onSubmit = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                id:id,\r\n                is_company: customerType == 'individual' ? false : true,\r\n                customer_name: formData?.customerName,\r\n                customer_id: selectedCustomer?.id,\r\n                mobile: formData?.mobile,\r\n                token_number: formData?.tokenNumber,\r\n                reference: formData?.reference,\r\n                company_id: selectedCompany?.id\r\n\r\n\r\n            };\r\n            const promise = CustomerServices.ReceptionDetail(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate('/reception-list')\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const onSubmit1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                is_company: customerType == 'individual' ? false : true,\r\n                customer_name: formData?.customerName,\r\n                customer_id: selectedCustomer?.id,\r\n                mobile: formData?.mobile,\r\n                token_number: formData?.tokenNumber,\r\n                reference: formData?.reference,\r\n                company_id: selectedCompany?.id\r\n\r\n\r\n            };\r\n            const promise = CustomerServices.ReceptionDetail(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate('/reception-list')\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    // *For Get Customer Queue\r\n    const getCustomerQueue = async (page, limit, filter) => {\r\n\r\n\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n\r\n\r\n            }\r\n\r\n            const { data } = await CustomerServices.getCustomerQueue(params)\r\n            setCustomers(data?.rows)\r\n\r\n        } catch (error) {\r\n            showErrorToast(error)\r\n        }\r\n    }\r\n\r\n    const getCustomerDetail = async (phone) => {\r\n        try {\r\n            let params = {\r\n                mobile: phone\r\n            };\r\n\r\n            const { data } = await CustomerServices.getCustomerDetail(params);\r\n            let detail = data?.customer\r\n            console.log(detail);\r\n\r\n            setValue('customerName', detail?.name)\r\n            setValue('email', detail?.email)\r\n            setValue('mobile', detail?.mobile)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const getCustomerDetail2 = async (phone) => {\r\n        try {\r\n            let params = {\r\n                mobile: phone\r\n            };\r\n\r\n            const { data } = await CustomerServices.getCustomerDetail(params);\r\n            let detail = data?.customer\r\n            console.log(detail);\r\n            setSelectedCustomer(detail)\r\n            setValue1('customer', detail)\r\n            setValue1('customerName', detail?.name)\r\n            setValue1('email', detail?.email)\r\n            setValue1('mobile', detail?.mobile)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n    const getCompanies = async (id) => {\r\n        try {\r\n            let params = {\r\n                customer_id: id ? id : selectedCustomer?.id\r\n            };\r\n\r\n            const { data } = await CustomerServices.getCompanies(params);\r\n            setCompanies(data?.companies)\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const getTokenValidation = async (value) => {\r\n        try {\r\n            let params = {\r\n                validate: true,\r\n                token_number: value\r\n            };\r\n\r\n            const { data } = await CustomerServices.getReceptionDetail(params);\r\n            console.log(data);\r\n            if (data?.token) {\r\n                setButtonDisabled(true)\r\n                showErrorToast('Token Number Already Exist')\r\n            }\r\n            else {\r\n                setButtonDisabled(false)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const getTokenValidation2 = async (value) => {\r\n        try {\r\n            let params = {\r\n                validate: true,\r\n                token_number: value\r\n            };\r\n\r\n            const { data } = await CustomerServices.getReceptionDetail(params);\r\n            console.log(data);\r\n            if (data?.token) {\r\n                setButtonDisabled2(true)\r\n                showErrorToast('Token Number Already Exist')\r\n            }\r\n            else {\r\n                setButtonDisabled2(false)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n    const CreateCompany = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                code: formData?.code,\r\n                name: formData?.name,\r\n                customer_id: selectedCustomer?.id\r\n\r\n\r\n            };\r\n            const promise = CustomerServices.addCompany(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                getCompanies();\r\n                setCompanyDialog(false)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const getData = async () => {\r\n        try {\r\n            let params = {\r\n                reception_id: id\r\n            };\r\n\r\n            const { data } = await CustomerServices.getReceptionDetail(params);\r\n            let detail = data?.token\r\n            let newDetail = {\r\n                name: detail?.customer_name, // renaming customer_name to name\r\n                id: detail?.id,      // example: renaming company_id to id\r\n                location: detail?.address    // example: renaming address to location\r\n              };\r\n            setSelectedCustomer(newDetail)\r\n            setNewDetail(detail)\r\n            setCustomerType(!detail?.is_company ? 'individual' : 'company')\r\n            if (!detail?.is_company) {\r\n                setValue('mobile', detail?.mobile)\r\n                setValue('customerName', detail?.customer_name)\r\n                setValue('tokenNumber', detail?.token_number)\r\n                setValue('reference', detail?.reference)\r\n                setValue('email', detail?.email)\r\n\r\n\r\n\r\n            }\r\n\r\n            else {\r\n                setValue1('mobile', detail?.mobile)\r\n                setValue1('customerName', detail?.customer_name)\r\n                setValue1('tokenNumber', detail?.token_number)\r\n                setValue1('reference', detail?.reference)\r\n                setValue1('email', detail?.email)\r\n                // getCompanies(detail?.customer_id)\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    console.log(selectedCustomer, 'selectedCustomer');\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        getCustomerQueue()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const company = companies.find(item => item?.id == newDetail?.company_id);\r\n        const customer = customers.find(item => item?.id == newDetail?.customer_id);\r\n    \r\n        // Only proceed if both are found\r\n        if (company && customer) {\r\n            console.log('Company:', company);\r\n            console.log('Customer:', customer);\r\n    \r\n            \r\n            setValue('company', company);\r\n            setSelectedCompany(company);\r\n        }\r\n    }, [customers, companies, newDetail]);\r\n    \r\n\r\n\r\n    return (\r\n        <Box m={3} sx={{ backgroundColor: \"white\", borderRadius: \"12px\" }}>\r\n            <SimpleDialog\r\n                open={companyDialog}\r\n                onClose={() => setCompanyDialog(false)}\r\n                title={\"Change Status?\"}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(CreateCompany)}>\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid container sx={{ justifyContent: \"center\" }}>\r\n                            <Grid item xs={12}>\r\n                                <InputField\r\n                                    label={\"Name *:\"}\r\n                                    size={\"small\"}\r\n                                    placeholder={\" Name\"}\r\n                                    error={errors2?.name?.message}\r\n                                    register={register2(\"name\", {\r\n                                        required: \"Please enter  name.\",\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <InputField\r\n                                    label={\"Code *:\"}\r\n                                    size={\"small\"}\r\n                                    placeholder={\" Code\"}\r\n                                    error={errors2?.code?.message}\r\n                                    register={register2(\"code\", {\r\n                                        required: \"Please enter  code.\",\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid\r\n                                item\r\n                                xs={6}\r\n                                sm={6}\r\n                                sx={{\r\n                                    mt: 2,\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    gap: \"25px\",\r\n                                }}\r\n                            >\r\n                                <PrimaryButton\r\n                                    bgcolor={Colors.primary}\r\n                                    title=\"Yes,Confirm\"\r\n                                    type=\"submit\"\r\n                                />\r\n                                <PrimaryButton\r\n                                    onClick={() => setCompanyDialog(false)}\r\n                                    bgcolor={\"#FF1F25\"}\r\n                                    title=\"No,Cancel\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", gap: \"10px\", p: 3, alignItems: \"flex-end\" }}>\r\n                <Typography sx={{ fontSize: \"22px\", fontWeight: \"bold\" }}> Reception Detail</Typography>\r\n            </Box>\r\n            {/* <RadioGroup row value={customerType} onChange={(e) => setCustomerType(e.target.value)} sx={{ mb: 3, p: 3 }}>\r\n                <FormControlLabel\r\n                    value=\"individual\"\r\n                    control={<Radio disabled checked={customerType === \"individual\"} />}\r\n                    label=\"Individual\"\r\n                />\r\n                <FormControlLabel\r\n                    value=\"company\"\r\n                    control={<Radio disabled checked={customerType === \"company\"} />}\r\n                    label=\"Company\"\r\n                />\r\n            </RadioGroup> */}\r\n            {customerType == 'individual' ? <Box component={\"form\"} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n                <Box sx={{ p: 3 }}>\r\n\r\n\r\n                    <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                        <Grid item xs={2.8}><InputField\r\n                            label={\"Mobile *:\"}\r\n                            disabled={true}\r\n                            size={'small'}\r\n                            type={'number'}\r\n                            placeholder={\"Mobile\"}\r\n                            error={errors?.mobile?.message}\r\n                            register={register(\"mobile\", {\r\n                                required:\r\n                                    \"Please enter your mobile.\",\r\n                                pattern: {\r\n                                    value: /^05[0-9]{8}$/,\r\n                                    message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                },\r\n                                onChange: (e) => {\r\n                                    console.log('asdas');\r\n                                    // if (getValues('mobile').length == 10) {\r\n                                    //     Debounce2(() => getCustomerDetail(getValues('mobile')));\r\n                                    // }\r\n\r\n                                    // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                },\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={2.8}>\r\n                            <InputField\r\n                                label={\"Token Number *:\"}\r\n                                size={\"small\"}\r\n                                disabled={true}\r\n                                placeholder={\"Token Number\"}\r\n                                error={errors?.tokenNumber?.message}\r\n                                register={register(\"tokenNumber\", {\r\n                                    onChange: (e) => {\r\n                                        console.log('asdas');\r\n                                        // if (getValues('tokenNumber')) {\r\n                                        //     Debounce2(() => getTokenValidation(getValues('tokenNumber')));\r\n                                        // }\r\n\r\n                                        // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                    },\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2.8}>\r\n                            <InputField\r\n                                label={\"Customer Name *:\"}\r\n                                size={\"small\"}\r\n                                disabled={true}\r\n                                placeholder={\"Customer Name\"}\r\n                                error={errors?.customerName?.message}\r\n                                register={register(\"customerName\", {\r\n                                    required: \"Please enter customer name.\",\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2.8}>\r\n                            <InputField\r\n                                label={\"Reference *:\"}\r\n                                size={\"small\"}\r\n                                disabled={true}\r\n                                placeholder={\"Reference\"}\r\n                                error={errors?.reference?.message}\r\n                                register={register(\"reference\")}\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n\r\n                        <Grid item xs={2.8}>\r\n                            <InputField\r\n                                label={\"Email *:\"}\r\n                                size={\"small\"}\r\n                                disabled={true}\r\n                                type={\"email\"}\r\n                                placeholder={\"Email\"}\r\n                                error={errors?.email?.message}\r\n                                register={register(\"email\", {\r\n                                    pattern: {\r\n                                        value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                        message: \"Please enter a valid email address.\",\r\n                                    },\r\n\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n\r\n                      \r\n                    </Grid>\r\n                </Box>\r\n            </Box>\r\n                :\r\n                <Box component={\"form\"} onSubmit={handleSubmit1(onSubmit1)}>\r\n\r\n\r\n                    <Box sx={{ p: 3 }}>\r\n\r\n\r\n                        <Grid container sx={{ gap: \"5px 25px\" }}>\r\n                            <Grid item xs={2.8}><InputField\r\n                                label={\"Mobile *:\"}\r\n                                size={'small'}\r\n                                type={'number'}\r\n                                disabled={true}\r\n                                placeholder={\"Mobile\"}\r\n                                error={errors1?.mobile?.message}\r\n                                register={register1(\"mobile\", {\r\n                                    required:\r\n                                        \"Please enter your mobile.\",\r\n                                    pattern: {\r\n                                        value: /^05[0-9]{8}$/,\r\n                                        message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                                    },\r\n                                    onChange: (e) => {\r\n                                        console.log('asdas');\r\n                                        // if (getValues1('mobile').length == 10) {\r\n                                        //     Debounce2(() => getCustomerDetail2(getValues1('mobile')));\r\n                                        // }\r\n\r\n                                        // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                    },\r\n\r\n                                })}\r\n                            /></Grid>\r\n\r\n                            <Grid item xs={2.8}>\r\n                                <InputField\r\n                                    label={\"Token Number *:\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    placeholder={\"Token Number\"}\r\n                                    error={errors1?.tokenNumber?.message}\r\n                                    register={register1(\"tokenNumber\", {\r\n                                        onChange: (e) => {\r\n                                            console.log('asdas');\r\n                                            // if (getValues1('tokenNumber')) {\r\n                                            //     Debounce2(() => getTokenValidation2(getValues1('tokenNumber')));\r\n                                            // }\r\n\r\n                                            // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                        },\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2.8}>\r\n                                <InputField\r\n                                    label={\"Customer Name *:\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    placeholder={\"Customer Name\"}\r\n                                    error={errors1?.customerName?.message}\r\n                                    register={register1(\"customerName\", {\r\n                                        required: \"Please enter customer name.\",\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2.8}>\r\n                                <InputField\r\n                                    label={\"Reference *:\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    placeholder={\"Reference\"}\r\n                                    error={errors1?.reference?.message}\r\n                                    register={register1(\"reference\")}\r\n                                />\r\n                            </Grid>\r\n\r\n\r\n\r\n                            <Grid item xs={2.8}>\r\n                                <InputField\r\n                                    label={\"Email *:\"}\r\n                                    size={\"small\"}\r\n                                    disabled={true}\r\n                                    type={\"email\"}\r\n                                    placeholder={\"Email\"}\r\n                                    error={errors1?.email?.message}\r\n                                    register={register1(\"email\", {\r\n                                        pattern: {\r\n                                            value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                            message: \"Please enter a valid email address.\",\r\n                                        },\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2.8} >\r\n                                <SelectField\r\n                                    size={'small'}\r\n                                    label={'Customer *:'}\r\n                                    disabled={true}\r\n                                    options={customers}\r\n                                    selected={selectedCustomer}\r\n                                    onSelect={(value) => {\r\n                                        // setSelectedCustomer(value)\r\n                                        // if (value?.name == 'Walk-In Customer') {\r\n                                        //     setSubCustDisable(true)\r\n                                        //     setValue1('customerName', '')\r\n                                        //     setValue1('email', '')\r\n                                        //     setValue1('mobile', '')\r\n                                        // }\r\n                                        // else {\r\n                                        //     console.log(value);\r\n\r\n                                        //     setValue1('customerName', value?.name)\r\n                                        //     setValue1('email', value?.email)\r\n                                        //     setValue1('mobile', value?.mobile)\r\n\r\n                                        //     setSubCustDisable(false)\r\n                                        //     Debounce2(() => getCompanies(value?.id));\r\n                                        // }\r\n\r\n                                    }}\r\n                                    error={errors1?.customer?.message}\r\n                                    register={register1(\"customer\", {\r\n                                        required: 'Please select customer account.',\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                            \r\n                         \r\n                        </Grid>\r\n                    </Box>\r\n                </Box>}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ReceptionDetail\r\n"],"names":["_errors2$name","_errors2$code","_errors$mobile","_errors$tokenNumber","_errors$customerName","_errors$reference","_errors$email","_errors1$mobile","_errors1$tokenNumber","_errors1$customerName","_errors1$reference","_errors1$email","_errors1$customer","navigate","useNavigate","id","useParams","customerType","setCustomerType","useState","buttonDisabled","setButtonDisabled","buttonDisabled2","setButtonDisabled2","customers","setCustomers","selectedCompany","setSelectedCompany","selectedCustomer","setSelectedCustomer","companies","setCompanies","companyDialog","setCompanyDialog","newDetail","setNewDetail","subCustDisable","setSubCustDisable","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","control","watch","errors1","register2","handleSubmit2","setValue2","getValues2","errors2","console","log","useEffect","async","params","reception_id","data","CustomerServices","getReceptionDetail","detail","token","name","customer_name","location","address","is_company","mobile","token_number","reference","email","error","getData","page","limit","getCustomerQueue","rows","showErrorToast","company","find","item","company_id","customer","customer_id","_jsxs","Box","m","sx","backgroundColor","borderRadius","children","_jsx","SimpleDialog","open","onClose","title","component","onSubmit","formData","obj","code","promise","addCompany","showPromiseToast","response","responseCode","getCompanies","ErrorToaster","Grid","container","spacing","justifyContent","xs","InputField","label","size","placeholder","message","required","sm","mt","display","gap","PrimaryButton","bgcolor","Colors","primary","type","onClick","p","alignItems","Typography","fontSize","fontWeight","customerName","tokenNumber","ReceptionDetail","disabled","pattern","value","onChange","e","SelectField","options","selected","onSelect"],"sourceRoot":""}