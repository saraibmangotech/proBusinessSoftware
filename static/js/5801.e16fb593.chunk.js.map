{"version":3,"file":"static/js/5801.e16fb593.chunk.js","mappings":"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","sources":["pages/Dashboard/Banks/UpdateBank.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Checkbox, Container, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n\r\nfunction UpdateBank() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth()\r\n    const navigate = useNavigate()\r\n    const [formChange, setFormChange] = useState(false)\r\n    const [submit, setSubmit] = useState(false)\r\n    const { id } = useParams()\r\n\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        watch,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n    console.log(watch());\r\n\r\n\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === 'object' && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n\r\n    ];\r\n    const [guarantors, setGuarantors] = useState([])\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n    const [emailVerify, setEmailVerify] = useState(false)\r\n\r\n\r\n    const [center, setCenter] = useState(null)\r\n    const [status, setStatus] = useState(null)\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState()\r\n\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [date, setDate] = useState(null)\r\n    const [balanceType, setBalanceType] = useState(null)\r\n\r\n    //documents array\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const submitForm1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                id:id,\r\n                name: formData?.name,\r\n                account_title: formData?.title,\r\n                account_number: formData?.accountnumber,\r\n                account_ibn: formData?.ibn,\r\n\r\n\r\n\r\n            };\r\n            const promise = CustomerServices.UpdateBank(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/bank-list\");\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n    const getData = async () => {\r\n        try {\r\n            let params = {\r\n                id: id\r\n            };\r\n\r\n            const { data } = await CustomerServices.getBankDetail(params);\r\n\r\n            console.log(data?.bank);\r\n            setValue1('name',data?.bank?.name)\r\n            setValue1('title',data?.bank?.account_title)\r\n            setValue1('accountnumber',data?.bank?.account_number)\r\n            setValue1('ibn',data?.bank?.account_ibn)\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n            </Box>\r\n            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n                {<>\r\n\r\n                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Update Bank</Typography>\r\n\r\n                        </Box>\r\n\r\n                        <Box sx={{ p: 3 }}>\r\n\r\n\r\n                            <Grid container sx={{ gap: '5px 25px' }}>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\" Name :*\"}\r\n                                        size={'small'}\r\n                                        placeholder={\" Name\"}\r\n                                        error={errors1?.name?.message}\r\n                                        register={register1(\"name\", {\r\n                                            required:\r\n                                                \"Please enter your name.\"\r\n\r\n                                        })}\r\n                                    /></Grid>\r\n\r\n\r\n                                <Grid item xs={2.8}><InputField\r\n                                    label={\" Account Title :*\"}\r\n                                    size={'small'}\r\n                                    placeholder={\" Account Title\"}\r\n                                    error={errors1?.title?.message}\r\n                                    register={register1(\"title\", {\r\n                                        required:\r\n                                            \"Please enter your  title.\"\r\n\r\n                                    })}\r\n                                /></Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                <Grid item xs={2.8}><InputField\r\n                                    label={\"Account Number :*\"}\r\n                                    size={'small'}\r\n                                    type={'number'}\r\n                                    placeholder={\"Account Number\"}\r\n                                    error={errors1?.accountnumber?.message}\r\n                                    register={register1(\"accountnumber\", {\r\n                                        required:\r\n                                            \"Please enter your accountnumber.\"\r\n\r\n                                    })}\r\n                                /></Grid>\r\n                                <Grid item xs={2.8}><InputField\r\n                                    label={\"Account IBN Number :*\"}\r\n                                    size={'small'}\r\n                                    type={'number'}\r\n                                    placeholder={\"Account IBN Number\"}\r\n                                    error={errors1?.ibn?.message}\r\n                                    register={register1(\"ibn\", {\r\n                                        required:\r\n                                            \"Please enter your ibn.\"\r\n\r\n                                    })}\r\n                                /></Grid>\r\n\r\n\r\n\r\n\r\n\r\n                                <Grid container justifyContent={'flex-end'}>\r\n                                    <PrimaryButton\r\n                                        bgcolor={'#bd9b4a'}\r\n                                        title=\"Update\"\r\n                                        type={'submit'}\r\n\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box></>}\r\n\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UpdateBank;"],"names":["_errors1$name","_errors1$title","_errors1$accountnumbe","_errors1$ibn","useTheme","user","useAuth","navigate","useNavigate","formChange","setFormChange","useState","submit","setSubmit","id","useParams","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","watch","errors1","console","log","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","emailVerify","setEmailVerify","center","setCenter","status","setStatus","stepFormData","setStepFormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","useEffect","async","_data$bank","_data$bank2","_data$bank3","_data$bank4","params","data","CustomerServices","getBankDetail","bank","name","account_title","account_number","account_ibn","error","getData","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","formData","obj","title","accountnumber","ibn","promise","UpdateBank","showPromiseToast","response","responseCode","ErrorToaster","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","InputField","label","size","placeholder","message","required","type","PrimaryButton","bgcolor"],"sourceRoot":""}