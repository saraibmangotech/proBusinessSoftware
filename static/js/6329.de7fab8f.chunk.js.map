{"version":3,"file":"static/js/6329.de7fab8f.chunk.js","mappings":"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","sources":["pages/Dashboard/Customers/CustomerDetail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Checkbox, Container, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n\r\nfunction CreateCustomer() {\r\n  const theme = useTheme();\r\n  const { user } = useAuth()\r\n  const navigate = useNavigate()\r\n  const { id } = useParams()\r\n  const [formChange, setFormChange] = useState(false)\r\n  const [submit, setSubmit] = useState(false)\r\n\r\n  const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    watch,\r\n    formState: { errors: errors1 },\r\n\r\n  } = useForm();\r\n\r\n  // Watch all form data\r\n  console.log(watch());\r\n\r\n\r\n  const isFormDataEmpty = (data) => {\r\n    // Check if all form fields are empty\r\n    return Object.values(data).every((value) => {\r\n      // If the value is an object (like companyLogo), check if it's empty\r\n      if (typeof value === 'object' && value !== null) {\r\n        return Object.keys(value).length === 0;\r\n      }\r\n      // Otherwise, check if the value is an empty string\r\n      return value === \"\";\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const allowFilesType = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n    'application/pdf',\r\n    'application/vnd.ms-excel',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n  ];\r\n  const allowFilesType2 = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n\r\n  ];\r\n  const [guarantors, setGuarantors] = useState([])\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n  const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n  const [passport, setPassport] = useState()\r\n  const [allocation, setAllocation] = useState(false)\r\n  const [depositError, setDepositError] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [emailVerify, setEmailVerify] = useState(false)\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [loader, setLoader] = useState(false)\r\n  const [fieldsDisabled, setFieldsDisabled] = useState({\r\n    monthlyVisaServiceCharges: false,\r\n    vipMedical: false,\r\n    extraTyping: true,\r\n  });\r\n\r\n  const [center, setCenter] = useState(null)\r\n  const [status, setStatus] = useState(null)\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState()\r\n  const [step1FormData, setStep1FormData] = useState();\r\n  const [selectedType, setSelectedType] = useState(null)\r\n  const [date, setDate] = useState(null)\r\n  const [balanceType, setBalanceType] = useState(null)\r\n\r\n  //documents array\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleUpload = async (file, docs) => {\r\n    setProgress(0);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"document\", file);\r\n      console.log(file.size);\r\n      console.log(getFileSize(file.size))\r\n      const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const uploadedBytes = progressEvent.loaded;\r\n          const percentCompleted = Math.round(\r\n            (uploadedBytes * 100) / progressEvent.total\r\n          );\r\n\r\n          setProgress(percentCompleted);\r\n          console.log(getFileSize(uploadedBytes));\r\n          setUploadedSize(getFileSize(uploadedBytes));\r\n        },\r\n      });\r\n      if (data) {\r\n        docs[0].isUpload = true;\r\n        docs[0].file = data?.data?.nations;\r\n        setSlipDetail(docs);\r\n        console.log(data, 'asddasasd');\r\n        return data?.data?.path\r\n\r\n      }\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n  const submitForm = async (formData) => {\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        name: formData?.companyName,\r\n\r\n        phone: formData?.mobile,\r\n        email: formData?.email,\r\n        address: formData?.businessAddress,\r\n        website: formData?.businessWebsite,\r\n        cp_name: formData?.personName,\r\n        cp_mobile: formData?.phone,\r\n\r\n      };\r\n\r\n      setStepFormData(obj);\r\n      handleNext()\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const submitForm1 = async (formData) => {\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        id: id,\r\n        name: formData?.name,\r\n        type: selectedType?.id,\r\n        mobile: formData?.mobile,\r\n        trn: formData?.trn,\r\n        eid: formData?.eid,\r\n        trade_license_no: formData?.trade,\r\n        opening_balance: formData?.balance,\r\n        opening_balance_type: balanceType?.id,\r\n        opening_balance_date: date,\r\n        credit_limit: formData?.credit,\r\n        credit_status: status?.id,\r\n        cost_center: center?.id,\r\n        general_notes: formData?.notes,\r\n        email: formData?.email,\r\n        address: formData?.address,\r\n\r\n\r\n      };\r\n      const promise = CustomerServices.UpdateCustomer(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving...',\r\n        'Added Successfully',\r\n        'Something Went Wrong'\r\n      );\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate(\"/customer-list\");\r\n      }\r\n\r\n\r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const verifyEmail = async (value) => {\r\n    let Myemail = getValues1('email')\r\n    if (Myemail) {\r\n\r\n      try {\r\n        let obj = {\r\n          email: Myemail.toLowerCase(),\r\n          validate: true\r\n\r\n\r\n        };\r\n\r\n        console.log(obj);\r\n\r\n        const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n        console.log(status);\r\n        if (status) {\r\n          setEmailVerify(true)\r\n        }\r\n\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n        setEmailVerify(false)\r\n        showErrorToast(error)\r\n      }\r\n    }\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      let params = {\r\n        customer_id: id\r\n      };\r\n\r\n      const { data } = await CustomerServices.getCustomerDetail(params);\r\n      let detail = data?.customer\r\n      console.log(detail);\r\n\r\n      setValue1('name', detail?.name)\r\n      setValue1('email', detail?.email)\r\n      setValue1('mobile', detail?.mobile)\r\n      setValue1('address', detail?.address)\r\n      setValue1('trn', detail?.trn)\r\n      setValue1('eid', detail?.eid)\r\n      setValue1('trade', detail?.trade_license_no)\r\n      setValue1('paymentType', { id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n      setSelectedType({ id: detail?.opening_balance_type, name: detail?.opening_balance_type })\r\n      setValue1('status', { id: detail?.credit_status, name: detail?.credit_status })\r\n      setStatus({ id: detail?.credit_status, name: detail?.credit_status })\r\n      setValue1('center', { id: detail?.cost_center, name: detail?.cost_center })\r\n      setCenter({ id: detail?.cost_center, name: detail?.cost_center })\r\n      setValue1('type', { id: detail?.type, name: detail?.type })\r\n      setBalanceType({ id: detail?.type, name: detail?.type })\r\n      setDate(new Date(detail?.opening_balance_date))\r\n      setValue1('balance', detail?.opening_balance)\r\n      setValue1('credit', detail?.credit_limit)\r\n      setValue1('notes', detail?.general_notes)\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching location:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n\r\n  const isDisabled = true;\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n      </Box>\r\n      <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n        {<>\r\n\r\n\r\n\r\n          <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n              <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }}> Customer Detail</Typography>\r\n            </Box>\r\n\r\n            <Box sx={{ p: 3 }}>\r\n              <Grid container sx={{ gap: '5px 25px' }}>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\" Name :*\"}\r\n                    size={'small'}\r\n                    placeholder={\" Name\"}\r\n                    error={errors1?.name?.message}\r\n                    register={register1(\"name\", {\r\n                      required: \"Please enter your name.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Mobile :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"Mobile\"}\r\n                    error={errors1?.mobile?.message}\r\n                    register={register1(\"mobile\", {\r\n                      required: \"Please enter your mobile.\",\r\n                      pattern: {\r\n                        value: /^05[0-9]{8}$/,\r\n                        message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                      }\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Email :*\"}\r\n                    size={\"small\"}\r\n                    placeholder={\"Email\"}\r\n                    error={errors1?.email?.message}\r\n                    register={register1(\"email\", {\r\n                      required: \"Please enter your email.\",\r\n                      pattern: {\r\n                        value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                        message: \"Please enter a valid email address.\"\r\n                      }\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\" Address :*\"}\r\n                    size={'small'}\r\n                    placeholder={\" Address\"}\r\n                    error={errors1?.address?.message}\r\n                    register={register1(\"address\", {\r\n                      required: \"Please enter your address.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"TRN Number :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"TRN Number\"}\r\n                    error={errors1?.trn?.message}\r\n                    register={register1(\"trn\", {\r\n                      required: \"Please enter your trn.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"EID Number :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"EID Number\"}\r\n                    error={errors1?.eid?.message}\r\n                    register={register1(\"eid\", {\r\n                      required: \"Please enter your eid.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Trade License Number :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"Trade License Number\"}\r\n                    error={errors1?.trade?.message}\r\n                    register={register1(\"trade\", {\r\n                      required: \"Please enter your trade.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <SelectField\r\n                    disabled={isDisabled}\r\n                    size={'small'}\r\n                    label={'Payment Type *:'}\r\n                    options={[{ id: 'Credit', name: 'Credit' }, { id: 'Cash', name: 'Cash' }]}\r\n                    selected={selectedType}\r\n                    onSelect={(value) => setSelectedType(value)}\r\n                    error={errors?.paymentType?.message}\r\n                    register={register(\"paymentType\", {\r\n                      required: 'Please select type.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <SelectField\r\n                    disabled={isDisabled}\r\n                    size={'small'}\r\n                    label={'Credit Status *:'}\r\n                    options={[\r\n                      { id: 'Good History', name: 'Good History' },\r\n                      { id: 'In Liquidation', name: 'In Liquidation' },\r\n                      { id: 'No More Work until Payment Received', name: 'No More Work until Payment Received' }\r\n                    ]}\r\n                    selected={status}\r\n                    onSelect={(value) => setStatus(value)}\r\n                    error={errors?.status?.message}\r\n                    register={register(\"status\", {\r\n                      required: 'Please select status.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <SelectField\r\n                    disabled={isDisabled}\r\n                    size={'small'}\r\n                    label={'Cost Center *:'}\r\n                    options={[\r\n                      { id: 'Tasheel', name: 'Tasheel' },\r\n                      { id: 'DED', name: 'DED' },\r\n                      { id: 'Typing', name: 'Typing' },\r\n                      { id: 'General', name: 'General' }\r\n                    ]}\r\n                    selected={center}\r\n                    onSelect={(value) => setCenter(value)}\r\n                    error={errors?.center?.message}\r\n                    register={register(\"center\", {\r\n                      required: 'Please select center.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <SelectField\r\n                    disabled={isDisabled}\r\n                    size={'small'}\r\n                    label={'Balance Type *:'}\r\n                    options={[{ id: 'Credit', name: 'Credit' }, { id: 'Debit', name: 'Debit' }]}\r\n                    selected={balanceType}\r\n                    onSelect={(value) => setBalanceType(value)}\r\n                    error={errors?.type?.message}\r\n                    register={register(\"type\", {\r\n                      required: 'Please select type account.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <DatePicker\r\n                    disabled={isDisabled}\r\n                    label={\"Opening Balance Date :*\"}\r\n                    value={date}\r\n                    size={'small'}\r\n                    error={errors1?.date?.message}\r\n                    register={register1(\"date\", {\r\n                      required: date ? false : \"Please enter date.\"\r\n                    })}\r\n                    onChange={(date) => {\r\n                      setValue1('date', date);\r\n                      setDate(new Date(date));\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Opening Balance :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"Opening Balance \"}\r\n                    error={errors1?.balance?.message}\r\n                    register={register1(\"balance\", {\r\n                      required: \"Please enter your balance.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Credit Limit :*\"}\r\n                    size={'small'}\r\n                    type={'number'}\r\n                    placeholder={\"Credit Limit\"}\r\n                    error={errors1?.credit?.message}\r\n                    register={register1(\"credit\", {\r\n                      required: \"Please enter your credit.\"\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={5.5}>\r\n                  <InputField\r\n                    disabled={isDisabled}\r\n                    label={\"Notes :\"}\r\n                    multiline\r\n                    rows={4}\r\n                    size={'small'}\r\n                    placeholder={\"Notes\"}\r\n                    error={errors1?.notes?.message}\r\n                    register={register1(\"notes\")}\r\n                  />\r\n                </Grid>\r\n                \r\n              </Grid>\r\n            </Box>\r\n          </Box>\r\n        </>}\r\n\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateCustomer;"],"names":["_errors1$name","_errors1$mobile","_errors1$email","_errors1$address","_errors1$trn","_errors1$eid","_errors1$trade","_errors$paymentType","_errors$status","_errors$center","_errors$type","_errors1$date","_errors1$balance","_errors1$credit","_errors1$notes","useTheme","user","useAuth","navigate","useNavigate","id","useParams","formChange","setFormChange","useState","submit","setSubmit","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","watch","errors1","console","log","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","selectedDue","setSelectedDue","name","passport","setPassport","allocation","setAllocation","depositError","setDepositError","loading","setLoading","emailVerify","setEmailVerify","isUploading","setIsUploading","loader","setLoader","fieldsDisabled","setFieldsDisabled","monthlyVisaServiceCharges","vipMedical","extraTyping","center","setCenter","status","setStatus","stepFormData","setStepFormData","step1FormData","setStep1FormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","useEffect","async","params","customer_id","data","CustomerServices","getCustomerDetail","detail","customer","email","mobile","address","trn","eid","trade_license_no","opening_balance_type","credit_status","cost_center","type","Date","opening_balance_date","opening_balance","credit_limit","general_notes","error","getData","isDisabled","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","formData","obj","trade","balance","credit","notes","promise","UpdateCustomer","showPromiseToast","response","responseCode","ErrorToaster","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","InputField","disabled","label","size","placeholder","message","required","pattern","value","SelectField","options","selected","onSelect","paymentType","DatePicker","onChange","multiline","rows"],"sourceRoot":""}