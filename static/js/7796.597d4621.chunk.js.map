{"version":3,"file":"static/js/7796.597d4621.chunk.js","mappings":"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","sources":["pages/Dashboard/Customers/CreateCustomer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Checkbox, Container, FormControlLabel, Grid, IconButton, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n\r\nfunction CreateCustomer() {\r\n  const theme = useTheme();\r\n  const { user } = useAuth()\r\n  const navigate = useNavigate()\r\n  const [formChange, setFormChange] = useState(false)\r\n  const [submit, setSubmit] = useState(false)\r\n\r\n  const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n  const {\r\n    register: register1,\r\n    handleSubmit: handleSubmit1,\r\n    setValue: setValue1,\r\n    getValues: getValues1,\r\n    watch,\r\n    formState: { errors: errors1 },\r\n\r\n  } = useForm();\r\n\r\n  // Watch all form data\r\nconsole.log(watch());\r\n\r\n\r\n  const isFormDataEmpty = (data) => {\r\n    // Check if all form fields are empty\r\n    return Object.values(data).every((value) => {\r\n      // If the value is an object (like companyLogo), check if it's empty\r\n      if (typeof value === 'object' && value !== null) {\r\n        return Object.keys(value).length === 0;\r\n      }\r\n      // Otherwise, check if the value is an empty string\r\n      return value === \"\";\r\n    });\r\n  };\r\n\r\n \r\n\r\n\r\n\r\n\r\n  const allowFilesType = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n    'application/pdf',\r\n    'application/vnd.ms-excel',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n  ];\r\n  const allowFilesType2 = [\r\n    'image/png',\r\n    'image/jpg',\r\n    'image/jpeg',\r\n\r\n  ];\r\n  const [guarantors, setGuarantors] = useState([])\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n  // *For Deposit Slip\r\n  const [progress, setProgress] = useState(0);\r\n  const [uploadedSize, setUploadedSize] = useState(0);\r\n  const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n  const [emailVerify, setEmailVerify] = useState(false)\r\n  \r\n\r\n  const [center, setCenter] = useState(null)\r\n  const [status, setStatus] = useState(null)\r\n\r\n  // *For Stepper Forms Data\r\n  const [stepFormData, setStepFormData] = useState()\r\n\r\n  const [selectedType, setSelectedType] = useState(null)\r\n  const [date, setDate] = useState(null)\r\n  const [balanceType, setBalanceType] = useState(null)\r\n\r\n  //documents array\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n  const submitForm1 = async (formData) => {\r\n    console.log(formData);\r\n    try {\r\n      let obj = {\r\n        name: formData?.name,\r\n        type: selectedType?.id,\r\n        mobile: formData?.mobile,\r\n        trn: formData?.trn,\r\n        eid: formData?.eid,\r\n        trade_license_no: formData?.trade,\r\n        opening_balance: formData?.balance,\r\n        opening_balance_type:balanceType?.id,\r\n        opening_balance_date:date,\r\n        credit_limit: formData?.credit,\r\n        credit_status: status?.id,\r\n        cost_center: center?.id,\r\n        general_notes: formData?.notes,\r\n        email: formData?.email,\r\n        address: formData?.address,\r\n      \r\n\r\n      };\r\n      const promise = CustomerServices.addCustomer(obj);\r\n\r\n      showPromiseToast(\r\n        promise,\r\n        'Saving...',\r\n        'Added Successfully',\r\n        'Something Went Wrong'\r\n      );\r\n      const response = await promise;\r\n      if (response?.responseCode === 200) {\r\n        navigate(\"/customer-list\");\r\n      }\r\n\r\n      \r\n    } catch (error) {\r\n      ErrorToaster(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n      </Box>\r\n      <Box m={3} sx={{backgroundColor:'white',borderRadius:\"12px\"}} >\r\n        {<>\r\n\r\n          <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n              <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Customer</Typography>\r\n\r\n            </Box>\r\n\r\n            <Box sx={{ p: 3 }}>\r\n\r\n\r\n              <Grid container sx={{ gap: '5px 25px' }}>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    label={\" Name :*\"}\r\n                    size={'small'}\r\n                    placeholder={\" Name\"}\r\n                    error={errors1?.name?.message}\r\n                    register={register1(\"name\", {\r\n                      required:\r\n                        \"Please enter your name.\"\r\n\r\n                    })}\r\n                  /></Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"Mobile :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"Mobile\"}\r\n                  error={errors1?.mobile?.message}\r\n                  register={register1(\"mobile\", {\r\n                    required:\r\n                      \"Please enter your mobile.\",\r\n                    pattern: {\r\n                      value: /^05[0-9]{8}$/,\r\n                      message: \"Please enter a valid UAE phone number (starting with 05 and 8 digits).\"\r\n                    }\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid item xs={2.8}>\r\n                  <InputField\r\n                    label={\"Email :*\"}\r\n                    size={\"small\"}\r\n                    placeholder={\"Email\"}\r\n                    error={errors1?.email?.message}\r\n                    register={register1(\"email\", {\r\n                      required: \"Please enter your email.\",\r\n                      onChange: (e) => {\r\n                        console.log('asdas');\r\n\r\n\r\n\r\n                      },\r\n                      pattern: {\r\n                        value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                        message: \"Please enter a valid email address.\"\r\n                      },\r\n\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\" Address :*\"}\r\n                  size={'small'}\r\n                  placeholder={\" Address\"}\r\n                  error={errors1?.address?.message}\r\n                  register={register1(\"address\", {\r\n                    required:\r\n                      \"Please enter your  address.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n\r\n\r\n\r\n\r\n\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"TRN Number :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"TRN Number\"}\r\n                  error={errors1?.trn?.message}\r\n                  register={register1(\"trn\", {\r\n                    required:\r\n                      \"Please enter your trn.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"EID Number :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"EID Number\"}\r\n                  error={errors1?.eid?.message}\r\n                  register={register1(\"eid\", {\r\n                    required:\r\n                      \"Please enter your eid.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"Trade License Number :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"Trade License Number\"}\r\n                  error={errors1?.trade?.message}\r\n                  register={register1(\"trade\", {\r\n                    required:\r\n                      \"Please enter your trade.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid item xs={2.8} >\r\n                  <SelectField\r\n                    size={'small'}\r\n                    label={'Payment Type *:'}\r\n\r\n                    options={[{ id: 'Credit', name: 'Credit' }, { id: 'Cash', name: 'Cash' }]}\r\n                    selected={selectedType}\r\n                    onSelect={(value) => {\r\n                      setSelectedType(value)\r\n\r\n\r\n                    }}\r\n                    error={errors?.type?.message}\r\n                    register={register(\"type\", {\r\n                      required: 'Please select type account.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8} >\r\n                  <SelectField\r\n                    size={'small'}\r\n                    label={'Credit Status *:'}\r\n\r\n                    options={[{ id: 'Good History', name: 'Good History' }, { id: 'In Liquidation', name: 'In Liquidation' }, { id: 'No More Work until Payment Received', name: 'No More Work until Payment Received' }]}\r\n                    selected={status}\r\n                    onSelect={(value) => {\r\n                      setStatus(value)\r\n\r\n\r\n                    }}\r\n                    error={errors?.status?.message}\r\n                    register={register(\"status\", {\r\n                      required: 'Please select status .',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8} >\r\n                  <SelectField\r\n                    size={'small'}\r\n                    label={'Cost Center *:'}\r\n\r\n                    options={[{ id: 'Tasheel', name: 'Tasheel' }, { id: 'DED', name: 'DED' }, { id: 'Typing', name: 'Typing' }, { id: 'General', name: 'General' }]}\r\n                    selected={center}\r\n                    onSelect={(value) => {\r\n                      setCenter(value)\r\n\r\n\r\n                    }}\r\n                    error={errors?.center?.message}\r\n                    register={register(\"center\", {\r\n                      required: 'Please select center .',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8} >\r\n                  <SelectField\r\n                    size={'small'}\r\n                    label={'Balance Type *:'}\r\n\r\n                    options={[{ id: 'Credit', name: 'Credit' }, { id: 'Debit', name: 'Debit' }]}\r\n                    selected={balanceType}\r\n                    onSelect={(value) => {\r\n                      setBalanceType(value)\r\n\r\n\r\n                    }}\r\n                    error={errors?.credittype?.message}\r\n                    register={register(\"credittype\", {\r\n                      required: 'Please select type account.',\r\n                    })}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2.8}>\r\n                  <DatePicker\r\n                    label={\"Opening Balance Date :*\"}\r\n                    value={date}\r\n                    size={'small'}\r\n\r\n                    error={errors1?.date?.message}\r\n                    register={register1(\"date\", {\r\n                      required:\r\n                        date ? false :\r\n                          \"please enter  date.\"\r\n\r\n                    })}\r\n                    onChange={(date) => {\r\n\r\n                      setValue1('date', date)\r\n                      setDate(new Date(date));\r\n\r\n                    }\r\n\r\n                    }\r\n                  /></Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"Opening Balance :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"Opening Balance \"}\r\n                  error={errors1?.balance?.message}\r\n                  register={register1(\"balance\", {\r\n                    required:\r\n                      \"Please enter your balance.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid item xs={2.8}><InputField\r\n                  label={\"Credit Limit :*\"}\r\n                  size={'small'}\r\n                  type={'number'}\r\n                  placeholder={\"Credit Limit\"}\r\n                  error={errors1?.credit?.message}\r\n                  register={register1(\"credit\", {\r\n                    required:\r\n                      \"Please enter your credit.\"\r\n\r\n                  })}\r\n                /></Grid>\r\n\r\n                <Grid item xs={5.5}><InputField\r\n                  label={\"Notes :\"}\r\n                  multiline\r\n                  rows={4}\r\n                  size={'small'}\r\n                  placeholder={\"Notes\"}\r\n                  error={errors1?.notes?.message}\r\n                  register={register1(\"notes\", {\r\n                    required:\r\n                      false\r\n\r\n                  })}\r\n                /></Grid>\r\n                <Grid  container justifyContent={'flex-end'}>\r\n                <PrimaryButton \r\n                 bgcolor={'#bd9b4a'}\r\n                  title=\"Submit\"\r\n                  type={'submit'}\r\n                  \r\n\r\n                />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Box></>}\r\n\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateCustomer;"],"names":["_errors1$name","_errors1$mobile","_errors1$email","_errors1$address","_errors1$trn","_errors1$eid","_errors1$trade","_errors$type","_errors$status","_errors$center","_errors$credittype","_errors1$date","_errors1$balance","_errors1$credit","_errors1$notes","useTheme","user","useAuth","navigate","useNavigate","formChange","setFormChange","useState","submit","setSubmit","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","watch","errors1","console","log","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","emailVerify","setEmailVerify","center","setCenter","status","setStatus","stepFormData","setStepFormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","async","formData","obj","name","type","id","mobile","trn","eid","trade_license_no","trade","opening_balance","balance","opening_balance_type","opening_balance_date","credit_limit","credit","credit_status","cost_center","general_notes","notes","email","address","promise","CustomerServices","addCustomer","showPromiseToast","response","responseCode","error","ErrorToaster","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","InputField","label","size","placeholder","message","required","pattern","value","onChange","e","SelectField","options","selected","onSelect","credittype","DatePicker","Date","multiline","rows","PrimaryButton","bgcolor","title"],"sourceRoot":""}