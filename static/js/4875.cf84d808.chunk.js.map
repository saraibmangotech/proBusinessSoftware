{"version":3,"file":"static/js/4875.cf84d808.chunk.js","mappings":"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","sources":["pages/Dashboard/ServiceItem/CreateServiceItem.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, Box, Checkbox, Container, FormControlLabel, FormLabel, Grid, IconButton, InputLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport RegisterContainer from 'container/Register'\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport UploadFile from 'components/UploadFile';\r\nimport InputField from 'components/Input';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { FormControl } from '@mui/base';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport SelectField from 'components/Select';\r\nimport { CleanTypes, Debounce2, getFileSize, handleDownload } from 'utils';\r\nimport instance from 'config/axios';\r\nimport routes from 'services/System/routes';\r\nimport CustomerServices from 'services/Customer';\r\nimport CustomerService from '../DashboardPages/CustomerService';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport moment from 'moment';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport SystemServices from 'services/System';\r\nimport UploadFileSingle from 'components/UploadFileSingle';\r\nimport { Images } from 'assets';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport { addMonths } from 'date-fns';\r\nimport { useAuth } from 'context/UseContext';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\nimport axios from 'axios';\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport FinanceServices from 'services/Finance';\r\n\r\n\r\nfunction CreateCategory() {\r\n    const theme = useTheme();\r\n    const { user } = useAuth()\r\n    const navigate = useNavigate()\r\n    const [formChange, setFormChange] = useState(false)\r\n    const [submit, setSubmit] = useState(false)\r\n    const [excludeFromSales, setExcludeFromSales] = useState('no');\r\n    const [excludeFromPurchase, setExcludeFromPurchase] = useState('no');\r\n\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const {\r\n        register: register1,\r\n        handleSubmit: handleSubmit1,\r\n        setValue: setValue1,\r\n        getValues: getValues1,\r\n        control,\r\n        watch,\r\n        formState: { errors: errors1 },\r\n\r\n    } = useForm();\r\n\r\n    // Watch all form data\r\n    console.log(watch());\r\n\r\n\r\n    const isFormDataEmpty = (data) => {\r\n        // Check if all form fields are empty\r\n        return Object.values(data).every((value) => {\r\n            // If the value is an object (like companyLogo), check if it's empty\r\n            if (typeof value === 'object' && value !== null) {\r\n                return Object.keys(value).length === 0;\r\n            }\r\n            // Otherwise, check if the value is an empty string\r\n            return value === \"\";\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    const allowFilesType2 = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n\r\n    ];\r\n    const [guarantors, setGuarantors] = useState([])\r\n    const [activeStep, setActiveStep] = React.useState(1);\r\n\r\n    // *For Deposit Slip\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [slipDetail, setSlipDetail] = useState([]);\r\n\r\n\r\n    const [selectedDue, setSelectedDue] = useState({ id: 'Instant', name: 'Instant' })\r\n    const [passport, setPassport] = useState()\r\n    const [allocation, setAllocation] = useState(false)\r\n    const [depositError, setDepositError] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [emailVerify, setEmailVerify] = useState(false)\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [loader, setLoader] = useState(false)\r\n    const [fieldsDisabled, setFieldsDisabled] = useState({\r\n        monthlyVisaServiceCharges: false,\r\n        vipMedical: false,\r\n        extraTyping: true,\r\n    });\r\n\r\n    const [center, setCenter] = useState(null)\r\n    const [status, setStatus] = useState(null)\r\n\r\n    // *For Stepper Forms Data\r\n    const [stepFormData, setStepFormData] = useState()\r\n    const [step1FormData, setStep1FormData] = useState();\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [date, setDate] = useState(null)\r\n    const [balanceType, setBalanceType] = useState(null)\r\n    const [imageURL, setImageURL] = useState(null)\r\n    const fileInputRef = useRef(null);\r\n    const [hovered, setHovered] = useState(false);\r\n    const [accounts, setAccounts] = useState([])\r\n    const [salesAccount, setSalesAccount] = useState(null)\r\n    const [inventoryAccount, setInventoryAccount] = useState(null)\r\n    const [cogsAccount, setCogsAccount] = useState(null)\r\n    const [adjustmentAccount, setAdjustmentAccount] = useState(null)\r\n    const [assemblyAccount, setAssemblyAccount] = useState(null)\r\n    const [itemType, setItemType] = useState(null)\r\n    const [unit, setUnit] = useState(null)\r\n    const [taxes, setTaxes] = useState([])\r\n    const [tax, setTax] = useState(null)\r\n    const [category, setCategory] = useState(null)\r\n    const [categories, setCategories] = useState(null)\r\n    const [governmentAccount, setGovernmnentAccount] = useState(null)\r\n    const [description, setDescription] = useState(null)\r\n    const [ownGovBank, setOwnGovBank] = useState(null)\r\n    //documents array\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file.size);\r\n            console.log(getFileSize(file.size))\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n                setSlipDetail(docs);\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const submitForm = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.companyName,\r\n\r\n                phone: formData?.mobile,\r\n                email: formData?.email,\r\n                address: formData?.businessAddress,\r\n                website: formData?.businessWebsite,\r\n                cp_name: formData?.personName,\r\n                cp_mobile: formData?.phone,\r\n\r\n            };\r\n\r\n            setStepFormData(obj);\r\n            handleNext()\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const submitForm1 = async (formData) => {\r\n        console.log(formData);\r\n        try {\r\n            let obj = {\r\n                name: formData?.name,\r\n                name_ar: formData?.arabic,\r\n                category_id :category?.id,\r\n                center_fee:Number(formData?.center_fee),\r\n                govt_bank_account_id:governmentAccount?.id,\r\n                bank_service_charge:Number(formData?.bank_service_charges),\r\n                government_fee :Number(formData?.govtFee),\r\n                other_charge:Number(formData?.other_charge),\r\n                local_commission: Number(formData?.local_commission),\r\n                item_tax_type:tax?.name,\r\n                editable_description:description?.id,\r\n                sales_account_id:salesAccount?.id,\r\n                use_own_govt_bank:ownGovBank?.id,\r\n                cogs_account_id:cogsAccount?.id,\r\n                vat_bank_charge:Number(formData?.vat_bank_charge),\r\n                non_local_commission:Number(formData?.non_local_commission),\r\n                \r\n        \r\n\r\n\r\n            };\r\n            console.log(obj)\r\n            const promise = CustomerServices.AddServiceItem(obj);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                'Saving...',\r\n                'Added Successfully',\r\n                'Something Went Wrong'\r\n            );\r\n            const response = await promise;\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/service-list\");\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const handleFileChange = async (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                `${process.env.REACT_APP_BASE_URL}/system/uploadDocuments`,\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL(response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    // *For Get Account\r\n    const getAccounts = async (page, limit, filter) => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getAccounts(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setAccounts(data?.accounts?.rows)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getTax= async () => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n                \r\n\r\n            }\r\n\r\n            const { data } = await FinanceServices.getTax(params)\r\n            console.log(data?.accounts?.rows);\r\n\r\n            setTaxes(data?.tax)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n    const getCategories= async () => {\r\n        // setLoader(true)\r\n        try {\r\n\r\n            let params = {\r\n                page: 1,\r\n                limit: 1000,\r\n                \r\n\r\n            }\r\n\r\n            const { data } = await CustomerServices.getCategoryList(params)\r\n\r\n            setCategories(data?.categories)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        } finally {\r\n            // setLoader(false)\r\n        }\r\n    }\r\n\r\n    const verifyEmail = async (value) => {\r\n        let Myemail = getValues1('email')\r\n        if (Myemail) {\r\n\r\n            try {\r\n                let obj = {\r\n                    email: Myemail.toLowerCase(),\r\n                    validate: true\r\n\r\n\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n                console.log(status);\r\n                if (status) {\r\n                    setEmailVerify(true)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setEmailVerify(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAccounts()\r\n        getTax()\r\n        getCategories()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: \"100%\" }}>\r\n\r\n\r\n            </Box>\r\n            <Box m={3} sx={{ backgroundColor: 'white', borderRadius: \"12px\" }} >\r\n                {<>\r\n\r\n                    <Box component={'form'} onSubmit={handleSubmit1(submitForm1)}>\r\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', p: 3, alignItems: 'flex-end' }}>\r\n                            <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >Create Service Item</Typography>\r\n\r\n                        </Box>\r\n\r\n                        <Box sx={{ p: 3 }}>\r\n                            <Grid container sx={{ gap: '5px 25px' }}>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\" Name :*\"}\r\n                                        size={'small'}\r\n                                        placeholder={\" Name\"}\r\n                                        error={errors1?.name?.message}\r\n                                        register={register1(\"name\", {\r\n                                            required:\r\n                                                \"Please enter your name.\"\r\n\r\n                                        })}\r\n                                    /></Grid>\r\n\r\n\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Arabic Name :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Arabic Name\"}\r\n                                        error={errors1?.arabic?.message}\r\n                                        register={register1(\"arabic\", {\r\n                                            required: \"Please enter your arabic.\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Center Fee :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Center fee\"}\r\n                                        error={errors1?.center_fee?.message}\r\n                                        register={register1(\"center_fee\", {\r\n                                            required: \"Please Enter Center fee.\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Bank Services Charges :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Service Charges\"}\r\n                                        error={errors1?.bank_service_charges?.message}\r\n                                        register={register1(\"bank_service_charges\", {\r\n                                            required: \"Please Enter Bank Service Charges .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Govt Fees :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Govt Fees \"}\r\n                                        error={errors1?.govtFee?.message}\r\n                                        register={register1(\"govtFee\", {\r\n                                            required: \"Please Enter govt fee .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Other Charges :*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Other Charges\"}\r\n                                        error={errors1?.other_charge?.message}\r\n                                        register={register1(\"other_charge\", {\r\n                                            required: \"Please Enter Other Charges .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Local Commission:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Local Commission\"}\r\n                                        error={errors1?.local_commission?.message}\r\n                                        register={register1(\"local_commission\", {\r\n                                            required: \"Please Enter Local Commission .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"Non Local Commission:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"Non Local Commission\"}\r\n                                        error={errors1?.non_local_commission?.message}\r\n                                        register={register1(\"non_local_commission\", {\r\n                                            required: \"Please Enter Non Local Commission .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8}>\r\n                                    <InputField\r\n                                        label={\"vat Bank Charge:*\"}\r\n                                        size={\"small\"}\r\n                                        placeholder={\"vat Bank Charge\"}\r\n                                        error={errors1?.vat_bank_charge?.message}\r\n                                        register={register1(\"vat_bank_charge\", {\r\n                                            required: \"Please Enter vat Bank Charge .\",\r\n                                            onChange: (e) => {\r\n                                                console.log('asdas');\r\n\r\n\r\n\r\n                                            },\r\n\r\n\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Category *:'}\r\n\r\n                                        options={categories}\r\n                                        selected={category}\r\n                                        onSelect={(value) => {\r\n                                            setCategory(value)\r\n                                            console.log(value);\r\n                                            setAdjustmentAccount(value?.inventory_adjustment_account)\r\n                                            setSalesAccount(value?.sales_account)\r\n                                            setCogsAccount(value?.cogs_account)\r\n                                            setTax({id:value?.item_tax_type , name :value?.item_tax_type})\r\n                                            \r\n                                        }}\r\n                                        error={errors?.category?.message}\r\n                                        register={register(\"category\", {\r\n                                            required: 'Please select category .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Tax Type *:'}\r\n\r\n                                        options={taxes}\r\n                                        selected={tax}\r\n                                        onSelect={(value) => {\r\n                                            setTax(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.tax?.message}\r\n                                        register={register(\"tax\", {\r\n                                            required: 'Please select tax .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Govt Bank Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={governmentAccount}\r\n                                        onSelect={(value) => {\r\n                                            setGovernmnentAccount(value)\r\n\r\n                                        }}\r\n                                        error={errors?.governmentAccount?.message}\r\n                                        register={register(\"governmentAccount\", {\r\n                                            required: 'Please select Government Account .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                               \r\n\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Sales Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={salesAccount}\r\n                                        onSelect={(value) => {\r\n                                            setSalesAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.sales?.message}\r\n                                        register={register(\"sales\", {\r\n                                            required: 'Please select sales account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                              \r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Cogs Account *:'}\r\n\r\n                                        options={accounts}\r\n                                        selected={cogsAccount}\r\n                                        onSelect={(value) => {\r\n                                            setCogsAccount(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.cogs?.message}\r\n                                        register={register(\"cogs\", {\r\n                                            required: 'Please select cogs account.',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                              \r\n                              \r\n                            \r\n                                \r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Use Own Gov Bank *:'}\r\n\r\n                                        options={[{ id: true, name: 'Yes' }, { id: false, name: 'No' }]}\r\n                                        selected={ownGovBank}\r\n                                        onSelect={(value) => {\r\n                                            setOwnGovBank(value)\r\n\r\n                                        }}\r\n                                        error={errors?.use_own_govt_bank?.message}\r\n                                        register={register(\"use_own_govt_bank\", {\r\n                                            required: 'Please select Editable Description .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2.8} >\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        label={'Editable Description *:'}\r\n\r\n                                        options={[{ id: true, name: 'Yes' }, { id: false, name: 'No' }]}\r\n                                        selected={description}\r\n                                        onSelect={(value) => {\r\n                                            setDescription(value)\r\nconsole.log(value)\r\n\r\n                                        }}\r\n                                        error={errors?.editable_description?.message}\r\n                                        register={register(\"editable_description\", {\r\n                                            required: 'Please select Editable Description .',\r\n                                        })}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <Grid container justifyContent={'flex-end'}>\r\n                                    <PrimaryButton\r\n                                       bgcolor={'#bd9b4a'}\r\n                                        title=\"Submit\"\r\n                                        type={'submit'}\r\n\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box></>}\r\n\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateCategory;"],"names":["_errors1$name","_errors1$arabic","_errors1$center_fee","_errors1$bank_service","_errors1$govtFee","_errors1$other_charge","_errors1$local_commis","_errors1$non_local_co","_errors1$vat_bank_cha","_errors$category","_errors$tax","_errors$governmentAcc","_errors$sales","_errors$cogs","_errors$use_own_govt_","_errors$editable_desc","useTheme","user","useAuth","navigate","useNavigate","formChange","setFormChange","useState","submit","setSubmit","excludeFromSales","setExcludeFromSales","excludeFromPurchase","setExcludeFromPurchase","register","handleSubmit","getValues","setValue","formState","errors","useForm","register1","handleSubmit1","setValue1","getValues1","control","watch","errors1","console","log","guarantors","setGuarantors","activeStep","setActiveStep","React","progress","setProgress","uploadedSize","setUploadedSize","slipDetail","setSlipDetail","selectedDue","setSelectedDue","id","name","passport","setPassport","allocation","setAllocation","depositError","setDepositError","loading","setLoading","emailVerify","setEmailVerify","isUploading","setIsUploading","loader","setLoader","fieldsDisabled","setFieldsDisabled","monthlyVisaServiceCharges","vipMedical","extraTyping","center","setCenter","status","setStatus","stepFormData","setStepFormData","step1FormData","setStep1FormData","selectedType","setSelectedType","date","setDate","balanceType","setBalanceType","imageURL","setImageURL","hovered","setHovered","useRef","accounts","setAccounts","salesAccount","setSalesAccount","inventoryAccount","setInventoryAccount","cogsAccount","setCogsAccount","adjustmentAccount","setAdjustmentAccount","assemblyAccount","setAssemblyAccount","itemType","setItemType","unit","setUnit","taxes","setTaxes","tax","setTax","category","setCategory","categories","setCategories","governmentAccount","setGovernmnentAccount","description","setDescription","ownGovBank","setOwnGovBank","useEffect","async","_data$accounts","_data$accounts2","params","page","limit","data","FinanceServices","getAccounts","rows","error","ErrorToaster","_data$accounts3","getTax","CustomerServices","getCategoryList","getCategories","_jsxs","_Fragment","children","_jsx","Box","sx","width","m","backgroundColor","borderRadius","component","onSubmit","formData","obj","name_ar","arabic","category_id","center_fee","Number","govt_bank_account_id","bank_service_charge","bank_service_charges","government_fee","govtFee","other_charge","local_commission","item_tax_type","editable_description","sales_account_id","use_own_govt_bank","cogs_account_id","vat_bank_charge","non_local_commission","promise","AddServiceItem","showPromiseToast","response","responseCode","display","justifyContent","gap","p","alignItems","Typography","fontSize","fontWeight","Grid","container","item","xs","InputField","label","size","placeholder","message","required","onChange","e","SelectField","options","selected","onSelect","value","inventory_adjustment_account","sales_account","cogs_account","sales","cogs","PrimaryButton","bgcolor","title","type"],"sourceRoot":""}