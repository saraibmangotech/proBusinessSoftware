{"version":3,"file":"static/js/3561.42ef7fc0.chunk.js","mappings":"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","sources":["pages/Dashboard/Commission/CreateAgent.js"],"sourcesContent":["import UploadFile from 'components/UploadFile';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport Colors from 'assets/Style/Colors';\r\nimport DatePicker from 'components/DatePicker';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport instance from 'config/axios';\r\nimport React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport routes from 'services/System/routes';\r\nimport { CleanTypes, Debounce2, getFileSize } from 'utils';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport CommissionServices from 'services/Commission';\r\nimport { showErrorToast, showPromiseToast } from 'components/NewToaster';\r\nimport InputField from 'components/Input';\r\nimport LabelCustomInput from 'components/Input/LabelCustomInput';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useCallbackPrompt } from 'hooks/useCallBackPrompt';\r\nimport CustomerServices from 'services/Customer';\r\nimport { addMonths } from 'date-fns';\r\nimport moment from 'moment';\r\n\r\nconst CreateAgent = () => {\r\n    const [submit, setSubmit] = useState(true)\r\n    const allowFilesType = [\r\n        'image/png',\r\n        'image/jpg',\r\n        'image/jpeg',\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n\r\n    const [handleBlockedNavigation] =\r\n        useCallbackPrompt(submit)\r\n\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors }, setError } = useForm();\r\n    const navigate = useNavigate()\r\n    const [progress, setProgress] = useState(0);\r\n    const [uploadedSize, setUploadedSize] = useState(0);\r\n    const [tradeLiscense, setTradeLiscense] = useState()\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [emirateIds, setEmirateIds] = useState()\r\n    const [passport, setPassport] = useState()\r\n    const [otherDoc, setOtherDoc] = useState()\r\n    const [agreement, setAgreement] = useState()\r\n    const [tradeLicenseWithExpiry, setTradeLicenseWithExpiry] = useState('');\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const [emirateIdsWithExpiry, setEmirateIdsWithExpiry] = useState('');\r\n\r\n    const [agreementWithExpiry, setAgreementWithExpiry] = useState('');\r\n\r\n    const [passportWithExpiry, setPassportWithExpiry] = useState(``)\r\n    const [loading, setLoading] = useState(false)\r\n    const [emailVerify, setEmailVerify] = useState(false)\r\n\r\n\r\n    const updateResult = (key, newResult) => {\r\n\r\n        console.log(newResult)\r\n        const updatedDocuments = documents.map(doc => {\r\n            if (doc.key === key) {\r\n                return { ...doc, path: newResult }; // Update the path\r\n            }\r\n            return doc; // Return the document as is if the key doesn't match\r\n        });\r\n        console.log(updatedDocuments, 'updatedDocuments');\r\n        setDocuments(updatedDocuments)\r\n    };\r\n    const handleDocArrayUpdate = async (field, value, key) => {\r\n        console.log(documents);\r\n\r\n        if (field === 'path') {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, path: value }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            // Assuming you want to update the documents array\r\n            // You can replace the following line with your state updating logic\r\n            setDocuments(updatedDocuments)\r\n        } else {\r\n            const updatedDocuments = documents.map(doc => {\r\n                if (doc.key === key) {\r\n                    return { ...doc, expiry_date: value }; // Update the path\r\n                }\r\n                return doc; // Return the document as is if the key doesn't match\r\n            });\r\n            console.log(updatedDocuments);\r\n            setDocuments(updatedDocuments)\r\n            // Handle other fields if needed\r\n        }\r\n    }\r\n    //documents array\r\n    const [documents, setDocuments] = useState([\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {\r\n            name: \"Trade License\",\r\n            key: \"tradeLicense\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Passport\",\r\n            key: \"passport\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Emirate Id's\",\r\n            key: \"emirateIds\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n\r\n        {\r\n            name: \"Agreement\",\r\n            key: \"Agreement\",\r\n            path: \"\",\r\n            expiry_date: null,\r\n            is_required: true\r\n        },\r\n        {\r\n            name: \"Other doc\",\r\n            key: \"otherdoc\",\r\n            path: \"\",\r\n            expiry_date: null\r\n        },\r\n    ]\r\n    )\r\n    // *For Upload Document\r\n    const handleUploadDocument = async (e, key) => {\r\n        setLoader(key)\r\n        try {\r\n            e.preventDefault();\r\n            let path = \"\";\r\n            console.log(e.target.files, \"length\");\r\n\r\n            const inputElement = e.target; // Store a reference to the file input element\r\n\r\n            for (let i = 0; i < e.target.files.length; i++) {\r\n                const file = e.target.files[i];\r\n                let arr = [\r\n                    {\r\n                        name: file?.name,\r\n                        file: \"\",\r\n                        type: file?.type.split(\"/\")[1],\r\n                        size: getFileSize(file.size),\r\n                        isUpload: false,\r\n                    },\r\n                ];\r\n\r\n                let maxSize = 10 * 1024 * 1024;\r\n                if (file.size > maxSize) {\r\n                    showErrorToast('File Size Must Be Less than 10 MB');\r\n                } else {\r\n                    if (allowFilesType.includes(file.type)) {\r\n                        // Add the current date before the file name\r\n                        const currentDate = new Date().toISOString().split('T')[0]; // e.g., \"2024-08-23\"\r\n                        const uniqueFileName = `${currentDate}_${file.name}`;\r\n\r\n                        // Create a new file with the date-prefixed name\r\n                        const newFile = new File([file], uniqueFileName, { type: file.type });\r\n\r\n                        // Upload the file with the new name\r\n                        const uploadedPath = await handleUpload(newFile, arr);\r\n\r\n                        if (path) {\r\n                            path += \",\" + uploadedPath;\r\n                        } else {\r\n                            path = uploadedPath;\r\n                        }\r\n                        setLoader(false)\r\n                    } else {\r\n                        showErrorToast(`File type ${file.type} is not allowed.`);\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(path, \"path\");\r\n\r\n            // Clear the file input after processing\r\n            inputElement.value = \"\";\r\n\r\n            return path;\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const verifyEmail = async (value) => {\r\n        let email = getValues('email')\r\n        if (email) {\r\n\r\n            try {\r\n                let obj = {\r\n                    email: email.toLowerCase(),\r\n\r\n                    validate: true\r\n\r\n\r\n                };\r\n\r\n                console.log(obj);\r\n\r\n                const { status } = await CustomerServices.addCustomer(obj);\r\n\r\n                console.log(status);\r\n                if (status) {\r\n                    setEmailVerify(true)\r\n                }\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setEmailVerify(false)\r\n                showErrorToast(error)\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleUpload = async (file, docs) => {\r\n        setProgress(0);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"document\", file);\r\n            console.log(file);\r\n            const { data } = await instance.post(routes.uploadDocuments, formData, {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const uploadedBytes = progressEvent.loaded;\r\n                    const percentCompleted = Math.round(\r\n                        (uploadedBytes * 100) / progressEvent.total\r\n                    );\r\n\r\n                    setProgress(percentCompleted);\r\n                    console.log(getFileSize(uploadedBytes));\r\n                    setUploadedSize(getFileSize(uploadedBytes));\r\n                },\r\n            });\r\n            if (data) {\r\n                docs[0].isUpload = true;\r\n                docs[0].file = data?.data?.nations;\r\n\r\n                console.log(data, 'asddasasd');\r\n                return data?.data?.path\r\n\r\n            }\r\n        } catch (error) {\r\n            ErrorToaster(error);\r\n        }\r\n    };\r\n    const CreateNewAgent = async (formData) => {\r\n        setSubmit(false)\r\n        setLoading(true)\r\n        console.log(formData);\r\n        let data = documents.find(item => item.key == 'passport')\r\n        console.log(data,'asdasad');\r\n\r\n        const currentDate = new Date();\r\n\r\n        \r\n        const checkExpiryDates = (documents) => {\r\n            let hasExpired = false; // Initialize flag as false\r\n\r\n            for (let i = 0; i < documents.length; i++) {\r\n                const doc = documents[i];\r\n\r\n                if (\r\n                    doc.expiry_date && // If the document has an expiry date\r\n                    doc.key !== \"passport\" && // Exclude Passport\r\n                    doc.key !== \"otherdoc\" // Exclude Other doc\r\n                ) {\r\n                    const expiryDate = moment(doc.expiry_date).startOf('day'); // Set expiryDate to start of the day\r\n                    const currentDate = moment().startOf('day'); // Set currentDate to start of the day\r\n                    \r\n                    console.log(expiryDate.format('YYYY-MM-DD')); // Format for clear output\r\n                    console.log(currentDate.format('YYYY-MM-DD'));\r\n                    \r\n                    if (expiryDate.isBefore(currentDate)) {\r\n                        showErrorToast(`${doc.name} Date is not Valid.`);\r\n                        hasExpired = true; // Set flag to true if any document is expired\r\n                        break;\r\n                    }\r\n                }   \r\n            }\r\n\r\n            return hasExpired; // Return true if any document is expired, otherwise false\r\n        };\r\n\r\n        const result = checkExpiryDates(documents);\r\n\r\n        if (moment(data?.expiry_date).startOf('day') < moment().add(6, 'months').startOf('day') && !result) {\r\n\r\n            showErrorToast('Passport Expiry Date Must Be greater than ' + moment().add(6, 'months').startOf('day').format('MM-DD-YYYY'));\r\n        \r\n        }\r\n        \r\n        else if (result){\r\n\r\n        }\r\n\r\n        else {\r\n\r\n\r\n            try {\r\n                let obj = {\r\n                    name: formData?.agentName,\r\n                    email: formData?.email,\r\n                    commission_visa: formData?.commissionVisa,\r\n                    commission_monthly: formData?.commissionMonthly,\r\n                    documents: documents\r\n\r\n                }\r\n                console.log(obj);\r\n                const promise = CommissionServices.CreateAgent(obj);\r\n\r\n                showPromiseToast(\r\n                    promise,\r\n                    'Saving ...',\r\n                    'Success',\r\n                    'Something Went Wrong'\r\n                );\r\n                const response = await promise;\r\n                if (response?.responseCode === 200) {\r\n                    navigate('/commission-list')\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n            } catch (error) {\r\n\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Box sx={{ p: 3 }} component={'form'} onSubmit={handleSubmit(CreateNewAgent)}>\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '10px', alignItems: 'flex-end' }}>\r\n                    <Typography sx={{ fontSize: \"22px\", fontWeight: 'bold' }} >ADD NEW</Typography>\r\n                    <Box sx={{ display: 'flex', gap: '10px' }}>\r\n                        <PrimaryButton\r\n                           bgcolor={'#bd9b4a'}\r\n                            title=\"Save\"\r\n                            disabled={!emailVerify ? true : false}\r\n                            type={'submit'}\r\n\r\n\r\n                        />\r\n\r\n                    </Box>\r\n                </Box>\r\n\r\n\r\n                <Grid container sx={{ gap: '5px 25px' }}>\r\n                    <Grid item xs={5}>\r\n                        <InputField\r\n                            label={\"Agent Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Agent Name\"}\r\n                            error={errors?.agentName?.message}\r\n                            register={register(\"agentName\", {\r\n                                required:\r\n                                    \"Please enter your agent name.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                    <Grid item xs={5}>\r\n                        <InputField\r\n                            label={\"Email :*\"}\r\n                            size={\"small\"}\r\n                            placeholder={\"Email\"}\r\n                            error={errors?.email?.message}\r\n                            register={register(\"email\", {\r\n                                required: \"Please enter your email.\",\r\n                                onChange: (e) => {\r\n                                    console.log('asdas');\r\n\r\n                                    Debounce2(() => verifyEmail());\r\n                                    // Delay the execution of verifyEmail by 2 seconds\r\n\r\n                                },\r\n                                pattern: {\r\n                                    value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                    message: \"Please enter a valid email address.\"\r\n                                },\r\n\r\n                            })}\r\n                        />\r\n                    </Grid>\r\n                    <Grid container sx={{ gap: '5px 25px' }}>\r\n                        <Grid item xs={5} >\r\n                            <LabelCustomInput label={'Commission on Visa :* '} max={100} step={'0.01'} StartLabel={'%'} placeholder={'Enter Percentage'} error={errors?.commissionVisa?.message} register={register(\"commissionVisa\", { required: \"Enter commission on Visa\" })} />\r\n                        </Grid>\r\n                        <Grid item xs={5} >\r\n                            <LabelCustomInput label={'Commission on Monthly Revenue :* '} max={100}  step={'0.01'} StartLabel={'%'} placeholder={'Enter Percentage'} error={errors?.commissionMonthly?.message} register={register(\"commissionMonthly\", { required: \"Enter Monthly Commission\" })} />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n                <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.textColorDarkBlue, mb: 2, mt: 2 }}>Upload Documents: </Typography>\r\n\r\n                <Grid container sx={{ gap: '5px 25px' }}>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Trade License:* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n\r\n                            updateResult={updateResult}\r\n                            fileId={'tradeLicense'}\r\n                            error={errors?.tradeLicense?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`tradeLicense`, {\r\n                                required: documents.find((item => item?.key == 'tradeLicense'))?.path != '' ? false :\r\n                                    \"Please upload your trade license.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e, \"tradeLicense\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path, 'tradeLicense');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                        {/* <UploadFile\r\n                  Memo={true}\r\n                  accept={allowFilesType}\r\n                  file={documents}\r\n                  multiple={true}\r\n                  updateResult={updateResult}\r\n                  fileId={'tradeLicense'}\r\n                  error={errors?.tradeLicense?.message}\r\n                  register={register(\"tradeLicense\", {\r\n                    required:\r\n                      documents.find((item => item?.key == 'tradeLicense'))?.path != '' ? false :\r\n                        \"Please upload your trade license .\"\r\n                    ,\r\n                    onChange: async (e) => {\r\n                      const path = await handleUploadDocument(e);\r\n                      if (path) {\r\n                        setTradeLiscense(path);\r\n                        handleDocArrayUpdate('path', path, 'tradeLicense')\r\n                      }\r\n                    }\r\n                  })}\r\n                /> */}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Passport :* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'passport'}\r\n                            error={errors?.passport?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`passport`, {\r\n                                required: documents.find((item => item?.key == 'passport'))?.path != '' ? false :\r\n                                    \"Please upload your passport.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e, \"passport\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path, 'passport');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Trade License  Expiry Date :*\"}\r\n                        value={tradeLicenseWithExpiry}\r\n                        error={errors?.LiscenseExp?.message}\r\n                        register={register(\"LiscenseExp\", {\r\n                            required:\r\n\r\n                                \"please enter your License expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('LiscenseExp', date)\r\n                            setTradeLicenseWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'tradeLicense')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Passport Expiry Date :*\"}\r\n                        value={passportWithExpiry}\r\n                        minDate={addMonths(new Date(), 6)}\r\n                        error={errors?.passportExp?.message}\r\n                        register={register(\"passportExp\", {\r\n                            required:\r\n\r\n                                \"please enter your passport expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('passportExp', date)\r\n                            setPassportWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'passport')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Emirate ID's:* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'emirateIds'}\r\n                            error={errors?.emirateIds?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`emirateIds`, {\r\n                                required: documents.find((item => item?.key == 'emirateIds'))?.path != '' ? false :\r\n                                    \"Please upload your trade emirateIds.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e, \"emirateIds\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path, 'emirateIds');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Agreement :* </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            error={errors?.Agreement?.message}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'Agreement'}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`Agreement`, {\r\n                                required: documents.find((item => item?.key == 'Agreement'))?.path != '' ? false :\r\n                                    \"Please upload your trade Agreement.\",\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e, \"Agreement\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path, 'Agreement');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Emirate ID's  Expiry Date :*\"}\r\n                        value={emirateIdsWithExpiry}\r\n                        error={errors?.emirateIDsExpiry?.message}\r\n                        register={register(\"emirateIDsExpiry\", {\r\n                            required:\r\n\r\n                                \"please enter your passport expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('emirateIDsExpiry', date)\r\n                            setEmirateIdsWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'emirateIds')\r\n                        }}\r\n                    /></Grid>\r\n                    <Grid item xs={5}><DatePicker\r\n                        disablePast={true}\r\n                        size={\"small\"}\r\n                        label={\"Agreement Expiry Date :*\"}\r\n                        value={agreementWithExpiry}\r\n                        error={errors?.agreementExpiry?.message}\r\n                        register={register(\"agreementExpiry\", {\r\n                            required:\r\n\r\n                                \"please enter your agreement expiry date.\"\r\n\r\n                        })}\r\n                        onChange={(date) => {\r\n\r\n                            setValue('agreementExpiry', date)\r\n                            setAgreementWithExpiry(new Date(date))\r\n                            handleDocArrayUpdate('date', new Date(date), 'Agreement')\r\n                        }}\r\n                    /></Grid>\r\n\r\n\r\n                    <Grid item xs={5}>\r\n                        <Typography sx={{ fontSize: '18px', fontWeight: 'bold', color: Colors.gray }}>Other Documents : </Typography>\r\n                        <UploadFile\r\n                            Memo={true}\r\n                            accept={allowFilesType}\r\n                            file={documents}\r\n                            multiple={true}\r\n                            updateResult={updateResult}\r\n                            fileId={'otherdoc'}\r\n                            error={errors?.otherdoc?.message}\r\n                            loader={loader}\r\n                            disabled={isUploading} // Disable while uploading\r\n                            register={register(`otherdoc`, {\r\n                                required: false,\r\n\r\n                                onChange: async (e) => {\r\n                                    setIsUploading(true); // Set uploading to true when the upload starts\r\n                                    const path = await handleUploadDocument(e, \"otherdoc\");\r\n                                    if (path) {\r\n                                        handleDocArrayUpdate('path', path, 'otherdoc');\r\n                                        console.log(path);\r\n                                    }\r\n                                    setIsUploading(false); // Reset uploading status when done\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateAgent\r\n"],"names":["CreateAgent","_errors$agentName","_errors$email","_errors$commissionVis","_errors$commissionMon","_errors$tradeLicense","_documents$find","_errors$passport","_documents$find2","_errors$LiscenseExp","_errors$passportExp","_errors$emirateIds","_documents$find3","_errors$Agreement","_documents$find4","_errors$emirateIDsExp","_errors$agreementExpi","_errors$otherdoc","submit","setSubmit","useState","allowFilesType","handleBlockedNavigation","useCallbackPrompt","register","handleSubmit","getValues","setValue","formState","errors","setError","useForm","navigate","useNavigate","progress","setProgress","uploadedSize","setUploadedSize","tradeLiscense","setTradeLiscense","loader","setLoader","emirateIds","setEmirateIds","passport","setPassport","otherDoc","setOtherDoc","agreement","setAgreement","tradeLicenseWithExpiry","setTradeLicenseWithExpiry","isUploading","setIsUploading","emirateIdsWithExpiry","setEmirateIdsWithExpiry","agreementWithExpiry","setAgreementWithExpiry","passportWithExpiry","setPassportWithExpiry","loading","setLoading","emailVerify","setEmailVerify","updateResult","key","newResult","console","log","updatedDocuments","documents","map","doc","path","setDocuments","handleDocArrayUpdate","async","field","value","expiry_date","name","is_required","handleUploadDocument","e","preventDefault","target","files","inputElement","i","length","file","arr","type","split","size","getFileSize","isUpload","maxSize","showErrorToast","includes","uniqueFileName","Date","toISOString","newFile","File","uploadedPath","handleUpload","error","ErrorToaster","docs","formData","FormData","append","data","instance","post","routes","uploadDocuments","onUploadProgress","progressEvent","uploadedBytes","loaded","percentCompleted","Math","round","total","_data$data","_data$data2","nations","_jsx","children","_jsxs","Box","sx","p","component","onSubmit","find","item","result","hasExpired","expiryDate","moment","startOf","currentDate","format","isBefore","checkExpiryDates","add","obj","agentName","email","commission_visa","commissionVisa","commission_monthly","commissionMonthly","promise","CommissionServices","showPromiseToast","response","responseCode","display","justifyContent","gap","alignItems","Typography","fontSize","fontWeight","PrimaryButton","bgcolor","title","disabled","Grid","container","xs","InputField","label","placeholder","message","required","onChange","Debounce2","toLowerCase","validate","status","CustomerServices","addCustomer","verifyEmail","pattern","LabelCustomInput","max","step","StartLabel","color","Colors","textColorDarkBlue","mb","mt","gray","UploadFile","Memo","accept","multiple","fileId","tradeLicense","DatePicker","disablePast","LiscenseExp","date","minDate","addMonths","passportExp","Agreement","emirateIDsExpiry","agreementExpiry","otherdoc"],"sourceRoot":""}