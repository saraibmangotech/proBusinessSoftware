{"version":3,"file":"static/js/5492.35313199.chunk.js","mappings":"igBAqBA,MAAMA,GAAMC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,EAAiBE,IAAA,IAAC,MAAEC,GAAOD,EAAA,MAAM,CACzCE,OAAQ,EAEX,IAEKC,GAAOL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,EAAkBO,IAAA,IAAC,MAAEJ,GAAOI,EAAA,MAAM,CAC3C,CAAC,KAAKC,EAAAA,EAAiBC,QAAS,CAC5BC,SAAU,GACVC,WAAY,cACZP,OAAQ,oBACRQ,QAAS,OACTC,UAAW,OACXC,WAAY,SACZC,MAAO,UACPC,aAAc,OACdC,WAAY,cACZC,WAAY,QAGhB,CAAC,KAAKV,EAAAA,EAAiBW,QAAS,CAC5BT,SAAU,GACVC,WAAY,cAEZS,SAAU,SACVR,QAAS,iBACTS,YAAa,kBAEb,eAAgB,CACZC,QAAS,OACTC,IAAK,MACLC,WAAY,SACZC,eAAgB,SAChB,eAAgB,CACZC,OAAQ,YAGhB,IAAO,CACHC,MAAO,OACPC,OAAQ,QAEZ,sBAAuB,CACnBC,cAAe,aACflB,WAAYmB,EAAAA,GAAWC,cACvBX,SAAU,UAEd,sBAAuB,CACnBR,QAAS,MACTe,MAAO,OACPC,OAAQ,SAGnB,IAEKI,GAAYC,EAAAA,EAAAA,GAAW,CACzBC,WAAY,CACRZ,QAAS,OACTM,OAAQ,IACR,QAAS,CACLD,MAAO,kBACPC,OAAQ,oBAGhBO,WAAY,CACRC,eAAgB,YAChBrB,MAAOsB,EAAAA,EAAOC,QACdZ,OAAQ,aAuqBhB,QAnqBA,WAEI,MAAMa,EAAUP,IACVQ,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,QAAO,OACnBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KAEzC,SAAEC,IAAaC,EAAAA,EAAAA,MAEfC,EAAY,CAAC,OAAQ,OAAQ,iBAAkB,eAAgB,gBAAiB,YAE/EC,EAAQC,IAAaL,EAAAA,EAAAA,WAAS,IAG9BM,EAAgBC,IAAqBP,EAAAA,EAAAA,aACrCQ,EAAaC,IAAkBT,EAAAA,EAAAA,aAG/BU,EAASC,IAAcX,EAAAA,EAAAA,UAAS,QAChCY,EAAYC,IAAiBb,EAAAA,EAAAA,aAE7Bc,EAAWC,IAAgBf,EAAAA,EAAAA,UAAS,KAGpCgB,EAAQC,IAAajB,EAAAA,EAAAA,UAAS,IA0B/BkB,EAAeA,CAACC,EAAOC,EAAUC,KAEnC,GAAIA,EAAO,CAGP,MACMC,GAD8B,OAAdhB,QAAc,IAAdA,OAAc,EAAdA,EAAgBiB,KAAIC,IAAI,IAAAC,EAAA,OAAQ,OAAJD,QAAI,IAAJA,GAAS,QAALC,EAAJD,EAAME,WAAG,IAAAD,OAAL,EAAJA,EAAWE,QAAOC,IAAkB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASC,KAAMT,GAAS,KAClEO,QAAOG,GAAOA,EAAIC,OAAS,IAIhEtB,EAAea,EAAeU,QAE9BrB,EAAWS,EACf,MAGI,GADAT,EAAWS,GACM,QAAbA,EAAoB,CAAC,IAADa,EAEpBlB,EAA8D,QAAlDkB,EAAC3B,EAAe4B,MAAKV,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAAMT,WAAS,IAAAa,OAAA,EAAjDA,EAAmDP,KAChEjB,EAAeH,EACnB,KAAO,CAAC,IAAD6B,EAEHpB,EAA8D,QAAlDoB,EAAC7B,EAAe4B,MAAKV,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAAMT,WAAS,IAAAe,OAAA,EAAjDA,EAAmDT,KAChE,MAAMd,EAAaN,EAAeqB,QAAOS,GAAKA,EAAEP,KAAOT,IAEvDX,EAAeG,EACnB,CACJ,EAKEyB,EAAgBR,IAClB,IACI,MAAMS,EAAetB,EAAOuB,QAAQV,GAC9BW,EAAY,IAAIxB,IAEA,IAAlBsB,EACAE,EAAUC,KAAKZ,GAEfW,EAAUE,OAAOJ,EAAc,GAGnCrB,EAAUuB,EACd,CAAE,MAAOG,IACLC,EAAAA,EAAAA,IAAaD,EACjB,GAwKEE,EAAYC,IAAQ,CACtBC,gBAAiBD,EAAW,UAAY,UACxC7E,MAAO6E,EAAW,kBAAoB,YAS1C,OALAE,EAAAA,EAAAA,YAAU,KAnPgBC,WACtB,IAAK,IAADC,EACE,MAAM,KAAEC,SAAeC,EAAAA,EAAgBC,oBACvCC,QAAQC,IAAIJ,GACd5C,EAAsB,OAAJ4C,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KACxB/C,EAAmB,OAAJ0C,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KAErB,MAAMC,EAAM,GACR,OAAJN,QAAI,IAAJA,GAAS,QAALD,EAAJC,EAAMK,WAAG,IAAAN,GAATA,EAAWQ,SAAQtB,IACf,IAAIuB,EAAM,CACN9B,GAAIO,EAAEP,GACN+B,KAAMxB,EAAEwB,KACRC,aAAczB,EAAEV,KAEpB+B,EAAIhB,KAAKkB,EAAI,IAEjB9C,EAAc4C,EAClB,CAAE,MAAOd,GAET,GAiOAU,EAAmB,GAEpB,KAGCS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,EAAGC,GAAI,GAAIC,SAAA,EACrBC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CACAC,GAAI,CACAxF,QAAS,OACTG,eAAgB,gBAChBD,WAAY,SACZ2F,GAAI,EACJC,GAAI,GACNH,UAEFC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAE/F,MAAOsB,EAAAA,EAAOkF,aAAc5G,WAAY,eAAgBsG,SAAC,yBAmB5FL,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGZ,GAAI,CAAEE,GAAI,GAAIC,SAAA,EACtCL,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAAClD,MAAI,EAACqD,GAAI,EAAGC,GAAI,EAAEX,SAAA,EACpBL,EAAAA,EAAAA,MAACiB,EAAAA,EAAI,CAACC,MAAOtE,EAASuE,SAAUA,CAAC9D,EAAOC,IAAaF,EAAaC,EAAOC,GAAU,GAAO+C,SAAA,EACtFC,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAACF,MAAM,MAAMG,MAAM,MAAMnB,GAAInB,EAAqB,QAAZnC,KAC/B,OAAVE,QAAU,IAAVA,OAAU,EAAVA,EAAYW,KAAI,CAACC,EAAM4D,KACpBhB,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAEAF,MAAW,OAAJxD,QAAI,IAAJA,OAAI,EAAJA,EAAMK,GACbsD,MAAW,OAAJ3D,QAAI,IAAJA,OAAI,EAAJA,EAAMoC,KACbI,GAAInB,EAASnC,KAAgB,OAAJc,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MAH1BuD,SAOjBhB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,MAAOlF,EAAamF,SAAUA,CAAC9D,EAAOC,IAAaF,EAAaC,EAAOC,GAAU,GAAM+C,SAC/E,OAATrD,QAAS,IAATA,OAAS,EAATA,EAAWS,KAAI,CAACC,EAAM4D,KACnBhB,EAAAA,EAAAA,KAACc,EAAAA,EAAG,CAEAF,MAAW,OAAJxD,QAAI,IAAJA,OAAI,EAAJA,EAAMK,GACbsD,MAAW,OAAJ3D,QAAI,IAAJA,OAAI,EAAJA,EAAMoC,KACbI,GAAInB,EAAS/C,KAAoB,OAAJ0B,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MAH9BuD,WAUrBhB,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CAAClD,MAAI,EAACqD,GAAI,EAAGC,GAAI,OAqBzBxE,GACG8D,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,UACLL,EAAAA,EAAAA,MAACwB,EAAAA,EAAS,CAACC,IAAK3F,EAAY4F,WAAW,EAAMC,UAAU,KAAKC,OAAQ,EAAEvB,SAAA,EAClEC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAAC4B,UAAU,WAAW3B,GAAI,CAAExF,QAAS,QAAS2F,UAC9CL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAExF,QAAS,OAAQG,eAAgB,iBAAkBwF,SAAA,EAC1DC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKR,GAAI,CAAE/F,MAAOsB,EAAAA,EAAOkF,aAAc5G,WAAY,cAAeqG,GAAI,GAAIC,SAAC,sBAG/FL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAE5F,WAAY,IAAKR,SAAU,OAAQgI,GAAI,IAAK3H,MAAOsB,EAAAA,EAAOkF,cAAgBN,SAAA,EAACC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,mBAA0B0B,MAASC,OAAO,uBAI9I1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAOjC,GAAI,CAAEkC,UAAW,6BAA8BC,aAAc,EAAGC,UAAW,uBAAyBT,UAAU,YAAWxB,UACvJL,EAAAA,EAAAA,MAACuC,EAAAA,EAAK,CAACC,cAAY,EAACtC,GAAI,CAAEuC,SAAU,KAAMpC,SAAA,EACtCC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CAAArC,UACNC,EAAAA,EAAAA,KAACjH,EAAAA,EAAQ,CAAAgH,SACJhE,EAAUoB,KAAI,CAACC,EAAM4D,KAClBhB,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SAAc3C,GAAR4D,UAI7ChB,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,CAAAtC,SACJ/D,GAwREgE,EAAAA,EAAAA,KAACnH,EAAG,CAAAkH,UACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACmJ,QAASvG,EAAU4B,OAAS,EAAG4E,MAAM,SAAS3C,GAAI,CAAE5F,WAAY,KAAM+F,UACxEC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAAC4B,UAAWlG,EAAQL,WAAW+E,UAC/BC,EAAAA,EAAAA,KAACwC,EAAAA,EAAgB,WA1RlB,OAAXpG,QAAW,IAAXA,OAAW,EAAXA,EAAauB,QAAS,GAClB+B,EAAAA,EAAAA,MAAA+C,EAAAA,SAAA,CAAA1C,SAAA,EACIC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACO,OAAX3D,QAAW,IAAXA,OAAW,EAAXA,EAAae,KAAI,CAACC,EAAM4D,KAAK,IAAA0B,EAAAC,EAAAC,EAAA,OAC1BlD,EAAAA,EAAAA,MAACuB,EAAAA,SAAQ,CAAAlB,SAAA,EACLC,EAAAA,EAAAA,KAACnH,EAAG,CAAAkH,UACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACmJ,QAAkB,OAATvG,QAAS,IAATA,OAAS,EAATA,EAAW4B,OAAOoC,UAC7BL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,YAAYR,GAAI,CAAEjG,UAAW,QAASoG,SAAA,EAC9C,IAA7BnD,EAAOuB,QAAQf,EAAKK,KACjBuC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAACtB,UAAU,WAAW3B,GAAI,CAAEkD,cAAe,MAAOtI,OAAQ,UAAWuI,SAAa,OAAJ3F,QAAI,IAAJA,GAAS,QAALsF,EAAJtF,EAAME,WAAG,IAAAoF,OAAL,EAAJA,EAAW/E,QAAS,EAAI,EAAI,GAAKqF,QAASA,IAAM/E,EAAab,EAAKK,OAE3JuC,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAAC1B,UAAU,WAAW3B,GAAI,CAAEkD,cAAe,MAAOtI,OAAQ,UAAW0I,UAAW,gBAAiBH,SAAa,OAAJ3F,QAAI,IAAJA,GAAS,QAALuF,EAAJvF,EAAME,WAAG,IAAAqF,OAAL,EAAJA,EAAWhF,QAAS,EAAI,EAAI,GAAKqF,QAASA,IAAM/E,EAAab,EAAKK,MAEtL,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMoC,aAIW,IAA7B5C,EAAOuB,QAAQf,EAAKK,MACjBuC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACA,OAAJ3C,QAAI,IAAJA,GAAS,QAALwF,EAAJxF,EAAME,WAAG,IAAAsF,OAAL,EAAJA,EAAWzF,KAAI,CAACK,EAAS2F,KAAC,IAAAC,EAAAC,EAAAC,EAAA,OACvB5D,EAAAA,EAAAA,MAACuB,EAAAA,SAAQ,CAAAlB,SAAA,EACLC,EAAAA,EAAAA,KAACnH,EAAG,CAAAkH,UACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACmJ,QAAkB,OAATvG,QAAS,IAATA,OAAS,EAATA,EAAW4B,OAAOoC,UAC7BL,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,QAAQR,GAAI,CAAE5F,WAAY,IAAKL,UAAW,OAAQ4J,GAAI,KAAMxD,SAAA,EACjE,IAAhCnD,EAAOuB,QAAQX,EAAQC,KACpBuC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAACtB,UAAU,WAAW3B,GAAI,CAAEkD,cAAe,MAAOtI,OAAQ,UAAWuI,SAAgB,OAAPvF,QAAO,IAAPA,GAAiB,QAAV4F,EAAP5F,EAASgG,gBAAQ,IAAAJ,OAAV,EAAPA,EAAmBzF,QAAS,EAAI,EAAI,GAAKqF,QAASA,IAAM/E,EAAaT,EAAQC,OAEtKuC,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAAC1B,UAAU,WAAW3B,GAAI,CAAEkD,cAAe,MAAOtI,OAAQ,UAAW0I,UAAW,gBAAiBH,SAAgB,OAAPvF,QAAO,IAAPA,GAAiB,QAAV6F,EAAP7F,EAASgG,gBAAQ,IAAAH,OAAV,EAAPA,EAAmB1F,QAAS,EAAI,EAAI,GAAKqF,QAASA,IAAM/E,EAAaT,EAAQC,MAE9L,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASgC,aAIW,IAAhC5C,EAAOuB,QAAQX,EAAQC,MACpBuC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACG,OAAPvC,QAAO,IAAPA,GAAiB,QAAV8F,EAAP9F,EAASgG,gBAAQ,IAAAF,OAAV,EAAPA,EAAmBnG,KAAI,CAACsG,EAASC,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACpC,IAAIC,EAAU,EACVC,EAAQ,EACZ,IAAW,OAAPT,QAAO,IAAPA,GAAsB,QAAfE,EAAPF,EAASU,qBAAa,IAAAR,OAAf,EAAPA,EAAwBhG,QAAS,EAAG,CAAC,IAADyG,EACpC,MAAMC,EAAe,CAAE,OAAU,EAAG,MAAS,GAEvCC,EAAgB,OAAPb,QAAO,IAAPA,GAAsB,QAAfW,EAAPX,EAASU,qBAAa,IAAAC,OAAf,EAAPA,EAAwBG,QAAO,CAACC,EAAaC,KACxD,MAAMC,EAASC,MAAiB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaG,cAAgB,EAAe,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAaG,aAC7DC,EAAQF,MAAiB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaK,aAAe,EAAe,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaK,YACjE,MAAO,CACH,OAAUC,WAAWP,EAAYE,QAAUK,WAAWL,GACtD,MAASK,WAAWP,EAAYK,OAASE,WAAWF,GACvD,GACFR,GACHJ,EAA8B,WAAb,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASuB,QAAqBD,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQO,OAASE,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQI,QAAUK,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQI,QAAUK,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQO,MAErJ,MAKIX,EAA4B,WAAb,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASuB,QAAqBD,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,aAAeC,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASmB,cAAgBG,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASmB,cAAgBG,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,aAGzK,OACIpF,EAAAA,EAAAA,MAACuB,EAAAA,SAAQ,CAAAlB,SAAA,EACLL,EAAAA,EAAAA,MAAC7G,EAAG,CAAAkH,SAAA,EACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAkB,OAAPkC,QAAO,IAAPA,GAAAA,EAASU,cAAgB9I,EAAQJ,WAAa,GAAI+H,QAASA,IAAM/E,EAAoB,OAAPwF,QAAO,IAAPA,OAAO,EAAPA,EAAShG,IAAIsC,UACxGC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,QAAQR,GAAI,CAAE2D,GAAI,GAAIxD,SACtC,QADsC6D,EACpD,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASwB,oBAAY,IAAArB,EAAAA,EAAI,SAGlC5D,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAkB,OAAPkC,QAAO,IAAPA,GAAAA,EAASU,cAAgB9I,EAAQJ,WAARI,aAAyC,YAAa2H,QAASA,IAAM/E,EAAoB,OAAPwF,QAAO,IAAPA,OAAO,EAAPA,EAAShG,IAAIsC,SAC/G,QAD+G8D,EAC7H,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASyB,oBAAY,IAAArB,EAAAA,EAAI,OAG9B7D,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACG,QADH+D,EACf,OAAPL,QAAO,IAAPA,OAAO,EAAPA,EAAS0B,wBAAgB,IAAArB,EAAAA,EAAI,OAElC9D,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACM,QADNgE,EACf,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,2BAAmB,IAAArB,EAAAA,EAAI,OAErC/D,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACf,OAAP0D,QAAO,IAAPA,GAAAA,EAASU,cAAgBF,EAAQoB,QAAQ,GAAKnB,EAAMmB,QAAQ,MAEjErF,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,WACQ,OAAP0D,QAAO,IAAPA,GAAAA,EAASU,iBACPnE,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAOL,UAAU,WAAW3B,GAAI,CAAEvF,IAAK,mBAAoB0F,UACvEL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACqD,QAASA,IAAM1H,EAAS,mBAA0B,OAAPmI,QAAO,IAAPA,OAAO,EAAPA,EAAShG,KAAM,CAAE6H,MAAO,CAAEC,YAAoB,OAAP9B,QAAO,IAAPA,OAAO,EAAPA,EAASyB,aAAcF,OAAe,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASuB,UAAYjF,SAAA,EACvIC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAC5F,GAAI,CAAE6F,QAAStK,EAAAA,EAAOuK,QAAS,UAAW,CAAED,QAAStK,EAAAA,EAAOuK,UAAY3F,UAChFC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAO+D,IAAKC,EAAAA,GAAOC,WAAYjG,GAAI,CAAElF,OAAQ,OAAQoL,UAAW,gBAEpF9F,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,oBAQf,IAAhCnD,EAAOuB,QAAQsF,EAAQhG,MACpBuC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACG,OAAP0D,QAAO,IAAPA,GAAsB,QAAfO,EAAPP,EAASU,qBAAa,IAAAH,OAAf,EAAPA,EAAwB7G,KAAI,CAACF,EAAOyG,KAAO,IAADqC,EAAAC,EAAAC,EAAAC,EACvC,IAAIC,EAAe,EAGnB,OADAA,EAAiC,WAAb,OAALlJ,QAAK,IAALA,OAAK,EAALA,EAAO+H,QAAqBD,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO6H,aAAeC,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO2H,cAAgBG,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO2H,cAAgBG,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO6H,cAE9J9E,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,UACLL,EAAAA,EAAAA,MAAC7G,EAAG,CAAC+G,GAAI,CAAE6F,QAAS,WAAY1F,SAAA,EAC5BC,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,UACDC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,QAAQR,GAAI,CAAE2D,GAAI,KAAMxD,SAC1C,QAD0CgG,EACxD,OAAL9I,QAAK,IAALA,OAAK,EAALA,EAAOgI,oBAAY,IAAAc,EAAAA,EAAI,SAGhC/F,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACH,QADGiG,EACjB,OAAL/I,QAAK,IAALA,OAAK,EAALA,EAAOiI,oBAAY,IAAAc,EAAAA,EAAI,OAG5BhG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACC,QADDkG,EACjB,OAALhJ,QAAK,IAALA,OAAK,EAALA,EAAOkI,wBAAgB,IAAAc,EAAAA,EAAI,OAEhCjG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACI,QADJmG,EACjB,OAALjJ,QAAK,IAALA,OAAK,EAALA,EAAOmI,2BAAmB,IAAAc,EAAAA,EAAI,OAEnClG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACtBoG,EAAad,QAAQ,MAE1BrF,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,UACDC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAOL,UAAU,WAAW3B,GAAI,CAAEvF,IAAK,mBAAoB0F,UACvEL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACqD,QAASA,IAAM1H,EAAS,mBAAwB,OAAL2B,QAAK,IAALA,OAAK,EAALA,EAAOQ,KAAM,CAAE6H,MAAO,CAAEC,YAAkB,OAALtI,QAAK,IAALA,OAAK,EAALA,EAAOiI,aAAcF,OAAa,OAAL/H,QAAK,IAALA,OAAK,EAALA,EAAO+H,UAAYjF,SAAA,EACjIC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAC5F,GAAI,CAAE6F,QAAStK,EAAAA,EAAOuK,QAAS,UAAW,CAAED,QAAStK,EAAAA,EAAOuK,UAAY3F,UAChFC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAO+D,IAAKC,EAAAA,GAAOC,WAAYjG,GAAI,CAAElF,OAAQ,OAAQoL,UAAW,gBAEpF9F,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,oBA1BjC2D,EAiCJ,QA3EhBA,EAgFJ,QAxHhBP,EA6HJ,QA7IZnC,EAiJJ,OAGnBhB,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SAEO,OAAX3D,QAAW,IAAXA,OAAW,EAAXA,EAAae,KAAI,CAACC,EAAM4D,KAAK,IAAAoF,EAAA,OAE1BpG,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,UAIDC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACA,OAAJ3C,QAAI,IAAJA,GAAc,QAAVgJ,EAAJhJ,EAAMoG,gBAAQ,IAAA4C,OAAV,EAAJA,EAAgBjJ,KAAI,CAACsG,EAASC,KAAO,IAAD2C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACjC,IAAIzC,EAAU,EACVC,EAAQ,EACZ,IAAW,OAAPT,QAAO,IAAPA,GAAsB,QAAf4C,EAAP5C,EAASU,qBAAa,IAAAkC,OAAf,EAAPA,EAAwB1I,QAAS,EAAG,CAAC,IAADgJ,EACpC,MAAMtC,EAAe,CAAE,OAAU,EAAG,MAAS,GAEvCC,EAAgB,OAAPb,QAAO,IAAPA,GAAsB,QAAfkD,EAAPlD,EAASU,qBAAa,IAAAwC,OAAf,EAAPA,EAAwBpC,QAAO,CAACC,EAAaC,KACxD,MAAMC,EAASC,MAAiB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaG,cAAgB,EAAe,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAaG,aAC7DC,EAAQF,MAAiB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaK,aAAe,EAAe,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaK,YACjE,MAAO,CACH,OAAUC,WAAWP,EAAYE,QAAUK,WAAWL,GACtD,MAASK,WAAWP,EAAYK,OAASE,WAAWF,GACvD,GACFR,GACHJ,EAA8B,WAAb,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASuB,QAAqBD,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQO,OAASE,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQI,QAAUK,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQI,QAAUK,WAAiB,OAANT,QAAM,IAANA,OAAM,EAANA,EAAQO,MAErJ,MAGIX,EAA4B,WAAb,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASuB,QAAqBD,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,aAAeC,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASmB,cAAgBG,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASmB,cAAgBG,WAAkB,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,aAEzK,OACIpF,EAAAA,EAAAA,MAACuB,EAAAA,SAAQ,CAAAlB,SAAA,EACLL,EAAAA,EAAAA,MAAC7G,EAAG,CAAAkH,SAAA,EACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAkB,OAAPkC,QAAO,IAAPA,GAAAA,EAASU,cAAgB9I,EAAQJ,WAAa,GAAI+H,QAASA,IAAM/E,EAAoB,OAAPwF,QAAO,IAAPA,OAAO,EAAPA,EAAShG,IAAIsC,UACxGC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,QAAQR,GAAI,CAAE2D,GAAI,GAAIxD,SACtC,QADsCuG,EACpD,OAAP7C,QAAO,IAAPA,OAAO,EAAPA,EAASwB,oBAAY,IAAAqB,EAAAA,EAAI,SAGlCtG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAkB,OAAPkC,QAAO,IAAPA,GAAAA,EAASU,cAAgB9I,EAAQJ,WAARI,aAAyC,YAAa2H,QAASA,IAAM/E,EAAoB,OAAPwF,QAAO,IAAPA,OAAO,EAAPA,EAAShG,IAAIsC,SAC/G,QAD+GwG,EAC7H,OAAP9C,QAAO,IAAPA,OAAO,EAAPA,EAASyB,oBAAY,IAAAqB,EAAAA,EAAI,OAG9BvG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACG,QADHyG,EACf,OAAP/C,QAAO,IAAPA,OAAO,EAAPA,EAAS0B,wBAAgB,IAAAqB,EAAAA,EAAI,OAElCxG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACM,QADN0G,EACf,OAAPhD,QAAO,IAAPA,OAAO,EAAPA,EAAS2B,2BAAmB,IAAAqB,EAAAA,EAAI,OAErCzG,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACf,OAAP0D,QAAO,IAAPA,GAAAA,EAASU,cAAgBF,EAAQoB,QAAQ,GAAKnB,EAAMmB,QAAQ,MAEjErF,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,WACQ,OAAP0D,QAAO,IAAPA,GAAAA,EAASU,iBACPnE,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAOL,UAAU,WAAW3B,GAAI,CAAEvF,IAAK,mBAAoB0F,UACvEL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACqD,QAASA,IAAM1H,EAAS,mBAA0B,OAAPmI,QAAO,IAAPA,OAAO,EAAPA,EAAShG,KAAM,CAAE6H,MAAO,CAAEC,YAAoB,OAAP9B,QAAO,IAAPA,OAAO,EAAPA,EAASyB,aAAcF,OAAe,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASuB,UAAYjF,SAAA,EACvIC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAC5F,GAAI,CAAE6F,QAAStK,EAAAA,EAAOuK,QAAS,UAAW,CAAED,QAAStK,EAAAA,EAAOuK,UAAY3F,UAChFC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAO+D,IAAKC,EAAAA,GAAOC,WAAYjG,GAAI,CAAElF,OAAQ,OAAQoL,UAAW,gBAEpF9F,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,oBAQf,IAAhCnD,EAAOuB,QAAQsF,EAAQhG,MACpBuC,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,SACG,OAAP0D,QAAO,IAAPA,GAAsB,QAAfiD,EAAPjD,EAASU,qBAAa,IAAAuC,OAAf,EAAPA,EAAwBvJ,KAAI,CAACF,EAAOyG,KAAO,IAADkD,EAAAC,EAAAC,EAAAC,EACvC,IAAIZ,EAAe,EAGnB,OAFAA,EAAiC,WAAb,OAALlJ,QAAK,IAALA,OAAK,EAALA,EAAO+H,QAAqBD,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO6H,aAAeC,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO2H,cAAgBG,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO2H,cAAgBG,WAAgB,OAAL9H,QAAK,IAALA,OAAK,EAALA,EAAO6H,cAG9J9E,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAAAlB,UACLL,EAAAA,EAAAA,MAAC7G,EAAG,CAAC+G,GAAI,CAAE6F,QAAS,WAAY1F,SAAA,EAC5BC,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,UACDC,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACoB,UAAU,YAAYnB,QAAQ,QAAQR,GAAI,CAAE2D,GAAI,KAAMxD,SAC1C,QAD0C6G,EACxD,OAAL3J,QAAK,IAALA,OAAK,EAALA,EAAOgI,oBAAY,IAAA2B,EAAAA,EAAI,SAGhC5G,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACH,QADG8G,EACjB,OAAL5J,QAAK,IAALA,OAAK,EAALA,EAAOiI,oBAAY,IAAA2B,EAAAA,EAAI,OAG5B7G,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACC,QADD+G,EACjB,OAAL7J,QAAK,IAALA,OAAK,EAALA,EAAOkI,wBAAgB,IAAA2B,EAAAA,EAAI,OAEhC9G,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACI,QADJgH,EACjB,OAAL9J,QAAK,IAALA,OAAK,EAALA,EAAOmI,2BAAmB,IAAA2B,EAAAA,EAAI,OAEnC/G,EAAAA,EAAAA,KAAC7G,EAAI,CAACoI,UAAU,YAAWxB,SACtBoG,EAAad,QAAQ,MAE1BrF,EAAAA,EAAAA,KAAC7G,EAAI,CAAA4G,UACDC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAOL,UAAU,WAAW3B,GAAI,CAAEvF,IAAK,mBAAoB0F,UACvEL,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACqD,QAASA,IAAM1H,EAAS,mBAAwB,OAAL2B,QAAK,IAALA,OAAK,EAALA,EAAOQ,KAAM,CAAE6H,MAAO,CAAEC,YAAkB,OAALtI,QAAK,IAALA,OAAK,EAALA,EAAOiI,aAAcF,OAAa,OAAL/H,QAAK,IAALA,OAAK,EAALA,EAAO+H,UAAYjF,SAAA,EACjIC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAC5F,GAAI,CAAE6F,QAAStK,EAAAA,EAAOuK,QAAS,UAAW,CAAED,QAAStK,EAAAA,EAAOuK,UAAY3F,UAChFC,EAAAA,EAAAA,KAACL,EAAAA,EAAG,CAACiC,UAAW,MAAO+D,IAAKC,EAAAA,GAAOC,WAAYjG,GAAI,CAAElF,OAAQ,OAAQoL,UAAW,gBAEpF9F,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,oBA1BjC2D,EAiCJ,QA3EhBA,EAgFJ,OA3GhB1C,EAgHJ,UAKvBhB,EAAAA,EAAAA,KAACnH,EAAG,CAAAkH,UACAC,EAAAA,EAAAA,KAAC7G,EAAI,CAACmJ,QAASvG,EAAU4B,OAAS,EAAG4E,MAAM,SAAS3C,GAAI,CAAE5F,WAAY,KAAM+F,SAAC,iCAmB7GC,EAAAA,EAAAA,KAACgH,EAAAA,EAAa,MAK9B,C","sources":["pages/Dashboard/Reporting/ChartOfAccounts.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport { Box, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, tableCellClasses, IconButton, CircularProgress, Grid, Tabs, Tab } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport { FontFamily, Images } from 'assets';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { CircleLoading } from 'components/Loaders';\r\nimport { ErrorToaster } from 'components/Toaster';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport FinanceServices from 'services/Finance';\r\nimport { ExpandLess, ExpandMore } from '@mui/icons-material';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport * as XLSX from \"xlsx\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { handleExportWithComponent } from 'utils';\r\nimport { PDFExport } from '@progress/kendo-react-pdf';\r\nimport moment from 'moment';\r\n\r\n// *For Table Style\r\n// *For Table Style\r\nconst Row = styled(TableRow)(({ theme }) => ({\r\n    border: 0,\r\n\r\n}));\r\n\r\nconst Cell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n        border: '1px solid #EEEEEE',\r\n        padding: '15px',\r\n        textAlign: 'left',\r\n        whiteSpace: 'nowrap',\r\n        color: '#434343',\r\n        paddingRight: '50px',\r\n        background: 'transparent',\r\n        fontWeight: 'bold'\r\n\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n        fontFamily: 'Public Sans',\r\n\r\n        textWrap: 'nowrap',\r\n        padding: '5px !important',\r\n        paddingLeft: '15px !important',\r\n\r\n        '.MuiBox-root': {\r\n            display: 'flex',\r\n            gap: '6px',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            '.MuiBox-root': {\r\n                cursor: 'pointer'\r\n            }\r\n        },\r\n        'svg': {\r\n            width: 'auto',\r\n            height: '24px',\r\n        },\r\n        '.MuiTypography-root': {\r\n            textTransform: 'capitalize',\r\n            fontFamily: FontFamily.NunitoRegular,\r\n            textWrap: 'nowrap',\r\n        },\r\n        '.MuiButtonBase-root': {\r\n            padding: '8px',\r\n            width: '28px',\r\n            height: '28px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n    loaderWrap: {\r\n        display: 'flex',\r\n        height: 100,\r\n        '& svg': {\r\n            width: '40px !important',\r\n            height: '40px !important'\r\n        }\r\n    },\r\n    anchorLink: {\r\n        textDecoration: 'underline',\r\n        color: Colors.twitter,\r\n        cursor: 'pointer'\r\n    }\r\n})\r\n\r\nfunction ChartOfAccount() {\r\n\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n    const contentRef = useRef(null);\r\n    const [childFilter, setChildFilter] = useState('');\r\n   \r\n    const { register } = useForm();\r\n\r\n    const tableHead = ['Code', 'Name', 'Major Category', 'Sub Category', 'Balance (AED)', 'Actions']\r\n\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    // *For Chart of Account\r\n    const [chartOfAccount, setChartOfAccount] = useState();\r\n    const [filteredCOA, setFilteredCOA] = useState();\r\n\r\n    // *For Filters\r\n    const [filters, setFilters] = useState('all');\r\n    const [filterData, setFilterData] = useState();\r\n\r\n    const [childTabs, setChildTabs] = useState([])\r\n\r\n    // *For Collapse\r\n    const [expand, setExpand] = useState([]);\r\n\r\n    // *For Get Chart Account\r\n    const getChartOfAccount = async (filter) => {\r\n        try {\r\n              const { data } = await FinanceServices.getChartOfAccount()\r\n              console.log(data);\r\n            setChartOfAccount(data?.COA)\r\n            setFilteredCOA(data?.COA)\r\n\r\n            const fil = []\r\n            data?.COA?.forEach(e => {\r\n                let obj = {\r\n                    id: e.id,\r\n                    name: e.name,\r\n                    sub_accounts: e.sub\r\n                }\r\n                fil.push(obj)\r\n            })\r\n            setFilterData(fil)\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    // *For Handle Filter\r\n    const handleFilter = (event, newValue, child) => {\r\n\r\n        if (child) {\r\n\r\n\r\n            const arrayOfArrays = chartOfAccount?.map(item => item?.sub?.filter(subItem => subItem?.id == newValue))\r\n            const nonEmptyArrays = arrayOfArrays.filter(arr => arr.length > 0);\r\n\r\n            // Log the result to the console\r\n\r\n            setFilteredCOA(nonEmptyArrays.flat())\r\n\r\n            setFilters(newValue);\r\n        }\r\n        else {\r\n            setFilters(newValue);\r\n            if (newValue === 'all') {\r\n\r\n                setChildTabs(chartOfAccount.find(item => item?.id == newValue)?.sub)\r\n                setFilteredCOA(chartOfAccount)\r\n            } else {\r\n\r\n                setChildTabs(chartOfAccount.find(item => item?.id == newValue)?.sub)\r\n                const filterData = chartOfAccount.filter(e => e.id === newValue)\r\n\r\n                setFilteredCOA(filterData)\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    // *For Handle Expand\r\n    const handleExpand = (id) => {\r\n        try {\r\n            const currentIndex = expand.indexOf(id);\r\n            const newExpand = [...expand];\r\n\r\n            if (currentIndex === -1) {\r\n                newExpand.push(id);\r\n            } else {\r\n                newExpand.splice(currentIndex, 1);\r\n            }\r\n\r\n            setExpand(newExpand);\r\n        } catch (error) {\r\n            ErrorToaster(error)\r\n        }\r\n    }\r\n\r\n    // *For Filter Chart of Account By Search\r\n    const filterBySearch = (search) => {\r\n        const result = [];\r\n\r\n        for (const item of chartOfAccount) {\r\n            if (item?.sub.length > 0) {\r\n                for (const sub of item?.sub) {\r\n                    if (sub?.accounts?.length > 0) {\r\n                        for (const acc of sub?.accounts) {\r\n                            if (acc.account_name?.toLowerCase().includes(search?.toLowerCase())) {\r\n                                result.push(item);\r\n                            } else {\r\n                                if (acc?.childAccounts?.length > 0) {\r\n                                    for (const subAcc of acc?.childAccounts) {\r\n                                        if (subAcc.account_name?.toLowerCase().includes(search?.toLowerCase())) {\r\n                                            result.push(item);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setFilteredCOA(result)\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        // Define headers and data separately\r\n        const headers = tableHead.filter((item) => item !== \"Actions\");\r\n        const rows = [];\r\n        // Extract values from objects and create an array for each row\r\n        chartOfAccount?.forEach((item, index) => {\r\n            rows.push([\r\n                item.name,\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n            ])\r\n            item?.sub?.forEach((subItem, i) => {\r\n                rows.push([\r\n                    subItem?.name,\r\n                    \"\",\r\n                    \"\",\r\n                    \"\",\r\n                    \"\",\r\n                    \"\",\r\n                ])\r\n                subItem?.accounts?.forEach((account, j) => {\r\n                    let Balance = 0\r\n                    let Total = 0\r\n                    if (account?.childAccounts?.length > 0) {\r\n                        const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                        const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                            const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                            const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                            return {\r\n                                \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                            };\r\n                        }, initialValue);\r\n                        Balance = account?.nature === 'debit'\r\n                            ? parseFloat(result?.debit) - parseFloat(result?.credit)\r\n                            : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                    }\r\n                    else {\r\n                        Total = account?.nature === 'debit'\r\n                            ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit)\r\n                            : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n                    }\r\n                    rows.push([\r\n                        account?.account_code ?? '-',\r\n                        account?.account_name ?? '-',\r\n                        account?.unit ?? '-',\r\n                        account?.account_category ?? '-',\r\n                        account?.account_subcategory ?? '-',\r\n                        account?.childAccounts ? Balance.toFixed(2) : Total.toFixed(2)\r\n                    ])\r\n                    account?.childAccounts?.forEach((child, j) => {\r\n                        let ChildBalance = 0;\r\n                        ChildBalance = child?.nature === 'debit'\r\n                            ? parseFloat(child?.total_debit) - parseFloat(child?.total_credit)\r\n                            : parseFloat(child?.total_credit) - parseFloat(child?.total_debit)\r\n                        rows.push([\r\n                            child?.account_code ?? '-',\r\n                            child?.account_name ?? '-',\r\n                            child?.unit ?? '-',\r\n                            child?.account_category ?? '-',\r\n                            child?.account_subcategory ?? '-',\r\n                            ChildBalance.toFixed(2)\r\n                        ])\r\n                    })\r\n                })\r\n            })\r\n            item?.accounts?.forEach((account, j) => {\r\n                let Balance = 0\r\n                let Total = 0\r\n                if (account?.childAccounts?.length > 0) {\r\n                    const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                    const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                        const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                        const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                        return {\r\n                            \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                            \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                        };\r\n                    }, initialValue);\r\n                    Balance = account?.nature === 'debit'\r\n                        ? parseFloat(result?.debit) - parseFloat(result?.credit)\r\n                        : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                }\r\n                else {\r\n                    Total = account?.nature === 'debit'\r\n                        ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit)\r\n                        : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n                }\r\n                rows.push([\r\n                    account?.account_name ?? '-',\r\n                    account?.unit ?? '-',\r\n                    account?.account_category ?? '-',\r\n                    account?.account_subcategory ?? '-',\r\n                    account?.childAccounts ? Balance.toFixed(2) : Total.toFixed(2)\r\n                ])\r\n                account?.childAccounts?.forEach((child, j) => {\r\n                    let ChildBalance = 0\r\n                    ChildBalance = child?.nature === 'debit'\r\n                        ? parseFloat(child?.total_debit) - parseFloat(child?.total_credit)\r\n                        : parseFloat(child?.total_credit) - parseFloat(child?.total_debit)\r\n                    rows.push([\r\n                        child?.account_code ?? '-',\r\n                        child?.account_name ?? '-',\r\n                        child?.unit ?? '-',\r\n                        child?.account_category ?? '-',\r\n                        child?.account_subcategory ?? '-',\r\n                        ChildBalance.toFixed(2)\r\n                    ])\r\n                })\r\n            })\r\n        })\r\n\r\n        // Create a workbook with a worksheet\r\n        const ws = XLSX.utils.aoa_to_sheet([headers, ...rows]);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n\r\n        // Convert the workbook to an array buffer\r\n        const buf = XLSX.write(wb, {\r\n            bookType: \"xlsx\",\r\n            type: \"array\",\r\n            mimeType:\r\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n        });\r\n\r\n        // Save the file using FileSaver.js\r\n        saveAs(new Blob([buf]), \"data.xlsx\");\r\n    };\r\n\r\n    const tabStyle = (selected) => ({\r\n        backgroundColor: selected ? '#0076BF' : 'inherit',\r\n        color: selected ? '#fff !important' : 'inherit',\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getChartOfAccount()\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ m: 4, mb: 2 }}>\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    mr: 4,\r\n                    my: 4,\r\n                }}\r\n            >\r\n                <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: 'Public Sans' }}>\r\n                    Chart of Accounts\r\n                </Typography>\r\n\r\n            </Box>\r\n\r\n            {/* Filters */}\r\n            {/* <Grid container spacing={1}>\r\n        <Grid item xs={12} sm={3}>\r\n          <InputField\r\n            size={'small'}\r\n            label={'Search'}\r\n            placeholder={'Search'}\r\n            register={register('search', {\r\n              onChange: (e) => filterBySearch(e.target.value)\r\n            })}\r\n          />\r\n        </Grid>\r\n      </Grid> */}\r\n            <Grid container spacing={1} sx={{ mb: 2 }}>\r\n                <Grid item xs={8} sm={8}>\r\n                    <Tabs value={filters} onChange={(event, newValue) => handleFilter(event, newValue, false)}>\r\n                        <Tab value=\"all\" label=\"All\" sx={tabStyle(filters === 'all')} />\r\n                        {filterData?.map((item, index) => (\r\n                            <Tab\r\n                                key={index}\r\n                                value={item?.id}\r\n                                label={item?.name}\r\n                                sx={tabStyle(filters === item?.id)}\r\n                            />\r\n                        ))}\r\n                    </Tabs>\r\n                    <Tabs value={childFilter} onChange={(event, newValue) => handleFilter(event, newValue, true)}>\r\n                        {childTabs?.map((item, index) => (\r\n                            <Tab\r\n                                key={index}\r\n                                value={item?.id}\r\n                                label={item?.name}\r\n                                sx={tabStyle(childFilter === item?.id)}\r\n                            />\r\n                        ))}\r\n                    </Tabs>\r\n\r\n\r\n                </Grid>\r\n                <Grid item xs={4} sm={4}>\r\n                    {/* {chartOfAccount?.length > 0 && (\r\n                        <Box sx={{\r\n                              display: \"flex\", gap: 2,justifyContent:'flex-end'\r\n\r\n                        }}>\r\n                            <PrimaryButton\r\n                                title=\"Print\"\r\n                                type=\"button\"\r\n                                style={{ backgroundColor: Colors.primary }}\r\n                                onClick={() => handleExportWithComponent(contentRef)}\r\n                            />\r\n                            <PrimaryButton\r\n                                title={\"Excel\"}\r\n                                onClick={() => downloadExcel()}\r\n                            />\r\n                        </Box>\r\n                    )} */}\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {chartOfAccount ? (\r\n                <Fragment>\r\n                    <PDFExport ref={contentRef} landscape={true} paperSize=\"A4\" margin={5}  >\r\n                        <Box className='pdf-show' sx={{ display: 'none' }}>\r\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                <Typography variant=\"h5\" sx={{ color: Colors.charcoalGrey, fontFamily: 'Public Sans', mb: 2 }}>\r\n                                    Chart Of Account\r\n                                </Typography>\r\n                                <Box sx={{ fontWeight: 400, fontSize: \"12px\", mt: 1.5, color: Colors.charcoalGrey, }}><span>Date: &nbsp;&nbsp;</span>{moment().format('MM-DD-YYYY')}</Box>\r\n                            </Box>\r\n                        </Box>\r\n                        {/* ========== Table ========== */}\r\n                        <TableContainer component={Paper} sx={{ boxShadow: '0px 8px 18px 0px #9B9B9B1A', borderRadius: 2, maxHeight: 'calc(100vh - 250px)' }} className='table-box'>\r\n                            <Table stickyHeader sx={{ minWidth: 500 }}>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {tableHead.map((item, index) => (\r\n                                            <Cell className=\"pdf-table\" key={index}>{item}</Cell>\r\n                                        ))}\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {!loader ? (\r\n                                        filteredCOA?.length > 0 ? (\r\n                                            <>\r\n                                                <Fragment>\r\n                                                    {filteredCOA?.map((item, index) => (\r\n                                                        <Fragment key={index}>\r\n                                                            <Row>\r\n                                                                <Cell colSpan={tableHead?.length}>\r\n                                                                    <Typography className=\"pdf-table\" variant=\"subtitle1\" sx={{ textAlign: 'left' }}>\r\n                                                                        {expand.indexOf(item.id) === -1 ? (\r\n                                                                            <ExpandMore className=\"pdf-hide\" sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                                                        ) : (\r\n                                                                            <ExpandLess className=\"pdf-hide\" sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: item?.sub?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(item.id)} />\r\n                                                                        )}\r\n                                                                        {item?.name}\r\n                                                                    </Typography>\r\n                                                                </Cell>\r\n                                                            </Row>\r\n                                                            {expand.indexOf(item.id) === -1 &&\r\n                                                                <Fragment>\r\n                                                                    {item?.sub?.map((subItem, i) => (\r\n                                                                        <Fragment key={i}>\r\n                                                                            <Row>\r\n                                                                                <Cell colSpan={tableHead?.length}>\r\n                                                                                    <Typography className=\"pdf-table\" variant=\"body1\" sx={{ fontWeight: 700, textAlign: 'left', ml: 1.5 }}>\r\n                                                                                        {expand.indexOf(subItem.id) === -1 ? (\r\n                                                                                            <ExpandMore className=\"pdf-hide\" sx={{ verticalAlign: 'sub', cursor: 'pointer', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                                                        ) : (\r\n                                                                                            <ExpandLess className=\"pdf-hide\" sx={{ verticalAlign: 'sub', cursor: 'pointer', transform: 'rotate(90deg)', opacity: subItem?.accounts?.length > 0 ? 1 : 0 }} onClick={() => handleExpand(subItem.id)} />\r\n                                                                                        )}\r\n                                                                                        {subItem?.name}\r\n                                                                                    </Typography>\r\n                                                                                </Cell>\r\n                                                                            </Row>\r\n                                                                            {expand.indexOf(subItem.id) === -1 &&\r\n                                                                                <Fragment>\r\n                                                                                    {subItem?.accounts?.map((account, j) => {\r\n                                                                                        let Balance = 0\r\n                                                                                        let Total = 0\r\n                                                                                        if (account?.childAccounts?.length > 0) {\r\n                                                                                            const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                                                            const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                                                                const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                                                                const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                                                                return {\r\n                                                                                                    \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                                                                    \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                                                                };\r\n                                                                                            }, initialValue);\r\n                                                                                            Balance = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                                                                                        }\r\n                                                                                        else {\r\n\r\n\r\n\r\n                                                                                            Total = account?.nature === 'debit' ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit) : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n\r\n                                                                                        }\r\n                                                                                        return (\r\n                                                                                            <Fragment key={j}>\r\n                                                                                                <Row>\r\n                                                                                                    <Cell className={account?.childAccounts ? classes.anchorLink : ''} onClick={() => handleExpand(account?.id)}>\r\n                                                                                                        <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 3 }}>\r\n                                                                                                            {account?.account_code ?? '-'}\r\n                                                                                                        </Typography>\r\n                                                                                                    </Cell>\r\n                                                                                                    <Cell className={account?.childAccounts ? classes.anchorLink + \" \" + \"pdf-table\" : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                                                                        {account?.account_name ?? '-'}\r\n                                                                                                    </Cell>\r\n\r\n                                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                                        {account?.account_category ?? '-'}\r\n                                                                                                    </Cell>\r\n                                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                                        {account?.account_subcategory ?? '-'}\r\n                                                                                                    </Cell>\r\n                                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                                        {account?.childAccounts ? Balance.toFixed(2) : Total.toFixed(2)}\r\n                                                                                                    </Cell>\r\n                                                                                                    <Cell>\r\n                                                                                                        {!account?.childAccounts &&\r\n                                                                                                            <Box component={'div'} className='pdf-hide' sx={{ gap: '16px !important' }}>\r\n                                                                                                                <Box onClick={() => navigate(`/account-ledger/${account?.id}`, { state: { accountName: account?.account_name, nature: account?.nature } })}>\r\n                                                                                                                    <IconButton sx={{ bgcolor: Colors.primary, '&:hover': { bgcolor: Colors.primary } }}>\r\n                                                                                                                        <Box component={'img'} src={Images.ledgerIcon} sx={{ height: '16px', objectFit: 'contain' }} />\r\n                                                                                                                    </IconButton>\r\n                                                                                                                    <Typography variant=\"body2\">\r\n                                                                                                                        View\r\n                                                                                                                    </Typography>\r\n                                                                                                                </Box>\r\n                                                                                                            </Box>\r\n                                                                                                        }\r\n                                                                                                    </Cell>\r\n                                                                                                </Row>\r\n                                                                                                {expand.indexOf(account.id) !== -1 &&\r\n                                                                                                    <Fragment>\r\n                                                                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                                                                            let ChildBalance = 0\r\n\r\n                                                                                                            ChildBalance = child?.nature === 'debit' ? parseFloat(child?.total_debit) - parseFloat(child?.total_credit) : parseFloat(child?.total_credit) - parseFloat(child?.total_debit)\r\n                                                                                                            return (\r\n                                                                                                                <Fragment key={j}>\r\n                                                                                                                    <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                                                                        <Cell>\r\n                                                                                                                            <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 4.5 }}>\r\n                                                                                                                                {child?.account_code ?? '-'}\r\n                                                                                                                            </Typography>\r\n                                                                                                                        </Cell>\r\n                                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                                            {child?.account_name ?? '-'}\r\n                                                                                                                        </Cell>\r\n\r\n                                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                                            {child?.account_category ?? '-'}\r\n                                                                                                                        </Cell>\r\n                                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                                            {child?.account_subcategory ?? '-'}\r\n                                                                                                                        </Cell>\r\n                                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                                            {ChildBalance.toFixed(2)}\r\n                                                                                                                        </Cell>\r\n                                                                                                                        <Cell>\r\n                                                                                                                            <Box component={'div'} className='pdf-hide' sx={{ gap: '16px !important' }}>\r\n                                                                                                                                <Box onClick={() => navigate(`/account-ledger/${child?.id}`, { state: { accountName: child?.account_name, nature: child?.nature } })}>\r\n                                                                                                                                    <IconButton sx={{ bgcolor: Colors.primary, '&:hover': { bgcolor: Colors.primary } }}>\r\n                                                                                                                                        <Box component={'img'} src={Images.ledgerIcon} sx={{ height: '16px', objectFit: 'contain' }} />\r\n                                                                                                                                    </IconButton>\r\n                                                                                                                                    <Typography variant=\"body2\">\r\n                                                                                                                                        View\r\n                                                                                                                                    </Typography>\r\n                                                                                                                                </Box>\r\n                                                                                                                            </Box>\r\n                                                                                                                        </Cell>\r\n                                                                                                                    </Row>\r\n                                                                                                                </Fragment>\r\n                                                                                                            )\r\n                                                                                                        })}\r\n                                                                                                    </Fragment>\r\n                                                                                                }\r\n                                                                                            </Fragment>\r\n                                                                                        )\r\n                                                                                    })}\r\n                                                                                </Fragment>\r\n                                                                            }\r\n                                                                        </Fragment>\r\n                                                                    ))}\r\n                                                                </Fragment>\r\n                                                            }\r\n                                                        </Fragment>\r\n                                                    ))}\r\n                                                </Fragment>\r\n                                                <Fragment>\r\n\r\n                                                    {filteredCOA?.map((item, index) => (\r\n\r\n                                                        <Fragment key={index}>\r\n\r\n\r\n                                                            {true &&\r\n                                                                <Fragment>\r\n                                                                    {item?.accounts?.map((account, j) => {\r\n                                                                        let Balance = 0\r\n                                                                        let Total = 0\r\n                                                                        if (account?.childAccounts?.length > 0) {\r\n                                                                            const initialValue = { \"credit\": 0, \"debit\": 0 };\r\n\r\n                                                                            const result = account?.childAccounts?.reduce((accumulator, transaction) => {\r\n                                                                                const credit = isNaN(transaction?.total_credit) ? 0 : transaction?.total_credit\r\n                                                                                const debit = isNaN(transaction?.total_debit) ? 0 : transaction?.total_debit\r\n                                                                                return {\r\n                                                                                    \"credit\": parseFloat(accumulator.credit) + parseFloat(credit),\r\n                                                                                    \"debit\": parseFloat(accumulator.debit) + parseFloat(debit),\r\n                                                                                };\r\n                                                                            }, initialValue);\r\n                                                                            Balance = account?.nature === 'debit' ? parseFloat(result?.debit) - parseFloat(result?.credit) : parseFloat(result?.credit) - parseFloat(result?.debit)\r\n\r\n                                                                        }\r\n                                                                        else {\r\n\r\n                                                                            Total = account?.nature === 'debit' ? parseFloat(account?.total_debit) - parseFloat(account?.total_credit) : parseFloat(account?.total_credit) - parseFloat(account?.total_debit)\r\n                                                                        }\r\n                                                                        return (\r\n                                                                            <Fragment key={j}>\r\n                                                                                <Row>\r\n                                                                                    <Cell className={account?.childAccounts ? classes.anchorLink : ''} onClick={() => handleExpand(account?.id)}>\r\n                                                                                        <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 3 }}>\r\n                                                                                            {account?.account_code ?? '-'}\r\n                                                                                        </Typography>\r\n                                                                                    </Cell>\r\n                                                                                    <Cell className={account?.childAccounts ? classes.anchorLink + \" \" + 'pdf-table' : 'pdf-table'} onClick={() => handleExpand(account?.id)}>\r\n                                                                                        {account?.account_name ?? '-'}\r\n                                                                                    </Cell>\r\n\r\n                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                        {account?.account_category ?? '-'}\r\n                                                                                    </Cell>\r\n                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                        {account?.account_subcategory ?? '-'}\r\n                                                                                    </Cell>\r\n                                                                                    <Cell className=\"pdf-table\">\r\n                                                                                        {account?.childAccounts ? Balance.toFixed(2) : Total.toFixed(2)}\r\n                                                                                    </Cell>\r\n                                                                                    <Cell>\r\n                                                                                        {!account?.childAccounts &&\r\n                                                                                            <Box component={'div'} className='pdf-hide' sx={{ gap: '16px !important' }}>\r\n                                                                                                <Box onClick={() => navigate(`/account-ledger/${account?.id}`, { state: { accountName: account?.account_name, nature: account?.nature } })}>\r\n                                                                                                    <IconButton sx={{ bgcolor: Colors.primary, '&:hover': { bgcolor: Colors.primary } }}>\r\n                                                                                                        <Box component={'img'} src={Images.ledgerIcon} sx={{ height: '16px', objectFit: 'contain' }} />\r\n                                                                                                    </IconButton>\r\n                                                                                                    <Typography variant=\"body2\">\r\n                                                                                                        View\r\n                                                                                                    </Typography>\r\n                                                                                                </Box>\r\n                                                                                            </Box>\r\n                                                                                        }\r\n                                                                                    </Cell>\r\n                                                                                </Row>\r\n                                                                                {expand.indexOf(account.id) !== -1 &&\r\n                                                                                    <Fragment>\r\n                                                                                        {account?.childAccounts?.map((child, j) => {\r\n                                                                                            let ChildBalance = 0\r\n                                                                                            ChildBalance = child?.nature === 'debit' ? parseFloat(child?.total_debit) - parseFloat(child?.total_credit) : parseFloat(child?.total_credit) - parseFloat(child?.total_debit)\r\n\r\n                                                                                            return (\r\n                                                                                                <Fragment key={j}>\r\n                                                                                                    <Row sx={{ bgcolor: '#EEFBEE' }}>\r\n                                                                                                        <Cell>\r\n                                                                                                            <Typography className=\"pdf-table\" variant=\"body1\" sx={{ ml: 4.5 }}>\r\n                                                                                                                {child?.account_code ?? '-'}\r\n                                                                                                            </Typography>\r\n                                                                                                        </Cell>\r\n                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                            {child?.account_name ?? '-'}\r\n                                                                                                        </Cell>\r\n\r\n                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                            {child?.account_category ?? '-'}\r\n                                                                                                        </Cell>\r\n                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                            {child?.account_subcategory ?? '-'}\r\n                                                                                                        </Cell>\r\n                                                                                                        <Cell className=\"pdf-table\">\r\n                                                                                                            {ChildBalance.toFixed(2)}\r\n                                                                                                        </Cell>\r\n                                                                                                        <Cell>\r\n                                                                                                            <Box component={'div'} className='pdf-hide' sx={{ gap: '16px !important' }}>\r\n                                                                                                                <Box onClick={() => navigate(`/account-ledger/${child?.id}`, { state: { accountName: child?.account_name, nature: child?.nature } })}>\r\n                                                                                                                    <IconButton sx={{ bgcolor: Colors.primary, '&:hover': { bgcolor: Colors.primary } }}>\r\n                                                                                                                        <Box component={'img'} src={Images.ledgerIcon} sx={{ height: '16px', objectFit: 'contain' }} />\r\n                                                                                                                    </IconButton>\r\n                                                                                                                    <Typography variant=\"body2\">\r\n                                                                                                                        View\r\n                                                                                                                    </Typography>\r\n                                                                                                                </Box>\r\n                                                                                                            </Box>\r\n                                                                                                        </Cell>\r\n                                                                                                    </Row>\r\n                                                                                                </Fragment>\r\n                                                                                            )\r\n                                                                                        })}\r\n                                                                                    </Fragment>\r\n                                                                                }\r\n                                                                            </Fragment>\r\n                                                                        )\r\n                                                                    })}\r\n                                                                </Fragment>\r\n                                                            }\r\n                                                        </Fragment>\r\n                                                    ))}\r\n                                                </Fragment>\r\n                                            </>\r\n                                        ) : (\r\n                                            <Row>\r\n                                                <Cell colSpan={tableHead.length + 1} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                                                    No Data Found\r\n                                                </Cell>\r\n                                            </Row>\r\n                                        )) : (\r\n                                        <Row>\r\n                                            <Cell colSpan={tableHead.length + 2} align=\"center\" sx={{ fontWeight: 600 }}>\r\n                                                <Box className={classes.loaderWrap}>\r\n                                                    <CircularProgress />\r\n                                                </Box>\r\n                                            </Cell>\r\n                                        </Row>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </PDFExport>\r\n                </Fragment>\r\n            ) : (\r\n                <CircleLoading />\r\n            )}\r\n\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default ChartOfAccount;"],"names":["Row","styled","TableRow","_ref","theme","border","Cell","TableCell","_ref2","tableCellClasses","head","fontSize","fontFamily","padding","textAlign","whiteSpace","color","paddingRight","background","fontWeight","body","textWrap","paddingLeft","display","gap","alignItems","justifyContent","cursor","width","height","textTransform","FontFamily","NunitoRegular","useStyles","makeStyles","loaderWrap","anchorLink","textDecoration","Colors","twitter","classes","navigate","useNavigate","contentRef","useRef","childFilter","setChildFilter","useState","register","useForm","tableHead","loader","setLoader","chartOfAccount","setChartOfAccount","filteredCOA","setFilteredCOA","filters","setFilters","filterData","setFilterData","childTabs","setChildTabs","expand","setExpand","handleFilter","event","newValue","child","nonEmptyArrays","map","item","_item$sub","sub","filter","subItem","id","arr","length","flat","_chartOfAccount$find","find","_chartOfAccount$find2","e","handleExpand","currentIndex","indexOf","newExpand","push","splice","error","ErrorToaster","tabStyle","selected","backgroundColor","useEffect","async","_data$COA","data","FinanceServices","getChartOfAccount","console","log","COA","fil","forEach","obj","name","sub_accounts","_jsxs","Box","sx","m","mb","children","_jsx","mr","my","Typography","variant","charcoalGrey","Grid","container","spacing","xs","sm","Tabs","value","onChange","Tab","label","index","Fragment","PDFExport","ref","landscape","paperSize","margin","className","mt","moment","format","TableContainer","component","Paper","boxShadow","borderRadius","maxHeight","Table","stickyHeader","minWidth","TableHead","TableBody","colSpan","align","CircularProgress","_Fragment","_item$sub3","_item$sub4","_item$sub5","ExpandMore","verticalAlign","opacity","onClick","ExpandLess","transform","i","_subItem$accounts2","_subItem$accounts3","_subItem$accounts4","ml","accounts","account","j","_account$childAccount7","_account$account_code2","_account$account_name3","_account$account_cate3","_account$account_subc3","_account$childAccount9","Balance","Total","childAccounts","_account$childAccount8","initialValue","result","reduce","accumulator","transaction","credit","isNaN","total_credit","debit","total_debit","parseFloat","nature","account_code","account_name","account_category","account_subcategory","toFixed","state","accountName","IconButton","bgcolor","primary","src","Images","ledgerIcon","objectFit","_child$account_code3","_child$account_name3","_child$account_catego3","_child$account_subcat3","ChildBalance","_item$accounts2","_account$childAccount10","_account$account_code3","_account$account_name4","_account$account_cate4","_account$account_subc4","_account$childAccount12","_account$childAccount11","_child$account_code4","_child$account_name4","_child$account_catego4","_child$account_subcat4","CircleLoading"],"sourceRoot":""}