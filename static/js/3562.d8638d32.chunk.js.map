{"version":3,"file":"static/js/3562.d8638d32.chunk.js","mappings":"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","sources":["pages/Auth/NewPassword/index.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { Box, Grid, IconButton, InputAdornment, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Link, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\r\nimport Colors from 'assets/Style/Colors';\r\nimport { Images } from 'assets';\r\nimport { PrimaryButton } from 'components/Buttons';\r\nimport InputField from 'components/Input';\r\nimport { encryptData, passwordRegex } from 'utils/index';\r\nimport AuthServices from 'services/Auth';\r\nimport { ErrorToaster, SuccessToaster } from 'components/Toaster';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport Storage from 'utils/Storage';\r\nimport { Fragment } from 'react';\r\n\r\nconst useStyle = makeStyles({\r\n  wrapper: {\r\n    borderRadius: '16px',\r\n    boxShadow: ' 0px 8px 32px 0px #00000040',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '40%',\r\n    margin: '70px auto',\r\n    padding:'40px'\r\n  },\r\n  box: {\r\n    background: 'linear-gradient(to bottom, #0c6135, #147836, #268e32, #3fa528, #5bbc0f)',\r\n    borderTopLeftRadius: '16px',\r\n    borderBottomLeftRadius: '16px',\r\n  },\r\n  otpBox: {\r\n    paddingLeft: 30,\r\n    paddingRight: 30,\r\n    borderTopRightRadius: '16px',\r\n    borderBottomRightRadius: '16px',\r\n  },\r\n})\r\n\r\nfunction NewPassword() {\r\n\r\n  const classes = useStyle();\r\n  const navigate = useNavigate();\r\n  const { state } = useLocation();\r\n  const { setStorageItem } = Storage();\r\n  const [searchParams] = useSearchParams();\r\n  const otp_token = searchParams.get('otp_token');\r\n\r\n  const { register, handleSubmit, formState: { errors }, watch } = useForm();\r\n\r\n  const password = useRef({});\r\n  password.current = watch(\"password\", \"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // *For Password Show/Hide Toggle\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  // *For Set New password\r\n  const newPassword = async (formData) => {\r\n    setLoading(true);\r\n    try {\r\n      let obj = {\r\n        password: encryptData(formData.password),\r\n      }\r\n      let result\r\n      if (state?.token) {\r\n        let token = {\r\n          token: state?.token\r\n        }\r\n        setStorageItem('user', token)\r\n        result = await AuthServices.changePassword(obj)\r\n      } else {\r\n        obj.email = state?.email\r\n        obj.otp_token = otp_token\r\n        result = await AuthServices.forgetPassword(obj)\r\n      }\r\n      SuccessToaster(result?.message)\r\n      navigate('/')\r\n    } catch (error) {\r\n      ErrorToaster(error)\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      <Box className={classes.wrapper}>\r\n       \r\n        <Box  >\r\n          <Typography variant=\"h3\" sx={{ color: Colors.primary, textAlign: 'center' }}>\r\n            New Password\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit(newPassword)} sx={{ mt: 2 }}>\r\n            <Grid container spacing={1} alignItems={\"center\"}>\r\n              <Grid item xs={12} sm={12}>\r\n                <InputField\r\n                  size={\"small\"}\r\n                  label={'Password'}\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  placeholder={'Password'}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton edge=\"end\" onClick={() => setShowPassword(!showPassword)}                            >\r\n                          {showPassword ? <Visibility sx={{ color: Colors.smokeyGrey }} /> : <VisibilityOff sx={{ color: Colors.smokeyGrey }} />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  error={errors?.password?.message}\r\n                  register={register(\"password\", {\r\n                    required: 'Please enter the password.',\r\n                    pattern: {\r\n                      value: passwordRegex,\r\n                      message: 'Password contain minimum 8 characters, at least uppercase/lowercase letter, number and special character',\r\n                    }\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12}>\r\n                <InputField\r\n                  size={\"small\"}\r\n                  label={'Confirm Password'}\r\n                  type={showConfirmPassword ? 'text' : 'password'}\r\n                  placeholder={'Confirm Password'}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton edge=\"end\" onClick={() => setShowConfirmPassword(!showConfirmPassword)}                            >\r\n                          {showConfirmPassword ? <Visibility sx={{ color: Colors.smokeyGrey }} /> : <VisibilityOff sx={{ color: Colors.smokeyGrey }} />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  error={errors?.confirmPassword?.message}\r\n                  register={register(\"confirmPassword\", {\r\n                    required: 'Please enter the confirm password.',\r\n                    validate: value => value === password.current || \"Confirm password does not match.\"\r\n                  })}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} sx={{ mt: 2, textAlign: 'center' }}>\r\n                <PrimaryButton\r\n                  fullWidth\r\n                  title=\"Submit\"\r\n                  type='submit'\r\n                  loading={loading}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default NewPassword;"],"names":["useStyle","makeStyles","wrapper","borderRadius","boxShadow","display","alignItems","width","margin","padding","box","background","borderTopLeftRadius","borderBottomLeftRadius","otpBox","paddingLeft","paddingRight","borderTopRightRadius","borderBottomRightRadius","_errors$password","_errors$confirmPasswo","classes","navigate","useNavigate","state","useLocation","setStorageItem","Storage","searchParams","useSearchParams","otp_token","get","register","handleSubmit","formState","errors","watch","useForm","password","useRef","current","loading","setLoading","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","_jsx","Fragment","children","Box","className","_jsxs","Typography","variant","sx","color","Colors","primary","textAlign","component","onSubmit","async","_result","result","obj","encryptData","formData","token","AuthServices","changePassword","email","forgetPassword","SuccessToaster","message","error","ErrorToaster","mt","Grid","container","spacing","item","xs","sm","InputField","size","label","type","placeholder","InputProps","endAdornment","InputAdornment","position","IconButton","edge","onClick","Visibility","smokeyGrey","VisibilityOff","required","pattern","value","passwordRegex","confirmPassword","validate","PrimaryButton","fullWidth","title"],"sourceRoot":""}