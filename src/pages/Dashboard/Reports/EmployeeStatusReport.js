"use client"

import { useEffect, useState } from "react"
import { Box, Typography, Grid, Chip } from "@mui/material"
import {
    Download as DownloadIcon,
    PersonAdd as PersonAddIcon,
    PersonRemove as PersonRemoveIcon,
} from "@mui/icons-material"
import * as XLSX from "xlsx"
import { saveAs } from "file-saver"
import moment from "moment"
import DataTable from "components/DataTable"
import { PrimaryButton } from "components/Buttons"
import SystemServices from "services/System"
import { showErrorToast } from "components/NewToaster"
import ExcelJS from "exceljs";
import { agencyType } from "utils"



function EmployeeStatusReport() {
    const [loader, setLoader] = useState(false)
    const [data, setData] = useState([])
    const [statsData, setStatsData] = useState(null)
    const getData = async (page, limit, filter) => {
        // setLoader(true)
        try {


            const { data } = await SystemServices.getEmployeeStatusReport();
            console.log(data);

            setData(data?.table);
     
            setStatsData(data?.stats)
        } catch (error) {
            showErrorToast(error);
        } finally {
            // setLoader(false)
        }
    };

    // Handle Excel Export
    // Handle Excel Export with professional formatting
 const downloadExcel = async () => {
    const workbook = new ExcelJS.Workbook()
    const worksheet = workbook.addWorksheet("Status Report")

    // Set professional header and footer
    worksheet.headerFooter.oddHeader =
      '&C&"Arial,Bold"&18STATUS REPORT\n' +
      '&C&"Arial,Regular"&12Your Company Name\n' +
      '&C&"Arial,Regular"&10Period: &D - &T\n' +
      '&L&"Arial,Regular"&8Generated on: ' +
      new Date().toLocaleDateString() +
      "\n" +
      '&R&"Arial,Regular"&8Page &P of &N'

    worksheet.headerFooter.oddFooter =
      '&L&"Arial,Regular"&8Confidential - Internal Use Only' +
      '&C&"Arial,Regular"&8This report contains employee data as of ' +
      new Date().toLocaleDateString() +
      '&R&"Arial,Regular"&8Generated by: HR Department\n' +
      '&C&"Arial,Regular"&8Powered by Premium Business Solutions'

    worksheet.headerFooter.evenFooter = worksheet.headerFooter.oddFooter

    // Set page setup for professional printing
    worksheet.pageSetup = {
      paperSize: 9, // A4
      orientation: "landscape",
      fitToPage: true,
      fitToWidth: 1,
      fitToHeight: 0,
      margins: {
        left: 0.7,
        right: 0.7,
        top: 1.0,
        bottom: 1.0,
        header: 0.3,
        footer: 0.3,
      },
    }

    // Add title section at the top of the worksheet
    const titleRow = worksheet.addRow(["EMPLOYEE STATUS REPORT"])
    titleRow.getCell(1).font = {
      name: "Arial",
      size: 16,
      bold: true,
      color: { argb: "2F4F4F" },
    }
    titleRow.getCell(1).alignment = { horizontal: "center" }
    worksheet.mergeCells("A1:M1")

    // Dynamic company name based on environment
    const name =
       agencyType[process.env.REACT_APP_TYPE]?.name

    const companyRow = worksheet.addRow([name])
    companyRow.getCell(1).font = {
      name: "Arial",
      size: 14,
      bold: true,
      color: { argb: "4472C4" },
    }
    companyRow.getCell(1).alignment = { horizontal: "center" }
    worksheet.mergeCells("A2:M2")

    const dateRow = worksheet.addRow([
      `Report Generated: ${new Date().toLocaleDateString("en-GB", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      })} at ${new Date().toLocaleTimeString("en-GB", {
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false,
      })}`,
    ])
    dateRow.getCell(1).font = {
      name: "Arial",
      size: 10,
      italic: true,
      color: { argb: "666666" },
    }
    dateRow.getCell(1).alignment = { horizontal: "center" }
    worksheet.mergeCells("A3:M3")

    // Add empty row for spacing
    worksheet.addRow([])

    // Headers matching the table columns exactly
    const headers = [
      "Employee ID",
      "Employee Name",
      "Department",
      "Designation",
      "Month",
      "Status",
      "Action",
      "Joining Date",
      "Leaving Date",
      "Employment Duration",
      "Reason for Leaving",
      "Salary (AED)",
      "Nationality",
    ]

    const headerRow = worksheet.addRow(headers)
    headerRow.eachCell((cell) => {
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "808080" }, // Gray
      }
      cell.font = { bold: true, color: { argb: "FFFFFF" } } // White bold
      cell.alignment = { horizontal: "center", vertical: "middle" }
      cell.border = {
        top: { style: "thin", color: { argb: "000000" } },
        left: { style: "thin", color: { argb: "000000" } },
        bottom: { style: "thin", color: { argb: "000000" } },
        right: { style: "thin", color: { argb: "000000" } },
      }
    })

    // Add all employees with data matching table columns
    data?.forEach((employee) => {
      const row = worksheet.addRow([
        employee.employee_id,
        employee.name || employee.employee_name,
        employee.department,
        employee.designation,
        employee.month || employee.month_name,
        employee.status,
        employee.action,
        new Date(employee.joining_date).toLocaleDateString("en-GB", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
        }),
        employee.leaving_date
          ? new Date(employee.leaving_date).toLocaleDateString("en-GB", {
              day: "2-digit",
              month: "2-digit",
              year: "numeric",
            })
          : "N/A",
        employee.employment_duration,
        employee.reason_for_leaving || employee.reason || "N/A",
        employee.salary,
        employee.nationality,
      ])

      // Add borders to all cells
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: "thin", color: { argb: "000000" } },
          left: { style: "thin", color: { argb: "000000" } },
          bottom: { style: "thin", color: { argb: "000000" } },
          right: { style: "thin", color: { argb: "000000" } },
        }
        cell.alignment = { horizontal: "center", vertical: "middle" }

        // Format salary column
        if (colNumber === 12) {
          cell.numFmt = "#,##0"
        }
      })

      // Color code status
      const statusCell = row.getCell(6)
      switch (employee.status.toLowerCase()) {
        case "active":
          statusCell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "4CAF50" },
          }
          statusCell.font = { color: { argb: "FFFFFF" }, bold: true }
          break
        case "inactive":
          statusCell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "F44336" },
          }
          statusCell.font = { color: { argb: "FFFFFF" }, bold: true }
          break
      }

      // Color code action
      const actionCell = row.getCell(7)
      switch (employee.action.toLowerCase()) {
        case "joined":
          actionCell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "4CAF50" },
          }
          actionCell.font = { color: { argb: "FFFFFF" }, bold: true }
          break
        case "left":
          actionCell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "F44336" },
          }
          actionCell.font = { color: { argb: "FFFFFF" }, bold: true }
          break
        case "continued":
          actionCell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "2196F3" },
          }
          actionCell.font = { color: { argb: "FFFFFF" }, bold: true }
          break
      }
    })

    // Set column widths
    worksheet.columns = [
      { width: 12 }, // Employee ID
      { width: 25 }, // Employee Name
      { width: 15 }, // Department
      { width: 20 }, // Designation
      { width: 12 }, // Month
      { width: 12 }, // Status
      { width: 12 }, // Action
      { width: 15 }, // Joining Date
      { width: 15 }, // Leaving Date
      { width: 20 }, // Employment Duration
      { width: 20 }, // Reason for Leaving
      { width: 15 }, // Salary
      { width: 12 }, // Nationality
    ]

    // Add empty rows for spacing before footer
    worksheet.addRow([])
    worksheet.addRow([])

    // Add the electronic generated report text with black border
    const reportRow = worksheet.addRow(["This is electronically generated report"])
    reportRow.getCell(1).font = {
      name: "Arial",
      size: 12,
      bold: false,
      color: { argb: "000000" },
    }
    reportRow.getCell(1).alignment = { horizontal: "center", vertical: "middle" }
    reportRow.getCell(1).border = {
      top: { style: "medium", color: { argb: "000000" } },
      left: { style: "medium", color: { argb: "000000" } },
      bottom: { style: "medium", color: { argb: "000000" } },
      right: { style: "medium", color: { argb: "000000" } },
    }
    worksheet.mergeCells(`A${reportRow.number}:M${reportRow.number}`)

    // Add empty row for spacing
    worksheet.addRow([])

    const system2 = worksheet.addRow(["Powered By: MangotechDevs.ae"])
    system2.getCell(1).font = {
      name: "Arial",
      size: 10,
      italic: true,
      color: { argb: "666666" },
    }
    system2.getCell(1).alignment = { horizontal: "center" }
    worksheet.mergeCells(`A${system2.number}:M${system2.number}`)

    // Add empty row for spacing
    worksheet.addRow([])

    const buffer = await workbook.xlsx.writeBuffer()
    const blob = new Blob([buffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    })
    saveAs(
      blob,
      `Employee_Status_Report_${new Date()
        .toLocaleDateString("en-GB", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
        })
        .replace(/\//g, "-")}.xlsx`,
    )
  }
    // Handle Excel Export
    const handleExcelExport = () => {
        const exportData = data.map((record) => ({
            "Employee ID": record.employee_id,
            "Employee Name": record.employee_name,
            Department: record.department,
            Designation: record.designation,
            Nationality: record.nationality,
            Month: record.month_name,
            Status: record.status,
            Action: record.action,
            "Joining Date": moment(record.joining_date).format("DD/MM/YYYY"),
            "Leaving Date": record.leaving_date ? moment(record.leaving_date).format("DD/MM/YYYY") : "N/A",
            "Employment Duration": record.employment_duration,
            "Reason for Leaving": record.reason || "N/A",
            "Salary (AED)": record.salary.toLocaleString(),
        }))

        const worksheet = XLSX.utils.json_to_sheet(exportData)
        const workbook = XLSX.utils.book_new()
        XLSX.utils.book_append_sheet(workbook, worksheet, "Employee Status Report")

        // Auto-size columns
        const colWidths = Object.keys(exportData[0] || {}).map((key) => ({
            wch: Math.max(key.length, 15),
        }))
        worksheet["!cols"] = colWidths

        const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" })
        const data = new Blob([excelBuffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" })
        saveAs(data, `Employee_Status_Report_${moment().format("YYYY-MM-DD")}.xlsx`)
    }

    // Get action chip color and icon
    const getActionColor = (action) => {
        switch (action.toLowerCase()) {
            case "joined":
                return "#4caf50"
            case "left":
                return "#f44336"
            case "continued":
                return "#2196f3"
            default:
                return "#9e9e9e"
        }
    }

    const getActionIcon = (action) => {
        switch (action.toLowerCase()) {
            case "joined":
                return <PersonAddIcon sx={{ fontSize: 16 }} />
            case "left":
                return <PersonRemoveIcon sx={{ fontSize: 16 }} />
            default:
                return null
        }
    }

    // DataTable columns configuration
    const columns = [
        {
            header: "Employee ID",
            accessorKey: "employee_id",
        },
        {
            header: "Employee Name",
            accessorKey: "name",
        },
        {
            header: "Department",
            accessorKey: "department",
        },
        {
            header: "Designation",
            accessorKey: "designation",
        },
        {
            header: "Month",
            accessorKey: "month",
            cell: ({ row }) => <Box sx={{ fontWeight: "bold", color: "#1976d2" }}>{row.original.month}</Box>,
        },
        {
            header: "Status",
            accessorKey: "status",
            cell: ({ row }) => (
                <Chip
                    label={row.original.status}
                    size="small"
                    sx={{
                        backgroundColor: row.original.status === "Active" ? "#4caf50" : "#f44336",
                        color: "white",
                        fontWeight: "bold",
                    }}
                />
            ),
        },
        {
            header: "Action",
            accessorKey: "action",
            cell: ({ row }) => (
                <Chip
                    label={row.original.action}
                    size="small"
                    icon={getActionIcon(row.original.action)}
                    sx={{
                        backgroundColor: getActionColor(row.original.action),
                        color: "white",
                        fontWeight: "bold",
                        "& .MuiChip-icon": {
                            color: "white",
                        },
                    }}
                />
            ),
        },
        {
            header: "Joining Date",
            accessorKey: "joining_date",
            cell: ({ row }) => <Box>{moment(row.original.joining_date).format("DD/MM/YYYY")}</Box>,
        },
        {
            header: "Leaving Date",
            accessorKey: "leaving_date",
            cell: ({ row }) => (
                <Box sx={{ color: row.original.leaving_date ? "#d32f2f" : "#666" }}>
                    {row.original.leaving_date ? moment(row.original.leaving_date).format("DD/MM/YYYY") : "N/A"}
                </Box>
            ),
        },
        {
            header: "Employment Duration",
            accessorKey: "employment_duration",
            cell: ({ row }) => <Box sx={{ fontWeight: "bold", color: "#1976d2" }}>{row.original.employment_duration}</Box>,
        },
        {
            header: "Reason for Leaving",
            accessorKey: "reason_for_leaving",
            cell: ({ row }) => (
                <Box sx={{ color: row.original.reason ? "#d32f2f" : "#666" }}>{row.original.reason_for_leaving || "N/A"}</Box>
            ),
        },
        {
            header: "Salary",
            accessorKey: "salary",
            cell: ({ row }) => <Box> {row.original.salary.toLocaleString()}</Box>,
        },
        {
            header: "Nationality",
            accessorKey: "nationality",
        },
    ]

    // Calculate statistics
    const totalEmployees = data.length
    const activeEmployees = data.filter((emp) => emp.status === "Active").length
    const inactiveEmployees = data.filter((emp) => emp.status === "Inactive").length
    const joinedEmployees = data.filter((emp) => emp.action === "Joined").length
    const leftEmployees = data.filter((emp) => emp.action === "Left").length

    // Monthly breakdown
    const monthlyStats = data.reduce((acc, emp) => {
        if (!acc[emp.month_name]) {
            acc[emp.month_name] = { joined: 0, left: 0, continued: 0 }
        }
        if (emp.action === "Joined") acc[emp.month_name].joined++
        if (emp.action === "Left") acc[emp.month_name].left++
        if (emp.action === "Continued") acc[emp.month_name].continued++
        return acc
    }, {})
    useEffect(() => {
      getData()
    }, [])
    

    return (
        <Box sx={{ p: 3 }}>
            {/* Header */}
            <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 3 }}>
                <Box>
                    <Typography sx={{ fontSize: "28px", fontWeight: "bold", color: "#1976d2", mb: 1 }}>
                        Active / Inactive Employee Report
                    </Typography>
                    <Typography sx={{ fontSize: "14px", color: "#666" }}>
                        Month wise joining & departing employees report
                    </Typography>
                </Box>
                <PrimaryButton
                    bgcolor={"#1976d2"}
                    title="Export to Excel"
                    onClick={()=>downloadExcel()}
                    startIcon={<DownloadIcon />}
                />
            </Box>

            {/* Summary Cards */}
            <Grid container spacing={3} sx={{ mb: 3 }}>
                <Grid item xs={12} sm={6} md={2.4}>
                    <Box
                        sx={{
                            p: 2,
                            bgcolor: "#e3f2fd",
                            borderRadius: 2,
                            border: "1px solid #bbdefb",
                        }}
                    >
                        <Typography sx={{ fontSize: "14px", color: "#1565c0", fontWeight: "bold" }}>Total Records</Typography>
                        <Typography sx={{ fontSize: "24px", fontWeight: "bold", color: "#0d47a1" }}>{totalEmployees}</Typography>
                    </Box>
                </Grid>
                <Grid item xs={12} sm={6} md={2.4}>
                    <Box
                        sx={{
                            p: 2,
                            bgcolor: "#e8f5e8",
                            borderRadius: 2,
                            border: "1px solid #c8e6c9",
                        }}
                    >
                        <Typography sx={{ fontSize: "14px", color: "#2e7d32", fontWeight: "bold" }}>Active Employees</Typography>
                        <Typography sx={{ fontSize: "24px", fontWeight: "bold", color: "#1b5e20" }}>{statsData?.activeEmployees}</Typography>
                    </Box>
                </Grid>
                <Grid item xs={12} sm={6} md={2.4}>
                    <Box
                        sx={{
                            p: 2,
                            bgcolor: "#ffebee",
                            borderRadius: 2,
                            border: "1px solid #ffcdd2",
                        }}
                    >
                        <Typography sx={{ fontSize: "14px", color: "#c62828", fontWeight: "bold" }}>Inactive Employees</Typography>
                        <Typography sx={{ fontSize: "24px", fontWeight: "bold", color: "#b71c1c" }}>{statsData?.inactiveEmployees}</Typography>
                    </Box>
                </Grid>
                <Grid item xs={12} sm={6} md={2.4}>
                    <Box
                        sx={{
                            p: 2,
                            bgcolor: "#e8f5e8",
                            borderRadius: 2,
                            border: "1px solid #c8e6c9",
                        }}
                    >
                        <Typography sx={{ fontSize: "14px", color: "#2e7d32", fontWeight: "bold" }}>New Joinings</Typography>
                        <Typography sx={{ fontSize: "24px", fontWeight: "bold", color: "#1b5e20" }}>{statsData?.newJoinings || 0}</Typography>
                    </Box>
                </Grid>
                <Grid item xs={12} sm={6} md={2.4}>
                    <Box
                        sx={{
                            p: 2,
                            bgcolor: "#fff3e0",
                            borderRadius: 2,
                            border: "1px solid #ffcc02",
                        }}
                    >
                        <Typography sx={{ fontSize: "14px", color: "#ef6c00", fontWeight: "bold" }}>Departures</Typography>
                        <Typography sx={{ fontSize: "24px", fontWeight: "bold", color: "#e65100" }}>{statsData?.departures}</Typography>
                    </Box>
                </Grid>
            </Grid>

            {/* Monthly Breakdown */}
            <Box
                sx={{
                    p: 2,
                    bgcolor: "#f8f9fa",
                    borderRadius: 2,
                    border: "1px solid #e9ecef",
                    mb: 3,
                }}
            >
                <Typography sx={{ fontSize: "16px", fontWeight: "bold", mb: 2, color: "#333" }}>Monthly Breakdown</Typography>
                <Grid container spacing={2}>
                    {statsData?.monthlyStats?.map((item) => (
                        <Grid item xs={12} sm={6} md={3} key={item?.month}>
                            <Box sx={{ p: 2, bgcolor: "white", borderRadius: 1, border: "1px solid #ddd" }}>
                                <Typography sx={{ fontSize: "14px", fontWeight: "bold", color: "#1976d2", mb: 1 }}>{item?.month}</Typography>
                                <Typography sx={{ fontSize: "12px", color: "#4caf50" }}>Joined: {item?.joined}</Typography>
                                <Typography sx={{ fontSize: "12px", color: "#f44336" }}>Left: {item?.left}</Typography>
                                <Typography sx={{ fontSize: "12px", color: "#2196f3" }}>Continued: {item?.continued}</Typography>
                            </Box>
                        </Grid>
                    ))}
                </Grid>
            </Box>

            {/* Report Information */}
            {/* <Box
                sx={{
                    p: 2,
                    bgcolor: "#f8f9fa",
                    borderRadius: 2,
                    border: "1px solid #e9ecef",
                    mb: 3,
                }}
            >
                <Typography sx={{ fontSize: "16px", fontWeight: "bold", mb: 1, color: "#333" }}>Report Information</Typography>
                <Grid container spacing={2}>
                    <Grid item xs={12} sm={6} md={3}>
                        <Typography sx={{ fontSize: "14px", color: "#666" }}>
                            <strong>Report Period:</strong> January - April 2024
                        </Typography>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                        <Typography sx={{ fontSize: "14px", color: "#666" }}>
                            <strong>Departments Covered:</strong> 7
                        </Typography>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                        <Typography sx={{ fontSize: "14px", color: "#666" }}>
                            <strong>Net Change:</strong> +{joinedEmployees - leftEmployees} employees
                        </Typography>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                        <Typography sx={{ fontSize: "14px", color: "#666" }}>
                            <strong>Generated On:</strong> {moment().format("DD/MM/YYYY")}
                        </Typography>
                    </Grid>
                </Grid>
            </Box> */}

            {/* Data Table */}
            <Box>
                <DataTable loading={loader} data={data} columns={columns} />
            </Box>

            Footer Notes
            <Box
                sx={{
                    mt: 3,
                    p: 2,
                    bgcolor: "#f8f9fa",
                    borderRadius: 2,
                    border: "1px solid #e9ecef",
                }}
            >
                <Typography sx={{ fontSize: "14px", fontWeight: "bold", mb: 1, color: "#333" }}>Notes:</Typography>
                <Typography sx={{ fontSize: "12px", color: "#666", mb: 1 }}>
                    • <strong>Active:</strong> Currently employed and working
                </Typography>
                <Typography sx={{ fontSize: "12px", color: "#666", mb: 1 }}>
                    • <strong>Inactive:</strong> No longer employed with the company
                </Typography>
                <Typography sx={{ fontSize: "12px", color: "#666", mb: 1 }}>
                    • <strong>Joined:</strong> New employee who started during the month
                </Typography>
                <Typography sx={{ fontSize: "12px", color: "#666", mb: 1 }}>
                    • <strong>Left:</strong> Employee who departed during the month
                </Typography>
                <Typography sx={{ fontSize: "12px", color: "#666" }}>
                    • <strong>Continued:</strong> Existing employee who remained active during the month
                </Typography>
            </Box>
        </Box>
    )
}

export default EmployeeStatusReport
